
CommsLoRaTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007080  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800734c  0800734c  0000834c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007384  08007384  00008384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800738c  0800738c  0000838c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007390  08007390  00008390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000020  24000000  08007394  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000020  080073b4  00009020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000080  08007414  00009080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  240000e0  08007474  000090e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000318  08007474  00009318  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000090e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a55  00000000  00000000  0000910e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000234b  00000000  00000000  0001db63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  0001feb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ef  00000000  00000000  00020b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032470  00000000  00000000  0002156f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127b5  00000000  00000000  000539df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00145bf7  00000000  00000000  00066194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001abd8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003590  00000000  00000000  001abdd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001af360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000e0 	.word	0x240000e0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08007334 	.word	0x08007334

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000e4 	.word	0x240000e4
 8000308:	08007334 	.word	0x08007334

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_HS_USB_Init(void);
static void MX_USART2_UART_Init(void);

int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 fd30 	bl	8001064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f826 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 f980 	bl	800090c <MX_GPIO_Init>
  MX_ETH_Init();
 800060c:	f000 f892 	bl	8000734 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000610:	f000 f928 	bl	8000864 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000614:	f000 f972 	bl	80008fc <MX_USB_OTG_HS_USB_Init>
  MX_USART2_UART_Init();
 8000618:	f000 f8d8 	bl	80007cc <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_UART_Transmit(&huart3, txData, sizeof(txData), 10);
 800061c:	230a      	movs	r3, #10
 800061e:	220d      	movs	r2, #13
 8000620:	4909      	ldr	r1, [pc, #36]	@ (8000648 <main+0x4c>)
 8000622:	480a      	ldr	r0, [pc, #40]	@ (800064c <main+0x50>)
 8000624:	f005 f804 	bl	8005630 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000628:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800062c:	f000 fdac 	bl	8001188 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, txData, sizeof(txData), 10);
 8000630:	230a      	movs	r3, #10
 8000632:	220d      	movs	r2, #13
 8000634:	4904      	ldr	r1, [pc, #16]	@ (8000648 <main+0x4c>)
 8000636:	4806      	ldr	r0, [pc, #24]	@ (8000650 <main+0x54>)
 8000638:	f004 fffa 	bl	8005630 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800063c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000640:	f000 fda2 	bl	8001188 <HAL_Delay>
	  HAL_UART_Transmit(&huart3, txData, sizeof(txData), 10);
 8000644:	bf00      	nop
 8000646:	e7e9      	b.n	800061c <main+0x20>
 8000648:	24000000 	.word	0x24000000
 800064c:	24000278 	.word	0x24000278
 8000650:	240001e4 	.word	0x240001e4

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b09c      	sub	sp, #112	@ 0x70
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800065e:	224c      	movs	r2, #76	@ 0x4c
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f006 fe3a 	bl	80072dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2220      	movs	r2, #32
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f006 fe34 	bl	80072dc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000674:	2002      	movs	r0, #2
 8000676:	f002 fa29 	bl	8002acc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800067a:	2300      	movs	r3, #0
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	4b2c      	ldr	r3, [pc, #176]	@ (8000730 <SystemClock_Config+0xdc>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	4a2b      	ldr	r2, [pc, #172]	@ (8000730 <SystemClock_Config+0xdc>)
 8000684:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000688:	6193      	str	r3, [r2, #24]
 800068a:	4b29      	ldr	r3, [pc, #164]	@ (8000730 <SystemClock_Config+0xdc>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000696:	bf00      	nop
 8000698:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <SystemClock_Config+0xdc>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006a4:	d1f8      	bne.n	8000698 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006a6:	2321      	movs	r3, #33	@ 0x21
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006aa:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006bc:	2304      	movs	r3, #4
 80006be:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80006c0:	f240 1313 	movw	r3, #275	@ 0x113
 80006c4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ca:	2304      	movs	r3, #4
 80006cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80006d2:	2304      	movs	r3, #4
 80006d4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 fa2c 	bl	8002b40 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ee:	f000 fa09 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	233f      	movs	r3, #63	@ 0x3f
 80006f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2303      	movs	r3, #3
 80006f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006fe:	2308      	movs	r3, #8
 8000700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000702:	2340      	movs	r3, #64	@ 0x40
 8000704:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000706:	2340      	movs	r3, #64	@ 0x40
 8000708:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800070a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800070e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000710:	2340      	movs	r3, #64	@ 0x40
 8000712:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2103      	movs	r1, #3
 8000718:	4618      	mov	r0, r3
 800071a:	f002 fdeb 	bl	80032f4 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000724:	f000 f9ee 	bl	8000b04 <Error_Handler>
  }
}
 8000728:	bf00      	nop
 800072a:	3770      	adds	r7, #112	@ 0x70
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	58024800 	.word	0x58024800

08000734 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000738:	4b1e      	ldr	r3, [pc, #120]	@ (80007b4 <MX_ETH_Init+0x80>)
 800073a:	4a1f      	ldr	r2, [pc, #124]	@ (80007b8 <MX_ETH_Init+0x84>)
 800073c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800073e:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <MX_ETH_Init+0x88>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000744:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <MX_ETH_Init+0x88>)
 8000746:	2280      	movs	r2, #128	@ 0x80
 8000748:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800074a:	4b1c      	ldr	r3, [pc, #112]	@ (80007bc <MX_ETH_Init+0x88>)
 800074c:	22e1      	movs	r2, #225	@ 0xe1
 800074e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000750:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <MX_ETH_Init+0x88>)
 8000752:	2200      	movs	r2, #0
 8000754:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000756:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <MX_ETH_Init+0x88>)
 8000758:	2200      	movs	r2, #0
 800075a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800075c:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <MX_ETH_Init+0x88>)
 800075e:	2200      	movs	r2, #0
 8000760:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000762:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <MX_ETH_Init+0x80>)
 8000764:	4a15      	ldr	r2, [pc, #84]	@ (80007bc <MX_ETH_Init+0x88>)
 8000766:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <MX_ETH_Init+0x80>)
 800076a:	2201      	movs	r2, #1
 800076c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800076e:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_ETH_Init+0x80>)
 8000770:	4a13      	ldr	r2, [pc, #76]	@ (80007c0 <MX_ETH_Init+0x8c>)
 8000772:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000774:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <MX_ETH_Init+0x80>)
 8000776:	4a13      	ldr	r2, [pc, #76]	@ (80007c4 <MX_ETH_Init+0x90>)
 8000778:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_ETH_Init+0x80>)
 800077c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000780:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000782:	480c      	ldr	r0, [pc, #48]	@ (80007b4 <MX_ETH_Init+0x80>)
 8000784:	f001 fbac 	bl	8001ee0 <HAL_ETH_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800078e:	f000 f9b9 	bl	8000b04 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000792:	2238      	movs	r2, #56	@ 0x38
 8000794:	2100      	movs	r1, #0
 8000796:	480c      	ldr	r0, [pc, #48]	@ (80007c8 <MX_ETH_Init+0x94>)
 8000798:	f006 fda0 	bl	80072dc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800079c:	4b0a      	ldr	r3, [pc, #40]	@ (80007c8 <MX_ETH_Init+0x94>)
 800079e:	2221      	movs	r2, #33	@ 0x21
 80007a0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007a2:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_ETH_Init+0x94>)
 80007a4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007a8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007aa:	4b07      	ldr	r3, [pc, #28]	@ (80007c8 <MX_ETH_Init+0x94>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	24000134 	.word	0x24000134
 80007b8:	40028000 	.word	0x40028000
 80007bc:	2400030c 	.word	0x2400030c
 80007c0:	24000080 	.word	0x24000080
 80007c4:	24000020 	.word	0x24000020
 80007c8:	240000fc 	.word	0x240000fc

080007cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d0:	4b22      	ldr	r3, [pc, #136]	@ (800085c <MX_USART2_UART_Init+0x90>)
 80007d2:	4a23      	ldr	r2, [pc, #140]	@ (8000860 <MX_USART2_UART_Init+0x94>)
 80007d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007d6:	4b21      	ldr	r3, [pc, #132]	@ (800085c <MX_USART2_UART_Init+0x90>)
 80007d8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007de:	4b1f      	ldr	r3, [pc, #124]	@ (800085c <MX_USART2_UART_Init+0x90>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e4:	4b1d      	ldr	r3, [pc, #116]	@ (800085c <MX_USART2_UART_Init+0x90>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ea:	4b1c      	ldr	r3, [pc, #112]	@ (800085c <MX_USART2_UART_Init+0x90>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f0:	4b1a      	ldr	r3, [pc, #104]	@ (800085c <MX_USART2_UART_Init+0x90>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	4b19      	ldr	r3, [pc, #100]	@ (800085c <MX_USART2_UART_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fc:	4b17      	ldr	r3, [pc, #92]	@ (800085c <MX_USART2_UART_Init+0x90>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000802:	4b16      	ldr	r3, [pc, #88]	@ (800085c <MX_USART2_UART_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000808:	4b14      	ldr	r3, [pc, #80]	@ (800085c <MX_USART2_UART_Init+0x90>)
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800080e:	4b13      	ldr	r3, [pc, #76]	@ (800085c <MX_USART2_UART_Init+0x90>)
 8000810:	2200      	movs	r2, #0
 8000812:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000814:	4811      	ldr	r0, [pc, #68]	@ (800085c <MX_USART2_UART_Init+0x90>)
 8000816:	f004 febb 	bl	8005590 <HAL_UART_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000820:	f000 f970 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000824:	2100      	movs	r1, #0
 8000826:	480d      	ldr	r0, [pc, #52]	@ (800085c <MX_USART2_UART_Init+0x90>)
 8000828:	f006 fc8e 	bl	8007148 <HAL_UARTEx_SetTxFifoThreshold>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000832:	f000 f967 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000836:	2100      	movs	r1, #0
 8000838:	4808      	ldr	r0, [pc, #32]	@ (800085c <MX_USART2_UART_Init+0x90>)
 800083a:	f006 fcc3 	bl	80071c4 <HAL_UARTEx_SetRxFifoThreshold>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000844:	f000 f95e 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	@ (800085c <MX_USART2_UART_Init+0x90>)
 800084a:	f006 fc44 	bl	80070d6 <HAL_UARTEx_DisableFifoMode>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000854:	f000 f956 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	240001e4 	.word	0x240001e4
 8000860:	40004400 	.word	0x40004400

08000864 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000868:	4b22      	ldr	r3, [pc, #136]	@ (80008f4 <MX_USART3_UART_Init+0x90>)
 800086a:	4a23      	ldr	r2, [pc, #140]	@ (80008f8 <MX_USART3_UART_Init+0x94>)
 800086c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800086e:	4b21      	ldr	r3, [pc, #132]	@ (80008f4 <MX_USART3_UART_Init+0x90>)
 8000870:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000874:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b1f      	ldr	r3, [pc, #124]	@ (80008f4 <MX_USART3_UART_Init+0x90>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b1d      	ldr	r3, [pc, #116]	@ (80008f4 <MX_USART3_UART_Init+0x90>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000882:	4b1c      	ldr	r3, [pc, #112]	@ (80008f4 <MX_USART3_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <MX_USART3_UART_Init+0x90>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b19      	ldr	r3, [pc, #100]	@ (80008f4 <MX_USART3_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <MX_USART3_UART_Init+0x90>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089a:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <MX_USART3_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008a0:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_USART3_UART_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a6:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <MX_USART3_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ac:	4811      	ldr	r0, [pc, #68]	@ (80008f4 <MX_USART3_UART_Init+0x90>)
 80008ae:	f004 fe6f 	bl	8005590 <HAL_UART_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008b8:	f000 f924 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008bc:	2100      	movs	r1, #0
 80008be:	480d      	ldr	r0, [pc, #52]	@ (80008f4 <MX_USART3_UART_Init+0x90>)
 80008c0:	f006 fc42 	bl	8007148 <HAL_UARTEx_SetTxFifoThreshold>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008ca:	f000 f91b 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ce:	2100      	movs	r1, #0
 80008d0:	4808      	ldr	r0, [pc, #32]	@ (80008f4 <MX_USART3_UART_Init+0x90>)
 80008d2:	f006 fc77 	bl	80071c4 <HAL_UARTEx_SetRxFifoThreshold>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008dc:	f000 f912 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	@ (80008f4 <MX_USART3_UART_Init+0x90>)
 80008e2:	f006 fbf8 	bl	80070d6 <HAL_UARTEx_DisableFifoMode>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008ec:	f000 f90a 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	24000278 	.word	0x24000278
 80008f8:	40004800 	.word	0x40004800

080008fc <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	@ 0x30
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	4b71      	ldr	r3, [pc, #452]	@ (8000ae8 <MX_GPIO_Init+0x1dc>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000928:	4a6f      	ldr	r2, [pc, #444]	@ (8000ae8 <MX_GPIO_Init+0x1dc>)
 800092a:	f043 0304 	orr.w	r3, r3, #4
 800092e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000932:	4b6d      	ldr	r3, [pc, #436]	@ (8000ae8 <MX_GPIO_Init+0x1dc>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000938:	f003 0304 	and.w	r3, r3, #4
 800093c:	61bb      	str	r3, [r7, #24]
 800093e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000940:	4b69      	ldr	r3, [pc, #420]	@ (8000ae8 <MX_GPIO_Init+0x1dc>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000946:	4a68      	ldr	r2, [pc, #416]	@ (8000ae8 <MX_GPIO_Init+0x1dc>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800094c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000950:	4b65      	ldr	r3, [pc, #404]	@ (8000ae8 <MX_GPIO_Init+0x1dc>)
 8000952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	4b62      	ldr	r3, [pc, #392]	@ (8000ae8 <MX_GPIO_Init+0x1dc>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000964:	4a60      	ldr	r2, [pc, #384]	@ (8000ae8 <MX_GPIO_Init+0x1dc>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800096e:	4b5e      	ldr	r3, [pc, #376]	@ (8000ae8 <MX_GPIO_Init+0x1dc>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097c:	4b5a      	ldr	r3, [pc, #360]	@ (8000ae8 <MX_GPIO_Init+0x1dc>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000982:	4a59      	ldr	r2, [pc, #356]	@ (8000ae8 <MX_GPIO_Init+0x1dc>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800098c:	4b56      	ldr	r3, [pc, #344]	@ (8000ae8 <MX_GPIO_Init+0x1dc>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099a:	4b53      	ldr	r3, [pc, #332]	@ (8000ae8 <MX_GPIO_Init+0x1dc>)
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a0:	4a51      	ldr	r2, [pc, #324]	@ (8000ae8 <MX_GPIO_Init+0x1dc>)
 80009a2:	f043 0308 	orr.w	r3, r3, #8
 80009a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009aa:	4b4f      	ldr	r3, [pc, #316]	@ (8000ae8 <MX_GPIO_Init+0x1dc>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b0:	f003 0308 	and.w	r3, r3, #8
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009b8:	4b4b      	ldr	r3, [pc, #300]	@ (8000ae8 <MX_GPIO_Init+0x1dc>)
 80009ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009be:	4a4a      	ldr	r2, [pc, #296]	@ (8000ae8 <MX_GPIO_Init+0x1dc>)
 80009c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009c8:	4b47      	ldr	r3, [pc, #284]	@ (8000ae8 <MX_GPIO_Init+0x1dc>)
 80009ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009d6:	4b44      	ldr	r3, [pc, #272]	@ (8000ae8 <MX_GPIO_Init+0x1dc>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009dc:	4a42      	ldr	r2, [pc, #264]	@ (8000ae8 <MX_GPIO_Init+0x1dc>)
 80009de:	f043 0310 	orr.w	r3, r3, #16
 80009e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009e6:	4b40      	ldr	r3, [pc, #256]	@ (8000ae8 <MX_GPIO_Init+0x1dc>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ec:	f003 0310 	and.w	r3, r3, #16
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f244 0101 	movw	r1, #16385	@ 0x4001
 80009fa:	483c      	ldr	r0, [pc, #240]	@ (8000aec <MX_GPIO_Init+0x1e0>)
 80009fc:	f002 f84c 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a06:	483a      	ldr	r0, [pc, #232]	@ (8000af0 <MX_GPIO_Init+0x1e4>)
 8000a08:	f002 f846 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2102      	movs	r1, #2
 8000a10:	4838      	ldr	r0, [pc, #224]	@ (8000af4 <MX_GPIO_Init+0x1e8>)
 8000a12:	f002 f841 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4833      	ldr	r0, [pc, #204]	@ (8000af8 <MX_GPIO_Init+0x1ec>)
 8000a2c:	f001 fe8c 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000a30:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4828      	ldr	r0, [pc, #160]	@ (8000aec <MX_GPIO_Init+0x1e0>)
 8000a4a:	f001 fe7d 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000a4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	4822      	ldr	r0, [pc, #136]	@ (8000af0 <MX_GPIO_Init+0x1e4>)
 8000a68:	f001 fe6e 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000a6c:	2380      	movs	r3, #128	@ 0x80
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a70:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	481e      	ldr	r0, [pc, #120]	@ (8000afc <MX_GPIO_Init+0x1f0>)
 8000a82:	f001 fe61 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000a86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4819      	ldr	r0, [pc, #100]	@ (8000b00 <MX_GPIO_Init+0x1f4>)
 8000a9c:	f001 fe54 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000aa0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000ab2:	230a      	movs	r3, #10
 8000ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4810      	ldr	r0, [pc, #64]	@ (8000b00 <MX_GPIO_Init+0x1f4>)
 8000abe:	f001 fe43 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4806      	ldr	r0, [pc, #24]	@ (8000af4 <MX_GPIO_Init+0x1e8>)
 8000ada:	f001 fe35 	bl	8002748 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ade:	bf00      	nop
 8000ae0:	3730      	adds	r7, #48	@ 0x30
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	58024400 	.word	0x58024400
 8000aec:	58020400 	.word	0x58020400
 8000af0:	58020c00 	.word	0x58020c00
 8000af4:	58021000 	.word	0x58021000
 8000af8:	58020800 	.word	0x58020800
 8000afc:	58021800 	.word	0x58021800
 8000b00:	58020000 	.word	0x58020000

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <Error_Handler+0x8>

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b0a      	ldr	r3, [pc, #40]	@ (8000b40 <HAL_MspInit+0x30>)
 8000b18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b1c:	4a08      	ldr	r2, [pc, #32]	@ (8000b40 <HAL_MspInit+0x30>)
 8000b1e:	f043 0302 	orr.w	r3, r3, #2
 8000b22:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <HAL_MspInit+0x30>)
 8000b28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b2c:	f003 0302 	and.w	r3, r3, #2
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	58024400 	.word	0x58024400

08000b44 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08e      	sub	sp, #56	@ 0x38
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a59      	ldr	r2, [pc, #356]	@ (8000cc8 <HAL_ETH_MspInit+0x184>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	f040 80ab 	bne.w	8000cbe <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b68:	4b58      	ldr	r3, [pc, #352]	@ (8000ccc <HAL_ETH_MspInit+0x188>)
 8000b6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b6e:	4a57      	ldr	r2, [pc, #348]	@ (8000ccc <HAL_ETH_MspInit+0x188>)
 8000b70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b74:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b78:	4b54      	ldr	r3, [pc, #336]	@ (8000ccc <HAL_ETH_MspInit+0x188>)
 8000b7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b82:	623b      	str	r3, [r7, #32]
 8000b84:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b86:	4b51      	ldr	r3, [pc, #324]	@ (8000ccc <HAL_ETH_MspInit+0x188>)
 8000b88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b8c:	4a4f      	ldr	r2, [pc, #316]	@ (8000ccc <HAL_ETH_MspInit+0x188>)
 8000b8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b92:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b96:	4b4d      	ldr	r3, [pc, #308]	@ (8000ccc <HAL_ETH_MspInit+0x188>)
 8000b98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ba0:	61fb      	str	r3, [r7, #28]
 8000ba2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ba4:	4b49      	ldr	r3, [pc, #292]	@ (8000ccc <HAL_ETH_MspInit+0x188>)
 8000ba6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000baa:	4a48      	ldr	r2, [pc, #288]	@ (8000ccc <HAL_ETH_MspInit+0x188>)
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000bb4:	4b45      	ldr	r3, [pc, #276]	@ (8000ccc <HAL_ETH_MspInit+0x188>)
 8000bb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bbe:	61bb      	str	r3, [r7, #24]
 8000bc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	4b42      	ldr	r3, [pc, #264]	@ (8000ccc <HAL_ETH_MspInit+0x188>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc8:	4a40      	ldr	r2, [pc, #256]	@ (8000ccc <HAL_ETH_MspInit+0x188>)
 8000bca:	f043 0304 	orr.w	r3, r3, #4
 8000bce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd2:	4b3e      	ldr	r3, [pc, #248]	@ (8000ccc <HAL_ETH_MspInit+0x188>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd8:	f003 0304 	and.w	r3, r3, #4
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be0:	4b3a      	ldr	r3, [pc, #232]	@ (8000ccc <HAL_ETH_MspInit+0x188>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be6:	4a39      	ldr	r2, [pc, #228]	@ (8000ccc <HAL_ETH_MspInit+0x188>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf0:	4b36      	ldr	r3, [pc, #216]	@ (8000ccc <HAL_ETH_MspInit+0x188>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfe:	4b33      	ldr	r3, [pc, #204]	@ (8000ccc <HAL_ETH_MspInit+0x188>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c04:	4a31      	ldr	r2, [pc, #196]	@ (8000ccc <HAL_ETH_MspInit+0x188>)
 8000c06:	f043 0302 	orr.w	r3, r3, #2
 8000c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000ccc <HAL_ETH_MspInit+0x188>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000ccc <HAL_ETH_MspInit+0x188>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c22:	4a2a      	ldr	r2, [pc, #168]	@ (8000ccc <HAL_ETH_MspInit+0x188>)
 8000c24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c2c:	4b27      	ldr	r3, [pc, #156]	@ (8000ccc <HAL_ETH_MspInit+0x188>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c3a:	2332      	movs	r3, #50	@ 0x32
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4a:	230b      	movs	r3, #11
 8000c4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c52:	4619      	mov	r1, r3
 8000c54:	481e      	ldr	r0, [pc, #120]	@ (8000cd0 <HAL_ETH_MspInit+0x18c>)
 8000c56:	f001 fd77 	bl	8002748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c5a:	2386      	movs	r3, #134	@ 0x86
 8000c5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6a:	230b      	movs	r3, #11
 8000c6c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	4817      	ldr	r0, [pc, #92]	@ (8000cd4 <HAL_ETH_MspInit+0x190>)
 8000c76:	f001 fd67 	bl	8002748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c8c:	230b      	movs	r3, #11
 8000c8e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4810      	ldr	r0, [pc, #64]	@ (8000cd8 <HAL_ETH_MspInit+0x194>)
 8000c98:	f001 fd56 	bl	8002748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c9c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cae:	230b      	movs	r3, #11
 8000cb0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4808      	ldr	r0, [pc, #32]	@ (8000cdc <HAL_ETH_MspInit+0x198>)
 8000cba:	f001 fd45 	bl	8002748 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cbe:	bf00      	nop
 8000cc0:	3738      	adds	r7, #56	@ 0x38
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40028000 	.word	0x40028000
 8000ccc:	58024400 	.word	0x58024400
 8000cd0:	58020800 	.word	0x58020800
 8000cd4:	58020000 	.word	0x58020000
 8000cd8:	58020400 	.word	0x58020400
 8000cdc:	58021800 	.word	0x58021800

08000ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b0bc      	sub	sp, #240	@ 0xf0
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf8:	f107 0320 	add.w	r3, r7, #32
 8000cfc:	22b8      	movs	r2, #184	@ 0xb8
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f006 faeb 	bl	80072dc <memset>
  if(huart->Instance==USART2)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a63      	ldr	r2, [pc, #396]	@ (8000e98 <HAL_UART_MspInit+0x1b8>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d172      	bne.n	8000df6 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d10:	f04f 0202 	mov.w	r2, #2
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d22:	f107 0320 	add.w	r3, r7, #32
 8000d26:	4618      	mov	r0, r3
 8000d28:	f002 fe70 	bl	8003a0c <HAL_RCCEx_PeriphCLKConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d32:	f7ff fee7 	bl	8000b04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d36:	4b59      	ldr	r3, [pc, #356]	@ (8000e9c <HAL_UART_MspInit+0x1bc>)
 8000d38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d3c:	4a57      	ldr	r2, [pc, #348]	@ (8000e9c <HAL_UART_MspInit+0x1bc>)
 8000d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d42:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d46:	4b55      	ldr	r3, [pc, #340]	@ (8000e9c <HAL_UART_MspInit+0x1bc>)
 8000d48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d50:	61fb      	str	r3, [r7, #28]
 8000d52:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	4b51      	ldr	r3, [pc, #324]	@ (8000e9c <HAL_UART_MspInit+0x1bc>)
 8000d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5a:	4a50      	ldr	r2, [pc, #320]	@ (8000e9c <HAL_UART_MspInit+0x1bc>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d64:	4b4d      	ldr	r3, [pc, #308]	@ (8000e9c <HAL_UART_MspInit+0x1bc>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	61bb      	str	r3, [r7, #24]
 8000d70:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d72:	4b4a      	ldr	r3, [pc, #296]	@ (8000e9c <HAL_UART_MspInit+0x1bc>)
 8000d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d78:	4a48      	ldr	r2, [pc, #288]	@ (8000e9c <HAL_UART_MspInit+0x1bc>)
 8000d7a:	f043 0308 	orr.w	r3, r3, #8
 8000d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d82:	4b46      	ldr	r3, [pc, #280]	@ (8000e9c <HAL_UART_MspInit+0x1bc>)
 8000d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d88:	f003 0308 	and.w	r3, r3, #8
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d90:	2308      	movs	r3, #8
 8000d92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000da8:	2307      	movs	r3, #7
 8000daa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000db2:	4619      	mov	r1, r3
 8000db4:	483a      	ldr	r0, [pc, #232]	@ (8000ea0 <HAL_UART_MspInit+0x1c0>)
 8000db6:	f001 fcc7 	bl	8002748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dba:	2320      	movs	r3, #32
 8000dbc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dd2:	2307      	movs	r3, #7
 8000dd4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4831      	ldr	r0, [pc, #196]	@ (8000ea4 <HAL_UART_MspInit+0x1c4>)
 8000de0:	f001 fcb2 	bl	8002748 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2100      	movs	r1, #0
 8000de8:	2026      	movs	r0, #38	@ 0x26
 8000dea:	f000 fae0 	bl	80013ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dee:	2026      	movs	r0, #38	@ 0x26
 8000df0:	f000 faf7 	bl	80013e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000df4:	e04b      	b.n	8000e8e <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART3)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a2b      	ldr	r2, [pc, #172]	@ (8000ea8 <HAL_UART_MspInit+0x1c8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d146      	bne.n	8000e8e <HAL_UART_MspInit+0x1ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e00:	f04f 0202 	mov.w	r2, #2
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e12:	f107 0320 	add.w	r3, r7, #32
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 fdf8 	bl	8003a0c <HAL_RCCEx_PeriphCLKConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_UART_MspInit+0x146>
      Error_Handler();
 8000e22:	f7ff fe6f 	bl	8000b04 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e26:	4b1d      	ldr	r3, [pc, #116]	@ (8000e9c <HAL_UART_MspInit+0x1bc>)
 8000e28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000e9c <HAL_UART_MspInit+0x1bc>)
 8000e2e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e32:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e36:	4b19      	ldr	r3, [pc, #100]	@ (8000e9c <HAL_UART_MspInit+0x1bc>)
 8000e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e44:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <HAL_UART_MspInit+0x1bc>)
 8000e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4a:	4a14      	ldr	r2, [pc, #80]	@ (8000e9c <HAL_UART_MspInit+0x1bc>)
 8000e4c:	f043 0308 	orr.w	r3, r3, #8
 8000e50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e54:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <HAL_UART_MspInit+0x1bc>)
 8000e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5a:	f003 0308 	and.w	r3, r3, #8
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000e62:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e7c:	2307      	movs	r3, #7
 8000e7e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e82:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e86:	4619      	mov	r1, r3
 8000e88:	4806      	ldr	r0, [pc, #24]	@ (8000ea4 <HAL_UART_MspInit+0x1c4>)
 8000e8a:	f001 fc5d 	bl	8002748 <HAL_GPIO_Init>
}
 8000e8e:	bf00      	nop
 8000e90:	37f0      	adds	r7, #240	@ 0xf0
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40004400 	.word	0x40004400
 8000e9c:	58024400 	.word	0x58024400
 8000ea0:	58020000 	.word	0x58020000
 8000ea4:	58020c00 	.word	0x58020c00
 8000ea8:	40004800 	.word	0x40004800

08000eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <NMI_Handler+0x4>

08000eb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <HardFault_Handler+0x4>

08000ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <BusFault_Handler+0x4>

08000ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <UsageFault_Handler+0x4>

08000ed4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f02:	f000 f921 	bl	8001148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f10:	4802      	ldr	r0, [pc, #8]	@ (8000f1c <USART2_IRQHandler+0x10>)
 8000f12:	f004 fc1b 	bl	800574c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	240001e4 	.word	0x240001e4

08000f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f24:	4b32      	ldr	r3, [pc, #200]	@ (8000ff0 <SystemInit+0xd0>)
 8000f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f2a:	4a31      	ldr	r2, [pc, #196]	@ (8000ff0 <SystemInit+0xd0>)
 8000f2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f34:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff4 <SystemInit+0xd4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 030f 	and.w	r3, r3, #15
 8000f3c:	2b06      	cmp	r3, #6
 8000f3e:	d807      	bhi.n	8000f50 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f40:	4b2c      	ldr	r3, [pc, #176]	@ (8000ff4 <SystemInit+0xd4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f023 030f 	bic.w	r3, r3, #15
 8000f48:	4a2a      	ldr	r2, [pc, #168]	@ (8000ff4 <SystemInit+0xd4>)
 8000f4a:	f043 0307 	orr.w	r3, r3, #7
 8000f4e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f50:	4b29      	ldr	r3, [pc, #164]	@ (8000ff8 <SystemInit+0xd8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a28      	ldr	r2, [pc, #160]	@ (8000ff8 <SystemInit+0xd8>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f5c:	4b26      	ldr	r3, [pc, #152]	@ (8000ff8 <SystemInit+0xd8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f62:	4b25      	ldr	r3, [pc, #148]	@ (8000ff8 <SystemInit+0xd8>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	4924      	ldr	r1, [pc, #144]	@ (8000ff8 <SystemInit+0xd8>)
 8000f68:	4b24      	ldr	r3, [pc, #144]	@ (8000ffc <SystemInit+0xdc>)
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f6e:	4b21      	ldr	r3, [pc, #132]	@ (8000ff4 <SystemInit+0xd4>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0308 	and.w	r3, r3, #8
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d007      	beq.n	8000f8a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff4 <SystemInit+0xd4>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f023 030f 	bic.w	r3, r3, #15
 8000f82:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff4 <SystemInit+0xd4>)
 8000f84:	f043 0307 	orr.w	r3, r3, #7
 8000f88:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <SystemInit+0xd8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f90:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <SystemInit+0xd8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f96:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <SystemInit+0xd8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <SystemInit+0xd8>)
 8000f9e:	4a18      	ldr	r2, [pc, #96]	@ (8001000 <SystemInit+0xe0>)
 8000fa0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fa2:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <SystemInit+0xd8>)
 8000fa4:	4a17      	ldr	r2, [pc, #92]	@ (8001004 <SystemInit+0xe4>)
 8000fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fa8:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <SystemInit+0xd8>)
 8000faa:	4a17      	ldr	r2, [pc, #92]	@ (8001008 <SystemInit+0xe8>)
 8000fac:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fae:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <SystemInit+0xd8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fb4:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <SystemInit+0xd8>)
 8000fb6:	4a14      	ldr	r2, [pc, #80]	@ (8001008 <SystemInit+0xe8>)
 8000fb8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <SystemInit+0xd8>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff8 <SystemInit+0xd8>)
 8000fc2:	4a11      	ldr	r2, [pc, #68]	@ (8001008 <SystemInit+0xe8>)
 8000fc4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <SystemInit+0xd8>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <SystemInit+0xd8>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a09      	ldr	r2, [pc, #36]	@ (8000ff8 <SystemInit+0xd8>)
 8000fd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fd6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fd8:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <SystemInit+0xd8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	@ (800100c <SystemInit+0xec>)
 8000fe0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000fe4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00
 8000ff4:	52002000 	.word	0x52002000
 8000ff8:	58024400 	.word	0x58024400
 8000ffc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001000:	02020200 	.word	0x02020200
 8001004:	01ff0000 	.word	0x01ff0000
 8001008:	01010280 	.word	0x01010280
 800100c:	52004000 	.word	0x52004000

08001010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001010:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001048 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001014:	f7ff ff84 	bl	8000f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001018:	480c      	ldr	r0, [pc, #48]	@ (800104c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800101a:	490d      	ldr	r1, [pc, #52]	@ (8001050 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800101c:	4a0d      	ldr	r2, [pc, #52]	@ (8001054 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001030:	4c0a      	ldr	r4, [pc, #40]	@ (800105c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103e:	f006 f955 	bl	80072ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001042:	f7ff fadb 	bl	80005fc <main>
  bx  lr
 8001046:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001048:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800104c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001050:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 8001054:	08007394 	.word	0x08007394
  ldr r2, =_sbss
 8001058:	240000e0 	.word	0x240000e0
  ldr r4, =_ebss
 800105c:	24000318 	.word	0x24000318

08001060 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC3_IRQHandler>
	...

08001064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106a:	2003      	movs	r0, #3
 800106c:	f000 f994 	bl	8001398 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001070:	f002 faf6 	bl	8003660 <HAL_RCC_GetSysClockFreq>
 8001074:	4602      	mov	r2, r0
 8001076:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <HAL_Init+0x68>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	0a1b      	lsrs	r3, r3, #8
 800107c:	f003 030f 	and.w	r3, r3, #15
 8001080:	4913      	ldr	r1, [pc, #76]	@ (80010d0 <HAL_Init+0x6c>)
 8001082:	5ccb      	ldrb	r3, [r1, r3]
 8001084:	f003 031f 	and.w	r3, r3, #31
 8001088:	fa22 f303 	lsr.w	r3, r2, r3
 800108c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800108e:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <HAL_Init+0x68>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	4a0e      	ldr	r2, [pc, #56]	@ (80010d0 <HAL_Init+0x6c>)
 8001098:	5cd3      	ldrb	r3, [r2, r3]
 800109a:	f003 031f 	and.w	r3, r3, #31
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	fa22 f303 	lsr.w	r3, r2, r3
 80010a4:	4a0b      	ldr	r2, [pc, #44]	@ (80010d4 <HAL_Init+0x70>)
 80010a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010a8:	4a0b      	ldr	r2, [pc, #44]	@ (80010d8 <HAL_Init+0x74>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ae:	2000      	movs	r0, #0
 80010b0:	f000 f814 	bl	80010dc <HAL_InitTick>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e002      	b.n	80010c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010be:	f7ff fd27 	bl	8000b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	58024400 	.word	0x58024400
 80010d0:	0800734c 	.word	0x0800734c
 80010d4:	24000014 	.word	0x24000014
 80010d8:	24000010 	.word	0x24000010

080010dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010e4:	4b15      	ldr	r3, [pc, #84]	@ (800113c <HAL_InitTick+0x60>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d101      	bne.n	80010f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e021      	b.n	8001134 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010f0:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <HAL_InitTick+0x64>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <HAL_InitTick+0x60>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001102:	fbb2 f3f3 	udiv	r3, r2, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f000 f979 	bl	80013fe <HAL_SYSTICK_Config>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e00e      	b.n	8001134 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b0f      	cmp	r3, #15
 800111a:	d80a      	bhi.n	8001132 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800111c:	2200      	movs	r2, #0
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
 8001124:	f000 f943 	bl	80013ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001128:	4a06      	ldr	r2, [pc, #24]	@ (8001144 <HAL_InitTick+0x68>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	e000      	b.n	8001134 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	2400001c 	.word	0x2400001c
 8001140:	24000010 	.word	0x24000010
 8001144:	24000018 	.word	0x24000018

08001148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_IncTick+0x20>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	4b06      	ldr	r3, [pc, #24]	@ (800116c <HAL_IncTick+0x24>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4413      	add	r3, r2
 8001158:	4a04      	ldr	r2, [pc, #16]	@ (800116c <HAL_IncTick+0x24>)
 800115a:	6013      	str	r3, [r2, #0]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	2400001c 	.word	0x2400001c
 800116c:	24000314 	.word	0x24000314

08001170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b03      	ldr	r3, [pc, #12]	@ (8001184 <HAL_GetTick+0x14>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	24000314 	.word	0x24000314

08001188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001190:	f7ff ffee 	bl	8001170 <HAL_GetTick>
 8001194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a0:	d005      	beq.n	80011ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a2:	4b0a      	ldr	r3, [pc, #40]	@ (80011cc <HAL_Delay+0x44>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4413      	add	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ae:	bf00      	nop
 80011b0:	f7ff ffde 	bl	8001170 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d8f7      	bhi.n	80011b0 <HAL_Delay+0x28>
  {
  }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2400001c 	.word	0x2400001c

080011d0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80011e0:	4904      	ldr	r1, [pc, #16]	@ (80011f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	604b      	str	r3, [r1, #4]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	58000400 	.word	0x58000400

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0b      	ldr	r3, [pc, #44]	@ (8001238 <__NVIC_SetPriorityGrouping+0x40>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <__NVIC_SetPriorityGrouping+0x44>)
 8001222:	4313      	orrs	r3, r2
 8001224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001226:	4a04      	ldr	r2, [pc, #16]	@ (8001238 <__NVIC_SetPriorityGrouping+0x40>)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	60d3      	str	r3, [r2, #12]
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00
 800123c:	05fa0000 	.word	0x05fa0000

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	@ (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800126a:	2b00      	cmp	r3, #0
 800126c:	db0b      	blt.n	8001286 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	f003 021f 	and.w	r2, r3, #31
 8001274:	4907      	ldr	r1, [pc, #28]	@ (8001294 <__NVIC_EnableIRQ+0x38>)
 8001276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	2001      	movs	r0, #1
 800127e:	fa00 f202 	lsl.w	r2, r0, r2
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000e100 	.word	0xe000e100

08001298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db0a      	blt.n	80012c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	490c      	ldr	r1, [pc, #48]	@ (80012e4 <__NVIC_SetPriority+0x4c>)
 80012b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b6:	0112      	lsls	r2, r2, #4
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	440b      	add	r3, r1
 80012bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c0:	e00a      	b.n	80012d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4908      	ldr	r1, [pc, #32]	@ (80012e8 <__NVIC_SetPriority+0x50>)
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	3b04      	subs	r3, #4
 80012d0:	0112      	lsls	r2, r2, #4
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	440b      	add	r3, r1
 80012d6:	761a      	strb	r2, [r3, #24]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	@ 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f1c3 0307 	rsb	r3, r3, #7
 8001306:	2b04      	cmp	r3, #4
 8001308:	bf28      	it	cs
 800130a:	2304      	movcs	r3, #4
 800130c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3304      	adds	r3, #4
 8001312:	2b06      	cmp	r3, #6
 8001314:	d902      	bls.n	800131c <NVIC_EncodePriority+0x30>
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3b03      	subs	r3, #3
 800131a:	e000      	b.n	800131e <NVIC_EncodePriority+0x32>
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	f04f 32ff 	mov.w	r2, #4294967295
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43da      	mvns	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43d9      	mvns	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	4313      	orrs	r3, r2
         );
}
 8001346:	4618      	mov	r0, r3
 8001348:	3724      	adds	r7, #36	@ 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001364:	d301      	bcc.n	800136a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001366:	2301      	movs	r3, #1
 8001368:	e00f      	b.n	800138a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136a:	4a0a      	ldr	r2, [pc, #40]	@ (8001394 <SysTick_Config+0x40>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001372:	210f      	movs	r1, #15
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f7ff ff8e 	bl	8001298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800137c:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <SysTick_Config+0x40>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001382:	4b04      	ldr	r3, [pc, #16]	@ (8001394 <SysTick_Config+0x40>)
 8001384:	2207      	movs	r2, #7
 8001386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	e000e010 	.word	0xe000e010

08001398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff29 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013bc:	f7ff ff40 	bl	8001240 <__NVIC_GetPriorityGrouping>
 80013c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	6978      	ldr	r0, [r7, #20]
 80013c8:	f7ff ff90 	bl	80012ec <NVIC_EncodePriority>
 80013cc:	4602      	mov	r2, r0
 80013ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff5f 	bl	8001298 <__NVIC_SetPriority>
}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff33 	bl	800125c <__NVIC_EnableIRQ>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffa4 	bl	8001354 <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001420:	f7ff fea6 	bl	8001170 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e2dc      	b.n	80019ea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d008      	beq.n	800144e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2280      	movs	r2, #128	@ 0x80
 8001440:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e2cd      	b.n	80019ea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a76      	ldr	r2, [pc, #472]	@ (800162c <HAL_DMA_Abort+0x214>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d04a      	beq.n	80014ee <HAL_DMA_Abort+0xd6>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a74      	ldr	r2, [pc, #464]	@ (8001630 <HAL_DMA_Abort+0x218>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d045      	beq.n	80014ee <HAL_DMA_Abort+0xd6>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a73      	ldr	r2, [pc, #460]	@ (8001634 <HAL_DMA_Abort+0x21c>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d040      	beq.n	80014ee <HAL_DMA_Abort+0xd6>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a71      	ldr	r2, [pc, #452]	@ (8001638 <HAL_DMA_Abort+0x220>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d03b      	beq.n	80014ee <HAL_DMA_Abort+0xd6>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a70      	ldr	r2, [pc, #448]	@ (800163c <HAL_DMA_Abort+0x224>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d036      	beq.n	80014ee <HAL_DMA_Abort+0xd6>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a6e      	ldr	r2, [pc, #440]	@ (8001640 <HAL_DMA_Abort+0x228>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d031      	beq.n	80014ee <HAL_DMA_Abort+0xd6>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a6d      	ldr	r2, [pc, #436]	@ (8001644 <HAL_DMA_Abort+0x22c>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d02c      	beq.n	80014ee <HAL_DMA_Abort+0xd6>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a6b      	ldr	r2, [pc, #428]	@ (8001648 <HAL_DMA_Abort+0x230>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d027      	beq.n	80014ee <HAL_DMA_Abort+0xd6>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a6a      	ldr	r2, [pc, #424]	@ (800164c <HAL_DMA_Abort+0x234>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d022      	beq.n	80014ee <HAL_DMA_Abort+0xd6>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a68      	ldr	r2, [pc, #416]	@ (8001650 <HAL_DMA_Abort+0x238>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d01d      	beq.n	80014ee <HAL_DMA_Abort+0xd6>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a67      	ldr	r2, [pc, #412]	@ (8001654 <HAL_DMA_Abort+0x23c>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d018      	beq.n	80014ee <HAL_DMA_Abort+0xd6>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a65      	ldr	r2, [pc, #404]	@ (8001658 <HAL_DMA_Abort+0x240>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d013      	beq.n	80014ee <HAL_DMA_Abort+0xd6>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a64      	ldr	r2, [pc, #400]	@ (800165c <HAL_DMA_Abort+0x244>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d00e      	beq.n	80014ee <HAL_DMA_Abort+0xd6>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a62      	ldr	r2, [pc, #392]	@ (8001660 <HAL_DMA_Abort+0x248>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d009      	beq.n	80014ee <HAL_DMA_Abort+0xd6>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a61      	ldr	r2, [pc, #388]	@ (8001664 <HAL_DMA_Abort+0x24c>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d004      	beq.n	80014ee <HAL_DMA_Abort+0xd6>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a5f      	ldr	r2, [pc, #380]	@ (8001668 <HAL_DMA_Abort+0x250>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d101      	bne.n	80014f2 <HAL_DMA_Abort+0xda>
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <HAL_DMA_Abort+0xdc>
 80014f2:	2300      	movs	r3, #0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 021e 	bic.w	r2, r2, #30
 8001506:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001516:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	e00a      	b.n	8001536 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 020e 	bic.w	r2, r2, #14
 800152e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a3c      	ldr	r2, [pc, #240]	@ (800162c <HAL_DMA_Abort+0x214>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d072      	beq.n	8001626 <HAL_DMA_Abort+0x20e>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a3a      	ldr	r2, [pc, #232]	@ (8001630 <HAL_DMA_Abort+0x218>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d06d      	beq.n	8001626 <HAL_DMA_Abort+0x20e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a39      	ldr	r2, [pc, #228]	@ (8001634 <HAL_DMA_Abort+0x21c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d068      	beq.n	8001626 <HAL_DMA_Abort+0x20e>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a37      	ldr	r2, [pc, #220]	@ (8001638 <HAL_DMA_Abort+0x220>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d063      	beq.n	8001626 <HAL_DMA_Abort+0x20e>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a36      	ldr	r2, [pc, #216]	@ (800163c <HAL_DMA_Abort+0x224>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d05e      	beq.n	8001626 <HAL_DMA_Abort+0x20e>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a34      	ldr	r2, [pc, #208]	@ (8001640 <HAL_DMA_Abort+0x228>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d059      	beq.n	8001626 <HAL_DMA_Abort+0x20e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a33      	ldr	r2, [pc, #204]	@ (8001644 <HAL_DMA_Abort+0x22c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d054      	beq.n	8001626 <HAL_DMA_Abort+0x20e>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a31      	ldr	r2, [pc, #196]	@ (8001648 <HAL_DMA_Abort+0x230>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d04f      	beq.n	8001626 <HAL_DMA_Abort+0x20e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a30      	ldr	r2, [pc, #192]	@ (800164c <HAL_DMA_Abort+0x234>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d04a      	beq.n	8001626 <HAL_DMA_Abort+0x20e>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a2e      	ldr	r2, [pc, #184]	@ (8001650 <HAL_DMA_Abort+0x238>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d045      	beq.n	8001626 <HAL_DMA_Abort+0x20e>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a2d      	ldr	r2, [pc, #180]	@ (8001654 <HAL_DMA_Abort+0x23c>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d040      	beq.n	8001626 <HAL_DMA_Abort+0x20e>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a2b      	ldr	r2, [pc, #172]	@ (8001658 <HAL_DMA_Abort+0x240>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d03b      	beq.n	8001626 <HAL_DMA_Abort+0x20e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a2a      	ldr	r2, [pc, #168]	@ (800165c <HAL_DMA_Abort+0x244>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d036      	beq.n	8001626 <HAL_DMA_Abort+0x20e>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a28      	ldr	r2, [pc, #160]	@ (8001660 <HAL_DMA_Abort+0x248>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d031      	beq.n	8001626 <HAL_DMA_Abort+0x20e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a27      	ldr	r2, [pc, #156]	@ (8001664 <HAL_DMA_Abort+0x24c>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d02c      	beq.n	8001626 <HAL_DMA_Abort+0x20e>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a25      	ldr	r2, [pc, #148]	@ (8001668 <HAL_DMA_Abort+0x250>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d027      	beq.n	8001626 <HAL_DMA_Abort+0x20e>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a24      	ldr	r2, [pc, #144]	@ (800166c <HAL_DMA_Abort+0x254>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d022      	beq.n	8001626 <HAL_DMA_Abort+0x20e>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a22      	ldr	r2, [pc, #136]	@ (8001670 <HAL_DMA_Abort+0x258>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d01d      	beq.n	8001626 <HAL_DMA_Abort+0x20e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a21      	ldr	r2, [pc, #132]	@ (8001674 <HAL_DMA_Abort+0x25c>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d018      	beq.n	8001626 <HAL_DMA_Abort+0x20e>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001678 <HAL_DMA_Abort+0x260>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d013      	beq.n	8001626 <HAL_DMA_Abort+0x20e>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a1e      	ldr	r2, [pc, #120]	@ (800167c <HAL_DMA_Abort+0x264>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d00e      	beq.n	8001626 <HAL_DMA_Abort+0x20e>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a1c      	ldr	r2, [pc, #112]	@ (8001680 <HAL_DMA_Abort+0x268>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d009      	beq.n	8001626 <HAL_DMA_Abort+0x20e>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a1b      	ldr	r2, [pc, #108]	@ (8001684 <HAL_DMA_Abort+0x26c>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d004      	beq.n	8001626 <HAL_DMA_Abort+0x20e>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a19      	ldr	r2, [pc, #100]	@ (8001688 <HAL_DMA_Abort+0x270>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d132      	bne.n	800168c <HAL_DMA_Abort+0x274>
 8001626:	2301      	movs	r3, #1
 8001628:	e031      	b.n	800168e <HAL_DMA_Abort+0x276>
 800162a:	bf00      	nop
 800162c:	40020010 	.word	0x40020010
 8001630:	40020028 	.word	0x40020028
 8001634:	40020040 	.word	0x40020040
 8001638:	40020058 	.word	0x40020058
 800163c:	40020070 	.word	0x40020070
 8001640:	40020088 	.word	0x40020088
 8001644:	400200a0 	.word	0x400200a0
 8001648:	400200b8 	.word	0x400200b8
 800164c:	40020410 	.word	0x40020410
 8001650:	40020428 	.word	0x40020428
 8001654:	40020440 	.word	0x40020440
 8001658:	40020458 	.word	0x40020458
 800165c:	40020470 	.word	0x40020470
 8001660:	40020488 	.word	0x40020488
 8001664:	400204a0 	.word	0x400204a0
 8001668:	400204b8 	.word	0x400204b8
 800166c:	58025408 	.word	0x58025408
 8001670:	5802541c 	.word	0x5802541c
 8001674:	58025430 	.word	0x58025430
 8001678:	58025444 	.word	0x58025444
 800167c:	58025458 	.word	0x58025458
 8001680:	5802546c 	.word	0x5802546c
 8001684:	58025480 	.word	0x58025480
 8001688:	58025494 	.word	0x58025494
 800168c:	2300      	movs	r3, #0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d007      	beq.n	80016a2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800169c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a6d      	ldr	r2, [pc, #436]	@ (800185c <HAL_DMA_Abort+0x444>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d04a      	beq.n	8001742 <HAL_DMA_Abort+0x32a>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a6b      	ldr	r2, [pc, #428]	@ (8001860 <HAL_DMA_Abort+0x448>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d045      	beq.n	8001742 <HAL_DMA_Abort+0x32a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a6a      	ldr	r2, [pc, #424]	@ (8001864 <HAL_DMA_Abort+0x44c>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d040      	beq.n	8001742 <HAL_DMA_Abort+0x32a>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a68      	ldr	r2, [pc, #416]	@ (8001868 <HAL_DMA_Abort+0x450>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d03b      	beq.n	8001742 <HAL_DMA_Abort+0x32a>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a67      	ldr	r2, [pc, #412]	@ (800186c <HAL_DMA_Abort+0x454>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d036      	beq.n	8001742 <HAL_DMA_Abort+0x32a>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a65      	ldr	r2, [pc, #404]	@ (8001870 <HAL_DMA_Abort+0x458>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d031      	beq.n	8001742 <HAL_DMA_Abort+0x32a>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a64      	ldr	r2, [pc, #400]	@ (8001874 <HAL_DMA_Abort+0x45c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d02c      	beq.n	8001742 <HAL_DMA_Abort+0x32a>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a62      	ldr	r2, [pc, #392]	@ (8001878 <HAL_DMA_Abort+0x460>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d027      	beq.n	8001742 <HAL_DMA_Abort+0x32a>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a61      	ldr	r2, [pc, #388]	@ (800187c <HAL_DMA_Abort+0x464>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d022      	beq.n	8001742 <HAL_DMA_Abort+0x32a>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a5f      	ldr	r2, [pc, #380]	@ (8001880 <HAL_DMA_Abort+0x468>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d01d      	beq.n	8001742 <HAL_DMA_Abort+0x32a>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a5e      	ldr	r2, [pc, #376]	@ (8001884 <HAL_DMA_Abort+0x46c>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d018      	beq.n	8001742 <HAL_DMA_Abort+0x32a>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a5c      	ldr	r2, [pc, #368]	@ (8001888 <HAL_DMA_Abort+0x470>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d013      	beq.n	8001742 <HAL_DMA_Abort+0x32a>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a5b      	ldr	r2, [pc, #364]	@ (800188c <HAL_DMA_Abort+0x474>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d00e      	beq.n	8001742 <HAL_DMA_Abort+0x32a>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a59      	ldr	r2, [pc, #356]	@ (8001890 <HAL_DMA_Abort+0x478>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d009      	beq.n	8001742 <HAL_DMA_Abort+0x32a>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a58      	ldr	r2, [pc, #352]	@ (8001894 <HAL_DMA_Abort+0x47c>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d004      	beq.n	8001742 <HAL_DMA_Abort+0x32a>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a56      	ldr	r2, [pc, #344]	@ (8001898 <HAL_DMA_Abort+0x480>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d108      	bne.n	8001754 <HAL_DMA_Abort+0x33c>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0201 	bic.w	r2, r2, #1
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	e007      	b.n	8001764 <HAL_DMA_Abort+0x34c>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0201 	bic.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001764:	e013      	b.n	800178e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001766:	f7ff fd03 	bl	8001170 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b05      	cmp	r3, #5
 8001772:	d90c      	bls.n	800178e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2220      	movs	r2, #32
 8001778:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2203      	movs	r2, #3
 800177e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e12d      	b.n	80019ea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1e5      	bne.n	8001766 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a2f      	ldr	r2, [pc, #188]	@ (800185c <HAL_DMA_Abort+0x444>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d04a      	beq.n	800183a <HAL_DMA_Abort+0x422>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001860 <HAL_DMA_Abort+0x448>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d045      	beq.n	800183a <HAL_DMA_Abort+0x422>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a2c      	ldr	r2, [pc, #176]	@ (8001864 <HAL_DMA_Abort+0x44c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d040      	beq.n	800183a <HAL_DMA_Abort+0x422>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001868 <HAL_DMA_Abort+0x450>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d03b      	beq.n	800183a <HAL_DMA_Abort+0x422>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a29      	ldr	r2, [pc, #164]	@ (800186c <HAL_DMA_Abort+0x454>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d036      	beq.n	800183a <HAL_DMA_Abort+0x422>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a27      	ldr	r2, [pc, #156]	@ (8001870 <HAL_DMA_Abort+0x458>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d031      	beq.n	800183a <HAL_DMA_Abort+0x422>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a26      	ldr	r2, [pc, #152]	@ (8001874 <HAL_DMA_Abort+0x45c>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d02c      	beq.n	800183a <HAL_DMA_Abort+0x422>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a24      	ldr	r2, [pc, #144]	@ (8001878 <HAL_DMA_Abort+0x460>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d027      	beq.n	800183a <HAL_DMA_Abort+0x422>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a23      	ldr	r2, [pc, #140]	@ (800187c <HAL_DMA_Abort+0x464>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d022      	beq.n	800183a <HAL_DMA_Abort+0x422>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a21      	ldr	r2, [pc, #132]	@ (8001880 <HAL_DMA_Abort+0x468>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d01d      	beq.n	800183a <HAL_DMA_Abort+0x422>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a20      	ldr	r2, [pc, #128]	@ (8001884 <HAL_DMA_Abort+0x46c>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d018      	beq.n	800183a <HAL_DMA_Abort+0x422>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a1e      	ldr	r2, [pc, #120]	@ (8001888 <HAL_DMA_Abort+0x470>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d013      	beq.n	800183a <HAL_DMA_Abort+0x422>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a1d      	ldr	r2, [pc, #116]	@ (800188c <HAL_DMA_Abort+0x474>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d00e      	beq.n	800183a <HAL_DMA_Abort+0x422>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1b      	ldr	r2, [pc, #108]	@ (8001890 <HAL_DMA_Abort+0x478>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d009      	beq.n	800183a <HAL_DMA_Abort+0x422>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a1a      	ldr	r2, [pc, #104]	@ (8001894 <HAL_DMA_Abort+0x47c>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d004      	beq.n	800183a <HAL_DMA_Abort+0x422>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a18      	ldr	r2, [pc, #96]	@ (8001898 <HAL_DMA_Abort+0x480>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d101      	bne.n	800183e <HAL_DMA_Abort+0x426>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <HAL_DMA_Abort+0x428>
 800183e:	2300      	movs	r3, #0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d02b      	beq.n	800189c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001848:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	223f      	movs	r2, #63	@ 0x3f
 8001854:	409a      	lsls	r2, r3
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	e02a      	b.n	80018b2 <HAL_DMA_Abort+0x49a>
 800185c:	40020010 	.word	0x40020010
 8001860:	40020028 	.word	0x40020028
 8001864:	40020040 	.word	0x40020040
 8001868:	40020058 	.word	0x40020058
 800186c:	40020070 	.word	0x40020070
 8001870:	40020088 	.word	0x40020088
 8001874:	400200a0 	.word	0x400200a0
 8001878:	400200b8 	.word	0x400200b8
 800187c:	40020410 	.word	0x40020410
 8001880:	40020428 	.word	0x40020428
 8001884:	40020440 	.word	0x40020440
 8001888:	40020458 	.word	0x40020458
 800188c:	40020470 	.word	0x40020470
 8001890:	40020488 	.word	0x40020488
 8001894:	400204a0 	.word	0x400204a0
 8001898:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a6:	f003 031f 	and.w	r3, r3, #31
 80018aa:	2201      	movs	r2, #1
 80018ac:	409a      	lsls	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a4f      	ldr	r2, [pc, #316]	@ (80019f4 <HAL_DMA_Abort+0x5dc>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d072      	beq.n	80019a2 <HAL_DMA_Abort+0x58a>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a4d      	ldr	r2, [pc, #308]	@ (80019f8 <HAL_DMA_Abort+0x5e0>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d06d      	beq.n	80019a2 <HAL_DMA_Abort+0x58a>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a4c      	ldr	r2, [pc, #304]	@ (80019fc <HAL_DMA_Abort+0x5e4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d068      	beq.n	80019a2 <HAL_DMA_Abort+0x58a>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a4a      	ldr	r2, [pc, #296]	@ (8001a00 <HAL_DMA_Abort+0x5e8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d063      	beq.n	80019a2 <HAL_DMA_Abort+0x58a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a49      	ldr	r2, [pc, #292]	@ (8001a04 <HAL_DMA_Abort+0x5ec>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d05e      	beq.n	80019a2 <HAL_DMA_Abort+0x58a>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a47      	ldr	r2, [pc, #284]	@ (8001a08 <HAL_DMA_Abort+0x5f0>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d059      	beq.n	80019a2 <HAL_DMA_Abort+0x58a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a46      	ldr	r2, [pc, #280]	@ (8001a0c <HAL_DMA_Abort+0x5f4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d054      	beq.n	80019a2 <HAL_DMA_Abort+0x58a>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a44      	ldr	r2, [pc, #272]	@ (8001a10 <HAL_DMA_Abort+0x5f8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d04f      	beq.n	80019a2 <HAL_DMA_Abort+0x58a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a43      	ldr	r2, [pc, #268]	@ (8001a14 <HAL_DMA_Abort+0x5fc>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d04a      	beq.n	80019a2 <HAL_DMA_Abort+0x58a>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a41      	ldr	r2, [pc, #260]	@ (8001a18 <HAL_DMA_Abort+0x600>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d045      	beq.n	80019a2 <HAL_DMA_Abort+0x58a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a40      	ldr	r2, [pc, #256]	@ (8001a1c <HAL_DMA_Abort+0x604>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d040      	beq.n	80019a2 <HAL_DMA_Abort+0x58a>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a3e      	ldr	r2, [pc, #248]	@ (8001a20 <HAL_DMA_Abort+0x608>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d03b      	beq.n	80019a2 <HAL_DMA_Abort+0x58a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a3d      	ldr	r2, [pc, #244]	@ (8001a24 <HAL_DMA_Abort+0x60c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d036      	beq.n	80019a2 <HAL_DMA_Abort+0x58a>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a3b      	ldr	r2, [pc, #236]	@ (8001a28 <HAL_DMA_Abort+0x610>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d031      	beq.n	80019a2 <HAL_DMA_Abort+0x58a>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a3a      	ldr	r2, [pc, #232]	@ (8001a2c <HAL_DMA_Abort+0x614>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d02c      	beq.n	80019a2 <HAL_DMA_Abort+0x58a>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a38      	ldr	r2, [pc, #224]	@ (8001a30 <HAL_DMA_Abort+0x618>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d027      	beq.n	80019a2 <HAL_DMA_Abort+0x58a>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a37      	ldr	r2, [pc, #220]	@ (8001a34 <HAL_DMA_Abort+0x61c>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d022      	beq.n	80019a2 <HAL_DMA_Abort+0x58a>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a35      	ldr	r2, [pc, #212]	@ (8001a38 <HAL_DMA_Abort+0x620>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d01d      	beq.n	80019a2 <HAL_DMA_Abort+0x58a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a34      	ldr	r2, [pc, #208]	@ (8001a3c <HAL_DMA_Abort+0x624>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d018      	beq.n	80019a2 <HAL_DMA_Abort+0x58a>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a32      	ldr	r2, [pc, #200]	@ (8001a40 <HAL_DMA_Abort+0x628>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d013      	beq.n	80019a2 <HAL_DMA_Abort+0x58a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a31      	ldr	r2, [pc, #196]	@ (8001a44 <HAL_DMA_Abort+0x62c>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d00e      	beq.n	80019a2 <HAL_DMA_Abort+0x58a>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a2f      	ldr	r2, [pc, #188]	@ (8001a48 <HAL_DMA_Abort+0x630>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d009      	beq.n	80019a2 <HAL_DMA_Abort+0x58a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a2e      	ldr	r2, [pc, #184]	@ (8001a4c <HAL_DMA_Abort+0x634>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d004      	beq.n	80019a2 <HAL_DMA_Abort+0x58a>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a2c      	ldr	r2, [pc, #176]	@ (8001a50 <HAL_DMA_Abort+0x638>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d101      	bne.n	80019a6 <HAL_DMA_Abort+0x58e>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <HAL_DMA_Abort+0x590>
 80019a6:	2300      	movs	r3, #0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d015      	beq.n	80019d8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80019b4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00c      	beq.n	80019d8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019cc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80019d6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40020010 	.word	0x40020010
 80019f8:	40020028 	.word	0x40020028
 80019fc:	40020040 	.word	0x40020040
 8001a00:	40020058 	.word	0x40020058
 8001a04:	40020070 	.word	0x40020070
 8001a08:	40020088 	.word	0x40020088
 8001a0c:	400200a0 	.word	0x400200a0
 8001a10:	400200b8 	.word	0x400200b8
 8001a14:	40020410 	.word	0x40020410
 8001a18:	40020428 	.word	0x40020428
 8001a1c:	40020440 	.word	0x40020440
 8001a20:	40020458 	.word	0x40020458
 8001a24:	40020470 	.word	0x40020470
 8001a28:	40020488 	.word	0x40020488
 8001a2c:	400204a0 	.word	0x400204a0
 8001a30:	400204b8 	.word	0x400204b8
 8001a34:	58025408 	.word	0x58025408
 8001a38:	5802541c 	.word	0x5802541c
 8001a3c:	58025430 	.word	0x58025430
 8001a40:	58025444 	.word	0x58025444
 8001a44:	58025458 	.word	0x58025458
 8001a48:	5802546c 	.word	0x5802546c
 8001a4c:	58025480 	.word	0x58025480
 8001a50:	58025494 	.word	0x58025494

08001a54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e237      	b.n	8001ed6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d004      	beq.n	8001a7c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2280      	movs	r2, #128	@ 0x80
 8001a76:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e22c      	b.n	8001ed6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a5c      	ldr	r2, [pc, #368]	@ (8001bf4 <HAL_DMA_Abort_IT+0x1a0>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d04a      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a5b      	ldr	r2, [pc, #364]	@ (8001bf8 <HAL_DMA_Abort_IT+0x1a4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d045      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a59      	ldr	r2, [pc, #356]	@ (8001bfc <HAL_DMA_Abort_IT+0x1a8>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d040      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a58      	ldr	r2, [pc, #352]	@ (8001c00 <HAL_DMA_Abort_IT+0x1ac>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d03b      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a56      	ldr	r2, [pc, #344]	@ (8001c04 <HAL_DMA_Abort_IT+0x1b0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d036      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a55      	ldr	r2, [pc, #340]	@ (8001c08 <HAL_DMA_Abort_IT+0x1b4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d031      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a53      	ldr	r2, [pc, #332]	@ (8001c0c <HAL_DMA_Abort_IT+0x1b8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d02c      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a52      	ldr	r2, [pc, #328]	@ (8001c10 <HAL_DMA_Abort_IT+0x1bc>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d027      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a50      	ldr	r2, [pc, #320]	@ (8001c14 <HAL_DMA_Abort_IT+0x1c0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d022      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a4f      	ldr	r2, [pc, #316]	@ (8001c18 <HAL_DMA_Abort_IT+0x1c4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d01d      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a4d      	ldr	r2, [pc, #308]	@ (8001c1c <HAL_DMA_Abort_IT+0x1c8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d018      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a4c      	ldr	r2, [pc, #304]	@ (8001c20 <HAL_DMA_Abort_IT+0x1cc>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d013      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a4a      	ldr	r2, [pc, #296]	@ (8001c24 <HAL_DMA_Abort_IT+0x1d0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d00e      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a49      	ldr	r2, [pc, #292]	@ (8001c28 <HAL_DMA_Abort_IT+0x1d4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d009      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a47      	ldr	r2, [pc, #284]	@ (8001c2c <HAL_DMA_Abort_IT+0x1d8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d004      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a46      	ldr	r2, [pc, #280]	@ (8001c30 <HAL_DMA_Abort_IT+0x1dc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d101      	bne.n	8001b20 <HAL_DMA_Abort_IT+0xcc>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <HAL_DMA_Abort_IT+0xce>
 8001b20:	2300      	movs	r3, #0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 8086 	beq.w	8001c34 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a2f      	ldr	r2, [pc, #188]	@ (8001bf4 <HAL_DMA_Abort_IT+0x1a0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d04a      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a2e      	ldr	r2, [pc, #184]	@ (8001bf8 <HAL_DMA_Abort_IT+0x1a4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d045      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a2c      	ldr	r2, [pc, #176]	@ (8001bfc <HAL_DMA_Abort_IT+0x1a8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d040      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a2b      	ldr	r2, [pc, #172]	@ (8001c00 <HAL_DMA_Abort_IT+0x1ac>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d03b      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a29      	ldr	r2, [pc, #164]	@ (8001c04 <HAL_DMA_Abort_IT+0x1b0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d036      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a28      	ldr	r2, [pc, #160]	@ (8001c08 <HAL_DMA_Abort_IT+0x1b4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d031      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a26      	ldr	r2, [pc, #152]	@ (8001c0c <HAL_DMA_Abort_IT+0x1b8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d02c      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a25      	ldr	r2, [pc, #148]	@ (8001c10 <HAL_DMA_Abort_IT+0x1bc>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d027      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a23      	ldr	r2, [pc, #140]	@ (8001c14 <HAL_DMA_Abort_IT+0x1c0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d022      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a22      	ldr	r2, [pc, #136]	@ (8001c18 <HAL_DMA_Abort_IT+0x1c4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d01d      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a20      	ldr	r2, [pc, #128]	@ (8001c1c <HAL_DMA_Abort_IT+0x1c8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d018      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c20 <HAL_DMA_Abort_IT+0x1cc>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d013      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1d      	ldr	r2, [pc, #116]	@ (8001c24 <HAL_DMA_Abort_IT+0x1d0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d00e      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c28 <HAL_DMA_Abort_IT+0x1d4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d009      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c2c <HAL_DMA_Abort_IT+0x1d8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d004      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a19      	ldr	r2, [pc, #100]	@ (8001c30 <HAL_DMA_Abort_IT+0x1dc>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d108      	bne.n	8001be2 <HAL_DMA_Abort_IT+0x18e>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0201 	bic.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	e178      	b.n	8001ed4 <HAL_DMA_Abort_IT+0x480>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0201 	bic.w	r2, r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	e16f      	b.n	8001ed4 <HAL_DMA_Abort_IT+0x480>
 8001bf4:	40020010 	.word	0x40020010
 8001bf8:	40020028 	.word	0x40020028
 8001bfc:	40020040 	.word	0x40020040
 8001c00:	40020058 	.word	0x40020058
 8001c04:	40020070 	.word	0x40020070
 8001c08:	40020088 	.word	0x40020088
 8001c0c:	400200a0 	.word	0x400200a0
 8001c10:	400200b8 	.word	0x400200b8
 8001c14:	40020410 	.word	0x40020410
 8001c18:	40020428 	.word	0x40020428
 8001c1c:	40020440 	.word	0x40020440
 8001c20:	40020458 	.word	0x40020458
 8001c24:	40020470 	.word	0x40020470
 8001c28:	40020488 	.word	0x40020488
 8001c2c:	400204a0 	.word	0x400204a0
 8001c30:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 020e 	bic.w	r2, r2, #14
 8001c42:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a6c      	ldr	r2, [pc, #432]	@ (8001dfc <HAL_DMA_Abort_IT+0x3a8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d04a      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a6b      	ldr	r2, [pc, #428]	@ (8001e00 <HAL_DMA_Abort_IT+0x3ac>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d045      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a69      	ldr	r2, [pc, #420]	@ (8001e04 <HAL_DMA_Abort_IT+0x3b0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d040      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a68      	ldr	r2, [pc, #416]	@ (8001e08 <HAL_DMA_Abort_IT+0x3b4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d03b      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a66      	ldr	r2, [pc, #408]	@ (8001e0c <HAL_DMA_Abort_IT+0x3b8>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d036      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a65      	ldr	r2, [pc, #404]	@ (8001e10 <HAL_DMA_Abort_IT+0x3bc>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d031      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a63      	ldr	r2, [pc, #396]	@ (8001e14 <HAL_DMA_Abort_IT+0x3c0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d02c      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a62      	ldr	r2, [pc, #392]	@ (8001e18 <HAL_DMA_Abort_IT+0x3c4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d027      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a60      	ldr	r2, [pc, #384]	@ (8001e1c <HAL_DMA_Abort_IT+0x3c8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d022      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a5f      	ldr	r2, [pc, #380]	@ (8001e20 <HAL_DMA_Abort_IT+0x3cc>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d01d      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a5d      	ldr	r2, [pc, #372]	@ (8001e24 <HAL_DMA_Abort_IT+0x3d0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d018      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a5c      	ldr	r2, [pc, #368]	@ (8001e28 <HAL_DMA_Abort_IT+0x3d4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d013      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a5a      	ldr	r2, [pc, #360]	@ (8001e2c <HAL_DMA_Abort_IT+0x3d8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00e      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a59      	ldr	r2, [pc, #356]	@ (8001e30 <HAL_DMA_Abort_IT+0x3dc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d009      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a57      	ldr	r2, [pc, #348]	@ (8001e34 <HAL_DMA_Abort_IT+0x3e0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d004      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a56      	ldr	r2, [pc, #344]	@ (8001e38 <HAL_DMA_Abort_IT+0x3e4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d108      	bne.n	8001cf6 <HAL_DMA_Abort_IT+0x2a2>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0201 	bic.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	e007      	b.n	8001d06 <HAL_DMA_Abort_IT+0x2b2>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0201 	bic.w	r2, r2, #1
 8001d04:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a3c      	ldr	r2, [pc, #240]	@ (8001dfc <HAL_DMA_Abort_IT+0x3a8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d072      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a3a      	ldr	r2, [pc, #232]	@ (8001e00 <HAL_DMA_Abort_IT+0x3ac>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d06d      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a39      	ldr	r2, [pc, #228]	@ (8001e04 <HAL_DMA_Abort_IT+0x3b0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d068      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a37      	ldr	r2, [pc, #220]	@ (8001e08 <HAL_DMA_Abort_IT+0x3b4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d063      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a36      	ldr	r2, [pc, #216]	@ (8001e0c <HAL_DMA_Abort_IT+0x3b8>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d05e      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a34      	ldr	r2, [pc, #208]	@ (8001e10 <HAL_DMA_Abort_IT+0x3bc>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d059      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a33      	ldr	r2, [pc, #204]	@ (8001e14 <HAL_DMA_Abort_IT+0x3c0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d054      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a31      	ldr	r2, [pc, #196]	@ (8001e18 <HAL_DMA_Abort_IT+0x3c4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d04f      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a30      	ldr	r2, [pc, #192]	@ (8001e1c <HAL_DMA_Abort_IT+0x3c8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d04a      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a2e      	ldr	r2, [pc, #184]	@ (8001e20 <HAL_DMA_Abort_IT+0x3cc>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d045      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a2d      	ldr	r2, [pc, #180]	@ (8001e24 <HAL_DMA_Abort_IT+0x3d0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d040      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a2b      	ldr	r2, [pc, #172]	@ (8001e28 <HAL_DMA_Abort_IT+0x3d4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d03b      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a2a      	ldr	r2, [pc, #168]	@ (8001e2c <HAL_DMA_Abort_IT+0x3d8>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d036      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a28      	ldr	r2, [pc, #160]	@ (8001e30 <HAL_DMA_Abort_IT+0x3dc>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d031      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a27      	ldr	r2, [pc, #156]	@ (8001e34 <HAL_DMA_Abort_IT+0x3e0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d02c      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a25      	ldr	r2, [pc, #148]	@ (8001e38 <HAL_DMA_Abort_IT+0x3e4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d027      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a24      	ldr	r2, [pc, #144]	@ (8001e3c <HAL_DMA_Abort_IT+0x3e8>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d022      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a22      	ldr	r2, [pc, #136]	@ (8001e40 <HAL_DMA_Abort_IT+0x3ec>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d01d      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a21      	ldr	r2, [pc, #132]	@ (8001e44 <HAL_DMA_Abort_IT+0x3f0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d018      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8001e48 <HAL_DMA_Abort_IT+0x3f4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d013      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8001e4c <HAL_DMA_Abort_IT+0x3f8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d00e      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	@ (8001e50 <HAL_DMA_Abort_IT+0x3fc>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d009      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1b      	ldr	r2, [pc, #108]	@ (8001e54 <HAL_DMA_Abort_IT+0x400>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d004      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a19      	ldr	r2, [pc, #100]	@ (8001e58 <HAL_DMA_Abort_IT+0x404>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d132      	bne.n	8001e5c <HAL_DMA_Abort_IT+0x408>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e031      	b.n	8001e5e <HAL_DMA_Abort_IT+0x40a>
 8001dfa:	bf00      	nop
 8001dfc:	40020010 	.word	0x40020010
 8001e00:	40020028 	.word	0x40020028
 8001e04:	40020040 	.word	0x40020040
 8001e08:	40020058 	.word	0x40020058
 8001e0c:	40020070 	.word	0x40020070
 8001e10:	40020088 	.word	0x40020088
 8001e14:	400200a0 	.word	0x400200a0
 8001e18:	400200b8 	.word	0x400200b8
 8001e1c:	40020410 	.word	0x40020410
 8001e20:	40020428 	.word	0x40020428
 8001e24:	40020440 	.word	0x40020440
 8001e28:	40020458 	.word	0x40020458
 8001e2c:	40020470 	.word	0x40020470
 8001e30:	40020488 	.word	0x40020488
 8001e34:	400204a0 	.word	0x400204a0
 8001e38:	400204b8 	.word	0x400204b8
 8001e3c:	58025408 	.word	0x58025408
 8001e40:	5802541c 	.word	0x5802541c
 8001e44:	58025430 	.word	0x58025430
 8001e48:	58025444 	.word	0x58025444
 8001e4c:	58025458 	.word	0x58025458
 8001e50:	5802546c 	.word	0x5802546c
 8001e54:	58025480 	.word	0x58025480
 8001e58:	58025494 	.word	0x58025494
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d028      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e70:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e76:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	2201      	movs	r2, #1
 8001e82:	409a      	lsls	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e90:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00c      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ea4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ea8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001eb2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop

08001ee0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e0e3      	b.n	80020ba <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d106      	bne.n	8001f0a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2223      	movs	r2, #35	@ 0x23
 8001f00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7fe fe1d 	bl	8000b44 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0a:	4b6e      	ldr	r3, [pc, #440]	@ (80020c4 <HAL_ETH_Init+0x1e4>)
 8001f0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f10:	4a6c      	ldr	r2, [pc, #432]	@ (80020c4 <HAL_ETH_Init+0x1e4>)
 8001f12:	f043 0302 	orr.w	r3, r3, #2
 8001f16:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f1a:	4b6a      	ldr	r3, [pc, #424]	@ (80020c4 <HAL_ETH_Init+0x1e4>)
 8001f1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	7a1b      	ldrb	r3, [r3, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d103      	bne.n	8001f38 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001f30:	2000      	movs	r0, #0
 8001f32:	f7ff f94d 	bl	80011d0 <HAL_SYSCFG_ETHInterfaceSelect>
 8001f36:	e003      	b.n	8001f40 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001f38:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001f3c:	f7ff f948 	bl	80011d0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001f40:	4b61      	ldr	r3, [pc, #388]	@ (80020c8 <HAL_ETH_Init+0x1e8>)
 8001f42:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f5c:	f7ff f908 	bl	8001170 <HAL_GetTick>
 8001f60:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001f62:	e011      	b.n	8001f88 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001f64:	f7ff f904 	bl	8001170 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001f72:	d909      	bls.n	8001f88 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2204      	movs	r2, #4
 8001f78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	22e0      	movs	r2, #224	@ 0xe0
 8001f80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e098      	b.n	80020ba <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1e4      	bne.n	8001f64 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f89e 	bl	80020dc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001fa0:	f001 fcd8 	bl	8003954 <HAL_RCC_GetHCLKFreq>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	4a49      	ldr	r2, [pc, #292]	@ (80020cc <HAL_ETH_Init+0x1ec>)
 8001fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fac:	0c9a      	lsrs	r2, r3, #18
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	3a01      	subs	r2, #1
 8001fb4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 fa81 	bl	80024c0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fc6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001fca:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001fd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fda:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d009      	beq.n	8001ffe <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	22e0      	movs	r2, #224	@ 0xe0
 8001ff6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e05d      	b.n	80020ba <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002006:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800200a:	4b31      	ldr	r3, [pc, #196]	@ (80020d0 <HAL_ETH_Init+0x1f0>)
 800200c:	4013      	ands	r3, r2
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6952      	ldr	r2, [r2, #20]
 8002012:	0051      	lsls	r1, r2, #1
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	430b      	orrs	r3, r1
 800201a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800201e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fae9 	bl	80025fa <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 fb2f 	bl	800268c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	3305      	adds	r3, #5
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	021a      	lsls	r2, r3, #8
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	3304      	adds	r3, #4
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	3303      	adds	r3, #3
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	061a      	lsls	r2, r3, #24
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	3302      	adds	r3, #2
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	041b      	lsls	r3, r3, #16
 8002060:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	3301      	adds	r3, #1
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800206c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800207a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800207c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b11      	ldr	r3, [pc, #68]	@ (80020d4 <HAL_ETH_Init+0x1f4>)
 800208e:	430b      	orrs	r3, r1
 8002090:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <HAL_ETH_Init+0x1f8>)
 80020a2:	430b      	orrs	r3, r1
 80020a4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2210      	movs	r2, #16
 80020b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	58024400 	.word	0x58024400
 80020c8:	58000400 	.word	0x58000400
 80020cc:	431bde83 	.word	0x431bde83
 80020d0:	ffff8001 	.word	0xffff8001
 80020d4:	0c020060 	.word	0x0c020060
 80020d8:	0c20c000 	.word	0x0c20c000

080020dc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80020f6:	f001 fc2d 	bl	8003954 <HAL_RCC_GetHCLKFreq>
 80020fa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002168 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d804      	bhi.n	800210e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	e022      	b.n	8002154 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	4a16      	ldr	r2, [pc, #88]	@ (800216c <HAL_ETH_SetMDIOClockRange+0x90>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d204      	bcs.n	8002120 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	e019      	b.n	8002154 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4a13      	ldr	r2, [pc, #76]	@ (8002170 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d915      	bls.n	8002154 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	4a12      	ldr	r2, [pc, #72]	@ (8002174 <HAL_ETH_SetMDIOClockRange+0x98>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d804      	bhi.n	800213a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	e00c      	b.n	8002154 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	4a0e      	ldr	r2, [pc, #56]	@ (8002178 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d804      	bhi.n	800214c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	e003      	b.n	8002154 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002152:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	02160ebf 	.word	0x02160ebf
 800216c:	03938700 	.word	0x03938700
 8002170:	05f5e0ff 	.word	0x05f5e0ff
 8002174:	08f0d17f 	.word	0x08f0d17f
 8002178:	0ee6b27f 	.word	0x0ee6b27f

0800217c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800218e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	791b      	ldrb	r3, [r3, #4]
 8002194:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002196:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	7b1b      	ldrb	r3, [r3, #12]
 800219c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800219e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	7b5b      	ldrb	r3, [r3, #13]
 80021a4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80021a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	7b9b      	ldrb	r3, [r3, #14]
 80021ac:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80021ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	7bdb      	ldrb	r3, [r3, #15]
 80021b4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80021b6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	7c12      	ldrb	r2, [r2, #16]
 80021bc:	2a00      	cmp	r2, #0
 80021be:	d102      	bne.n	80021c6 <ETH_SetMACConfig+0x4a>
 80021c0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80021c4:	e000      	b.n	80021c8 <ETH_SetMACConfig+0x4c>
 80021c6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80021c8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	7c52      	ldrb	r2, [r2, #17]
 80021ce:	2a00      	cmp	r2, #0
 80021d0:	d102      	bne.n	80021d8 <ETH_SetMACConfig+0x5c>
 80021d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021d6:	e000      	b.n	80021da <ETH_SetMACConfig+0x5e>
 80021d8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80021da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	7c9b      	ldrb	r3, [r3, #18]
 80021e0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80021e2:	431a      	orrs	r2, r3
               macconf->Speed |
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80021e8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80021ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	7f1b      	ldrb	r3, [r3, #28]
 80021f4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80021f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	7f5b      	ldrb	r3, [r3, #29]
 80021fc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80021fe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	7f92      	ldrb	r2, [r2, #30]
 8002204:	2a00      	cmp	r2, #0
 8002206:	d102      	bne.n	800220e <ETH_SetMACConfig+0x92>
 8002208:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800220c:	e000      	b.n	8002210 <ETH_SetMACConfig+0x94>
 800220e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002210:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	7fdb      	ldrb	r3, [r3, #31]
 8002216:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002218:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002220:	2a00      	cmp	r2, #0
 8002222:	d102      	bne.n	800222a <ETH_SetMACConfig+0xae>
 8002224:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002228:	e000      	b.n	800222c <ETH_SetMACConfig+0xb0>
 800222a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800222c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002232:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800223a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800223c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002242:	4313      	orrs	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b56      	ldr	r3, [pc, #344]	@ (80023a8 <ETH_SetMACConfig+0x22c>)
 800224e:	4013      	ands	r3, r2
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	68f9      	ldr	r1, [r7, #12]
 8002256:	430b      	orrs	r3, r1
 8002258:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800225e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002266:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002268:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002270:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002272:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800227a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800227c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002284:	2a00      	cmp	r2, #0
 8002286:	d102      	bne.n	800228e <ETH_SetMACConfig+0x112>
 8002288:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800228c:	e000      	b.n	8002290 <ETH_SetMACConfig+0x114>
 800228e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002290:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	4b42      	ldr	r3, [pc, #264]	@ (80023ac <ETH_SetMACConfig+0x230>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	68f9      	ldr	r1, [r7, #12]
 80022aa:	430b      	orrs	r3, r1
 80022ac:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022b4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	4b3a      	ldr	r3, [pc, #232]	@ (80023b0 <ETH_SetMACConfig+0x234>)
 80022c6:	4013      	ands	r3, r2
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	68f9      	ldr	r1, [r7, #12]
 80022ce:	430b      	orrs	r3, r1
 80022d0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80022d8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80022de:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80022e6:	2a00      	cmp	r2, #0
 80022e8:	d101      	bne.n	80022ee <ETH_SetMACConfig+0x172>
 80022ea:	2280      	movs	r2, #128	@ 0x80
 80022ec:	e000      	b.n	80022f0 <ETH_SetMACConfig+0x174>
 80022ee:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80022f0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022f6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002302:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002306:	4013      	ands	r3, r2
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	68f9      	ldr	r1, [r7, #12]
 800230e:	430b      	orrs	r3, r1
 8002310:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002318:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002320:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002322:	4313      	orrs	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800232e:	f023 0103 	bic.w	r1, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	430a      	orrs	r2, r1
 800233a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002346:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002362:	2a00      	cmp	r2, #0
 8002364:	d101      	bne.n	800236a <ETH_SetMACConfig+0x1ee>
 8002366:	2240      	movs	r2, #64	@ 0x40
 8002368:	e000      	b.n	800236c <ETH_SetMACConfig+0x1f0>
 800236a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800236c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002374:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002376:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800237e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002380:	4313      	orrs	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800238c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	430a      	orrs	r2, r1
 8002398:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	00048083 	.word	0x00048083
 80023ac:	c0f88000 	.word	0xc0f88000
 80023b0:	fffffef0 	.word	0xfffffef0

080023b4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b38      	ldr	r3, [pc, #224]	@ (80024ac <ETH_SetDMAConfig+0xf8>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	6811      	ldr	r1, [r2, #0]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	430b      	orrs	r3, r1
 80023d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023da:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	791b      	ldrb	r3, [r3, #4]
 80023e0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80023e6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	7b1b      	ldrb	r3, [r3, #12]
 80023ec:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80023ee:	4313      	orrs	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	4b2c      	ldr	r3, [pc, #176]	@ (80024b0 <ETH_SetDMAConfig+0xfc>)
 80023fe:	4013      	ands	r3, r2
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	68f9      	ldr	r1, [r7, #12]
 8002406:	430b      	orrs	r3, r1
 8002408:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800240c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	7b5b      	ldrb	r3, [r3, #13]
 8002412:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002418:	4313      	orrs	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002424:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002428:	4b22      	ldr	r3, [pc, #136]	@ (80024b4 <ETH_SetDMAConfig+0x100>)
 800242a:	4013      	ands	r3, r2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	68f9      	ldr	r1, [r7, #12]
 8002432:	430b      	orrs	r3, r1
 8002434:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002438:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	7d1b      	ldrb	r3, [r3, #20]
 8002444:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002446:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	7f5b      	ldrb	r3, [r3, #29]
 800244c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800244e:	4313      	orrs	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800245a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800245e:	4b16      	ldr	r3, [pc, #88]	@ (80024b8 <ETH_SetDMAConfig+0x104>)
 8002460:	4013      	ands	r3, r2
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	68f9      	ldr	r1, [r7, #12]
 8002468:	430b      	orrs	r3, r1
 800246a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800246e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	7f1b      	ldrb	r3, [r3, #28]
 8002476:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800247c:	4313      	orrs	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002488:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800248c:	4b0b      	ldr	r3, [pc, #44]	@ (80024bc <ETH_SetDMAConfig+0x108>)
 800248e:	4013      	ands	r3, r2
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	68f9      	ldr	r1, [r7, #12]
 8002496:	430b      	orrs	r3, r1
 8002498:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800249c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	ffff87fd 	.word	0xffff87fd
 80024b0:	ffff2ffe 	.word	0xffff2ffe
 80024b4:	fffec000 	.word	0xfffec000
 80024b8:	ffc0efef 	.word	0xffc0efef
 80024bc:	7fc0ffff 	.word	0x7fc0ffff

080024c0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b0a4      	sub	sp, #144	@ 0x90
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80024c8:	2301      	movs	r3, #1
 80024ca:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80024ce:	2300      	movs	r3, #0
 80024d0:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80024de:	2301      	movs	r3, #1
 80024e0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80024e4:	2301      	movs	r3, #1
 80024e6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80024ea:	2301      	movs	r3, #1
 80024ec:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80024f6:	2301      	movs	r3, #1
 80024f8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80024fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002500:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002508:	2300      	movs	r3, #0
 800250a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800250c:	2300      	movs	r3, #0
 800250e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002512:	2300      	movs	r3, #0
 8002514:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002518:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800251c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800251e:	2300      	movs	r3, #0
 8002520:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002524:	2300      	movs	r3, #0
 8002526:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002528:	2301      	movs	r3, #1
 800252a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800252e:	2300      	movs	r3, #0
 8002530:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002534:	2300      	movs	r3, #0
 8002536:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800253a:	2300      	movs	r3, #0
 800253c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800253e:	2300      	movs	r3, #0
 8002540:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002542:	2300      	movs	r3, #0
 8002544:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002546:	2300      	movs	r3, #0
 8002548:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800254c:	2300      	movs	r3, #0
 800254e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002552:	2301      	movs	r3, #1
 8002554:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002558:	2320      	movs	r3, #32
 800255a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800255e:	2301      	movs	r3, #1
 8002560:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002564:	2300      	movs	r3, #0
 8002566:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800256a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800256e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002570:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002574:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002576:	2300      	movs	r3, #0
 8002578:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800257c:	2302      	movs	r3, #2
 800257e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002588:	2300      	movs	r3, #0
 800258a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800258e:	2300      	movs	r3, #0
 8002590:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002594:	2301      	movs	r3, #1
 8002596:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800259a:	2300      	movs	r3, #0
 800259c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800259e:	2301      	movs	r3, #1
 80025a0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80025a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025a8:	4619      	mov	r1, r3
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff fde6 	bl	800217c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80025b0:	2301      	movs	r3, #1
 80025b2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80025b4:	2301      	movs	r3, #1
 80025b6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80025bc:	2300      	movs	r3, #0
 80025be:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025ca:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80025ce:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80025d8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80025da:	2300      	movs	r3, #0
 80025dc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80025e0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80025e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025e6:	f107 0308 	add.w	r3, r7, #8
 80025ea:	4619      	mov	r1, r3
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff fee1 	bl	80023b4 <ETH_SetDMAConfig>
}
 80025f2:	bf00      	nop
 80025f4:	3790      	adds	r7, #144	@ 0x90
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b085      	sub	sp, #20
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	e01d      	b.n	8002644 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68d9      	ldr	r1, [r3, #12]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	4613      	mov	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	440b      	add	r3, r1
 8002618:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2200      	movs	r2, #0
 8002624:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2200      	movs	r2, #0
 800262a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2200      	movs	r2, #0
 8002630:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002632:	68b9      	ldr	r1, [r7, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	3206      	adds	r2, #6
 800263a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	3301      	adds	r3, #1
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b03      	cmp	r3, #3
 8002648:	d9de      	bls.n	8002608 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002658:	461a      	mov	r2, r3
 800265a:	2303      	movs	r3, #3
 800265c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800266c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800267c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	e023      	b.n	80026e2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6919      	ldr	r1, [r3, #16]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4613      	mov	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4413      	add	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	440b      	add	r3, r1
 80026aa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2200      	movs	r2, #0
 80026b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2200      	movs	r2, #0
 80026c2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2200      	movs	r2, #0
 80026c8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2200      	movs	r2, #0
 80026ce:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	3212      	adds	r2, #18
 80026d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	3301      	adds	r3, #1
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d9d8      	bls.n	800269a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800270e:	461a      	mov	r2, r3
 8002710:	2303      	movs	r3, #3
 8002712:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691a      	ldr	r2, [r3, #16]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002722:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002736:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	@ 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002756:	4b86      	ldr	r3, [pc, #536]	@ (8002970 <HAL_GPIO_Init+0x228>)
 8002758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800275a:	e18c      	b.n	8002a76 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	2101      	movs	r1, #1
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	fa01 f303 	lsl.w	r3, r1, r3
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 817e 	beq.w	8002a70 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d005      	beq.n	800278c <HAL_GPIO_Init+0x44>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d130      	bne.n	80027ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	2203      	movs	r2, #3
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027c2:	2201      	movs	r2, #1
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	091b      	lsrs	r3, r3, #4
 80027d8:	f003 0201 	and.w	r2, r3, #1
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d017      	beq.n	800282a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	2203      	movs	r2, #3
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d123      	bne.n	800287e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	08da      	lsrs	r2, r3, #3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3208      	adds	r2, #8
 800283e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	220f      	movs	r2, #15
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	08da      	lsrs	r2, r3, #3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3208      	adds	r2, #8
 8002878:	69b9      	ldr	r1, [r7, #24]
 800287a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	2203      	movs	r2, #3
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0203 	and.w	r2, r3, #3
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 80d8 	beq.w	8002a70 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002974 <HAL_GPIO_Init+0x22c>)
 80028c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80028c6:	4a2b      	ldr	r2, [pc, #172]	@ (8002974 <HAL_GPIO_Init+0x22c>)
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80028d0:	4b28      	ldr	r3, [pc, #160]	@ (8002974 <HAL_GPIO_Init+0x22c>)
 80028d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028de:	4a26      	ldr	r2, [pc, #152]	@ (8002978 <HAL_GPIO_Init+0x230>)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	089b      	lsrs	r3, r3, #2
 80028e4:	3302      	adds	r3, #2
 80028e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	220f      	movs	r2, #15
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a1d      	ldr	r2, [pc, #116]	@ (800297c <HAL_GPIO_Init+0x234>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d04a      	beq.n	80029a0 <HAL_GPIO_Init+0x258>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a1c      	ldr	r2, [pc, #112]	@ (8002980 <HAL_GPIO_Init+0x238>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d02b      	beq.n	800296a <HAL_GPIO_Init+0x222>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a1b      	ldr	r2, [pc, #108]	@ (8002984 <HAL_GPIO_Init+0x23c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d025      	beq.n	8002966 <HAL_GPIO_Init+0x21e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a1a      	ldr	r2, [pc, #104]	@ (8002988 <HAL_GPIO_Init+0x240>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d01f      	beq.n	8002962 <HAL_GPIO_Init+0x21a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a19      	ldr	r2, [pc, #100]	@ (800298c <HAL_GPIO_Init+0x244>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d019      	beq.n	800295e <HAL_GPIO_Init+0x216>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a18      	ldr	r2, [pc, #96]	@ (8002990 <HAL_GPIO_Init+0x248>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <HAL_GPIO_Init+0x212>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a17      	ldr	r2, [pc, #92]	@ (8002994 <HAL_GPIO_Init+0x24c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00d      	beq.n	8002956 <HAL_GPIO_Init+0x20e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a16      	ldr	r2, [pc, #88]	@ (8002998 <HAL_GPIO_Init+0x250>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d007      	beq.n	8002952 <HAL_GPIO_Init+0x20a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a15      	ldr	r2, [pc, #84]	@ (800299c <HAL_GPIO_Init+0x254>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d101      	bne.n	800294e <HAL_GPIO_Init+0x206>
 800294a:	2309      	movs	r3, #9
 800294c:	e029      	b.n	80029a2 <HAL_GPIO_Init+0x25a>
 800294e:	230a      	movs	r3, #10
 8002950:	e027      	b.n	80029a2 <HAL_GPIO_Init+0x25a>
 8002952:	2307      	movs	r3, #7
 8002954:	e025      	b.n	80029a2 <HAL_GPIO_Init+0x25a>
 8002956:	2306      	movs	r3, #6
 8002958:	e023      	b.n	80029a2 <HAL_GPIO_Init+0x25a>
 800295a:	2305      	movs	r3, #5
 800295c:	e021      	b.n	80029a2 <HAL_GPIO_Init+0x25a>
 800295e:	2304      	movs	r3, #4
 8002960:	e01f      	b.n	80029a2 <HAL_GPIO_Init+0x25a>
 8002962:	2303      	movs	r3, #3
 8002964:	e01d      	b.n	80029a2 <HAL_GPIO_Init+0x25a>
 8002966:	2302      	movs	r3, #2
 8002968:	e01b      	b.n	80029a2 <HAL_GPIO_Init+0x25a>
 800296a:	2301      	movs	r3, #1
 800296c:	e019      	b.n	80029a2 <HAL_GPIO_Init+0x25a>
 800296e:	bf00      	nop
 8002970:	58000080 	.word	0x58000080
 8002974:	58024400 	.word	0x58024400
 8002978:	58000400 	.word	0x58000400
 800297c:	58020000 	.word	0x58020000
 8002980:	58020400 	.word	0x58020400
 8002984:	58020800 	.word	0x58020800
 8002988:	58020c00 	.word	0x58020c00
 800298c:	58021000 	.word	0x58021000
 8002990:	58021400 	.word	0x58021400
 8002994:	58021800 	.word	0x58021800
 8002998:	58021c00 	.word	0x58021c00
 800299c:	58022400 	.word	0x58022400
 80029a0:	2300      	movs	r3, #0
 80029a2:	69fa      	ldr	r2, [r7, #28]
 80029a4:	f002 0203 	and.w	r2, r2, #3
 80029a8:	0092      	lsls	r2, r2, #2
 80029aa:	4093      	lsls	r3, r2
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029b2:	4938      	ldr	r1, [pc, #224]	@ (8002a94 <HAL_GPIO_Init+0x34c>)
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	3302      	adds	r3, #2
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80029e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002a14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4013      	ands	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	3301      	adds	r3, #1
 8002a74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f47f ae6b 	bne.w	800275c <HAL_GPIO_Init+0x14>
  }
}
 8002a86:	bf00      	nop
 8002a88:	bf00      	nop
 8002a8a:	3724      	adds	r7, #36	@ 0x24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	58000400 	.word	0x58000400

08002a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	807b      	strh	r3, [r7, #2]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aa8:	787b      	ldrb	r3, [r7, #1]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aae:	887a      	ldrh	r2, [r7, #2]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002ab4:	e003      	b.n	8002abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ab6:	887b      	ldrh	r3, [r7, #2]
 8002ab8:	041a      	lsls	r2, r3, #16
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	619a      	str	r2, [r3, #24]
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002ad4:	4b19      	ldr	r3, [pc, #100]	@ (8002b3c <HAL_PWREx_ConfigSupply+0x70>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d00a      	beq.n	8002af6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002ae0:	4b16      	ldr	r3, [pc, #88]	@ (8002b3c <HAL_PWREx_ConfigSupply+0x70>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d001      	beq.n	8002af2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e01f      	b.n	8002b32 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	e01d      	b.n	8002b32 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002af6:	4b11      	ldr	r3, [pc, #68]	@ (8002b3c <HAL_PWREx_ConfigSupply+0x70>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f023 0207 	bic.w	r2, r3, #7
 8002afe:	490f      	ldr	r1, [pc, #60]	@ (8002b3c <HAL_PWREx_ConfigSupply+0x70>)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b06:	f7fe fb33 	bl	8001170 <HAL_GetTick>
 8002b0a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b0c:	e009      	b.n	8002b22 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b0e:	f7fe fb2f 	bl	8001170 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b1c:	d901      	bls.n	8002b22 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e007      	b.n	8002b32 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b22:	4b06      	ldr	r3, [pc, #24]	@ (8002b3c <HAL_PWREx_ConfigSupply+0x70>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b2e:	d1ee      	bne.n	8002b0e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	58024800 	.word	0x58024800

08002b40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08c      	sub	sp, #48	@ 0x30
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e3c8      	b.n	80032e4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 8087 	beq.w	8002c6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b60:	4b88      	ldr	r3, [pc, #544]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b6a:	4b86      	ldr	r3, [pc, #536]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	d007      	beq.n	8002b86 <HAL_RCC_OscConfig+0x46>
 8002b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b78:	2b18      	cmp	r3, #24
 8002b7a:	d110      	bne.n	8002b9e <HAL_RCC_OscConfig+0x5e>
 8002b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d10b      	bne.n	8002b9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b86:	4b7f      	ldr	r3, [pc, #508]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d06c      	beq.n	8002c6c <HAL_RCC_OscConfig+0x12c>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d168      	bne.n	8002c6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e3a2      	b.n	80032e4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ba6:	d106      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x76>
 8002ba8:	4b76      	ldr	r3, [pc, #472]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a75      	ldr	r2, [pc, #468]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002bae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	e02e      	b.n	8002c14 <HAL_RCC_OscConfig+0xd4>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10c      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x98>
 8002bbe:	4b71      	ldr	r3, [pc, #452]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a70      	ldr	r2, [pc, #448]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002bc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	4b6e      	ldr	r3, [pc, #440]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a6d      	ldr	r2, [pc, #436]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002bd0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	e01d      	b.n	8002c14 <HAL_RCC_OscConfig+0xd4>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0xbc>
 8002be2:	4b68      	ldr	r3, [pc, #416]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a67      	ldr	r2, [pc, #412]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002be8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4b65      	ldr	r3, [pc, #404]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a64      	ldr	r2, [pc, #400]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCC_OscConfig+0xd4>
 8002bfc:	4b61      	ldr	r3, [pc, #388]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a60      	ldr	r2, [pc, #384]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002c02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	4b5e      	ldr	r3, [pc, #376]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a5d      	ldr	r2, [pc, #372]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002c0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d013      	beq.n	8002c44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe faa8 	bl	8001170 <HAL_GetTick>
 8002c20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fe faa4 	bl	8001170 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	@ 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e356      	b.n	80032e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c36:	4b53      	ldr	r3, [pc, #332]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0xe4>
 8002c42:	e014      	b.n	8002c6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe fa94 	bl	8001170 <HAL_GetTick>
 8002c48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7fe fa90 	bl	8001170 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	@ 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e342      	b.n	80032e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c5e:	4b49      	ldr	r3, [pc, #292]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x10c>
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 808c 	beq.w	8002d94 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c7c:	4b41      	ldr	r3, [pc, #260]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c84:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c86:	4b3f      	ldr	r3, [pc, #252]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d007      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x162>
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	2b18      	cmp	r3, #24
 8002c96:	d137      	bne.n	8002d08 <HAL_RCC_OscConfig+0x1c8>
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d132      	bne.n	8002d08 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ca2:	4b38      	ldr	r3, [pc, #224]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d005      	beq.n	8002cba <HAL_RCC_OscConfig+0x17a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e314      	b.n	80032e4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cba:	4b32      	ldr	r3, [pc, #200]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f023 0219 	bic.w	r2, r3, #25
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	492f      	ldr	r1, [pc, #188]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fa50 	bl	8001170 <HAL_GetTick>
 8002cd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd4:	f7fe fa4c 	bl	8001170 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e2fe      	b.n	80032e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ce6:	4b27      	ldr	r3, [pc, #156]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf2:	4b24      	ldr	r3, [pc, #144]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	061b      	lsls	r3, r3, #24
 8002d00:	4920      	ldr	r1, [pc, #128]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d06:	e045      	b.n	8002d94 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d026      	beq.n	8002d5e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d10:	4b1c      	ldr	r3, [pc, #112]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f023 0219 	bic.w	r2, r3, #25
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4919      	ldr	r1, [pc, #100]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d22:	f7fe fa25 	bl	8001170 <HAL_GetTick>
 8002d26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2a:	f7fe fa21 	bl	8001170 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e2d3      	b.n	80032e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d3c:	4b11      	ldr	r3, [pc, #68]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d48:	4b0e      	ldr	r3, [pc, #56]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	061b      	lsls	r3, r3, #24
 8002d56:	490b      	ldr	r1, [pc, #44]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]
 8002d5c:	e01a      	b.n	8002d94 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5e:	4b09      	ldr	r3, [pc, #36]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a08      	ldr	r2, [pc, #32]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6a:	f7fe fa01 	bl	8001170 <HAL_GetTick>
 8002d6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d70:	e00a      	b.n	8002d88 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d72:	f7fe f9fd 	bl	8001170 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d903      	bls.n	8002d88 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e2af      	b.n	80032e4 <HAL_RCC_OscConfig+0x7a4>
 8002d84:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d88:	4b96      	ldr	r3, [pc, #600]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1ee      	bne.n	8002d72 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0310 	and.w	r3, r3, #16
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d06a      	beq.n	8002e76 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da0:	4b90      	ldr	r3, [pc, #576]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002da8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002daa:	4b8e      	ldr	r3, [pc, #568]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dae:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d007      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x286>
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	2b18      	cmp	r3, #24
 8002dba:	d11b      	bne.n	8002df4 <HAL_RCC_OscConfig+0x2b4>
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d116      	bne.n	8002df4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dc6:	4b87      	ldr	r3, [pc, #540]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d005      	beq.n	8002dde <HAL_RCC_OscConfig+0x29e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	2b80      	cmp	r3, #128	@ 0x80
 8002dd8:	d001      	beq.n	8002dde <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e282      	b.n	80032e4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dde:	4b81      	ldr	r3, [pc, #516]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	061b      	lsls	r3, r3, #24
 8002dec:	497d      	ldr	r1, [pc, #500]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002df2:	e040      	b.n	8002e76 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d023      	beq.n	8002e44 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002dfc:	4b79      	ldr	r3, [pc, #484]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a78      	ldr	r2, [pc, #480]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe f9b2 	bl	8001170 <HAL_GetTick>
 8002e0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e10:	f7fe f9ae 	bl	8001170 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e260      	b.n	80032e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e22:	4b70      	ldr	r3, [pc, #448]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e2e:	4b6d      	ldr	r3, [pc, #436]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	061b      	lsls	r3, r3, #24
 8002e3c:	4969      	ldr	r1, [pc, #420]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60cb      	str	r3, [r1, #12]
 8002e42:	e018      	b.n	8002e76 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e44:	4b67      	ldr	r3, [pc, #412]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a66      	ldr	r2, [pc, #408]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002e4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7fe f98e 	bl	8001170 <HAL_GetTick>
 8002e54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e58:	f7fe f98a 	bl	8001170 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e23c      	b.n	80032e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e6a:	4b5e      	ldr	r3, [pc, #376]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d036      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d019      	beq.n	8002ebe <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e8a:	4b56      	ldr	r3, [pc, #344]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e8e:	4a55      	ldr	r2, [pc, #340]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e96:	f7fe f96b 	bl	8001170 <HAL_GetTick>
 8002e9a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e9e:	f7fe f967 	bl	8001170 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e219      	b.n	80032e4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002eb0:	4b4c      	ldr	r3, [pc, #304]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002eb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x35e>
 8002ebc:	e018      	b.n	8002ef0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ebe:	4b49      	ldr	r3, [pc, #292]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ec2:	4a48      	ldr	r2, [pc, #288]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002ec4:	f023 0301 	bic.w	r3, r3, #1
 8002ec8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eca:	f7fe f951 	bl	8001170 <HAL_GetTick>
 8002ece:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed2:	f7fe f94d 	bl	8001170 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e1ff      	b.n	80032e4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ee4:	4b3f      	ldr	r3, [pc, #252]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002ee6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1f0      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d036      	beq.n	8002f6a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d019      	beq.n	8002f38 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f04:	4b37      	ldr	r3, [pc, #220]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a36      	ldr	r2, [pc, #216]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002f0a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f10:	f7fe f92e 	bl	8001170 <HAL_GetTick>
 8002f14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f18:	f7fe f92a 	bl	8001170 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e1dc      	b.n	80032e4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f2a:	4b2e      	ldr	r3, [pc, #184]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCC_OscConfig+0x3d8>
 8002f36:	e018      	b.n	8002f6a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f38:	4b2a      	ldr	r3, [pc, #168]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a29      	ldr	r2, [pc, #164]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002f3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f44:	f7fe f914 	bl	8001170 <HAL_GetTick>
 8002f48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f4c:	f7fe f910 	bl	8001170 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e1c2      	b.n	80032e4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f5e:	4b21      	ldr	r3, [pc, #132]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f0      	bne.n	8002f4c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0304 	and.w	r3, r3, #4
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 8086 	beq.w	8003084 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f78:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe8 <HAL_RCC_OscConfig+0x4a8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a1a      	ldr	r2, [pc, #104]	@ (8002fe8 <HAL_RCC_OscConfig+0x4a8>)
 8002f7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f84:	f7fe f8f4 	bl	8001170 <HAL_GetTick>
 8002f88:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f8c:	f7fe f8f0 	bl	8001170 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	@ 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e1a2      	b.n	80032e4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f9e:	4b12      	ldr	r3, [pc, #72]	@ (8002fe8 <HAL_RCC_OscConfig+0x4a8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d106      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x480>
 8002fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb6:	4a0b      	ldr	r2, [pc, #44]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fbe:	e032      	b.n	8003026 <HAL_RCC_OscConfig+0x4e6>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d111      	bne.n	8002fec <HAL_RCC_OscConfig+0x4ac>
 8002fc8:	4b06      	ldr	r3, [pc, #24]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fcc:	4a05      	ldr	r2, [pc, #20]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd4:	4b03      	ldr	r3, [pc, #12]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd8:	4a02      	ldr	r2, [pc, #8]	@ (8002fe4 <HAL_RCC_OscConfig+0x4a4>)
 8002fda:	f023 0304 	bic.w	r3, r3, #4
 8002fde:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe0:	e021      	b.n	8003026 <HAL_RCC_OscConfig+0x4e6>
 8002fe2:	bf00      	nop
 8002fe4:	58024400 	.word	0x58024400
 8002fe8:	58024800 	.word	0x58024800
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b05      	cmp	r3, #5
 8002ff2:	d10c      	bne.n	800300e <HAL_RCC_OscConfig+0x4ce>
 8002ff4:	4b83      	ldr	r3, [pc, #524]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff8:	4a82      	ldr	r2, [pc, #520]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 8002ffa:	f043 0304 	orr.w	r3, r3, #4
 8002ffe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003000:	4b80      	ldr	r3, [pc, #512]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003004:	4a7f      	ldr	r2, [pc, #508]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	6713      	str	r3, [r2, #112]	@ 0x70
 800300c:	e00b      	b.n	8003026 <HAL_RCC_OscConfig+0x4e6>
 800300e:	4b7d      	ldr	r3, [pc, #500]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003012:	4a7c      	ldr	r2, [pc, #496]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 8003014:	f023 0301 	bic.w	r3, r3, #1
 8003018:	6713      	str	r3, [r2, #112]	@ 0x70
 800301a:	4b7a      	ldr	r3, [pc, #488]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301e:	4a79      	ldr	r2, [pc, #484]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 8003020:	f023 0304 	bic.w	r3, r3, #4
 8003024:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d015      	beq.n	800305a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302e:	f7fe f89f 	bl	8001170 <HAL_GetTick>
 8003032:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003034:	e00a      	b.n	800304c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003036:	f7fe f89b 	bl	8001170 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003044:	4293      	cmp	r3, r2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e14b      	b.n	80032e4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800304c:	4b6d      	ldr	r3, [pc, #436]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0ee      	beq.n	8003036 <HAL_RCC_OscConfig+0x4f6>
 8003058:	e014      	b.n	8003084 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305a:	f7fe f889 	bl	8001170 <HAL_GetTick>
 800305e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003060:	e00a      	b.n	8003078 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003062:	f7fe f885 	bl	8001170 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003070:	4293      	cmp	r3, r2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e135      	b.n	80032e4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003078:	4b62      	ldr	r3, [pc, #392]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1ee      	bne.n	8003062 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 812a 	beq.w	80032e2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800308e:	4b5d      	ldr	r3, [pc, #372]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003096:	2b18      	cmp	r3, #24
 8003098:	f000 80ba 	beq.w	8003210 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	f040 8095 	bne.w	80031d0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a6:	4b57      	ldr	r3, [pc, #348]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a56      	ldr	r2, [pc, #344]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 80030ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b2:	f7fe f85d 	bl	8001170 <HAL_GetTick>
 80030b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ba:	f7fe f859 	bl	8001170 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e10b      	b.n	80032e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f0      	bne.n	80030ba <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030d8:	4b4a      	ldr	r3, [pc, #296]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 80030da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030dc:	4b4a      	ldr	r3, [pc, #296]	@ (8003208 <HAL_RCC_OscConfig+0x6c8>)
 80030de:	4013      	ands	r3, r2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80030e8:	0112      	lsls	r2, r2, #4
 80030ea:	430a      	orrs	r2, r1
 80030ec:	4945      	ldr	r1, [pc, #276]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	628b      	str	r3, [r1, #40]	@ 0x28
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f6:	3b01      	subs	r3, #1
 80030f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003100:	3b01      	subs	r3, #1
 8003102:	025b      	lsls	r3, r3, #9
 8003104:	b29b      	uxth	r3, r3
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310c:	3b01      	subs	r3, #1
 800310e:	041b      	lsls	r3, r3, #16
 8003110:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800311a:	3b01      	subs	r3, #1
 800311c:	061b      	lsls	r3, r3, #24
 800311e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003122:	4938      	ldr	r1, [pc, #224]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 8003124:	4313      	orrs	r3, r2
 8003126:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003128:	4b36      	ldr	r3, [pc, #216]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 800312a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800312c:	4a35      	ldr	r2, [pc, #212]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 800312e:	f023 0301 	bic.w	r3, r3, #1
 8003132:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003134:	4b33      	ldr	r3, [pc, #204]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 8003136:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003138:	4b34      	ldr	r3, [pc, #208]	@ (800320c <HAL_RCC_OscConfig+0x6cc>)
 800313a:	4013      	ands	r3, r2
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003140:	00d2      	lsls	r2, r2, #3
 8003142:	4930      	ldr	r1, [pc, #192]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 8003144:	4313      	orrs	r3, r2
 8003146:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003148:	4b2e      	ldr	r3, [pc, #184]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 800314a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314c:	f023 020c 	bic.w	r2, r3, #12
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003154:	492b      	ldr	r1, [pc, #172]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 8003156:	4313      	orrs	r3, r2
 8003158:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800315a:	4b2a      	ldr	r3, [pc, #168]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 800315c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315e:	f023 0202 	bic.w	r2, r3, #2
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003166:	4927      	ldr	r1, [pc, #156]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 8003168:	4313      	orrs	r3, r2
 800316a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800316c:	4b25      	ldr	r3, [pc, #148]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 800316e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003170:	4a24      	ldr	r2, [pc, #144]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 8003172:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003176:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003178:	4b22      	ldr	r3, [pc, #136]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 800317a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317c:	4a21      	ldr	r2, [pc, #132]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 800317e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003182:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003184:	4b1f      	ldr	r3, [pc, #124]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 8003186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003188:	4a1e      	ldr	r2, [pc, #120]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 800318a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800318e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003190:	4b1c      	ldr	r3, [pc, #112]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 8003192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003194:	4a1b      	ldr	r2, [pc, #108]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800319c:	4b19      	ldr	r3, [pc, #100]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a18      	ldr	r2, [pc, #96]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 80031a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fd ffe2 	bl	8001170 <HAL_GetTick>
 80031ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fd ffde 	bl	8001170 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e090      	b.n	80032e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031c2:	4b10      	ldr	r3, [pc, #64]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0x670>
 80031ce:	e088      	b.n	80032e2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 80031d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fd ffc8 	bl	8001170 <HAL_GetTick>
 80031e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e4:	f7fd ffc4 	bl	8001170 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e076      	b.n	80032e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031f6:	4b03      	ldr	r3, [pc, #12]	@ (8003204 <HAL_RCC_OscConfig+0x6c4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x6a4>
 8003202:	e06e      	b.n	80032e2 <HAL_RCC_OscConfig+0x7a2>
 8003204:	58024400 	.word	0x58024400
 8003208:	fffffc0c 	.word	0xfffffc0c
 800320c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003210:	4b36      	ldr	r3, [pc, #216]	@ (80032ec <HAL_RCC_OscConfig+0x7ac>)
 8003212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003214:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003216:	4b35      	ldr	r3, [pc, #212]	@ (80032ec <HAL_RCC_OscConfig+0x7ac>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	2b01      	cmp	r3, #1
 8003222:	d031      	beq.n	8003288 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f003 0203 	and.w	r2, r3, #3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800322e:	429a      	cmp	r2, r3
 8003230:	d12a      	bne.n	8003288 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	091b      	lsrs	r3, r3, #4
 8003236:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323e:	429a      	cmp	r2, r3
 8003240:	d122      	bne.n	8003288 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800324e:	429a      	cmp	r2, r3
 8003250:	d11a      	bne.n	8003288 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	0a5b      	lsrs	r3, r3, #9
 8003256:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800325e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003260:	429a      	cmp	r2, r3
 8003262:	d111      	bne.n	8003288 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	0c1b      	lsrs	r3, r3, #16
 8003268:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003270:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003272:	429a      	cmp	r2, r3
 8003274:	d108      	bne.n	8003288 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	0e1b      	lsrs	r3, r3, #24
 800327a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003282:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e02b      	b.n	80032e4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800328c:	4b17      	ldr	r3, [pc, #92]	@ (80032ec <HAL_RCC_OscConfig+0x7ac>)
 800328e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003290:	08db      	lsrs	r3, r3, #3
 8003292:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003296:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d01f      	beq.n	80032e2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80032a2:	4b12      	ldr	r3, [pc, #72]	@ (80032ec <HAL_RCC_OscConfig+0x7ac>)
 80032a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a6:	4a11      	ldr	r2, [pc, #68]	@ (80032ec <HAL_RCC_OscConfig+0x7ac>)
 80032a8:	f023 0301 	bic.w	r3, r3, #1
 80032ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032ae:	f7fd ff5f 	bl	8001170 <HAL_GetTick>
 80032b2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80032b4:	bf00      	nop
 80032b6:	f7fd ff5b 	bl	8001170 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032be:	4293      	cmp	r3, r2
 80032c0:	d0f9      	beq.n	80032b6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80032c2:	4b0a      	ldr	r3, [pc, #40]	@ (80032ec <HAL_RCC_OscConfig+0x7ac>)
 80032c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032c6:	4b0a      	ldr	r3, [pc, #40]	@ (80032f0 <HAL_RCC_OscConfig+0x7b0>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80032ce:	00d2      	lsls	r2, r2, #3
 80032d0:	4906      	ldr	r1, [pc, #24]	@ (80032ec <HAL_RCC_OscConfig+0x7ac>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80032d6:	4b05      	ldr	r3, [pc, #20]	@ (80032ec <HAL_RCC_OscConfig+0x7ac>)
 80032d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032da:	4a04      	ldr	r2, [pc, #16]	@ (80032ec <HAL_RCC_OscConfig+0x7ac>)
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3730      	adds	r7, #48	@ 0x30
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	58024400 	.word	0x58024400
 80032f0:	ffff0007 	.word	0xffff0007

080032f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e19c      	b.n	8003642 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003308:	4b8a      	ldr	r3, [pc, #552]	@ (8003534 <HAL_RCC_ClockConfig+0x240>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d910      	bls.n	8003338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003316:	4b87      	ldr	r3, [pc, #540]	@ (8003534 <HAL_RCC_ClockConfig+0x240>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f023 020f 	bic.w	r2, r3, #15
 800331e:	4985      	ldr	r1, [pc, #532]	@ (8003534 <HAL_RCC_ClockConfig+0x240>)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003326:	4b83      	ldr	r3, [pc, #524]	@ (8003534 <HAL_RCC_ClockConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d001      	beq.n	8003338 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e184      	b.n	8003642 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d010      	beq.n	8003366 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	4b7b      	ldr	r3, [pc, #492]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003350:	429a      	cmp	r2, r3
 8003352:	d908      	bls.n	8003366 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003354:	4b78      	ldr	r3, [pc, #480]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	4975      	ldr	r1, [pc, #468]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 8003362:	4313      	orrs	r3, r2
 8003364:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d010      	beq.n	8003394 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695a      	ldr	r2, [r3, #20]
 8003376:	4b70      	ldr	r3, [pc, #448]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800337e:	429a      	cmp	r2, r3
 8003380:	d908      	bls.n	8003394 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003382:	4b6d      	ldr	r3, [pc, #436]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	496a      	ldr	r1, [pc, #424]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 8003390:	4313      	orrs	r3, r2
 8003392:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b00      	cmp	r3, #0
 800339e:	d010      	beq.n	80033c2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699a      	ldr	r2, [r3, #24]
 80033a4:	4b64      	ldr	r3, [pc, #400]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d908      	bls.n	80033c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033b0:	4b61      	ldr	r3, [pc, #388]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	495e      	ldr	r1, [pc, #376]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0320 	and.w	r3, r3, #32
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d010      	beq.n	80033f0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69da      	ldr	r2, [r3, #28]
 80033d2:	4b59      	ldr	r3, [pc, #356]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033da:	429a      	cmp	r2, r3
 80033dc:	d908      	bls.n	80033f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80033de:	4b56      	ldr	r3, [pc, #344]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	4953      	ldr	r1, [pc, #332]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d010      	beq.n	800341e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	4b4d      	ldr	r3, [pc, #308]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	429a      	cmp	r2, r3
 800340a:	d908      	bls.n	800341e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800340c:	4b4a      	ldr	r3, [pc, #296]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f023 020f 	bic.w	r2, r3, #15
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	4947      	ldr	r1, [pc, #284]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 800341a:	4313      	orrs	r3, r2
 800341c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d055      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800342a:	4b43      	ldr	r3, [pc, #268]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	4940      	ldr	r1, [pc, #256]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 8003438:	4313      	orrs	r3, r2
 800343a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b02      	cmp	r3, #2
 8003442:	d107      	bne.n	8003454 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003444:	4b3c      	ldr	r3, [pc, #240]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d121      	bne.n	8003494 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0f6      	b.n	8003642 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b03      	cmp	r3, #3
 800345a:	d107      	bne.n	800346c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800345c:	4b36      	ldr	r3, [pc, #216]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d115      	bne.n	8003494 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e0ea      	b.n	8003642 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d107      	bne.n	8003484 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003474:	4b30      	ldr	r3, [pc, #192]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d109      	bne.n	8003494 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e0de      	b.n	8003642 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003484:	4b2c      	ldr	r3, [pc, #176]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e0d6      	b.n	8003642 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003494:	4b28      	ldr	r3, [pc, #160]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f023 0207 	bic.w	r2, r3, #7
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4925      	ldr	r1, [pc, #148]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a6:	f7fd fe63 	bl	8001170 <HAL_GetTick>
 80034aa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ac:	e00a      	b.n	80034c4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ae:	f7fd fe5f 	bl	8001170 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034bc:	4293      	cmp	r3, r2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e0be      	b.n	8003642 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d1eb      	bne.n	80034ae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d010      	beq.n	8003504 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	4b14      	ldr	r3, [pc, #80]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d208      	bcs.n	8003504 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f2:	4b11      	ldr	r3, [pc, #68]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f023 020f 	bic.w	r2, r3, #15
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	490e      	ldr	r1, [pc, #56]	@ (8003538 <HAL_RCC_ClockConfig+0x244>)
 8003500:	4313      	orrs	r3, r2
 8003502:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003504:	4b0b      	ldr	r3, [pc, #44]	@ (8003534 <HAL_RCC_ClockConfig+0x240>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d214      	bcs.n	800353c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003512:	4b08      	ldr	r3, [pc, #32]	@ (8003534 <HAL_RCC_ClockConfig+0x240>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f023 020f 	bic.w	r2, r3, #15
 800351a:	4906      	ldr	r1, [pc, #24]	@ (8003534 <HAL_RCC_ClockConfig+0x240>)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	4313      	orrs	r3, r2
 8003520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003522:	4b04      	ldr	r3, [pc, #16]	@ (8003534 <HAL_RCC_ClockConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d005      	beq.n	800353c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e086      	b.n	8003642 <HAL_RCC_ClockConfig+0x34e>
 8003534:	52002000 	.word	0x52002000
 8003538:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d010      	beq.n	800356a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	4b3f      	ldr	r3, [pc, #252]	@ (800364c <HAL_RCC_ClockConfig+0x358>)
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003554:	429a      	cmp	r2, r3
 8003556:	d208      	bcs.n	800356a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003558:	4b3c      	ldr	r3, [pc, #240]	@ (800364c <HAL_RCC_ClockConfig+0x358>)
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	4939      	ldr	r1, [pc, #228]	@ (800364c <HAL_RCC_ClockConfig+0x358>)
 8003566:	4313      	orrs	r3, r2
 8003568:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d010      	beq.n	8003598 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695a      	ldr	r2, [r3, #20]
 800357a:	4b34      	ldr	r3, [pc, #208]	@ (800364c <HAL_RCC_ClockConfig+0x358>)
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003582:	429a      	cmp	r2, r3
 8003584:	d208      	bcs.n	8003598 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003586:	4b31      	ldr	r3, [pc, #196]	@ (800364c <HAL_RCC_ClockConfig+0x358>)
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	492e      	ldr	r1, [pc, #184]	@ (800364c <HAL_RCC_ClockConfig+0x358>)
 8003594:	4313      	orrs	r3, r2
 8003596:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0310 	and.w	r3, r3, #16
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d010      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699a      	ldr	r2, [r3, #24]
 80035a8:	4b28      	ldr	r3, [pc, #160]	@ (800364c <HAL_RCC_ClockConfig+0x358>)
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d208      	bcs.n	80035c6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035b4:	4b25      	ldr	r3, [pc, #148]	@ (800364c <HAL_RCC_ClockConfig+0x358>)
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	4922      	ldr	r1, [pc, #136]	@ (800364c <HAL_RCC_ClockConfig+0x358>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0320 	and.w	r3, r3, #32
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d010      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69da      	ldr	r2, [r3, #28]
 80035d6:	4b1d      	ldr	r3, [pc, #116]	@ (800364c <HAL_RCC_ClockConfig+0x358>)
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035de:	429a      	cmp	r2, r3
 80035e0:	d208      	bcs.n	80035f4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035e2:	4b1a      	ldr	r3, [pc, #104]	@ (800364c <HAL_RCC_ClockConfig+0x358>)
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	4917      	ldr	r1, [pc, #92]	@ (800364c <HAL_RCC_ClockConfig+0x358>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035f4:	f000 f834 	bl	8003660 <HAL_RCC_GetSysClockFreq>
 80035f8:	4602      	mov	r2, r0
 80035fa:	4b14      	ldr	r3, [pc, #80]	@ (800364c <HAL_RCC_ClockConfig+0x358>)
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	0a1b      	lsrs	r3, r3, #8
 8003600:	f003 030f 	and.w	r3, r3, #15
 8003604:	4912      	ldr	r1, [pc, #72]	@ (8003650 <HAL_RCC_ClockConfig+0x35c>)
 8003606:	5ccb      	ldrb	r3, [r1, r3]
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
 8003610:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003612:	4b0e      	ldr	r3, [pc, #56]	@ (800364c <HAL_RCC_ClockConfig+0x358>)
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	4a0d      	ldr	r2, [pc, #52]	@ (8003650 <HAL_RCC_ClockConfig+0x35c>)
 800361c:	5cd3      	ldrb	r3, [r2, r3]
 800361e:	f003 031f 	and.w	r3, r3, #31
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	fa22 f303 	lsr.w	r3, r2, r3
 8003628:	4a0a      	ldr	r2, [pc, #40]	@ (8003654 <HAL_RCC_ClockConfig+0x360>)
 800362a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800362c:	4a0a      	ldr	r2, [pc, #40]	@ (8003658 <HAL_RCC_ClockConfig+0x364>)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003632:	4b0a      	ldr	r3, [pc, #40]	@ (800365c <HAL_RCC_ClockConfig+0x368>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f7fd fd50 	bl	80010dc <HAL_InitTick>
 800363c:	4603      	mov	r3, r0
 800363e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003640:	7bfb      	ldrb	r3, [r7, #15]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	58024400 	.word	0x58024400
 8003650:	0800734c 	.word	0x0800734c
 8003654:	24000014 	.word	0x24000014
 8003658:	24000010 	.word	0x24000010
 800365c:	24000018 	.word	0x24000018

08003660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003660:	b480      	push	{r7}
 8003662:	b089      	sub	sp, #36	@ 0x24
 8003664:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003666:	4bb3      	ldr	r3, [pc, #716]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800366e:	2b18      	cmp	r3, #24
 8003670:	f200 8155 	bhi.w	800391e <HAL_RCC_GetSysClockFreq+0x2be>
 8003674:	a201      	add	r2, pc, #4	@ (adr r2, 800367c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367a:	bf00      	nop
 800367c:	080036e1 	.word	0x080036e1
 8003680:	0800391f 	.word	0x0800391f
 8003684:	0800391f 	.word	0x0800391f
 8003688:	0800391f 	.word	0x0800391f
 800368c:	0800391f 	.word	0x0800391f
 8003690:	0800391f 	.word	0x0800391f
 8003694:	0800391f 	.word	0x0800391f
 8003698:	0800391f 	.word	0x0800391f
 800369c:	08003707 	.word	0x08003707
 80036a0:	0800391f 	.word	0x0800391f
 80036a4:	0800391f 	.word	0x0800391f
 80036a8:	0800391f 	.word	0x0800391f
 80036ac:	0800391f 	.word	0x0800391f
 80036b0:	0800391f 	.word	0x0800391f
 80036b4:	0800391f 	.word	0x0800391f
 80036b8:	0800391f 	.word	0x0800391f
 80036bc:	0800370d 	.word	0x0800370d
 80036c0:	0800391f 	.word	0x0800391f
 80036c4:	0800391f 	.word	0x0800391f
 80036c8:	0800391f 	.word	0x0800391f
 80036cc:	0800391f 	.word	0x0800391f
 80036d0:	0800391f 	.word	0x0800391f
 80036d4:	0800391f 	.word	0x0800391f
 80036d8:	0800391f 	.word	0x0800391f
 80036dc:	08003713 	.word	0x08003713
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036e0:	4b94      	ldr	r3, [pc, #592]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0320 	and.w	r3, r3, #32
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d009      	beq.n	8003700 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036ec:	4b91      	ldr	r3, [pc, #580]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	08db      	lsrs	r3, r3, #3
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	4a90      	ldr	r2, [pc, #576]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036f8:	fa22 f303 	lsr.w	r3, r2, r3
 80036fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80036fe:	e111      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003700:	4b8d      	ldr	r3, [pc, #564]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003702:	61bb      	str	r3, [r7, #24]
      break;
 8003704:	e10e      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003706:	4b8d      	ldr	r3, [pc, #564]	@ (800393c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003708:	61bb      	str	r3, [r7, #24]
      break;
 800370a:	e10b      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800370c:	4b8c      	ldr	r3, [pc, #560]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800370e:	61bb      	str	r3, [r7, #24]
      break;
 8003710:	e108      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003712:	4b88      	ldr	r3, [pc, #544]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800371c:	4b85      	ldr	r3, [pc, #532]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800371e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003726:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003728:	4b82      	ldr	r3, [pc, #520]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800372a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003732:	4b80      	ldr	r3, [pc, #512]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003736:	08db      	lsrs	r3, r3, #3
 8003738:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	fb02 f303 	mul.w	r3, r2, r3
 8003742:	ee07 3a90 	vmov	s15, r3
 8003746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800374a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80e1 	beq.w	8003918 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b02      	cmp	r3, #2
 800375a:	f000 8083 	beq.w	8003864 <HAL_RCC_GetSysClockFreq+0x204>
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2b02      	cmp	r3, #2
 8003762:	f200 80a1 	bhi.w	80038a8 <HAL_RCC_GetSysClockFreq+0x248>
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_RCC_GetSysClockFreq+0x114>
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d056      	beq.n	8003820 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003772:	e099      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003774:	4b6f      	ldr	r3, [pc, #444]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b00      	cmp	r3, #0
 800377e:	d02d      	beq.n	80037dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003780:	4b6c      	ldr	r3, [pc, #432]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	08db      	lsrs	r3, r3, #3
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	4a6b      	ldr	r2, [pc, #428]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
 8003790:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	ee07 3a90 	vmov	s15, r3
 8003798:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	ee07 3a90 	vmov	s15, r3
 80037a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037aa:	4b62      	ldr	r3, [pc, #392]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b2:	ee07 3a90 	vmov	s15, r3
 80037b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80037be:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003944 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80037da:	e087      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	ee07 3a90 	vmov	s15, r3
 80037e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037e6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003948 <HAL_RCC_GetSysClockFreq+0x2e8>
 80037ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ee:	4b51      	ldr	r3, [pc, #324]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f6:	ee07 3a90 	vmov	s15, r3
 80037fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003802:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003944 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800380a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800380e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800381a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800381e:	e065      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	ee07 3a90 	vmov	s15, r3
 8003826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800382a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800394c <HAL_RCC_GetSysClockFreq+0x2ec>
 800382e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003832:	4b40      	ldr	r3, [pc, #256]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800383a:	ee07 3a90 	vmov	s15, r3
 800383e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003842:	ed97 6a02 	vldr	s12, [r7, #8]
 8003846:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003944 <HAL_RCC_GetSysClockFreq+0x2e4>
 800384a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800384e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003852:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800385a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800385e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003862:	e043      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	ee07 3a90 	vmov	s15, r3
 800386a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800386e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003950 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003876:	4b2f      	ldr	r3, [pc, #188]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800387e:	ee07 3a90 	vmov	s15, r3
 8003882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003886:	ed97 6a02 	vldr	s12, [r7, #8]
 800388a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003944 <HAL_RCC_GetSysClockFreq+0x2e4>
 800388e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003896:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800389a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800389e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038a6:	e021      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	ee07 3a90 	vmov	s15, r3
 80038ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800394c <HAL_RCC_GetSysClockFreq+0x2ec>
 80038b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c2:	ee07 3a90 	vmov	s15, r3
 80038c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80038ce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003944 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80038ec:	4b11      	ldr	r3, [pc, #68]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f0:	0a5b      	lsrs	r3, r3, #9
 80038f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038f6:	3301      	adds	r3, #1
 80038f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	ee07 3a90 	vmov	s15, r3
 8003900:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003904:	edd7 6a07 	vldr	s13, [r7, #28]
 8003908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800390c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003910:	ee17 3a90 	vmov	r3, s15
 8003914:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003916:	e005      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	61bb      	str	r3, [r7, #24]
      break;
 800391c:	e002      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800391e:	4b07      	ldr	r3, [pc, #28]	@ (800393c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003920:	61bb      	str	r3, [r7, #24]
      break;
 8003922:	bf00      	nop
  }

  return sysclockfreq;
 8003924:	69bb      	ldr	r3, [r7, #24]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3724      	adds	r7, #36	@ 0x24
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	58024400 	.word	0x58024400
 8003938:	03d09000 	.word	0x03d09000
 800393c:	003d0900 	.word	0x003d0900
 8003940:	007a1200 	.word	0x007a1200
 8003944:	46000000 	.word	0x46000000
 8003948:	4c742400 	.word	0x4c742400
 800394c:	4a742400 	.word	0x4a742400
 8003950:	4af42400 	.word	0x4af42400

08003954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800395a:	f7ff fe81 	bl	8003660 <HAL_RCC_GetSysClockFreq>
 800395e:	4602      	mov	r2, r0
 8003960:	4b10      	ldr	r3, [pc, #64]	@ (80039a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	0a1b      	lsrs	r3, r3, #8
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	490f      	ldr	r1, [pc, #60]	@ (80039a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800396c:	5ccb      	ldrb	r3, [r1, r3]
 800396e:	f003 031f 	and.w	r3, r3, #31
 8003972:	fa22 f303 	lsr.w	r3, r2, r3
 8003976:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003978:	4b0a      	ldr	r3, [pc, #40]	@ (80039a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	f003 030f 	and.w	r3, r3, #15
 8003980:	4a09      	ldr	r2, [pc, #36]	@ (80039a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003982:	5cd3      	ldrb	r3, [r2, r3]
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	fa22 f303 	lsr.w	r3, r2, r3
 800398e:	4a07      	ldr	r2, [pc, #28]	@ (80039ac <HAL_RCC_GetHCLKFreq+0x58>)
 8003990:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003992:	4a07      	ldr	r2, [pc, #28]	@ (80039b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003998:	4b04      	ldr	r3, [pc, #16]	@ (80039ac <HAL_RCC_GetHCLKFreq+0x58>)
 800399a:	681b      	ldr	r3, [r3, #0]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	58024400 	.word	0x58024400
 80039a8:	0800734c 	.word	0x0800734c
 80039ac:	24000014 	.word	0x24000014
 80039b0:	24000010 	.word	0x24000010

080039b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80039b8:	f7ff ffcc 	bl	8003954 <HAL_RCC_GetHCLKFreq>
 80039bc:	4602      	mov	r2, r0
 80039be:	4b06      	ldr	r3, [pc, #24]	@ (80039d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	091b      	lsrs	r3, r3, #4
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	4904      	ldr	r1, [pc, #16]	@ (80039dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80039ca:	5ccb      	ldrb	r3, [r1, r3]
 80039cc:	f003 031f 	and.w	r3, r3, #31
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	58024400 	.word	0x58024400
 80039dc:	0800734c 	.word	0x0800734c

080039e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80039e4:	f7ff ffb6 	bl	8003954 <HAL_RCC_GetHCLKFreq>
 80039e8:	4602      	mov	r2, r0
 80039ea:	4b06      	ldr	r3, [pc, #24]	@ (8003a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	0a1b      	lsrs	r3, r3, #8
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	4904      	ldr	r1, [pc, #16]	@ (8003a08 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039f6:	5ccb      	ldrb	r3, [r1, r3]
 80039f8:	f003 031f 	and.w	r3, r3, #31
 80039fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	58024400 	.word	0x58024400
 8003a08:	0800734c 	.word	0x0800734c

08003a0c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a10:	b0c6      	sub	sp, #280	@ 0x118
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003a30:	2500      	movs	r5, #0
 8003a32:	ea54 0305 	orrs.w	r3, r4, r5
 8003a36:	d049      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a3e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a42:	d02f      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003a44:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a48:	d828      	bhi.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a4e:	d01a      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a54:	d822      	bhi.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003a5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a5e:	d007      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a60:	e01c      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a62:	4bab      	ldr	r3, [pc, #684]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a66:	4aaa      	ldr	r2, [pc, #680]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a6e:	e01a      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a74:	3308      	adds	r3, #8
 8003a76:	2102      	movs	r1, #2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f001 fc25 	bl	80052c8 <RCCEx_PLL2_Config>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a84:	e00f      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a8a:	3328      	adds	r3, #40	@ 0x28
 8003a8c:	2102      	movs	r1, #2
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 fccc 	bl	800542c <RCCEx_PLL3_Config>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a9a:	e004      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10a      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003aae:	4b98      	ldr	r3, [pc, #608]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ab2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003abc:	4a94      	ldr	r2, [pc, #592]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003abe:	430b      	orrs	r3, r1
 8003ac0:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ac2:	e003      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ac8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003ad8:	f04f 0900 	mov.w	r9, #0
 8003adc:	ea58 0309 	orrs.w	r3, r8, r9
 8003ae0:	d047      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d82a      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003aec:	a201      	add	r2, pc, #4	@ (adr r2, 8003af4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af2:	bf00      	nop
 8003af4:	08003b09 	.word	0x08003b09
 8003af8:	08003b17 	.word	0x08003b17
 8003afc:	08003b2d 	.word	0x08003b2d
 8003b00:	08003b4b 	.word	0x08003b4b
 8003b04:	08003b4b 	.word	0x08003b4b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b08:	4b81      	ldr	r3, [pc, #516]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0c:	4a80      	ldr	r2, [pc, #512]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b14:	e01a      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f001 fbd2 	bl	80052c8 <RCCEx_PLL2_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b2a:	e00f      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b30:	3328      	adds	r3, #40	@ 0x28
 8003b32:	2100      	movs	r1, #0
 8003b34:	4618      	mov	r0, r3
 8003b36:	f001 fc79 	bl	800542c <RCCEx_PLL3_Config>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b40:	e004      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b48:	e000      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003b4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b54:	4b6e      	ldr	r3, [pc, #440]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b58:	f023 0107 	bic.w	r1, r3, #7
 8003b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b62:	4a6b      	ldr	r2, [pc, #428]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b64:	430b      	orrs	r3, r1
 8003b66:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b68:	e003      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8003b7e:	f04f 0b00 	mov.w	fp, #0
 8003b82:	ea5a 030b 	orrs.w	r3, sl, fp
 8003b86:	d05b      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003b90:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003b94:	d03b      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003b96:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003b9a:	d834      	bhi.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003b9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ba0:	d037      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003ba2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ba6:	d82e      	bhi.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003ba8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003bac:	d033      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003bae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003bb2:	d828      	bhi.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003bb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bb8:	d01a      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003bba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bbe:	d822      	bhi.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003bc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bc8:	d007      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003bca:	e01c      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bcc:	4b50      	ldr	r3, [pc, #320]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd0:	4a4f      	ldr	r2, [pc, #316]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003bd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bd8:	e01e      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bde:	3308      	adds	r3, #8
 8003be0:	2100      	movs	r1, #0
 8003be2:	4618      	mov	r0, r3
 8003be4:	f001 fb70 	bl	80052c8 <RCCEx_PLL2_Config>
 8003be8:	4603      	mov	r3, r0
 8003bea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003bee:	e013      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bf4:	3328      	adds	r3, #40	@ 0x28
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f001 fc17 	bl	800542c <RCCEx_PLL3_Config>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c04:	e008      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c0c:	e004      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003c0e:	bf00      	nop
 8003c10:	e002      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003c12:	bf00      	nop
 8003c14:	e000      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003c16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10b      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003c20:	4b3b      	ldr	r3, [pc, #236]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c24:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c30:	4a37      	ldr	r2, [pc, #220]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c32:	430b      	orrs	r3, r1
 8003c34:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c36:	e003      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c48:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003c4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003c50:	2300      	movs	r3, #0
 8003c52:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003c56:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	d05d      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003c68:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003c6c:	d03b      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003c6e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003c72:	d834      	bhi.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003c74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c78:	d037      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003c7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c7e:	d82e      	bhi.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003c80:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c84:	d033      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003c86:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c8a:	d828      	bhi.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003c8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c90:	d01a      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003c92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c96:	d822      	bhi.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003c9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ca0:	d007      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003ca2:	e01c      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca8:	4a19      	ldr	r2, [pc, #100]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003caa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cb0:	e01e      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cb6:	3308      	adds	r3, #8
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 fb04 	bl	80052c8 <RCCEx_PLL2_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003cc6:	e013      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ccc:	3328      	adds	r3, #40	@ 0x28
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f001 fbab 	bl	800542c <RCCEx_PLL3_Config>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ce4:	e004      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003ce6:	bf00      	nop
 8003ce8:	e002      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003cea:	bf00      	nop
 8003cec:	e000      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003cee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cf0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10d      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003cf8:	4b05      	ldr	r3, [pc, #20]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cfc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003d08:	4a01      	ldr	r2, [pc, #4]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d0a:	430b      	orrs	r3, r1
 8003d0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d0e:	e005      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003d10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d24:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003d28:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003d32:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	d03a      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d42:	2b30      	cmp	r3, #48	@ 0x30
 8003d44:	d01f      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003d46:	2b30      	cmp	r3, #48	@ 0x30
 8003d48:	d819      	bhi.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003d4a:	2b20      	cmp	r3, #32
 8003d4c:	d00c      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003d4e:	2b20      	cmp	r3, #32
 8003d50:	d815      	bhi.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d019      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003d56:	2b10      	cmp	r3, #16
 8003d58:	d111      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d5a:	4baa      	ldr	r3, [pc, #680]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5e:	4aa9      	ldr	r2, [pc, #676]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003d66:	e011      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d6c:	3308      	adds	r3, #8
 8003d6e:	2102      	movs	r1, #2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f001 faa9 	bl	80052c8 <RCCEx_PLL2_Config>
 8003d76:	4603      	mov	r3, r0
 8003d78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003d7c:	e006      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d84:	e002      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003d86:	bf00      	nop
 8003d88:	e000      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10a      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003d94:	4b9b      	ldr	r3, [pc, #620]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d98:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da2:	4a98      	ldr	r2, [pc, #608]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003da4:	430b      	orrs	r3, r1
 8003da6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003da8:	e003      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003daa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003dbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003dc8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	d051      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ddc:	d035      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003dde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003de2:	d82e      	bhi.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003de4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003de8:	d031      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003dea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003dee:	d828      	bhi.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003df0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003df4:	d01a      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dfa:	d822      	bhi.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003e00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e04:	d007      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003e06:	e01c      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e08:	4b7e      	ldr	r3, [pc, #504]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0c:	4a7d      	ldr	r2, [pc, #500]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e14:	e01c      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e1a:	3308      	adds	r3, #8
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f001 fa52 	bl	80052c8 <RCCEx_PLL2_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e2a:	e011      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e30:	3328      	adds	r3, #40	@ 0x28
 8003e32:	2100      	movs	r1, #0
 8003e34:	4618      	mov	r0, r3
 8003e36:	f001 faf9 	bl	800542c <RCCEx_PLL3_Config>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e40:	e006      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e48:	e002      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003e4a:	bf00      	nop
 8003e4c:	e000      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10a      	bne.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e58:	4b6a      	ldr	r3, [pc, #424]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e5c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e66:	4a67      	ldr	r2, [pc, #412]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e6c:	e003      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e72:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003e82:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e86:	2300      	movs	r3, #0
 8003e88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e8c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4313      	orrs	r3, r2
 8003e94:	d053      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ea0:	d033      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003ea2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ea6:	d82c      	bhi.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003ea8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003eac:	d02f      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003eae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003eb2:	d826      	bhi.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003eb4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003eb8:	d02b      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003eba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ebe:	d820      	bhi.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003ec0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ec4:	d012      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003ec6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003eca:	d81a      	bhi.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d022      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ed4:	d115      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eda:	3308      	adds	r3, #8
 8003edc:	2101      	movs	r1, #1
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f001 f9f2 	bl	80052c8 <RCCEx_PLL2_Config>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003eea:	e015      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ef0:	3328      	adds	r3, #40	@ 0x28
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f001 fa99 	bl	800542c <RCCEx_PLL3_Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f00:	e00a      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f08:	e006      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003f0a:	bf00      	nop
 8003f0c:	e004      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003f0e:	bf00      	nop
 8003f10:	e002      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003f12:	bf00      	nop
 8003f14:	e000      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10a      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003f20:	4b38      	ldr	r3, [pc, #224]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f24:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f2e:	4a35      	ldr	r2, [pc, #212]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f30:	430b      	orrs	r3, r1
 8003f32:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f34:	e003      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f46:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f4e:	2300      	movs	r3, #0
 8003f50:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003f54:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	d058      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003f66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f6a:	d033      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f70:	d82c      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f76:	d02f      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f7c:	d826      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003f7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f82:	d02b      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003f84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f88:	d820      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003f8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f8e:	d012      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003f90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f94:	d81a      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d022      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003f9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f9e:	d115      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fa4:	3308      	adds	r3, #8
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f001 f98d 	bl	80052c8 <RCCEx_PLL2_Config>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003fb4:	e015      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fba:	3328      	adds	r3, #40	@ 0x28
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f001 fa34 	bl	800542c <RCCEx_PLL3_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003fd2:	e006      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003fd4:	bf00      	nop
 8003fd6:	e004      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003fd8:	bf00      	nop
 8003fda:	e002      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003fdc:	bf00      	nop
 8003fde:	e000      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003fe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fe2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10e      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003fea:	4b06      	ldr	r3, [pc, #24]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ff6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003ffa:	4a02      	ldr	r2, [pc, #8]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004000:	e006      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004002:	bf00      	nop
 8004004:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004008:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800400c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004018:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800401c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004020:	2300      	movs	r3, #0
 8004022:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004026:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800402a:	460b      	mov	r3, r1
 800402c:	4313      	orrs	r3, r2
 800402e:	d037      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004034:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004036:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800403a:	d00e      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800403c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004040:	d816      	bhi.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004042:	2b00      	cmp	r3, #0
 8004044:	d018      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004046:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800404a:	d111      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800404c:	4bc4      	ldr	r3, [pc, #784]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800404e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004050:	4ac3      	ldr	r2, [pc, #780]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004052:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004056:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004058:	e00f      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800405a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800405e:	3308      	adds	r3, #8
 8004060:	2101      	movs	r1, #1
 8004062:	4618      	mov	r0, r3
 8004064:	f001 f930 	bl	80052c8 <RCCEx_PLL2_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800406e:	e004      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004076:	e000      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800407a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10a      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004082:	4bb7      	ldr	r3, [pc, #732]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004086:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800408a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800408e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004090:	4ab3      	ldr	r2, [pc, #716]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004092:	430b      	orrs	r3, r1
 8004094:	6513      	str	r3, [r2, #80]	@ 0x50
 8004096:	e003      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004098:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800409c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80040a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80040ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040b0:	2300      	movs	r3, #0
 80040b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80040b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80040ba:	460b      	mov	r3, r1
 80040bc:	4313      	orrs	r3, r2
 80040be:	d039      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80040c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040c6:	2b03      	cmp	r3, #3
 80040c8:	d81c      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80040ca:	a201      	add	r2, pc, #4	@ (adr r2, 80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80040cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d0:	0800410d 	.word	0x0800410d
 80040d4:	080040e1 	.word	0x080040e1
 80040d8:	080040ef 	.word	0x080040ef
 80040dc:	0800410d 	.word	0x0800410d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040e0:	4b9f      	ldr	r3, [pc, #636]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e4:	4a9e      	ldr	r2, [pc, #632]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040ec:	e00f      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040f2:	3308      	adds	r3, #8
 80040f4:	2102      	movs	r1, #2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f001 f8e6 	bl	80052c8 <RCCEx_PLL2_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004102:	e004      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800410a:	e000      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800410c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800410e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004116:	4b92      	ldr	r3, [pc, #584]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800411a:	f023 0103 	bic.w	r1, r3, #3
 800411e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004124:	4a8e      	ldr	r2, [pc, #568]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004126:	430b      	orrs	r3, r1
 8004128:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800412a:	e003      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004130:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004140:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004144:	2300      	movs	r3, #0
 8004146:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800414a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800414e:	460b      	mov	r3, r1
 8004150:	4313      	orrs	r3, r2
 8004152:	f000 8099 	beq.w	8004288 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004156:	4b83      	ldr	r3, [pc, #524]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a82      	ldr	r2, [pc, #520]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800415c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004160:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004162:	f7fd f805 	bl	8001170 <HAL_GetTick>
 8004166:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800416a:	e00b      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800416c:	f7fd f800 	bl	8001170 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b64      	cmp	r3, #100	@ 0x64
 800417a:	d903      	bls.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004182:	e005      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004184:	4b77      	ldr	r3, [pc, #476]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0ed      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004190:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004194:	2b00      	cmp	r3, #0
 8004196:	d173      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004198:	4b71      	ldr	r3, [pc, #452]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800419a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800419c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80041a4:	4053      	eors	r3, r2
 80041a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d015      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041ae:	4b6c      	ldr	r3, [pc, #432]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041b6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041ba:	4b69      	ldr	r3, [pc, #420]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041be:	4a68      	ldr	r2, [pc, #416]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041c4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041c6:	4b66      	ldr	r3, [pc, #408]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ca:	4a65      	ldr	r2, [pc, #404]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041d0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80041d2:	4a63      	ldr	r2, [pc, #396]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041d8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80041da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80041e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041e6:	d118      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e8:	f7fc ffc2 	bl	8001170 <HAL_GetTick>
 80041ec:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041f0:	e00d      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f2:	f7fc ffbd 	bl	8001170 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80041fc:	1ad2      	subs	r2, r2, r3
 80041fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004202:	429a      	cmp	r2, r3
 8004204:	d903      	bls.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800420c:	e005      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800420e:	4b54      	ldr	r3, [pc, #336]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0eb      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800421a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800421e:	2b00      	cmp	r3, #0
 8004220:	d129      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004226:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800422a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800422e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004232:	d10e      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004234:	4b4a      	ldr	r3, [pc, #296]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800423c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004240:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004244:	091a      	lsrs	r2, r3, #4
 8004246:	4b48      	ldr	r3, [pc, #288]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004248:	4013      	ands	r3, r2
 800424a:	4a45      	ldr	r2, [pc, #276]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800424c:	430b      	orrs	r3, r1
 800424e:	6113      	str	r3, [r2, #16]
 8004250:	e005      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004252:	4b43      	ldr	r3, [pc, #268]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	4a42      	ldr	r2, [pc, #264]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004258:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800425c:	6113      	str	r3, [r2, #16]
 800425e:	4b40      	ldr	r3, [pc, #256]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004260:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004266:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800426a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800426e:	4a3c      	ldr	r2, [pc, #240]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004270:	430b      	orrs	r3, r1
 8004272:	6713      	str	r3, [r2, #112]	@ 0x70
 8004274:	e008      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004276:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800427a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800427e:	e003      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004280:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004284:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	f002 0301 	and.w	r3, r2, #1
 8004294:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004298:	2300      	movs	r3, #0
 800429a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800429e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80042a2:	460b      	mov	r3, r1
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f000 808f 	beq.w	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80042aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042b0:	2b28      	cmp	r3, #40	@ 0x28
 80042b2:	d871      	bhi.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80042b4:	a201      	add	r2, pc, #4	@ (adr r2, 80042bc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80042b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ba:	bf00      	nop
 80042bc:	080043a1 	.word	0x080043a1
 80042c0:	08004399 	.word	0x08004399
 80042c4:	08004399 	.word	0x08004399
 80042c8:	08004399 	.word	0x08004399
 80042cc:	08004399 	.word	0x08004399
 80042d0:	08004399 	.word	0x08004399
 80042d4:	08004399 	.word	0x08004399
 80042d8:	08004399 	.word	0x08004399
 80042dc:	0800436d 	.word	0x0800436d
 80042e0:	08004399 	.word	0x08004399
 80042e4:	08004399 	.word	0x08004399
 80042e8:	08004399 	.word	0x08004399
 80042ec:	08004399 	.word	0x08004399
 80042f0:	08004399 	.word	0x08004399
 80042f4:	08004399 	.word	0x08004399
 80042f8:	08004399 	.word	0x08004399
 80042fc:	08004383 	.word	0x08004383
 8004300:	08004399 	.word	0x08004399
 8004304:	08004399 	.word	0x08004399
 8004308:	08004399 	.word	0x08004399
 800430c:	08004399 	.word	0x08004399
 8004310:	08004399 	.word	0x08004399
 8004314:	08004399 	.word	0x08004399
 8004318:	08004399 	.word	0x08004399
 800431c:	080043a1 	.word	0x080043a1
 8004320:	08004399 	.word	0x08004399
 8004324:	08004399 	.word	0x08004399
 8004328:	08004399 	.word	0x08004399
 800432c:	08004399 	.word	0x08004399
 8004330:	08004399 	.word	0x08004399
 8004334:	08004399 	.word	0x08004399
 8004338:	08004399 	.word	0x08004399
 800433c:	080043a1 	.word	0x080043a1
 8004340:	08004399 	.word	0x08004399
 8004344:	08004399 	.word	0x08004399
 8004348:	08004399 	.word	0x08004399
 800434c:	08004399 	.word	0x08004399
 8004350:	08004399 	.word	0x08004399
 8004354:	08004399 	.word	0x08004399
 8004358:	08004399 	.word	0x08004399
 800435c:	080043a1 	.word	0x080043a1
 8004360:	58024400 	.word	0x58024400
 8004364:	58024800 	.word	0x58024800
 8004368:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800436c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004370:	3308      	adds	r3, #8
 8004372:	2101      	movs	r1, #1
 8004374:	4618      	mov	r0, r3
 8004376:	f000 ffa7 	bl	80052c8 <RCCEx_PLL2_Config>
 800437a:	4603      	mov	r3, r0
 800437c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004380:	e00f      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004386:	3328      	adds	r3, #40	@ 0x28
 8004388:	2101      	movs	r1, #1
 800438a:	4618      	mov	r0, r3
 800438c:	f001 f84e 	bl	800542c <RCCEx_PLL3_Config>
 8004390:	4603      	mov	r3, r0
 8004392:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004396:	e004      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800439e:	e000      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80043a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10a      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80043aa:	4bbf      	ldr	r3, [pc, #764]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80043ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80043b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043b8:	4abb      	ldr	r2, [pc, #748]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80043ba:	430b      	orrs	r3, r1
 80043bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80043be:	e003      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80043c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d0:	f002 0302 	and.w	r3, r2, #2
 80043d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043d8:	2300      	movs	r3, #0
 80043da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043de:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4313      	orrs	r3, r2
 80043e6:	d041      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80043e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ee:	2b05      	cmp	r3, #5
 80043f0:	d824      	bhi.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80043f2:	a201      	add	r2, pc, #4	@ (adr r2, 80043f8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80043f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f8:	08004445 	.word	0x08004445
 80043fc:	08004411 	.word	0x08004411
 8004400:	08004427 	.word	0x08004427
 8004404:	08004445 	.word	0x08004445
 8004408:	08004445 	.word	0x08004445
 800440c:	08004445 	.word	0x08004445
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004414:	3308      	adds	r3, #8
 8004416:	2101      	movs	r1, #1
 8004418:	4618      	mov	r0, r3
 800441a:	f000 ff55 	bl	80052c8 <RCCEx_PLL2_Config>
 800441e:	4603      	mov	r3, r0
 8004420:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004424:	e00f      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800442a:	3328      	adds	r3, #40	@ 0x28
 800442c:	2101      	movs	r1, #1
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fffc 	bl	800542c <RCCEx_PLL3_Config>
 8004434:	4603      	mov	r3, r0
 8004436:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800443a:	e004      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004442:	e000      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004446:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10a      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800444e:	4b96      	ldr	r3, [pc, #600]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004452:	f023 0107 	bic.w	r1, r3, #7
 8004456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800445a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800445c:	4a92      	ldr	r2, [pc, #584]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800445e:	430b      	orrs	r3, r1
 8004460:	6553      	str	r3, [r2, #84]	@ 0x54
 8004462:	e003      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004464:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004468:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800446c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	f002 0304 	and.w	r3, r2, #4
 8004478:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800447c:	2300      	movs	r3, #0
 800447e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004482:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004486:	460b      	mov	r3, r1
 8004488:	4313      	orrs	r3, r2
 800448a:	d044      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800448c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004494:	2b05      	cmp	r3, #5
 8004496:	d825      	bhi.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004498:	a201      	add	r2, pc, #4	@ (adr r2, 80044a0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800449a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449e:	bf00      	nop
 80044a0:	080044ed 	.word	0x080044ed
 80044a4:	080044b9 	.word	0x080044b9
 80044a8:	080044cf 	.word	0x080044cf
 80044ac:	080044ed 	.word	0x080044ed
 80044b0:	080044ed 	.word	0x080044ed
 80044b4:	080044ed 	.word	0x080044ed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044bc:	3308      	adds	r3, #8
 80044be:	2101      	movs	r1, #1
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 ff01 	bl	80052c8 <RCCEx_PLL2_Config>
 80044c6:	4603      	mov	r3, r0
 80044c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044cc:	e00f      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044d2:	3328      	adds	r3, #40	@ 0x28
 80044d4:	2101      	movs	r1, #1
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 ffa8 	bl	800542c <RCCEx_PLL3_Config>
 80044dc:	4603      	mov	r3, r0
 80044de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044e2:	e004      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80044ea:	e000      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80044ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10b      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044f6:	4b6c      	ldr	r3, [pc, #432]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80044f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044fa:	f023 0107 	bic.w	r1, r3, #7
 80044fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004506:	4a68      	ldr	r2, [pc, #416]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004508:	430b      	orrs	r3, r1
 800450a:	6593      	str	r3, [r2, #88]	@ 0x58
 800450c:	e003      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004512:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	f002 0320 	and.w	r3, r2, #32
 8004522:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004526:	2300      	movs	r3, #0
 8004528:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800452c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004530:	460b      	mov	r3, r1
 8004532:	4313      	orrs	r3, r2
 8004534:	d055      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800453a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800453e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004542:	d033      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004544:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004548:	d82c      	bhi.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800454a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800454e:	d02f      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004554:	d826      	bhi.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004556:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800455a:	d02b      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800455c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004560:	d820      	bhi.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004562:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004566:	d012      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004568:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800456c:	d81a      	bhi.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800456e:	2b00      	cmp	r3, #0
 8004570:	d022      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004572:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004576:	d115      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800457c:	3308      	adds	r3, #8
 800457e:	2100      	movs	r1, #0
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fea1 	bl	80052c8 <RCCEx_PLL2_Config>
 8004586:	4603      	mov	r3, r0
 8004588:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800458c:	e015      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800458e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004592:	3328      	adds	r3, #40	@ 0x28
 8004594:	2102      	movs	r1, #2
 8004596:	4618      	mov	r0, r3
 8004598:	f000 ff48 	bl	800542c <RCCEx_PLL3_Config>
 800459c:	4603      	mov	r3, r0
 800459e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80045a2:	e00a      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80045aa:	e006      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80045ac:	bf00      	nop
 80045ae:	e004      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80045b0:	bf00      	nop
 80045b2:	e002      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80045b4:	bf00      	nop
 80045b6:	e000      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80045b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10b      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045c2:	4b39      	ldr	r3, [pc, #228]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80045c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80045ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045d2:	4a35      	ldr	r2, [pc, #212]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80045d4:	430b      	orrs	r3, r1
 80045d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80045d8:	e003      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80045ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045f2:	2300      	movs	r3, #0
 80045f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045f8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80045fc:	460b      	mov	r3, r1
 80045fe:	4313      	orrs	r3, r2
 8004600:	d058      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004606:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800460a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800460e:	d033      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004610:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004614:	d82c      	bhi.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800461a:	d02f      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800461c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004620:	d826      	bhi.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004622:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004626:	d02b      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004628:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800462c:	d820      	bhi.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800462e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004632:	d012      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004634:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004638:	d81a      	bhi.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800463a:	2b00      	cmp	r3, #0
 800463c:	d022      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800463e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004642:	d115      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004648:	3308      	adds	r3, #8
 800464a:	2100      	movs	r1, #0
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fe3b 	bl	80052c8 <RCCEx_PLL2_Config>
 8004652:	4603      	mov	r3, r0
 8004654:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004658:	e015      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800465a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800465e:	3328      	adds	r3, #40	@ 0x28
 8004660:	2102      	movs	r1, #2
 8004662:	4618      	mov	r0, r3
 8004664:	f000 fee2 	bl	800542c <RCCEx_PLL3_Config>
 8004668:	4603      	mov	r3, r0
 800466a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800466e:	e00a      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004676:	e006      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004678:	bf00      	nop
 800467a:	e004      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800467c:	bf00      	nop
 800467e:	e002      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004680:	bf00      	nop
 8004682:	e000      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004686:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10e      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800468e:	4b06      	ldr	r3, [pc, #24]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004692:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800469a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800469e:	4a02      	ldr	r2, [pc, #8]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80046a0:	430b      	orrs	r3, r1
 80046a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80046a4:	e006      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80046a6:	bf00      	nop
 80046a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80046b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046bc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80046c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046c4:	2300      	movs	r3, #0
 80046c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80046ca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80046ce:	460b      	mov	r3, r1
 80046d0:	4313      	orrs	r3, r2
 80046d2:	d055      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80046d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046dc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80046e0:	d033      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80046e2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80046e6:	d82c      	bhi.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80046e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046ec:	d02f      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80046ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046f2:	d826      	bhi.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80046f4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80046f8:	d02b      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80046fa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80046fe:	d820      	bhi.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004700:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004704:	d012      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004706:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800470a:	d81a      	bhi.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800470c:	2b00      	cmp	r3, #0
 800470e:	d022      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004710:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004714:	d115      	bne.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800471a:	3308      	adds	r3, #8
 800471c:	2100      	movs	r1, #0
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fdd2 	bl	80052c8 <RCCEx_PLL2_Config>
 8004724:	4603      	mov	r3, r0
 8004726:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800472a:	e015      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800472c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004730:	3328      	adds	r3, #40	@ 0x28
 8004732:	2102      	movs	r1, #2
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fe79 	bl	800542c <RCCEx_PLL3_Config>
 800473a:	4603      	mov	r3, r0
 800473c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004740:	e00a      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004748:	e006      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800474a:	bf00      	nop
 800474c:	e004      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800474e:	bf00      	nop
 8004750:	e002      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004752:	bf00      	nop
 8004754:	e000      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004756:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004758:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10b      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004760:	4ba0      	ldr	r3, [pc, #640]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004764:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800476c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004770:	4a9c      	ldr	r2, [pc, #624]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004772:	430b      	orrs	r3, r1
 8004774:	6593      	str	r3, [r2, #88]	@ 0x58
 8004776:	e003      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004778:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800477c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004788:	f002 0308 	and.w	r3, r2, #8
 800478c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004790:	2300      	movs	r3, #0
 8004792:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004796:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800479a:	460b      	mov	r3, r1
 800479c:	4313      	orrs	r3, r2
 800479e:	d01e      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80047a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ac:	d10c      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047b2:	3328      	adds	r3, #40	@ 0x28
 80047b4:	2102      	movs	r1, #2
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fe38 	bl	800542c <RCCEx_PLL3_Config>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80047c8:	4b86      	ldr	r3, [pc, #536]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80047ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047cc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047d8:	4a82      	ldr	r2, [pc, #520]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80047da:	430b      	orrs	r3, r1
 80047dc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e6:	f002 0310 	and.w	r3, r2, #16
 80047ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047ee:	2300      	movs	r3, #0
 80047f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047f4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80047f8:	460b      	mov	r3, r1
 80047fa:	4313      	orrs	r3, r2
 80047fc:	d01e      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80047fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800480a:	d10c      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800480c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004810:	3328      	adds	r3, #40	@ 0x28
 8004812:	2102      	movs	r1, #2
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fe09 	bl	800542c <RCCEx_PLL3_Config>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004826:	4b6f      	ldr	r3, [pc, #444]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800482a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800482e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004832:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004836:	4a6b      	ldr	r2, [pc, #428]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004838:	430b      	orrs	r3, r1
 800483a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800483c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004844:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004848:	67bb      	str	r3, [r7, #120]	@ 0x78
 800484a:	2300      	movs	r3, #0
 800484c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800484e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004852:	460b      	mov	r3, r1
 8004854:	4313      	orrs	r3, r2
 8004856:	d03e      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800485c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004860:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004864:	d022      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004866:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800486a:	d81b      	bhi.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004874:	d00b      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004876:	e015      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800487c:	3308      	adds	r3, #8
 800487e:	2100      	movs	r1, #0
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fd21 	bl	80052c8 <RCCEx_PLL2_Config>
 8004886:	4603      	mov	r3, r0
 8004888:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800488c:	e00f      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800488e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004892:	3328      	adds	r3, #40	@ 0x28
 8004894:	2102      	movs	r1, #2
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fdc8 	bl	800542c <RCCEx_PLL3_Config>
 800489c:	4603      	mov	r3, r0
 800489e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80048a2:	e004      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80048aa:	e000      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80048ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10b      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048b6:	4b4b      	ldr	r3, [pc, #300]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80048b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80048be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80048c6:	4a47      	ldr	r2, [pc, #284]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80048c8:	430b      	orrs	r3, r1
 80048ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80048cc:	e003      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80048e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80048e4:	2300      	movs	r3, #0
 80048e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80048e8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80048ec:	460b      	mov	r3, r1
 80048ee:	4313      	orrs	r3, r2
 80048f0:	d03b      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80048f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048fe:	d01f      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004900:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004904:	d818      	bhi.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004906:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800490a:	d003      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800490c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004910:	d007      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004912:	e011      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004914:	4b33      	ldr	r3, [pc, #204]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004918:	4a32      	ldr	r2, [pc, #200]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800491a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800491e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004920:	e00f      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004926:	3328      	adds	r3, #40	@ 0x28
 8004928:	2101      	movs	r1, #1
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fd7e 	bl	800542c <RCCEx_PLL3_Config>
 8004930:	4603      	mov	r3, r0
 8004932:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004936:	e004      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800493e:	e000      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004940:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004942:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10b      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800494a:	4b26      	ldr	r3, [pc, #152]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800494c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004956:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800495a:	4a22      	ldr	r2, [pc, #136]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800495c:	430b      	orrs	r3, r1
 800495e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004960:	e003      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004962:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004966:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800496a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800496e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004972:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004976:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004978:	2300      	movs	r3, #0
 800497a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800497c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004980:	460b      	mov	r3, r1
 8004982:	4313      	orrs	r3, r2
 8004984:	d034      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800498a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004994:	d007      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004996:	e011      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004998:	4b12      	ldr	r3, [pc, #72]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800499a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499c:	4a11      	ldr	r2, [pc, #68]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800499e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80049a4:	e00e      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049aa:	3308      	adds	r3, #8
 80049ac:	2102      	movs	r1, #2
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fc8a 	bl	80052c8 <RCCEx_PLL2_Config>
 80049b4:	4603      	mov	r3, r0
 80049b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80049ba:	e003      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80049c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10d      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049cc:	4b05      	ldr	r3, [pc, #20]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80049ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049da:	4a02      	ldr	r2, [pc, #8]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80049dc:	430b      	orrs	r3, r1
 80049de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049e0:	e006      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80049e2:	bf00      	nop
 80049e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80049fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80049fe:	2300      	movs	r3, #0
 8004a00:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a02:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004a06:	460b      	mov	r3, r1
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	d00c      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a10:	3328      	adds	r3, #40	@ 0x28
 8004a12:	2102      	movs	r1, #2
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 fd09 	bl	800542c <RCCEx_PLL3_Config>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004a32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a34:	2300      	movs	r3, #0
 8004a36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a38:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	d036      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a4c:	d018      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004a4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a52:	d811      	bhi.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004a54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a58:	d014      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004a5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a5e:	d80b      	bhi.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d011      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004a64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a68:	d106      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a6a:	4bb7      	ldr	r3, [pc, #732]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6e:	4ab6      	ldr	r2, [pc, #728]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004a76:	e008      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a7e:	e004      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004a80:	bf00      	nop
 8004a82:	e002      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004a84:	bf00      	nop
 8004a86:	e000      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10a      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a92:	4bad      	ldr	r3, [pc, #692]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a96:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004aa0:	4aa9      	ldr	r2, [pc, #676]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004aa2:	430b      	orrs	r3, r1
 8004aa4:	6553      	str	r3, [r2, #84]	@ 0x54
 8004aa6:	e003      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004aac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004abc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004abe:	2300      	movs	r3, #0
 8004ac0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ac2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	d009      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004acc:	4b9e      	ldr	r3, [pc, #632]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ad0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ada:	4a9b      	ldr	r2, [pc, #620]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004adc:	430b      	orrs	r3, r1
 8004ade:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004aec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004aee:	2300      	movs	r3, #0
 8004af0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004af2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004af6:	460b      	mov	r3, r1
 8004af8:	4313      	orrs	r3, r2
 8004afa:	d009      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004afc:	4b92      	ldr	r3, [pc, #584]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b00:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b0a:	4a8f      	ldr	r2, [pc, #572]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b18:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004b1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b1e:	2300      	movs	r3, #0
 8004b20:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b22:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004b26:	460b      	mov	r3, r1
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	d00e      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b2c:	4b86      	ldr	r3, [pc, #536]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	4a85      	ldr	r2, [pc, #532]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b32:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b36:	6113      	str	r3, [r2, #16]
 8004b38:	4b83      	ldr	r3, [pc, #524]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b3a:	6919      	ldr	r1, [r3, #16]
 8004b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b44:	4a80      	ldr	r2, [pc, #512]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b46:	430b      	orrs	r3, r1
 8004b48:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b52:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004b56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b58:	2300      	movs	r3, #0
 8004b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b5c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004b60:	460b      	mov	r3, r1
 8004b62:	4313      	orrs	r3, r2
 8004b64:	d009      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b66:	4b78      	ldr	r3, [pc, #480]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b6a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b74:	4a74      	ldr	r2, [pc, #464]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b76:	430b      	orrs	r3, r1
 8004b78:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b82:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004b86:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b88:	2300      	movs	r3, #0
 8004b8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b8c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004b90:	460b      	mov	r3, r1
 8004b92:	4313      	orrs	r3, r2
 8004b94:	d00a      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b96:	4b6c      	ldr	r3, [pc, #432]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b9a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba6:	4a68      	ldr	r2, [pc, #416]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ba8:	430b      	orrs	r3, r1
 8004baa:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bbe:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	d011      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bcc:	3308      	adds	r3, #8
 8004bce:	2100      	movs	r1, #0
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fb79 	bl	80052c8 <RCCEx_PLL2_Config>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004bdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004be8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	6239      	str	r1, [r7, #32]
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bfe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004c02:	460b      	mov	r3, r1
 8004c04:	4313      	orrs	r3, r2
 8004c06:	d011      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c0c:	3308      	adds	r3, #8
 8004c0e:	2101      	movs	r1, #1
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fb59 	bl	80052c8 <RCCEx_PLL2_Config>
 8004c16:	4603      	mov	r3, r0
 8004c18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004c1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c34:	2100      	movs	r1, #0
 8004c36:	61b9      	str	r1, [r7, #24]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	61fb      	str	r3, [r7, #28]
 8004c3e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c42:	460b      	mov	r3, r1
 8004c44:	4313      	orrs	r3, r2
 8004c46:	d011      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c4c:	3308      	adds	r3, #8
 8004c4e:	2102      	movs	r1, #2
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fb39 	bl	80052c8 <RCCEx_PLL2_Config>
 8004c56:	4603      	mov	r3, r0
 8004c58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004c5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c74:	2100      	movs	r1, #0
 8004c76:	6139      	str	r1, [r7, #16]
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004c82:	460b      	mov	r3, r1
 8004c84:	4313      	orrs	r3, r2
 8004c86:	d011      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c8c:	3328      	adds	r3, #40	@ 0x28
 8004c8e:	2100      	movs	r1, #0
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 fbcb 	bl	800542c <RCCEx_PLL3_Config>
 8004c96:	4603      	mov	r3, r0
 8004c98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004c9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ca8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	60b9      	str	r1, [r7, #8]
 8004cb8:	f003 0310 	and.w	r3, r3, #16
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	d011      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ccc:	3328      	adds	r3, #40	@ 0x28
 8004cce:	2101      	movs	r1, #1
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 fbab 	bl	800542c <RCCEx_PLL3_Config>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004cdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ce8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	6039      	str	r1, [r7, #0]
 8004cf8:	f003 0320 	and.w	r3, r3, #32
 8004cfc:	607b      	str	r3, [r7, #4]
 8004cfe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d02:	460b      	mov	r3, r1
 8004d04:	4313      	orrs	r3, r2
 8004d06:	d011      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d0c:	3328      	adds	r3, #40	@ 0x28
 8004d0e:	2102      	movs	r1, #2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fb8b 	bl	800542c <RCCEx_PLL3_Config>
 8004d16:	4603      	mov	r3, r0
 8004d18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004d1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004d2c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	e000      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004d40:	46bd      	mov	sp, r7
 8004d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d46:	bf00      	nop
 8004d48:	58024400 	.word	0x58024400

08004d4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004d50:	f7fe fe00 	bl	8003954 <HAL_RCC_GetHCLKFreq>
 8004d54:	4602      	mov	r2, r0
 8004d56:	4b06      	ldr	r3, [pc, #24]	@ (8004d70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	091b      	lsrs	r3, r3, #4
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	4904      	ldr	r1, [pc, #16]	@ (8004d74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004d62:	5ccb      	ldrb	r3, [r1, r3]
 8004d64:	f003 031f 	and.w	r3, r3, #31
 8004d68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	58024400 	.word	0x58024400
 8004d74:	0800734c 	.word	0x0800734c

08004d78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b089      	sub	sp, #36	@ 0x24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d80:	4ba1      	ldr	r3, [pc, #644]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d84:	f003 0303 	and.w	r3, r3, #3
 8004d88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004d8a:	4b9f      	ldr	r3, [pc, #636]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8e:	0b1b      	lsrs	r3, r3, #12
 8004d90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004d96:	4b9c      	ldr	r3, [pc, #624]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9a:	091b      	lsrs	r3, r3, #4
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004da2:	4b99      	ldr	r3, [pc, #612]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004da6:	08db      	lsrs	r3, r3, #3
 8004da8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	fb02 f303 	mul.w	r3, r2, r3
 8004db2:	ee07 3a90 	vmov	s15, r3
 8004db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 8111 	beq.w	8004fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	f000 8083 	beq.w	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	f200 80a1 	bhi.w	8004f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d056      	beq.n	8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004de2:	e099      	b.n	8004f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004de4:	4b88      	ldr	r3, [pc, #544]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0320 	and.w	r3, r3, #32
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d02d      	beq.n	8004e4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004df0:	4b85      	ldr	r3, [pc, #532]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	08db      	lsrs	r3, r3, #3
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	4a84      	ldr	r2, [pc, #528]	@ (800500c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004e00:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	ee07 3a90 	vmov	s15, r3
 8004e08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e1a:	4b7b      	ldr	r3, [pc, #492]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e2e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e4a:	e087      	b.n	8004f5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e56:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e5e:	4b6a      	ldr	r3, [pc, #424]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e72:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e8e:	e065      	b.n	8004f5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	ee07 3a90 	vmov	s15, r3
 8004e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ea2:	4b59      	ldr	r3, [pc, #356]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eaa:	ee07 3a90 	vmov	s15, r3
 8004eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eb6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ec2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ed2:	e043      	b.n	8004f5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	ee07 3a90 	vmov	s15, r3
 8004eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ede:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800501c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ee6:	4b48      	ldr	r3, [pc, #288]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eee:	ee07 3a90 	vmov	s15, r3
 8004ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004efa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f16:	e021      	b.n	8004f5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	ee07 3a90 	vmov	s15, r3
 8004f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f22:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f2a:	4b37      	ldr	r3, [pc, #220]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f3e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f5a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f60:	0a5b      	lsrs	r3, r3, #9
 8004f62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f76:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f82:	ee17 2a90 	vmov	r2, s15
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8e:	0c1b      	lsrs	r3, r3, #16
 8004f90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f94:	ee07 3a90 	vmov	s15, r3
 8004f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fb0:	ee17 2a90 	vmov	r2, s15
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004fb8:	4b13      	ldr	r3, [pc, #76]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fbc:	0e1b      	lsrs	r3, r3, #24
 8004fbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fde:	ee17 2a90 	vmov	r2, s15
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004fe6:	e008      	b.n	8004ffa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	609a      	str	r2, [r3, #8]
}
 8004ffa:	bf00      	nop
 8004ffc:	3724      	adds	r7, #36	@ 0x24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	58024400 	.word	0x58024400
 800500c:	03d09000 	.word	0x03d09000
 8005010:	46000000 	.word	0x46000000
 8005014:	4c742400 	.word	0x4c742400
 8005018:	4a742400 	.word	0x4a742400
 800501c:	4af42400 	.word	0x4af42400

08005020 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005020:	b480      	push	{r7}
 8005022:	b089      	sub	sp, #36	@ 0x24
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005028:	4ba1      	ldr	r3, [pc, #644]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800502a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502c:	f003 0303 	and.w	r3, r3, #3
 8005030:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005032:	4b9f      	ldr	r3, [pc, #636]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005036:	0d1b      	lsrs	r3, r3, #20
 8005038:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800503c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800503e:	4b9c      	ldr	r3, [pc, #624]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005042:	0a1b      	lsrs	r3, r3, #8
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800504a:	4b99      	ldr	r3, [pc, #612]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800504c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800504e:	08db      	lsrs	r3, r3, #3
 8005050:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	fb02 f303 	mul.w	r3, r2, r3
 800505a:	ee07 3a90 	vmov	s15, r3
 800505e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005062:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 8111 	beq.w	8005290 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	2b02      	cmp	r3, #2
 8005072:	f000 8083 	beq.w	800517c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	2b02      	cmp	r3, #2
 800507a:	f200 80a1 	bhi.w	80051c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d056      	beq.n	8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800508a:	e099      	b.n	80051c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800508c:	4b88      	ldr	r3, [pc, #544]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	2b00      	cmp	r3, #0
 8005096:	d02d      	beq.n	80050f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005098:	4b85      	ldr	r3, [pc, #532]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	08db      	lsrs	r3, r3, #3
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	4a84      	ldr	r2, [pc, #528]	@ (80052b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80050a4:	fa22 f303 	lsr.w	r3, r2, r3
 80050a8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	ee07 3a90 	vmov	s15, r3
 80050b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	ee07 3a90 	vmov	s15, r3
 80050ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050c2:	4b7b      	ldr	r3, [pc, #492]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050d6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80050f2:	e087      	b.n	8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80052bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005106:	4b6a      	ldr	r3, [pc, #424]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005116:	ed97 6a03 	vldr	s12, [r7, #12]
 800511a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800511e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800512a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800512e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005136:	e065      	b.n	8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005142:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800514a:	4b59      	ldr	r3, [pc, #356]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800514c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800515a:	ed97 6a03 	vldr	s12, [r7, #12]
 800515e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800516a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800516e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005176:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800517a:	e043      	b.n	8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005186:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800518a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800518e:	4b48      	ldr	r3, [pc, #288]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800519e:	ed97 6a03 	vldr	s12, [r7, #12]
 80051a2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051be:	e021      	b.n	8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	ee07 3a90 	vmov	s15, r3
 80051c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80051ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051d2:	4b37      	ldr	r3, [pc, #220]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051e6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005202:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005204:	4b2a      	ldr	r3, [pc, #168]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005208:	0a5b      	lsrs	r3, r3, #9
 800520a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005216:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800521a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800521e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800522a:	ee17 2a90 	vmov	r2, s15
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005232:	4b1f      	ldr	r3, [pc, #124]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005236:	0c1b      	lsrs	r3, r3, #16
 8005238:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800523c:	ee07 3a90 	vmov	s15, r3
 8005240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005244:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005248:	ee37 7a87 	vadd.f32	s14, s15, s14
 800524c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005258:	ee17 2a90 	vmov	r2, s15
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005260:	4b13      	ldr	r3, [pc, #76]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005264:	0e1b      	lsrs	r3, r3, #24
 8005266:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005272:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005276:	ee37 7a87 	vadd.f32	s14, s15, s14
 800527a:	edd7 6a07 	vldr	s13, [r7, #28]
 800527e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005286:	ee17 2a90 	vmov	r2, s15
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800528e:	e008      	b.n	80052a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	609a      	str	r2, [r3, #8]
}
 80052a2:	bf00      	nop
 80052a4:	3724      	adds	r7, #36	@ 0x24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	58024400 	.word	0x58024400
 80052b4:	03d09000 	.word	0x03d09000
 80052b8:	46000000 	.word	0x46000000
 80052bc:	4c742400 	.word	0x4c742400
 80052c0:	4a742400 	.word	0x4a742400
 80052c4:	4af42400 	.word	0x4af42400

080052c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052d6:	4b53      	ldr	r3, [pc, #332]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80052d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d101      	bne.n	80052e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e099      	b.n	800541a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80052e6:	4b4f      	ldr	r3, [pc, #316]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a4e      	ldr	r2, [pc, #312]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80052ec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052f2:	f7fb ff3d 	bl	8001170 <HAL_GetTick>
 80052f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80052f8:	e008      	b.n	800530c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80052fa:	f7fb ff39 	bl	8001170 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d901      	bls.n	800530c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e086      	b.n	800541a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800530c:	4b45      	ldr	r3, [pc, #276]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1f0      	bne.n	80052fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005318:	4b42      	ldr	r3, [pc, #264]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 800531a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	031b      	lsls	r3, r3, #12
 8005326:	493f      	ldr	r1, [pc, #252]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005328:	4313      	orrs	r3, r2
 800532a:	628b      	str	r3, [r1, #40]	@ 0x28
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	3b01      	subs	r3, #1
 8005332:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	3b01      	subs	r3, #1
 800533c:	025b      	lsls	r3, r3, #9
 800533e:	b29b      	uxth	r3, r3
 8005340:	431a      	orrs	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	3b01      	subs	r3, #1
 8005348:	041b      	lsls	r3, r3, #16
 800534a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	3b01      	subs	r3, #1
 8005356:	061b      	lsls	r3, r3, #24
 8005358:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800535c:	4931      	ldr	r1, [pc, #196]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 800535e:	4313      	orrs	r3, r2
 8005360:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005362:	4b30      	ldr	r3, [pc, #192]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005366:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	492d      	ldr	r1, [pc, #180]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005370:	4313      	orrs	r3, r2
 8005372:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005374:	4b2b      	ldr	r3, [pc, #172]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005378:	f023 0220 	bic.w	r2, r3, #32
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	4928      	ldr	r1, [pc, #160]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005382:	4313      	orrs	r3, r2
 8005384:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005386:	4b27      	ldr	r3, [pc, #156]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538a:	4a26      	ldr	r2, [pc, #152]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 800538c:	f023 0310 	bic.w	r3, r3, #16
 8005390:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005392:	4b24      	ldr	r3, [pc, #144]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005394:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005396:	4b24      	ldr	r3, [pc, #144]	@ (8005428 <RCCEx_PLL2_Config+0x160>)
 8005398:	4013      	ands	r3, r2
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	69d2      	ldr	r2, [r2, #28]
 800539e:	00d2      	lsls	r2, r2, #3
 80053a0:	4920      	ldr	r1, [pc, #128]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80053a6:	4b1f      	ldr	r3, [pc, #124]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053ac:	f043 0310 	orr.w	r3, r3, #16
 80053b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d106      	bne.n	80053c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80053b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053bc:	4a19      	ldr	r2, [pc, #100]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80053c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053c4:	e00f      	b.n	80053e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d106      	bne.n	80053da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80053cc:	4b15      	ldr	r3, [pc, #84]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d0:	4a14      	ldr	r2, [pc, #80]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053d8:	e005      	b.n	80053e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80053da:	4b12      	ldr	r3, [pc, #72]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053de:	4a11      	ldr	r2, [pc, #68]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80053e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80053e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a0e      	ldr	r2, [pc, #56]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80053f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053f2:	f7fb febd 	bl	8001170 <HAL_GetTick>
 80053f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80053f8:	e008      	b.n	800540c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80053fa:	f7fb feb9 	bl	8001170 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d901      	bls.n	800540c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e006      	b.n	800541a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800540c:	4b05      	ldr	r3, [pc, #20]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0f0      	beq.n	80053fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005418:	7bfb      	ldrb	r3, [r7, #15]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	58024400 	.word	0x58024400
 8005428:	ffff0007 	.word	0xffff0007

0800542c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800543a:	4b53      	ldr	r3, [pc, #332]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 800543c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	2b03      	cmp	r3, #3
 8005444:	d101      	bne.n	800544a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e099      	b.n	800557e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800544a:	4b4f      	ldr	r3, [pc, #316]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a4e      	ldr	r2, [pc, #312]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005450:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005456:	f7fb fe8b 	bl	8001170 <HAL_GetTick>
 800545a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800545c:	e008      	b.n	8005470 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800545e:	f7fb fe87 	bl	8001170 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d901      	bls.n	8005470 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e086      	b.n	800557e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005470:	4b45      	ldr	r3, [pc, #276]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1f0      	bne.n	800545e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800547c:	4b42      	ldr	r3, [pc, #264]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 800547e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005480:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	051b      	lsls	r3, r3, #20
 800548a:	493f      	ldr	r1, [pc, #252]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 800548c:	4313      	orrs	r3, r2
 800548e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	3b01      	subs	r3, #1
 8005496:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	3b01      	subs	r3, #1
 80054a0:	025b      	lsls	r3, r3, #9
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	431a      	orrs	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	041b      	lsls	r3, r3, #16
 80054ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	3b01      	subs	r3, #1
 80054ba:	061b      	lsls	r3, r3, #24
 80054bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80054c0:	4931      	ldr	r1, [pc, #196]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80054c6:	4b30      	ldr	r3, [pc, #192]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	492d      	ldr	r1, [pc, #180]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80054d8:	4b2b      	ldr	r3, [pc, #172]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	4928      	ldr	r1, [pc, #160]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80054ea:	4b27      	ldr	r3, [pc, #156]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ee:	4a26      	ldr	r2, [pc, #152]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80054f6:	4b24      	ldr	r3, [pc, #144]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054fa:	4b24      	ldr	r3, [pc, #144]	@ (800558c <RCCEx_PLL3_Config+0x160>)
 80054fc:	4013      	ands	r3, r2
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	69d2      	ldr	r2, [r2, #28]
 8005502:	00d2      	lsls	r2, r2, #3
 8005504:	4920      	ldr	r1, [pc, #128]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005506:	4313      	orrs	r3, r2
 8005508:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800550a:	4b1f      	ldr	r3, [pc, #124]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 800550c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550e:	4a1e      	ldr	r2, [pc, #120]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005514:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d106      	bne.n	800552a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800551c:	4b1a      	ldr	r3, [pc, #104]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 800551e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005520:	4a19      	ldr	r2, [pc, #100]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005522:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005526:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005528:	e00f      	b.n	800554a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d106      	bne.n	800553e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005530:	4b15      	ldr	r3, [pc, #84]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005534:	4a14      	ldr	r2, [pc, #80]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005536:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800553a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800553c:	e005      	b.n	800554a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800553e:	4b12      	ldr	r3, [pc, #72]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005542:	4a11      	ldr	r2, [pc, #68]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005544:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005548:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800554a:	4b0f      	ldr	r3, [pc, #60]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a0e      	ldr	r2, [pc, #56]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005556:	f7fb fe0b 	bl	8001170 <HAL_GetTick>
 800555a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800555c:	e008      	b.n	8005570 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800555e:	f7fb fe07 	bl	8001170 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e006      	b.n	800557e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005570:	4b05      	ldr	r3, [pc, #20]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0f0      	beq.n	800555e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800557c:	7bfb      	ldrb	r3, [r7, #15]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	58024400 	.word	0x58024400
 800558c:	ffff0007 	.word	0xffff0007

08005590 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e042      	b.n	8005628 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d106      	bne.n	80055ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7fb fb93 	bl	8000ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2224      	movs	r2, #36	@ 0x24
 80055be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0201 	bic.w	r2, r2, #1
 80055d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f001 fafc 	bl	8006bd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 fc8d 	bl	8005f00 <UART_SetConfig>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e01b      	b.n	8005628 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800560e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f001 fb7b 	bl	8006d1c <UART_CheckIdleState>
 8005626:	4603      	mov	r3, r0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08a      	sub	sp, #40	@ 0x28
 8005634:	af02      	add	r7, sp, #8
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	603b      	str	r3, [r7, #0]
 800563c:	4613      	mov	r3, r2
 800563e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005646:	2b20      	cmp	r3, #32
 8005648:	d17b      	bne.n	8005742 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <HAL_UART_Transmit+0x26>
 8005650:	88fb      	ldrh	r3, [r7, #6]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e074      	b.n	8005744 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2221      	movs	r2, #33	@ 0x21
 8005666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800566a:	f7fb fd81 	bl	8001170 <HAL_GetTick>
 800566e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	88fa      	ldrh	r2, [r7, #6]
 8005674:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	88fa      	ldrh	r2, [r7, #6]
 800567c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005688:	d108      	bne.n	800569c <HAL_UART_Transmit+0x6c>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d104      	bne.n	800569c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005692:	2300      	movs	r3, #0
 8005694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	e003      	b.n	80056a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056a0:	2300      	movs	r3, #0
 80056a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056a4:	e030      	b.n	8005708 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2200      	movs	r2, #0
 80056ae:	2180      	movs	r1, #128	@ 0x80
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f001 fbdd 	bl	8006e70 <UART_WaitOnFlagUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d005      	beq.n	80056c8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2220      	movs	r2, #32
 80056c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e03d      	b.n	8005744 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10b      	bne.n	80056e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	3302      	adds	r3, #2
 80056e2:	61bb      	str	r3, [r7, #24]
 80056e4:	e007      	b.n	80056f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	781a      	ldrb	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	3301      	adds	r3, #1
 80056f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	3b01      	subs	r3, #1
 8005700:	b29a      	uxth	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800570e:	b29b      	uxth	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1c8      	bne.n	80056a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	2200      	movs	r2, #0
 800571c:	2140      	movs	r1, #64	@ 0x40
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f001 fba6 	bl	8006e70 <UART_WaitOnFlagUntilTimeout>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d005      	beq.n	8005736 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2220      	movs	r2, #32
 800572e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e006      	b.n	8005744 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2220      	movs	r2, #32
 800573a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	e000      	b.n	8005744 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005742:	2302      	movs	r3, #2
  }
}
 8005744:	4618      	mov	r0, r3
 8005746:	3720      	adds	r7, #32
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b0ba      	sub	sp, #232	@ 0xe8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005772:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005776:	f640 030f 	movw	r3, #2063	@ 0x80f
 800577a:	4013      	ands	r3, r2
 800577c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005780:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005784:	2b00      	cmp	r3, #0
 8005786:	d11b      	bne.n	80057c0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800578c:	f003 0320 	and.w	r3, r3, #32
 8005790:	2b00      	cmp	r3, #0
 8005792:	d015      	beq.n	80057c0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b00      	cmp	r3, #0
 800579e:	d105      	bne.n	80057ac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d009      	beq.n	80057c0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 8377 	beq.w	8005ea4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	4798      	blx	r3
      }
      return;
 80057be:	e371      	b.n	8005ea4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80057c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 8123 	beq.w	8005a10 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80057ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80057ce:	4b8d      	ldr	r3, [pc, #564]	@ (8005a04 <HAL_UART_IRQHandler+0x2b8>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d106      	bne.n	80057e4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80057d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80057da:	4b8b      	ldr	r3, [pc, #556]	@ (8005a08 <HAL_UART_IRQHandler+0x2bc>)
 80057dc:	4013      	ands	r3, r2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 8116 	beq.w	8005a10 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d011      	beq.n	8005814 <HAL_UART_IRQHandler+0xc8>
 80057f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00b      	beq.n	8005814 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2201      	movs	r2, #1
 8005802:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800580a:	f043 0201 	orr.w	r2, r3, #1
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d011      	beq.n	8005844 <HAL_UART_IRQHandler+0xf8>
 8005820:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00b      	beq.n	8005844 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2202      	movs	r2, #2
 8005832:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800583a:	f043 0204 	orr.w	r2, r3, #4
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b00      	cmp	r3, #0
 800584e:	d011      	beq.n	8005874 <HAL_UART_IRQHandler+0x128>
 8005850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00b      	beq.n	8005874 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2204      	movs	r2, #4
 8005862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800586a:	f043 0202 	orr.w	r2, r3, #2
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b00      	cmp	r3, #0
 800587e:	d017      	beq.n	80058b0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005884:	f003 0320 	and.w	r3, r3, #32
 8005888:	2b00      	cmp	r3, #0
 800588a:	d105      	bne.n	8005898 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800588c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005890:	4b5c      	ldr	r3, [pc, #368]	@ (8005a04 <HAL_UART_IRQHandler+0x2b8>)
 8005892:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00b      	beq.n	80058b0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2208      	movs	r2, #8
 800589e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058a6:	f043 0208 	orr.w	r2, r3, #8
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80058b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d012      	beq.n	80058e2 <HAL_UART_IRQHandler+0x196>
 80058bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00c      	beq.n	80058e2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d8:	f043 0220 	orr.w	r2, r3, #32
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 82dd 	beq.w	8005ea8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80058ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058f2:	f003 0320 	and.w	r3, r3, #32
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d013      	beq.n	8005922 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80058fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058fe:	f003 0320 	and.w	r3, r3, #32
 8005902:	2b00      	cmp	r3, #0
 8005904:	d105      	bne.n	8005912 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005906:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800590a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d007      	beq.n	8005922 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005928:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005936:	2b40      	cmp	r3, #64	@ 0x40
 8005938:	d005      	beq.n	8005946 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800593a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800593e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005942:	2b00      	cmp	r3, #0
 8005944:	d054      	beq.n	80059f0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f001 fb00 	bl	8006f4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005956:	2b40      	cmp	r3, #64	@ 0x40
 8005958:	d146      	bne.n	80059e8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3308      	adds	r3, #8
 8005960:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005964:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005968:	e853 3f00 	ldrex	r3, [r3]
 800596c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005970:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005974:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005978:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3308      	adds	r3, #8
 8005982:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005986:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800598a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005992:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005996:	e841 2300 	strex	r3, r2, [r1]
 800599a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800599e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1d9      	bne.n	800595a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d017      	beq.n	80059e0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059b6:	4a15      	ldr	r2, [pc, #84]	@ (8005a0c <HAL_UART_IRQHandler+0x2c0>)
 80059b8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7fc f847 	bl	8001a54 <HAL_DMA_Abort_IT>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d019      	beq.n	8005a00 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80059da:	4610      	mov	r0, r2
 80059dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059de:	e00f      	b.n	8005a00 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 fa77 	bl	8005ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e6:	e00b      	b.n	8005a00 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fa73 	bl	8005ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ee:	e007      	b.n	8005a00 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fa6f 	bl	8005ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80059fe:	e253      	b.n	8005ea8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a00:	bf00      	nop
    return;
 8005a02:	e251      	b.n	8005ea8 <HAL_UART_IRQHandler+0x75c>
 8005a04:	10000001 	.word	0x10000001
 8005a08:	04000120 	.word	0x04000120
 8005a0c:	08007019 	.word	0x08007019

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	f040 81e7 	bne.w	8005de8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a1e:	f003 0310 	and.w	r3, r3, #16
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 81e0 	beq.w	8005de8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a2c:	f003 0310 	and.w	r3, r3, #16
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 81d9 	beq.w	8005de8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2210      	movs	r2, #16
 8005a3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a48:	2b40      	cmp	r3, #64	@ 0x40
 8005a4a:	f040 8151 	bne.w	8005cf0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a96      	ldr	r2, [pc, #600]	@ (8005cb0 <HAL_UART_IRQHandler+0x564>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d068      	beq.n	8005b2e <HAL_UART_IRQHandler+0x3e2>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a93      	ldr	r2, [pc, #588]	@ (8005cb4 <HAL_UART_IRQHandler+0x568>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d061      	beq.n	8005b2e <HAL_UART_IRQHandler+0x3e2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a91      	ldr	r2, [pc, #580]	@ (8005cb8 <HAL_UART_IRQHandler+0x56c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d05a      	beq.n	8005b2e <HAL_UART_IRQHandler+0x3e2>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a8e      	ldr	r2, [pc, #568]	@ (8005cbc <HAL_UART_IRQHandler+0x570>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d053      	beq.n	8005b2e <HAL_UART_IRQHandler+0x3e2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a8c      	ldr	r2, [pc, #560]	@ (8005cc0 <HAL_UART_IRQHandler+0x574>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d04c      	beq.n	8005b2e <HAL_UART_IRQHandler+0x3e2>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a89      	ldr	r2, [pc, #548]	@ (8005cc4 <HAL_UART_IRQHandler+0x578>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d045      	beq.n	8005b2e <HAL_UART_IRQHandler+0x3e2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a87      	ldr	r2, [pc, #540]	@ (8005cc8 <HAL_UART_IRQHandler+0x57c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d03e      	beq.n	8005b2e <HAL_UART_IRQHandler+0x3e2>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a84      	ldr	r2, [pc, #528]	@ (8005ccc <HAL_UART_IRQHandler+0x580>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d037      	beq.n	8005b2e <HAL_UART_IRQHandler+0x3e2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a82      	ldr	r2, [pc, #520]	@ (8005cd0 <HAL_UART_IRQHandler+0x584>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d030      	beq.n	8005b2e <HAL_UART_IRQHandler+0x3e2>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a7f      	ldr	r2, [pc, #508]	@ (8005cd4 <HAL_UART_IRQHandler+0x588>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d029      	beq.n	8005b2e <HAL_UART_IRQHandler+0x3e2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a7d      	ldr	r2, [pc, #500]	@ (8005cd8 <HAL_UART_IRQHandler+0x58c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d022      	beq.n	8005b2e <HAL_UART_IRQHandler+0x3e2>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a7a      	ldr	r2, [pc, #488]	@ (8005cdc <HAL_UART_IRQHandler+0x590>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d01b      	beq.n	8005b2e <HAL_UART_IRQHandler+0x3e2>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a78      	ldr	r2, [pc, #480]	@ (8005ce0 <HAL_UART_IRQHandler+0x594>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d014      	beq.n	8005b2e <HAL_UART_IRQHandler+0x3e2>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a75      	ldr	r2, [pc, #468]	@ (8005ce4 <HAL_UART_IRQHandler+0x598>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d00d      	beq.n	8005b2e <HAL_UART_IRQHandler+0x3e2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a73      	ldr	r2, [pc, #460]	@ (8005ce8 <HAL_UART_IRQHandler+0x59c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d006      	beq.n	8005b2e <HAL_UART_IRQHandler+0x3e2>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a70      	ldr	r2, [pc, #448]	@ (8005cec <HAL_UART_IRQHandler+0x5a0>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d106      	bne.n	8005b3c <HAL_UART_IRQHandler+0x3f0>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	e005      	b.n	8005b48 <HAL_UART_IRQHandler+0x3fc>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 81ab 	beq.w	8005eac <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b60:	429a      	cmp	r2, r3
 8005b62:	f080 81a3 	bcs.w	8005eac <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b6c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b76:	69db      	ldr	r3, [r3, #28]
 8005b78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b7c:	f000 8087 	beq.w	8005c8e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b8c:	e853 3f00 	ldrex	r3, [r3]
 8005b90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005baa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005bae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005bb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005bba:	e841 2300 	strex	r3, r2, [r1]
 8005bbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1da      	bne.n	8005b80 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3308      	adds	r3, #8
 8005bd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005bda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005bdc:	f023 0301 	bic.w	r3, r3, #1
 8005be0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3308      	adds	r3, #8
 8005bea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005bee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005bf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005bf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005bfa:	e841 2300 	strex	r3, r2, [r1]
 8005bfe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1e1      	bne.n	8005bca <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3308      	adds	r3, #8
 8005c0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3308      	adds	r3, #8
 8005c26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005c2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c32:	e841 2300 	strex	r3, r2, [r1]
 8005c36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005c38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1e3      	bne.n	8005c06 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2220      	movs	r2, #32
 8005c42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c54:	e853 3f00 	ldrex	r3, [r3]
 8005c58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c5c:	f023 0310 	bic.w	r3, r3, #16
 8005c60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c76:	e841 2300 	strex	r3, r2, [r1]
 8005c7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1e4      	bne.n	8005c4c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7fb fbc5 	bl	8001418 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2202      	movs	r2, #2
 8005c92:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f91d 	bl	8005ee8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cae:	e0fd      	b.n	8005eac <HAL_UART_IRQHandler+0x760>
 8005cb0:	40020010 	.word	0x40020010
 8005cb4:	40020028 	.word	0x40020028
 8005cb8:	40020040 	.word	0x40020040
 8005cbc:	40020058 	.word	0x40020058
 8005cc0:	40020070 	.word	0x40020070
 8005cc4:	40020088 	.word	0x40020088
 8005cc8:	400200a0 	.word	0x400200a0
 8005ccc:	400200b8 	.word	0x400200b8
 8005cd0:	40020410 	.word	0x40020410
 8005cd4:	40020428 	.word	0x40020428
 8005cd8:	40020440 	.word	0x40020440
 8005cdc:	40020458 	.word	0x40020458
 8005ce0:	40020470 	.word	0x40020470
 8005ce4:	40020488 	.word	0x40020488
 8005ce8:	400204a0 	.word	0x400204a0
 8005cec:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 80cf 	beq.w	8005eb0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8005d12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 80ca 	beq.w	8005eb0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d24:	e853 3f00 	ldrex	r3, [r3]
 8005d28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005d3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d40:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d46:	e841 2300 	strex	r3, r2, [r1]
 8005d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1e4      	bne.n	8005d1c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3308      	adds	r3, #8
 8005d58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5c:	e853 3f00 	ldrex	r3, [r3]
 8005d60:	623b      	str	r3, [r7, #32]
   return(result);
 8005d62:	6a3a      	ldr	r2, [r7, #32]
 8005d64:	4b55      	ldr	r3, [pc, #340]	@ (8005ebc <HAL_UART_IRQHandler+0x770>)
 8005d66:	4013      	ands	r3, r2
 8005d68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3308      	adds	r3, #8
 8005d72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005d76:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d7e:	e841 2300 	strex	r3, r2, [r1]
 8005d82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1e3      	bne.n	8005d52 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	e853 3f00 	ldrex	r3, [r3]
 8005daa:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f023 0310 	bic.w	r3, r3, #16
 8005db2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005dc0:	61fb      	str	r3, [r7, #28]
 8005dc2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc4:	69b9      	ldr	r1, [r7, #24]
 8005dc6:	69fa      	ldr	r2, [r7, #28]
 8005dc8:	e841 2300 	strex	r3, r2, [r1]
 8005dcc:	617b      	str	r3, [r7, #20]
   return(result);
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1e4      	bne.n	8005d9e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005dde:	4619      	mov	r1, r3
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f881 	bl	8005ee8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005de6:	e063      	b.n	8005eb0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00e      	beq.n	8005e12 <HAL_UART_IRQHandler+0x6c6>
 8005df4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005df8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d008      	beq.n	8005e12 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005e08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f001 f945 	bl	800709a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e10:	e051      	b.n	8005eb6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d014      	beq.n	8005e48 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d105      	bne.n	8005e36 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d008      	beq.n	8005e48 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d03a      	beq.n	8005eb4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4798      	blx	r3
    }
    return;
 8005e46:	e035      	b.n	8005eb4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d009      	beq.n	8005e68 <HAL_UART_IRQHandler+0x71c>
 8005e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f001 f8ef 	bl	8007044 <UART_EndTransmit_IT>
    return;
 8005e66:	e026      	b.n	8005eb6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d009      	beq.n	8005e88 <HAL_UART_IRQHandler+0x73c>
 8005e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e78:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f001 f91e 	bl	80070c2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e86:	e016      	b.n	8005eb6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d010      	beq.n	8005eb6 <HAL_UART_IRQHandler+0x76a>
 8005e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	da0c      	bge.n	8005eb6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f001 f906 	bl	80070ae <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ea2:	e008      	b.n	8005eb6 <HAL_UART_IRQHandler+0x76a>
      return;
 8005ea4:	bf00      	nop
 8005ea6:	e006      	b.n	8005eb6 <HAL_UART_IRQHandler+0x76a>
    return;
 8005ea8:	bf00      	nop
 8005eaa:	e004      	b.n	8005eb6 <HAL_UART_IRQHandler+0x76a>
      return;
 8005eac:	bf00      	nop
 8005eae:	e002      	b.n	8005eb6 <HAL_UART_IRQHandler+0x76a>
      return;
 8005eb0:	bf00      	nop
 8005eb2:	e000      	b.n	8005eb6 <HAL_UART_IRQHandler+0x76a>
    return;
 8005eb4:	bf00      	nop
  }
}
 8005eb6:	37e8      	adds	r7, #232	@ 0xe8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	effffffe 	.word	0xeffffffe

08005ec0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f04:	b092      	sub	sp, #72	@ 0x48
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	4bbe      	ldr	r3, [pc, #760]	@ (8006228 <UART_SetConfig+0x328>)
 8005f30:	4013      	ands	r3, r2
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	6812      	ldr	r2, [r2, #0]
 8005f36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4ab3      	ldr	r2, [pc, #716]	@ (800622c <UART_SetConfig+0x32c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d004      	beq.n	8005f6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	4baf      	ldr	r3, [pc, #700]	@ (8006230 <UART_SetConfig+0x330>)
 8005f74:	4013      	ands	r3, r2
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	6812      	ldr	r2, [r2, #0]
 8005f7a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005f7c:	430b      	orrs	r3, r1
 8005f7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f86:	f023 010f 	bic.w	r1, r3, #15
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4aa6      	ldr	r2, [pc, #664]	@ (8006234 <UART_SetConfig+0x334>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d177      	bne.n	8006090 <UART_SetConfig+0x190>
 8005fa0:	4ba5      	ldr	r3, [pc, #660]	@ (8006238 <UART_SetConfig+0x338>)
 8005fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fa8:	2b28      	cmp	r3, #40	@ 0x28
 8005faa:	d86d      	bhi.n	8006088 <UART_SetConfig+0x188>
 8005fac:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb4 <UART_SetConfig+0xb4>)
 8005fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb2:	bf00      	nop
 8005fb4:	08006059 	.word	0x08006059
 8005fb8:	08006089 	.word	0x08006089
 8005fbc:	08006089 	.word	0x08006089
 8005fc0:	08006089 	.word	0x08006089
 8005fc4:	08006089 	.word	0x08006089
 8005fc8:	08006089 	.word	0x08006089
 8005fcc:	08006089 	.word	0x08006089
 8005fd0:	08006089 	.word	0x08006089
 8005fd4:	08006061 	.word	0x08006061
 8005fd8:	08006089 	.word	0x08006089
 8005fdc:	08006089 	.word	0x08006089
 8005fe0:	08006089 	.word	0x08006089
 8005fe4:	08006089 	.word	0x08006089
 8005fe8:	08006089 	.word	0x08006089
 8005fec:	08006089 	.word	0x08006089
 8005ff0:	08006089 	.word	0x08006089
 8005ff4:	08006069 	.word	0x08006069
 8005ff8:	08006089 	.word	0x08006089
 8005ffc:	08006089 	.word	0x08006089
 8006000:	08006089 	.word	0x08006089
 8006004:	08006089 	.word	0x08006089
 8006008:	08006089 	.word	0x08006089
 800600c:	08006089 	.word	0x08006089
 8006010:	08006089 	.word	0x08006089
 8006014:	08006071 	.word	0x08006071
 8006018:	08006089 	.word	0x08006089
 800601c:	08006089 	.word	0x08006089
 8006020:	08006089 	.word	0x08006089
 8006024:	08006089 	.word	0x08006089
 8006028:	08006089 	.word	0x08006089
 800602c:	08006089 	.word	0x08006089
 8006030:	08006089 	.word	0x08006089
 8006034:	08006079 	.word	0x08006079
 8006038:	08006089 	.word	0x08006089
 800603c:	08006089 	.word	0x08006089
 8006040:	08006089 	.word	0x08006089
 8006044:	08006089 	.word	0x08006089
 8006048:	08006089 	.word	0x08006089
 800604c:	08006089 	.word	0x08006089
 8006050:	08006089 	.word	0x08006089
 8006054:	08006081 	.word	0x08006081
 8006058:	2301      	movs	r3, #1
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605e:	e326      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006060:	2304      	movs	r3, #4
 8006062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006066:	e322      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006068:	2308      	movs	r3, #8
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800606e:	e31e      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006070:	2310      	movs	r3, #16
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006076:	e31a      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006078:	2320      	movs	r3, #32
 800607a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800607e:	e316      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006080:	2340      	movs	r3, #64	@ 0x40
 8006082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006086:	e312      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006088:	2380      	movs	r3, #128	@ 0x80
 800608a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800608e:	e30e      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a69      	ldr	r2, [pc, #420]	@ (800623c <UART_SetConfig+0x33c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d130      	bne.n	80060fc <UART_SetConfig+0x1fc>
 800609a:	4b67      	ldr	r3, [pc, #412]	@ (8006238 <UART_SetConfig+0x338>)
 800609c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800609e:	f003 0307 	and.w	r3, r3, #7
 80060a2:	2b05      	cmp	r3, #5
 80060a4:	d826      	bhi.n	80060f4 <UART_SetConfig+0x1f4>
 80060a6:	a201      	add	r2, pc, #4	@ (adr r2, 80060ac <UART_SetConfig+0x1ac>)
 80060a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ac:	080060c5 	.word	0x080060c5
 80060b0:	080060cd 	.word	0x080060cd
 80060b4:	080060d5 	.word	0x080060d5
 80060b8:	080060dd 	.word	0x080060dd
 80060bc:	080060e5 	.word	0x080060e5
 80060c0:	080060ed 	.word	0x080060ed
 80060c4:	2300      	movs	r3, #0
 80060c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ca:	e2f0      	b.n	80066ae <UART_SetConfig+0x7ae>
 80060cc:	2304      	movs	r3, #4
 80060ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060d2:	e2ec      	b.n	80066ae <UART_SetConfig+0x7ae>
 80060d4:	2308      	movs	r3, #8
 80060d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060da:	e2e8      	b.n	80066ae <UART_SetConfig+0x7ae>
 80060dc:	2310      	movs	r3, #16
 80060de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060e2:	e2e4      	b.n	80066ae <UART_SetConfig+0x7ae>
 80060e4:	2320      	movs	r3, #32
 80060e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ea:	e2e0      	b.n	80066ae <UART_SetConfig+0x7ae>
 80060ec:	2340      	movs	r3, #64	@ 0x40
 80060ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060f2:	e2dc      	b.n	80066ae <UART_SetConfig+0x7ae>
 80060f4:	2380      	movs	r3, #128	@ 0x80
 80060f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060fa:	e2d8      	b.n	80066ae <UART_SetConfig+0x7ae>
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a4f      	ldr	r2, [pc, #316]	@ (8006240 <UART_SetConfig+0x340>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d130      	bne.n	8006168 <UART_SetConfig+0x268>
 8006106:	4b4c      	ldr	r3, [pc, #304]	@ (8006238 <UART_SetConfig+0x338>)
 8006108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800610a:	f003 0307 	and.w	r3, r3, #7
 800610e:	2b05      	cmp	r3, #5
 8006110:	d826      	bhi.n	8006160 <UART_SetConfig+0x260>
 8006112:	a201      	add	r2, pc, #4	@ (adr r2, 8006118 <UART_SetConfig+0x218>)
 8006114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006118:	08006131 	.word	0x08006131
 800611c:	08006139 	.word	0x08006139
 8006120:	08006141 	.word	0x08006141
 8006124:	08006149 	.word	0x08006149
 8006128:	08006151 	.word	0x08006151
 800612c:	08006159 	.word	0x08006159
 8006130:	2300      	movs	r3, #0
 8006132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006136:	e2ba      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006138:	2304      	movs	r3, #4
 800613a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800613e:	e2b6      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006140:	2308      	movs	r3, #8
 8006142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006146:	e2b2      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006148:	2310      	movs	r3, #16
 800614a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800614e:	e2ae      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006150:	2320      	movs	r3, #32
 8006152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006156:	e2aa      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006158:	2340      	movs	r3, #64	@ 0x40
 800615a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800615e:	e2a6      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006160:	2380      	movs	r3, #128	@ 0x80
 8006162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006166:	e2a2      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a35      	ldr	r2, [pc, #212]	@ (8006244 <UART_SetConfig+0x344>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d130      	bne.n	80061d4 <UART_SetConfig+0x2d4>
 8006172:	4b31      	ldr	r3, [pc, #196]	@ (8006238 <UART_SetConfig+0x338>)
 8006174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006176:	f003 0307 	and.w	r3, r3, #7
 800617a:	2b05      	cmp	r3, #5
 800617c:	d826      	bhi.n	80061cc <UART_SetConfig+0x2cc>
 800617e:	a201      	add	r2, pc, #4	@ (adr r2, 8006184 <UART_SetConfig+0x284>)
 8006180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006184:	0800619d 	.word	0x0800619d
 8006188:	080061a5 	.word	0x080061a5
 800618c:	080061ad 	.word	0x080061ad
 8006190:	080061b5 	.word	0x080061b5
 8006194:	080061bd 	.word	0x080061bd
 8006198:	080061c5 	.word	0x080061c5
 800619c:	2300      	movs	r3, #0
 800619e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061a2:	e284      	b.n	80066ae <UART_SetConfig+0x7ae>
 80061a4:	2304      	movs	r3, #4
 80061a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061aa:	e280      	b.n	80066ae <UART_SetConfig+0x7ae>
 80061ac:	2308      	movs	r3, #8
 80061ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061b2:	e27c      	b.n	80066ae <UART_SetConfig+0x7ae>
 80061b4:	2310      	movs	r3, #16
 80061b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ba:	e278      	b.n	80066ae <UART_SetConfig+0x7ae>
 80061bc:	2320      	movs	r3, #32
 80061be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061c2:	e274      	b.n	80066ae <UART_SetConfig+0x7ae>
 80061c4:	2340      	movs	r3, #64	@ 0x40
 80061c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ca:	e270      	b.n	80066ae <UART_SetConfig+0x7ae>
 80061cc:	2380      	movs	r3, #128	@ 0x80
 80061ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061d2:	e26c      	b.n	80066ae <UART_SetConfig+0x7ae>
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a1b      	ldr	r2, [pc, #108]	@ (8006248 <UART_SetConfig+0x348>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d142      	bne.n	8006264 <UART_SetConfig+0x364>
 80061de:	4b16      	ldr	r3, [pc, #88]	@ (8006238 <UART_SetConfig+0x338>)
 80061e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061e2:	f003 0307 	and.w	r3, r3, #7
 80061e6:	2b05      	cmp	r3, #5
 80061e8:	d838      	bhi.n	800625c <UART_SetConfig+0x35c>
 80061ea:	a201      	add	r2, pc, #4	@ (adr r2, 80061f0 <UART_SetConfig+0x2f0>)
 80061ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f0:	08006209 	.word	0x08006209
 80061f4:	08006211 	.word	0x08006211
 80061f8:	08006219 	.word	0x08006219
 80061fc:	08006221 	.word	0x08006221
 8006200:	0800624d 	.word	0x0800624d
 8006204:	08006255 	.word	0x08006255
 8006208:	2300      	movs	r3, #0
 800620a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800620e:	e24e      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006210:	2304      	movs	r3, #4
 8006212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006216:	e24a      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006218:	2308      	movs	r3, #8
 800621a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800621e:	e246      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006220:	2310      	movs	r3, #16
 8006222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006226:	e242      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006228:	cfff69f3 	.word	0xcfff69f3
 800622c:	58000c00 	.word	0x58000c00
 8006230:	11fff4ff 	.word	0x11fff4ff
 8006234:	40011000 	.word	0x40011000
 8006238:	58024400 	.word	0x58024400
 800623c:	40004400 	.word	0x40004400
 8006240:	40004800 	.word	0x40004800
 8006244:	40004c00 	.word	0x40004c00
 8006248:	40005000 	.word	0x40005000
 800624c:	2320      	movs	r3, #32
 800624e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006252:	e22c      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006254:	2340      	movs	r3, #64	@ 0x40
 8006256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800625a:	e228      	b.n	80066ae <UART_SetConfig+0x7ae>
 800625c:	2380      	movs	r3, #128	@ 0x80
 800625e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006262:	e224      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4ab1      	ldr	r2, [pc, #708]	@ (8006530 <UART_SetConfig+0x630>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d176      	bne.n	800635c <UART_SetConfig+0x45c>
 800626e:	4bb1      	ldr	r3, [pc, #708]	@ (8006534 <UART_SetConfig+0x634>)
 8006270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006272:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006276:	2b28      	cmp	r3, #40	@ 0x28
 8006278:	d86c      	bhi.n	8006354 <UART_SetConfig+0x454>
 800627a:	a201      	add	r2, pc, #4	@ (adr r2, 8006280 <UART_SetConfig+0x380>)
 800627c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006280:	08006325 	.word	0x08006325
 8006284:	08006355 	.word	0x08006355
 8006288:	08006355 	.word	0x08006355
 800628c:	08006355 	.word	0x08006355
 8006290:	08006355 	.word	0x08006355
 8006294:	08006355 	.word	0x08006355
 8006298:	08006355 	.word	0x08006355
 800629c:	08006355 	.word	0x08006355
 80062a0:	0800632d 	.word	0x0800632d
 80062a4:	08006355 	.word	0x08006355
 80062a8:	08006355 	.word	0x08006355
 80062ac:	08006355 	.word	0x08006355
 80062b0:	08006355 	.word	0x08006355
 80062b4:	08006355 	.word	0x08006355
 80062b8:	08006355 	.word	0x08006355
 80062bc:	08006355 	.word	0x08006355
 80062c0:	08006335 	.word	0x08006335
 80062c4:	08006355 	.word	0x08006355
 80062c8:	08006355 	.word	0x08006355
 80062cc:	08006355 	.word	0x08006355
 80062d0:	08006355 	.word	0x08006355
 80062d4:	08006355 	.word	0x08006355
 80062d8:	08006355 	.word	0x08006355
 80062dc:	08006355 	.word	0x08006355
 80062e0:	0800633d 	.word	0x0800633d
 80062e4:	08006355 	.word	0x08006355
 80062e8:	08006355 	.word	0x08006355
 80062ec:	08006355 	.word	0x08006355
 80062f0:	08006355 	.word	0x08006355
 80062f4:	08006355 	.word	0x08006355
 80062f8:	08006355 	.word	0x08006355
 80062fc:	08006355 	.word	0x08006355
 8006300:	08006345 	.word	0x08006345
 8006304:	08006355 	.word	0x08006355
 8006308:	08006355 	.word	0x08006355
 800630c:	08006355 	.word	0x08006355
 8006310:	08006355 	.word	0x08006355
 8006314:	08006355 	.word	0x08006355
 8006318:	08006355 	.word	0x08006355
 800631c:	08006355 	.word	0x08006355
 8006320:	0800634d 	.word	0x0800634d
 8006324:	2301      	movs	r3, #1
 8006326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800632a:	e1c0      	b.n	80066ae <UART_SetConfig+0x7ae>
 800632c:	2304      	movs	r3, #4
 800632e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006332:	e1bc      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006334:	2308      	movs	r3, #8
 8006336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800633a:	e1b8      	b.n	80066ae <UART_SetConfig+0x7ae>
 800633c:	2310      	movs	r3, #16
 800633e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006342:	e1b4      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006344:	2320      	movs	r3, #32
 8006346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800634a:	e1b0      	b.n	80066ae <UART_SetConfig+0x7ae>
 800634c:	2340      	movs	r3, #64	@ 0x40
 800634e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006352:	e1ac      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006354:	2380      	movs	r3, #128	@ 0x80
 8006356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800635a:	e1a8      	b.n	80066ae <UART_SetConfig+0x7ae>
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a75      	ldr	r2, [pc, #468]	@ (8006538 <UART_SetConfig+0x638>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d130      	bne.n	80063c8 <UART_SetConfig+0x4c8>
 8006366:	4b73      	ldr	r3, [pc, #460]	@ (8006534 <UART_SetConfig+0x634>)
 8006368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800636a:	f003 0307 	and.w	r3, r3, #7
 800636e:	2b05      	cmp	r3, #5
 8006370:	d826      	bhi.n	80063c0 <UART_SetConfig+0x4c0>
 8006372:	a201      	add	r2, pc, #4	@ (adr r2, 8006378 <UART_SetConfig+0x478>)
 8006374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006378:	08006391 	.word	0x08006391
 800637c:	08006399 	.word	0x08006399
 8006380:	080063a1 	.word	0x080063a1
 8006384:	080063a9 	.word	0x080063a9
 8006388:	080063b1 	.word	0x080063b1
 800638c:	080063b9 	.word	0x080063b9
 8006390:	2300      	movs	r3, #0
 8006392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006396:	e18a      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006398:	2304      	movs	r3, #4
 800639a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800639e:	e186      	b.n	80066ae <UART_SetConfig+0x7ae>
 80063a0:	2308      	movs	r3, #8
 80063a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063a6:	e182      	b.n	80066ae <UART_SetConfig+0x7ae>
 80063a8:	2310      	movs	r3, #16
 80063aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ae:	e17e      	b.n	80066ae <UART_SetConfig+0x7ae>
 80063b0:	2320      	movs	r3, #32
 80063b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063b6:	e17a      	b.n	80066ae <UART_SetConfig+0x7ae>
 80063b8:	2340      	movs	r3, #64	@ 0x40
 80063ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063be:	e176      	b.n	80066ae <UART_SetConfig+0x7ae>
 80063c0:	2380      	movs	r3, #128	@ 0x80
 80063c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063c6:	e172      	b.n	80066ae <UART_SetConfig+0x7ae>
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a5b      	ldr	r2, [pc, #364]	@ (800653c <UART_SetConfig+0x63c>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d130      	bne.n	8006434 <UART_SetConfig+0x534>
 80063d2:	4b58      	ldr	r3, [pc, #352]	@ (8006534 <UART_SetConfig+0x634>)
 80063d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	2b05      	cmp	r3, #5
 80063dc:	d826      	bhi.n	800642c <UART_SetConfig+0x52c>
 80063de:	a201      	add	r2, pc, #4	@ (adr r2, 80063e4 <UART_SetConfig+0x4e4>)
 80063e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e4:	080063fd 	.word	0x080063fd
 80063e8:	08006405 	.word	0x08006405
 80063ec:	0800640d 	.word	0x0800640d
 80063f0:	08006415 	.word	0x08006415
 80063f4:	0800641d 	.word	0x0800641d
 80063f8:	08006425 	.word	0x08006425
 80063fc:	2300      	movs	r3, #0
 80063fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006402:	e154      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006404:	2304      	movs	r3, #4
 8006406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800640a:	e150      	b.n	80066ae <UART_SetConfig+0x7ae>
 800640c:	2308      	movs	r3, #8
 800640e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006412:	e14c      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006414:	2310      	movs	r3, #16
 8006416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800641a:	e148      	b.n	80066ae <UART_SetConfig+0x7ae>
 800641c:	2320      	movs	r3, #32
 800641e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006422:	e144      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006424:	2340      	movs	r3, #64	@ 0x40
 8006426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800642a:	e140      	b.n	80066ae <UART_SetConfig+0x7ae>
 800642c:	2380      	movs	r3, #128	@ 0x80
 800642e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006432:	e13c      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a41      	ldr	r2, [pc, #260]	@ (8006540 <UART_SetConfig+0x640>)
 800643a:	4293      	cmp	r3, r2
 800643c:	f040 8082 	bne.w	8006544 <UART_SetConfig+0x644>
 8006440:	4b3c      	ldr	r3, [pc, #240]	@ (8006534 <UART_SetConfig+0x634>)
 8006442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006444:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006448:	2b28      	cmp	r3, #40	@ 0x28
 800644a:	d86d      	bhi.n	8006528 <UART_SetConfig+0x628>
 800644c:	a201      	add	r2, pc, #4	@ (adr r2, 8006454 <UART_SetConfig+0x554>)
 800644e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006452:	bf00      	nop
 8006454:	080064f9 	.word	0x080064f9
 8006458:	08006529 	.word	0x08006529
 800645c:	08006529 	.word	0x08006529
 8006460:	08006529 	.word	0x08006529
 8006464:	08006529 	.word	0x08006529
 8006468:	08006529 	.word	0x08006529
 800646c:	08006529 	.word	0x08006529
 8006470:	08006529 	.word	0x08006529
 8006474:	08006501 	.word	0x08006501
 8006478:	08006529 	.word	0x08006529
 800647c:	08006529 	.word	0x08006529
 8006480:	08006529 	.word	0x08006529
 8006484:	08006529 	.word	0x08006529
 8006488:	08006529 	.word	0x08006529
 800648c:	08006529 	.word	0x08006529
 8006490:	08006529 	.word	0x08006529
 8006494:	08006509 	.word	0x08006509
 8006498:	08006529 	.word	0x08006529
 800649c:	08006529 	.word	0x08006529
 80064a0:	08006529 	.word	0x08006529
 80064a4:	08006529 	.word	0x08006529
 80064a8:	08006529 	.word	0x08006529
 80064ac:	08006529 	.word	0x08006529
 80064b0:	08006529 	.word	0x08006529
 80064b4:	08006511 	.word	0x08006511
 80064b8:	08006529 	.word	0x08006529
 80064bc:	08006529 	.word	0x08006529
 80064c0:	08006529 	.word	0x08006529
 80064c4:	08006529 	.word	0x08006529
 80064c8:	08006529 	.word	0x08006529
 80064cc:	08006529 	.word	0x08006529
 80064d0:	08006529 	.word	0x08006529
 80064d4:	08006519 	.word	0x08006519
 80064d8:	08006529 	.word	0x08006529
 80064dc:	08006529 	.word	0x08006529
 80064e0:	08006529 	.word	0x08006529
 80064e4:	08006529 	.word	0x08006529
 80064e8:	08006529 	.word	0x08006529
 80064ec:	08006529 	.word	0x08006529
 80064f0:	08006529 	.word	0x08006529
 80064f4:	08006521 	.word	0x08006521
 80064f8:	2301      	movs	r3, #1
 80064fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064fe:	e0d6      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006500:	2304      	movs	r3, #4
 8006502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006506:	e0d2      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006508:	2308      	movs	r3, #8
 800650a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800650e:	e0ce      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006510:	2310      	movs	r3, #16
 8006512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006516:	e0ca      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006518:	2320      	movs	r3, #32
 800651a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800651e:	e0c6      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006520:	2340      	movs	r3, #64	@ 0x40
 8006522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006526:	e0c2      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006528:	2380      	movs	r3, #128	@ 0x80
 800652a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800652e:	e0be      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006530:	40011400 	.word	0x40011400
 8006534:	58024400 	.word	0x58024400
 8006538:	40007800 	.word	0x40007800
 800653c:	40007c00 	.word	0x40007c00
 8006540:	40011800 	.word	0x40011800
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4aad      	ldr	r2, [pc, #692]	@ (8006800 <UART_SetConfig+0x900>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d176      	bne.n	800663c <UART_SetConfig+0x73c>
 800654e:	4bad      	ldr	r3, [pc, #692]	@ (8006804 <UART_SetConfig+0x904>)
 8006550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006552:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006556:	2b28      	cmp	r3, #40	@ 0x28
 8006558:	d86c      	bhi.n	8006634 <UART_SetConfig+0x734>
 800655a:	a201      	add	r2, pc, #4	@ (adr r2, 8006560 <UART_SetConfig+0x660>)
 800655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006560:	08006605 	.word	0x08006605
 8006564:	08006635 	.word	0x08006635
 8006568:	08006635 	.word	0x08006635
 800656c:	08006635 	.word	0x08006635
 8006570:	08006635 	.word	0x08006635
 8006574:	08006635 	.word	0x08006635
 8006578:	08006635 	.word	0x08006635
 800657c:	08006635 	.word	0x08006635
 8006580:	0800660d 	.word	0x0800660d
 8006584:	08006635 	.word	0x08006635
 8006588:	08006635 	.word	0x08006635
 800658c:	08006635 	.word	0x08006635
 8006590:	08006635 	.word	0x08006635
 8006594:	08006635 	.word	0x08006635
 8006598:	08006635 	.word	0x08006635
 800659c:	08006635 	.word	0x08006635
 80065a0:	08006615 	.word	0x08006615
 80065a4:	08006635 	.word	0x08006635
 80065a8:	08006635 	.word	0x08006635
 80065ac:	08006635 	.word	0x08006635
 80065b0:	08006635 	.word	0x08006635
 80065b4:	08006635 	.word	0x08006635
 80065b8:	08006635 	.word	0x08006635
 80065bc:	08006635 	.word	0x08006635
 80065c0:	0800661d 	.word	0x0800661d
 80065c4:	08006635 	.word	0x08006635
 80065c8:	08006635 	.word	0x08006635
 80065cc:	08006635 	.word	0x08006635
 80065d0:	08006635 	.word	0x08006635
 80065d4:	08006635 	.word	0x08006635
 80065d8:	08006635 	.word	0x08006635
 80065dc:	08006635 	.word	0x08006635
 80065e0:	08006625 	.word	0x08006625
 80065e4:	08006635 	.word	0x08006635
 80065e8:	08006635 	.word	0x08006635
 80065ec:	08006635 	.word	0x08006635
 80065f0:	08006635 	.word	0x08006635
 80065f4:	08006635 	.word	0x08006635
 80065f8:	08006635 	.word	0x08006635
 80065fc:	08006635 	.word	0x08006635
 8006600:	0800662d 	.word	0x0800662d
 8006604:	2301      	movs	r3, #1
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800660a:	e050      	b.n	80066ae <UART_SetConfig+0x7ae>
 800660c:	2304      	movs	r3, #4
 800660e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006612:	e04c      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006614:	2308      	movs	r3, #8
 8006616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800661a:	e048      	b.n	80066ae <UART_SetConfig+0x7ae>
 800661c:	2310      	movs	r3, #16
 800661e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006622:	e044      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006624:	2320      	movs	r3, #32
 8006626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800662a:	e040      	b.n	80066ae <UART_SetConfig+0x7ae>
 800662c:	2340      	movs	r3, #64	@ 0x40
 800662e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006632:	e03c      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006634:	2380      	movs	r3, #128	@ 0x80
 8006636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800663a:	e038      	b.n	80066ae <UART_SetConfig+0x7ae>
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a71      	ldr	r2, [pc, #452]	@ (8006808 <UART_SetConfig+0x908>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d130      	bne.n	80066a8 <UART_SetConfig+0x7a8>
 8006646:	4b6f      	ldr	r3, [pc, #444]	@ (8006804 <UART_SetConfig+0x904>)
 8006648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	2b05      	cmp	r3, #5
 8006650:	d826      	bhi.n	80066a0 <UART_SetConfig+0x7a0>
 8006652:	a201      	add	r2, pc, #4	@ (adr r2, 8006658 <UART_SetConfig+0x758>)
 8006654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006658:	08006671 	.word	0x08006671
 800665c:	08006679 	.word	0x08006679
 8006660:	08006681 	.word	0x08006681
 8006664:	08006689 	.word	0x08006689
 8006668:	08006691 	.word	0x08006691
 800666c:	08006699 	.word	0x08006699
 8006670:	2302      	movs	r3, #2
 8006672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006676:	e01a      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006678:	2304      	movs	r3, #4
 800667a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800667e:	e016      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006680:	2308      	movs	r3, #8
 8006682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006686:	e012      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006688:	2310      	movs	r3, #16
 800668a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800668e:	e00e      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006690:	2320      	movs	r3, #32
 8006692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006696:	e00a      	b.n	80066ae <UART_SetConfig+0x7ae>
 8006698:	2340      	movs	r3, #64	@ 0x40
 800669a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800669e:	e006      	b.n	80066ae <UART_SetConfig+0x7ae>
 80066a0:	2380      	movs	r3, #128	@ 0x80
 80066a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066a6:	e002      	b.n	80066ae <UART_SetConfig+0x7ae>
 80066a8:	2380      	movs	r3, #128	@ 0x80
 80066aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a55      	ldr	r2, [pc, #340]	@ (8006808 <UART_SetConfig+0x908>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	f040 80f8 	bne.w	80068aa <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80066be:	2b20      	cmp	r3, #32
 80066c0:	dc46      	bgt.n	8006750 <UART_SetConfig+0x850>
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	db75      	blt.n	80067b2 <UART_SetConfig+0x8b2>
 80066c6:	3b02      	subs	r3, #2
 80066c8:	2b1e      	cmp	r3, #30
 80066ca:	d872      	bhi.n	80067b2 <UART_SetConfig+0x8b2>
 80066cc:	a201      	add	r2, pc, #4	@ (adr r2, 80066d4 <UART_SetConfig+0x7d4>)
 80066ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d2:	bf00      	nop
 80066d4:	08006757 	.word	0x08006757
 80066d8:	080067b3 	.word	0x080067b3
 80066dc:	0800675f 	.word	0x0800675f
 80066e0:	080067b3 	.word	0x080067b3
 80066e4:	080067b3 	.word	0x080067b3
 80066e8:	080067b3 	.word	0x080067b3
 80066ec:	0800676f 	.word	0x0800676f
 80066f0:	080067b3 	.word	0x080067b3
 80066f4:	080067b3 	.word	0x080067b3
 80066f8:	080067b3 	.word	0x080067b3
 80066fc:	080067b3 	.word	0x080067b3
 8006700:	080067b3 	.word	0x080067b3
 8006704:	080067b3 	.word	0x080067b3
 8006708:	080067b3 	.word	0x080067b3
 800670c:	0800677f 	.word	0x0800677f
 8006710:	080067b3 	.word	0x080067b3
 8006714:	080067b3 	.word	0x080067b3
 8006718:	080067b3 	.word	0x080067b3
 800671c:	080067b3 	.word	0x080067b3
 8006720:	080067b3 	.word	0x080067b3
 8006724:	080067b3 	.word	0x080067b3
 8006728:	080067b3 	.word	0x080067b3
 800672c:	080067b3 	.word	0x080067b3
 8006730:	080067b3 	.word	0x080067b3
 8006734:	080067b3 	.word	0x080067b3
 8006738:	080067b3 	.word	0x080067b3
 800673c:	080067b3 	.word	0x080067b3
 8006740:	080067b3 	.word	0x080067b3
 8006744:	080067b3 	.word	0x080067b3
 8006748:	080067b3 	.word	0x080067b3
 800674c:	080067a5 	.word	0x080067a5
 8006750:	2b40      	cmp	r3, #64	@ 0x40
 8006752:	d02a      	beq.n	80067aa <UART_SetConfig+0x8aa>
 8006754:	e02d      	b.n	80067b2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006756:	f7fe faf9 	bl	8004d4c <HAL_RCCEx_GetD3PCLK1Freq>
 800675a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800675c:	e02f      	b.n	80067be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800675e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006762:	4618      	mov	r0, r3
 8006764:	f7fe fb08 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800676c:	e027      	b.n	80067be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800676e:	f107 0318 	add.w	r3, r7, #24
 8006772:	4618      	mov	r0, r3
 8006774:	f7fe fc54 	bl	8005020 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800677c:	e01f      	b.n	80067be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800677e:	4b21      	ldr	r3, [pc, #132]	@ (8006804 <UART_SetConfig+0x904>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0320 	and.w	r3, r3, #32
 8006786:	2b00      	cmp	r3, #0
 8006788:	d009      	beq.n	800679e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800678a:	4b1e      	ldr	r3, [pc, #120]	@ (8006804 <UART_SetConfig+0x904>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	08db      	lsrs	r3, r3, #3
 8006790:	f003 0303 	and.w	r3, r3, #3
 8006794:	4a1d      	ldr	r2, [pc, #116]	@ (800680c <UART_SetConfig+0x90c>)
 8006796:	fa22 f303 	lsr.w	r3, r2, r3
 800679a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800679c:	e00f      	b.n	80067be <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800679e:	4b1b      	ldr	r3, [pc, #108]	@ (800680c <UART_SetConfig+0x90c>)
 80067a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067a2:	e00c      	b.n	80067be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006810 <UART_SetConfig+0x910>)
 80067a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067a8:	e009      	b.n	80067be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067b0:	e005      	b.n	80067be <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80067bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 81ee 	beq.w	8006ba2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ca:	4a12      	ldr	r2, [pc, #72]	@ (8006814 <UART_SetConfig+0x914>)
 80067cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067d0:	461a      	mov	r2, r3
 80067d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80067d8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	4613      	mov	r3, r2
 80067e0:	005b      	lsls	r3, r3, #1
 80067e2:	4413      	add	r3, r2
 80067e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d305      	bcc.n	80067f6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d910      	bls.n	8006818 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80067fc:	e1d1      	b.n	8006ba2 <UART_SetConfig+0xca2>
 80067fe:	bf00      	nop
 8006800:	40011c00 	.word	0x40011c00
 8006804:	58024400 	.word	0x58024400
 8006808:	58000c00 	.word	0x58000c00
 800680c:	03d09000 	.word	0x03d09000
 8006810:	003d0900 	.word	0x003d0900
 8006814:	0800735c 	.word	0x0800735c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800681a:	2200      	movs	r2, #0
 800681c:	60bb      	str	r3, [r7, #8]
 800681e:	60fa      	str	r2, [r7, #12]
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006824:	4ac0      	ldr	r2, [pc, #768]	@ (8006b28 <UART_SetConfig+0xc28>)
 8006826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800682a:	b29b      	uxth	r3, r3
 800682c:	2200      	movs	r2, #0
 800682e:	603b      	str	r3, [r7, #0]
 8006830:	607a      	str	r2, [r7, #4]
 8006832:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006836:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800683a:	f7f9 fd67 	bl	800030c <__aeabi_uldivmod>
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
 8006842:	4610      	mov	r0, r2
 8006844:	4619      	mov	r1, r3
 8006846:	f04f 0200 	mov.w	r2, #0
 800684a:	f04f 0300 	mov.w	r3, #0
 800684e:	020b      	lsls	r3, r1, #8
 8006850:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006854:	0202      	lsls	r2, r0, #8
 8006856:	6979      	ldr	r1, [r7, #20]
 8006858:	6849      	ldr	r1, [r1, #4]
 800685a:	0849      	lsrs	r1, r1, #1
 800685c:	2000      	movs	r0, #0
 800685e:	460c      	mov	r4, r1
 8006860:	4605      	mov	r5, r0
 8006862:	eb12 0804 	adds.w	r8, r2, r4
 8006866:	eb43 0905 	adc.w	r9, r3, r5
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	469a      	mov	sl, r3
 8006872:	4693      	mov	fp, r2
 8006874:	4652      	mov	r2, sl
 8006876:	465b      	mov	r3, fp
 8006878:	4640      	mov	r0, r8
 800687a:	4649      	mov	r1, r9
 800687c:	f7f9 fd46 	bl	800030c <__aeabi_uldivmod>
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	4613      	mov	r3, r2
 8006886:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800688a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800688e:	d308      	bcc.n	80068a2 <UART_SetConfig+0x9a2>
 8006890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006892:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006896:	d204      	bcs.n	80068a2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800689e:	60da      	str	r2, [r3, #12]
 80068a0:	e17f      	b.n	8006ba2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80068a8:	e17b      	b.n	8006ba2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068b2:	f040 80bd 	bne.w	8006a30 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80068b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80068ba:	2b20      	cmp	r3, #32
 80068bc:	dc48      	bgt.n	8006950 <UART_SetConfig+0xa50>
 80068be:	2b00      	cmp	r3, #0
 80068c0:	db7b      	blt.n	80069ba <UART_SetConfig+0xaba>
 80068c2:	2b20      	cmp	r3, #32
 80068c4:	d879      	bhi.n	80069ba <UART_SetConfig+0xaba>
 80068c6:	a201      	add	r2, pc, #4	@ (adr r2, 80068cc <UART_SetConfig+0x9cc>)
 80068c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068cc:	08006957 	.word	0x08006957
 80068d0:	0800695f 	.word	0x0800695f
 80068d4:	080069bb 	.word	0x080069bb
 80068d8:	080069bb 	.word	0x080069bb
 80068dc:	08006967 	.word	0x08006967
 80068e0:	080069bb 	.word	0x080069bb
 80068e4:	080069bb 	.word	0x080069bb
 80068e8:	080069bb 	.word	0x080069bb
 80068ec:	08006977 	.word	0x08006977
 80068f0:	080069bb 	.word	0x080069bb
 80068f4:	080069bb 	.word	0x080069bb
 80068f8:	080069bb 	.word	0x080069bb
 80068fc:	080069bb 	.word	0x080069bb
 8006900:	080069bb 	.word	0x080069bb
 8006904:	080069bb 	.word	0x080069bb
 8006908:	080069bb 	.word	0x080069bb
 800690c:	08006987 	.word	0x08006987
 8006910:	080069bb 	.word	0x080069bb
 8006914:	080069bb 	.word	0x080069bb
 8006918:	080069bb 	.word	0x080069bb
 800691c:	080069bb 	.word	0x080069bb
 8006920:	080069bb 	.word	0x080069bb
 8006924:	080069bb 	.word	0x080069bb
 8006928:	080069bb 	.word	0x080069bb
 800692c:	080069bb 	.word	0x080069bb
 8006930:	080069bb 	.word	0x080069bb
 8006934:	080069bb 	.word	0x080069bb
 8006938:	080069bb 	.word	0x080069bb
 800693c:	080069bb 	.word	0x080069bb
 8006940:	080069bb 	.word	0x080069bb
 8006944:	080069bb 	.word	0x080069bb
 8006948:	080069bb 	.word	0x080069bb
 800694c:	080069ad 	.word	0x080069ad
 8006950:	2b40      	cmp	r3, #64	@ 0x40
 8006952:	d02e      	beq.n	80069b2 <UART_SetConfig+0xab2>
 8006954:	e031      	b.n	80069ba <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006956:	f7fd f82d 	bl	80039b4 <HAL_RCC_GetPCLK1Freq>
 800695a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800695c:	e033      	b.n	80069c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800695e:	f7fd f83f 	bl	80039e0 <HAL_RCC_GetPCLK2Freq>
 8006962:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006964:	e02f      	b.n	80069c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006966:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800696a:	4618      	mov	r0, r3
 800696c:	f7fe fa04 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006974:	e027      	b.n	80069c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006976:	f107 0318 	add.w	r3, r7, #24
 800697a:	4618      	mov	r0, r3
 800697c:	f7fe fb50 	bl	8005020 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006984:	e01f      	b.n	80069c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006986:	4b69      	ldr	r3, [pc, #420]	@ (8006b2c <UART_SetConfig+0xc2c>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0320 	and.w	r3, r3, #32
 800698e:	2b00      	cmp	r3, #0
 8006990:	d009      	beq.n	80069a6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006992:	4b66      	ldr	r3, [pc, #408]	@ (8006b2c <UART_SetConfig+0xc2c>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	08db      	lsrs	r3, r3, #3
 8006998:	f003 0303 	and.w	r3, r3, #3
 800699c:	4a64      	ldr	r2, [pc, #400]	@ (8006b30 <UART_SetConfig+0xc30>)
 800699e:	fa22 f303 	lsr.w	r3, r2, r3
 80069a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069a4:	e00f      	b.n	80069c6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80069a6:	4b62      	ldr	r3, [pc, #392]	@ (8006b30 <UART_SetConfig+0xc30>)
 80069a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069aa:	e00c      	b.n	80069c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80069ac:	4b61      	ldr	r3, [pc, #388]	@ (8006b34 <UART_SetConfig+0xc34>)
 80069ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069b0:	e009      	b.n	80069c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069b8:	e005      	b.n	80069c6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80069c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 80ea 	beq.w	8006ba2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d2:	4a55      	ldr	r2, [pc, #340]	@ (8006b28 <UART_SetConfig+0xc28>)
 80069d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069d8:	461a      	mov	r2, r3
 80069da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80069e0:	005a      	lsls	r2, r3, #1
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	085b      	lsrs	r3, r3, #1
 80069e8:	441a      	add	r2, r3
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f6:	2b0f      	cmp	r3, #15
 80069f8:	d916      	bls.n	8006a28 <UART_SetConfig+0xb28>
 80069fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a00:	d212      	bcs.n	8006a28 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	f023 030f 	bic.w	r3, r3, #15
 8006a0a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0e:	085b      	lsrs	r3, r3, #1
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006a24:	60da      	str	r2, [r3, #12]
 8006a26:	e0bc      	b.n	8006ba2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006a2e:	e0b8      	b.n	8006ba2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a30:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	dc4b      	bgt.n	8006ad0 <UART_SetConfig+0xbd0>
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f2c0 8087 	blt.w	8006b4c <UART_SetConfig+0xc4c>
 8006a3e:	2b20      	cmp	r3, #32
 8006a40:	f200 8084 	bhi.w	8006b4c <UART_SetConfig+0xc4c>
 8006a44:	a201      	add	r2, pc, #4	@ (adr r2, 8006a4c <UART_SetConfig+0xb4c>)
 8006a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4a:	bf00      	nop
 8006a4c:	08006ad7 	.word	0x08006ad7
 8006a50:	08006adf 	.word	0x08006adf
 8006a54:	08006b4d 	.word	0x08006b4d
 8006a58:	08006b4d 	.word	0x08006b4d
 8006a5c:	08006ae7 	.word	0x08006ae7
 8006a60:	08006b4d 	.word	0x08006b4d
 8006a64:	08006b4d 	.word	0x08006b4d
 8006a68:	08006b4d 	.word	0x08006b4d
 8006a6c:	08006af7 	.word	0x08006af7
 8006a70:	08006b4d 	.word	0x08006b4d
 8006a74:	08006b4d 	.word	0x08006b4d
 8006a78:	08006b4d 	.word	0x08006b4d
 8006a7c:	08006b4d 	.word	0x08006b4d
 8006a80:	08006b4d 	.word	0x08006b4d
 8006a84:	08006b4d 	.word	0x08006b4d
 8006a88:	08006b4d 	.word	0x08006b4d
 8006a8c:	08006b07 	.word	0x08006b07
 8006a90:	08006b4d 	.word	0x08006b4d
 8006a94:	08006b4d 	.word	0x08006b4d
 8006a98:	08006b4d 	.word	0x08006b4d
 8006a9c:	08006b4d 	.word	0x08006b4d
 8006aa0:	08006b4d 	.word	0x08006b4d
 8006aa4:	08006b4d 	.word	0x08006b4d
 8006aa8:	08006b4d 	.word	0x08006b4d
 8006aac:	08006b4d 	.word	0x08006b4d
 8006ab0:	08006b4d 	.word	0x08006b4d
 8006ab4:	08006b4d 	.word	0x08006b4d
 8006ab8:	08006b4d 	.word	0x08006b4d
 8006abc:	08006b4d 	.word	0x08006b4d
 8006ac0:	08006b4d 	.word	0x08006b4d
 8006ac4:	08006b4d 	.word	0x08006b4d
 8006ac8:	08006b4d 	.word	0x08006b4d
 8006acc:	08006b3f 	.word	0x08006b3f
 8006ad0:	2b40      	cmp	r3, #64	@ 0x40
 8006ad2:	d037      	beq.n	8006b44 <UART_SetConfig+0xc44>
 8006ad4:	e03a      	b.n	8006b4c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ad6:	f7fc ff6d 	bl	80039b4 <HAL_RCC_GetPCLK1Freq>
 8006ada:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006adc:	e03c      	b.n	8006b58 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ade:	f7fc ff7f 	bl	80039e0 <HAL_RCC_GetPCLK2Freq>
 8006ae2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ae4:	e038      	b.n	8006b58 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ae6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fe f944 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006af4:	e030      	b.n	8006b58 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006af6:	f107 0318 	add.w	r3, r7, #24
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fe fa90 	bl	8005020 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b04:	e028      	b.n	8006b58 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b06:	4b09      	ldr	r3, [pc, #36]	@ (8006b2c <UART_SetConfig+0xc2c>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0320 	and.w	r3, r3, #32
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d012      	beq.n	8006b38 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b12:	4b06      	ldr	r3, [pc, #24]	@ (8006b2c <UART_SetConfig+0xc2c>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	08db      	lsrs	r3, r3, #3
 8006b18:	f003 0303 	and.w	r3, r3, #3
 8006b1c:	4a04      	ldr	r2, [pc, #16]	@ (8006b30 <UART_SetConfig+0xc30>)
 8006b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b24:	e018      	b.n	8006b58 <UART_SetConfig+0xc58>
 8006b26:	bf00      	nop
 8006b28:	0800735c 	.word	0x0800735c
 8006b2c:	58024400 	.word	0x58024400
 8006b30:	03d09000 	.word	0x03d09000
 8006b34:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006b38:	4b24      	ldr	r3, [pc, #144]	@ (8006bcc <UART_SetConfig+0xccc>)
 8006b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b3c:	e00c      	b.n	8006b58 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b3e:	4b24      	ldr	r3, [pc, #144]	@ (8006bd0 <UART_SetConfig+0xcd0>)
 8006b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b42:	e009      	b.n	8006b58 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b4a:	e005      	b.n	8006b58 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006b56:	bf00      	nop
    }

    if (pclk != 0U)
 8006b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d021      	beq.n	8006ba2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b62:	4a1c      	ldr	r2, [pc, #112]	@ (8006bd4 <UART_SetConfig+0xcd4>)
 8006b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b68:	461a      	mov	r2, r3
 8006b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b6c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	085b      	lsrs	r3, r3, #1
 8006b76:	441a      	add	r2, r3
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b80:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b84:	2b0f      	cmp	r3, #15
 8006b86:	d909      	bls.n	8006b9c <UART_SetConfig+0xc9c>
 8006b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b8e:	d205      	bcs.n	8006b9c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	60da      	str	r2, [r3, #12]
 8006b9a:	e002      	b.n	8006ba2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006bbe:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3748      	adds	r7, #72	@ 0x48
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bcc:	03d09000 	.word	0x03d09000
 8006bd0:	003d0900 	.word	0x003d0900
 8006bd4:	0800735c 	.word	0x0800735c

08006bd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be4:	f003 0308 	and.w	r3, r3, #8
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00a      	beq.n	8006c02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00a      	beq.n	8006c24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	430a      	orrs	r2, r1
 8006c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00a      	beq.n	8006c46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4a:	f003 0304 	and.w	r3, r3, #4
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00a      	beq.n	8006c68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c6c:	f003 0310 	and.w	r3, r3, #16
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00a      	beq.n	8006c8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c8e:	f003 0320 	and.w	r3, r3, #32
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d01a      	beq.n	8006cee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cd6:	d10a      	bne.n	8006cee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00a      	beq.n	8006d10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	605a      	str	r2, [r3, #4]
  }
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b098      	sub	sp, #96	@ 0x60
 8006d20:	af02      	add	r7, sp, #8
 8006d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d2c:	f7fa fa20 	bl	8001170 <HAL_GetTick>
 8006d30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0308 	and.w	r3, r3, #8
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	d12f      	bne.n	8006da0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f88e 	bl	8006e70 <UART_WaitOnFlagUntilTimeout>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d022      	beq.n	8006da0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d62:	e853 3f00 	ldrex	r3, [r3]
 8006d66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	461a      	mov	r2, r3
 8006d76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d78:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d7a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d80:	e841 2300 	strex	r3, r2, [r1]
 8006d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e6      	bne.n	8006d5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e063      	b.n	8006e68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0304 	and.w	r3, r3, #4
 8006daa:	2b04      	cmp	r3, #4
 8006dac:	d149      	bne.n	8006e42 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006db6:	2200      	movs	r2, #0
 8006db8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f857 	bl	8006e70 <UART_WaitOnFlagUntilTimeout>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d03c      	beq.n	8006e42 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd0:	e853 3f00 	ldrex	r3, [r3]
 8006dd4:	623b      	str	r3, [r7, #32]
   return(result);
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	461a      	mov	r2, r3
 8006de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006de6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006de8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dee:	e841 2300 	strex	r3, r2, [r1]
 8006df2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1e6      	bne.n	8006dc8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3308      	adds	r3, #8
 8006e00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	e853 3f00 	ldrex	r3, [r3]
 8006e08:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f023 0301 	bic.w	r3, r3, #1
 8006e10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3308      	adds	r3, #8
 8006e18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e1a:	61fa      	str	r2, [r7, #28]
 8006e1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1e:	69b9      	ldr	r1, [r7, #24]
 8006e20:	69fa      	ldr	r2, [r7, #28]
 8006e22:	e841 2300 	strex	r3, r2, [r1]
 8006e26:	617b      	str	r3, [r7, #20]
   return(result);
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1e5      	bne.n	8006dfa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e012      	b.n	8006e68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2220      	movs	r2, #32
 8006e46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3758      	adds	r7, #88	@ 0x58
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	603b      	str	r3, [r7, #0]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e80:	e04f      	b.n	8006f22 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e88:	d04b      	beq.n	8006f22 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e8a:	f7fa f971 	bl	8001170 <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d302      	bcc.n	8006ea0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e04e      	b.n	8006f42 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0304 	and.w	r3, r3, #4
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d037      	beq.n	8006f22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2b80      	cmp	r3, #128	@ 0x80
 8006eb6:	d034      	beq.n	8006f22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2b40      	cmp	r3, #64	@ 0x40
 8006ebc:	d031      	beq.n	8006f22 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	69db      	ldr	r3, [r3, #28]
 8006ec4:	f003 0308 	and.w	r3, r3, #8
 8006ec8:	2b08      	cmp	r3, #8
 8006eca:	d110      	bne.n	8006eee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2208      	movs	r2, #8
 8006ed2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 f839 	bl	8006f4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2208      	movs	r2, #8
 8006ede:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e029      	b.n	8006f42 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	69db      	ldr	r3, [r3, #28]
 8006ef4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ef8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006efc:	d111      	bne.n	8006f22 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f000 f81f 	bl	8006f4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2220      	movs	r2, #32
 8006f12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e00f      	b.n	8006f42 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	69da      	ldr	r2, [r3, #28]
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	bf0c      	ite	eq
 8006f32:	2301      	moveq	r3, #1
 8006f34:	2300      	movne	r3, #0
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	79fb      	ldrb	r3, [r7, #7]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d0a0      	beq.n	8006e82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
	...

08006f4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b095      	sub	sp, #84	@ 0x54
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f72:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f74:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f7a:	e841 2300 	strex	r3, r2, [r1]
 8006f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1e6      	bne.n	8006f54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8e:	6a3b      	ldr	r3, [r7, #32]
 8006f90:	e853 3f00 	ldrex	r3, [r3]
 8006f94:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f96:	69fa      	ldr	r2, [r7, #28]
 8006f98:	4b1e      	ldr	r3, [pc, #120]	@ (8007014 <UART_EndRxTransfer+0xc8>)
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3308      	adds	r3, #8
 8006fa4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006faa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fae:	e841 2300 	strex	r3, r2, [r1]
 8006fb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1e5      	bne.n	8006f86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d118      	bne.n	8006ff4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	e853 3f00 	ldrex	r3, [r3]
 8006fce:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	f023 0310 	bic.w	r3, r3, #16
 8006fd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fe0:	61bb      	str	r3, [r7, #24]
 8006fe2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe4:	6979      	ldr	r1, [r7, #20]
 8006fe6:	69ba      	ldr	r2, [r7, #24]
 8006fe8:	e841 2300 	strex	r3, r2, [r1]
 8006fec:	613b      	str	r3, [r7, #16]
   return(result);
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1e6      	bne.n	8006fc2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2220      	movs	r2, #32
 8006ff8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007008:	bf00      	nop
 800700a:	3754      	adds	r7, #84	@ 0x54
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	effffffe 	.word	0xeffffffe

08007018 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007024:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f7fe ff4c 	bl	8005ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800703c:	bf00      	nop
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b088      	sub	sp, #32
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	60bb      	str	r3, [r7, #8]
   return(result);
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007060:	61fb      	str	r3, [r7, #28]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	61bb      	str	r3, [r7, #24]
 800706c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706e:	6979      	ldr	r1, [r7, #20]
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	e841 2300 	strex	r3, r2, [r1]
 8007076:	613b      	str	r3, [r7, #16]
   return(result);
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1e6      	bne.n	800704c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2220      	movs	r2, #32
 8007082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7fe ff17 	bl	8005ec0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007092:	bf00      	nop
 8007094:	3720      	adds	r7, #32
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800709a:	b480      	push	{r7}
 800709c:	b083      	sub	sp, #12
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80070a2:	bf00      	nop
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b083      	sub	sp, #12
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80070b6:	bf00      	nop
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b083      	sub	sp, #12
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80070ca:	bf00      	nop
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b085      	sub	sp, #20
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d101      	bne.n	80070ec <HAL_UARTEx_DisableFifoMode+0x16>
 80070e8:	2302      	movs	r3, #2
 80070ea:	e027      	b.n	800713c <HAL_UARTEx_DisableFifoMode+0x66>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2224      	movs	r2, #36	@ 0x24
 80070f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 0201 	bic.w	r2, r2, #1
 8007112:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800711a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2220      	movs	r2, #32
 800712e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007158:	2b01      	cmp	r3, #1
 800715a:	d101      	bne.n	8007160 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800715c:	2302      	movs	r3, #2
 800715e:	e02d      	b.n	80071bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2224      	movs	r2, #36	@ 0x24
 800716c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f022 0201 	bic.w	r2, r2, #1
 8007186:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	430a      	orrs	r2, r1
 800719a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f84f 	bl	8007240 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2220      	movs	r2, #32
 80071ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d101      	bne.n	80071dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80071d8:	2302      	movs	r3, #2
 80071da:	e02d      	b.n	8007238 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2224      	movs	r2, #36	@ 0x24
 80071e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 0201 	bic.w	r2, r2, #1
 8007202:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f811 	bl	8007240 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2220      	movs	r2, #32
 800722a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800724c:	2b00      	cmp	r3, #0
 800724e:	d108      	bne.n	8007262 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007260:	e031      	b.n	80072c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007262:	2310      	movs	r3, #16
 8007264:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007266:	2310      	movs	r3, #16
 8007268:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	0e5b      	lsrs	r3, r3, #25
 8007272:	b2db      	uxtb	r3, r3
 8007274:	f003 0307 	and.w	r3, r3, #7
 8007278:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	0f5b      	lsrs	r3, r3, #29
 8007282:	b2db      	uxtb	r3, r3
 8007284:	f003 0307 	and.w	r3, r3, #7
 8007288:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800728a:	7bbb      	ldrb	r3, [r7, #14]
 800728c:	7b3a      	ldrb	r2, [r7, #12]
 800728e:	4911      	ldr	r1, [pc, #68]	@ (80072d4 <UARTEx_SetNbDataToProcess+0x94>)
 8007290:	5c8a      	ldrb	r2, [r1, r2]
 8007292:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007296:	7b3a      	ldrb	r2, [r7, #12]
 8007298:	490f      	ldr	r1, [pc, #60]	@ (80072d8 <UARTEx_SetNbDataToProcess+0x98>)
 800729a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800729c:	fb93 f3f2 	sdiv	r3, r3, r2
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
 80072aa:	7b7a      	ldrb	r2, [r7, #13]
 80072ac:	4909      	ldr	r1, [pc, #36]	@ (80072d4 <UARTEx_SetNbDataToProcess+0x94>)
 80072ae:	5c8a      	ldrb	r2, [r1, r2]
 80072b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80072b4:	7b7a      	ldrb	r2, [r7, #13]
 80072b6:	4908      	ldr	r1, [pc, #32]	@ (80072d8 <UARTEx_SetNbDataToProcess+0x98>)
 80072b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80072be:	b29a      	uxth	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80072c6:	bf00      	nop
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	08007374 	.word	0x08007374
 80072d8:	0800737c 	.word	0x0800737c

080072dc <memset>:
 80072dc:	4402      	add	r2, r0
 80072de:	4603      	mov	r3, r0
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d100      	bne.n	80072e6 <memset+0xa>
 80072e4:	4770      	bx	lr
 80072e6:	f803 1b01 	strb.w	r1, [r3], #1
 80072ea:	e7f9      	b.n	80072e0 <memset+0x4>

080072ec <__libc_init_array>:
 80072ec:	b570      	push	{r4, r5, r6, lr}
 80072ee:	4d0d      	ldr	r5, [pc, #52]	@ (8007324 <__libc_init_array+0x38>)
 80072f0:	4c0d      	ldr	r4, [pc, #52]	@ (8007328 <__libc_init_array+0x3c>)
 80072f2:	1b64      	subs	r4, r4, r5
 80072f4:	10a4      	asrs	r4, r4, #2
 80072f6:	2600      	movs	r6, #0
 80072f8:	42a6      	cmp	r6, r4
 80072fa:	d109      	bne.n	8007310 <__libc_init_array+0x24>
 80072fc:	4d0b      	ldr	r5, [pc, #44]	@ (800732c <__libc_init_array+0x40>)
 80072fe:	4c0c      	ldr	r4, [pc, #48]	@ (8007330 <__libc_init_array+0x44>)
 8007300:	f000 f818 	bl	8007334 <_init>
 8007304:	1b64      	subs	r4, r4, r5
 8007306:	10a4      	asrs	r4, r4, #2
 8007308:	2600      	movs	r6, #0
 800730a:	42a6      	cmp	r6, r4
 800730c:	d105      	bne.n	800731a <__libc_init_array+0x2e>
 800730e:	bd70      	pop	{r4, r5, r6, pc}
 8007310:	f855 3b04 	ldr.w	r3, [r5], #4
 8007314:	4798      	blx	r3
 8007316:	3601      	adds	r6, #1
 8007318:	e7ee      	b.n	80072f8 <__libc_init_array+0xc>
 800731a:	f855 3b04 	ldr.w	r3, [r5], #4
 800731e:	4798      	blx	r3
 8007320:	3601      	adds	r6, #1
 8007322:	e7f2      	b.n	800730a <__libc_init_array+0x1e>
 8007324:	0800738c 	.word	0x0800738c
 8007328:	0800738c 	.word	0x0800738c
 800732c:	0800738c 	.word	0x0800738c
 8007330:	08007390 	.word	0x08007390

08007334 <_init>:
 8007334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007336:	bf00      	nop
 8007338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800733a:	bc08      	pop	{r3}
 800733c:	469e      	mov	lr, r3
 800733e:	4770      	bx	lr

08007340 <_fini>:
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	bf00      	nop
 8007344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007346:	bc08      	pop	{r3}
 8007348:	469e      	mov	lr, r3
 800734a:	4770      	bx	lr
