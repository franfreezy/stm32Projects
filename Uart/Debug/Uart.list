
Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a2c  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007cf8  08007cf8  00008cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007d30  08007d30  00008d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007d38  08007d38  00008d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007d3c  08007d3c  00008d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000020  24000000  08007d40  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000020  08007d60  00009020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000080  08007dc0  00009080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000071c  240000e0  08007e20  000090e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240007fc  08007e20  000097fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000090e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d29  00000000  00000000  0000910e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b5c  00000000  00000000  00021e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  00024998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c7c  00000000  00000000  000259b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033201  00000000  00000000  00026634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e05  00000000  00000000  00059835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00147f12  00000000  00000000  0007063a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b854c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000449c  00000000  00000000  001b8590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001bca2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000e0 	.word	0x240000e0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08007ce0 	.word	0x08007ce0

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000e4 	.word	0x240000e4
 8000308:	08007ce0 	.word	0x08007ce0

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 fdbe 	bl	8001180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f82e 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 f9b2 	bl	8000970 <MX_GPIO_Init>
  MX_ETH_Init();
 800060c:	f000 f89a 	bl	8000744 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000610:	f000 f930 	bl	8000874 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000614:	f000 f97a 	bl	800090c <MX_USB_OTG_HS_PCD_Init>
  MX_USART2_UART_Init();
 8000618:	f000 f8e0 	bl	80007dc <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(1000);
 800061c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000620:	f000 fe40 	bl	80012a4 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, message, sizeof(message), 10);
 8000624:	230a      	movs	r3, #10
 8000626:	2210      	movs	r2, #16
 8000628:	490b      	ldr	r1, [pc, #44]	@ (8000658 <main+0x5c>)
 800062a:	480c      	ldr	r0, [pc, #48]	@ (800065c <main+0x60>)
 800062c:	f005 f9ce 	bl	80059cc <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000630:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000634:	f000 fe36 	bl	80012a4 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2102      	movs	r1, #2
 800063c:	4808      	ldr	r0, [pc, #32]	@ (8000660 <main+0x64>)
 800063e:	f002 fab9 	bl	8002bb4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000642:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000646:	f000 fe2d 	bl	80012a4 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	2102      	movs	r1, #2
 800064e:	4804      	ldr	r0, [pc, #16]	@ (8000660 <main+0x64>)
 8000650:	f002 fab0 	bl	8002bb4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000654:	bf00      	nop
 8000656:	e7e1      	b.n	800061c <main+0x20>
 8000658:	24000000 	.word	0x24000000
 800065c:	240001e4 	.word	0x240001e4
 8000660:	58021000 	.word	0x58021000

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b09c      	sub	sp, #112	@ 0x70
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800066e:	224c      	movs	r2, #76	@ 0x4c
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f007 fb07 	bl	8007c86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2220      	movs	r2, #32
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f007 fb01 	bl	8007c86 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000684:	2002      	movs	r0, #2
 8000686:	f002 fbdf 	bl	8002e48 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800068a:	2300      	movs	r3, #0
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	4b2c      	ldr	r3, [pc, #176]	@ (8000740 <SystemClock_Config+0xdc>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	4a2b      	ldr	r2, [pc, #172]	@ (8000740 <SystemClock_Config+0xdc>)
 8000694:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000698:	6193      	str	r3, [r2, #24]
 800069a:	4b29      	ldr	r3, [pc, #164]	@ (8000740 <SystemClock_Config+0xdc>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a6:	bf00      	nop
 80006a8:	4b25      	ldr	r3, [pc, #148]	@ (8000740 <SystemClock_Config+0xdc>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006b4:	d1f8      	bne.n	80006a8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006b6:	2321      	movs	r3, #33	@ 0x21
 80006b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006ba:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006cc:	2304      	movs	r3, #4
 80006ce:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80006d0:	f240 1313 	movw	r3, #275	@ 0x113
 80006d4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006da:	2304      	movs	r3, #4
 80006dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006de:	2302      	movs	r3, #2
 80006e0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80006e2:	2304      	movs	r3, #4
 80006e4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 fbf2 	bl	8002edc <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006fe:	f000 fa13 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	233f      	movs	r3, #63	@ 0x3f
 8000704:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2303      	movs	r3, #3
 8000708:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800070e:	2308      	movs	r3, #8
 8000710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000712:	2340      	movs	r3, #64	@ 0x40
 8000714:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000716:	2340      	movs	r3, #64	@ 0x40
 8000718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800071a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800071e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000720:	2340      	movs	r3, #64	@ 0x40
 8000722:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2103      	movs	r1, #3
 8000728:	4618      	mov	r0, r3
 800072a:	f002 ffb1 	bl	8003690 <HAL_RCC_ClockConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000734:	f000 f9f8 	bl	8000b28 <Error_Handler>
  }
}
 8000738:	bf00      	nop
 800073a:	3770      	adds	r7, #112	@ 0x70
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	58024800 	.word	0x58024800

08000744 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000748:	4b1e      	ldr	r3, [pc, #120]	@ (80007c4 <MX_ETH_Init+0x80>)
 800074a:	4a1f      	ldr	r2, [pc, #124]	@ (80007c8 <MX_ETH_Init+0x84>)
 800074c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800074e:	4b1f      	ldr	r3, [pc, #124]	@ (80007cc <MX_ETH_Init+0x88>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000754:	4b1d      	ldr	r3, [pc, #116]	@ (80007cc <MX_ETH_Init+0x88>)
 8000756:	2280      	movs	r2, #128	@ 0x80
 8000758:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800075a:	4b1c      	ldr	r3, [pc, #112]	@ (80007cc <MX_ETH_Init+0x88>)
 800075c:	22e1      	movs	r2, #225	@ 0xe1
 800075e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000760:	4b1a      	ldr	r3, [pc, #104]	@ (80007cc <MX_ETH_Init+0x88>)
 8000762:	2200      	movs	r2, #0
 8000764:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000766:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <MX_ETH_Init+0x88>)
 8000768:	2200      	movs	r2, #0
 800076a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800076c:	4b17      	ldr	r3, [pc, #92]	@ (80007cc <MX_ETH_Init+0x88>)
 800076e:	2200      	movs	r2, #0
 8000770:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000772:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <MX_ETH_Init+0x80>)
 8000774:	4a15      	ldr	r2, [pc, #84]	@ (80007cc <MX_ETH_Init+0x88>)
 8000776:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <MX_ETH_Init+0x80>)
 800077a:	2201      	movs	r2, #1
 800077c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800077e:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_ETH_Init+0x80>)
 8000780:	4a13      	ldr	r2, [pc, #76]	@ (80007d0 <MX_ETH_Init+0x8c>)
 8000782:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000784:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_ETH_Init+0x80>)
 8000786:	4a13      	ldr	r2, [pc, #76]	@ (80007d4 <MX_ETH_Init+0x90>)
 8000788:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <MX_ETH_Init+0x80>)
 800078c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000790:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000792:	480c      	ldr	r0, [pc, #48]	@ (80007c4 <MX_ETH_Init+0x80>)
 8000794:	f001 fc32 	bl	8001ffc <HAL_ETH_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800079e:	f000 f9c3 	bl	8000b28 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007a2:	2238      	movs	r2, #56	@ 0x38
 80007a4:	2100      	movs	r1, #0
 80007a6:	480c      	ldr	r0, [pc, #48]	@ (80007d8 <MX_ETH_Init+0x94>)
 80007a8:	f007 fa6d 	bl	8007c86 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <MX_ETH_Init+0x94>)
 80007ae:	2221      	movs	r2, #33	@ 0x21
 80007b0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007b2:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <MX_ETH_Init+0x94>)
 80007b4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007b8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007ba:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <MX_ETH_Init+0x94>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	24000134 	.word	0x24000134
 80007c8:	40028000 	.word	0x40028000
 80007cc:	240007f0 	.word	0x240007f0
 80007d0:	24000080 	.word	0x24000080
 80007d4:	24000020 	.word	0x24000020
 80007d8:	240000fc 	.word	0x240000fc

080007dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e0:	4b22      	ldr	r3, [pc, #136]	@ (800086c <MX_USART2_UART_Init+0x90>)
 80007e2:	4a23      	ldr	r2, [pc, #140]	@ (8000870 <MX_USART2_UART_Init+0x94>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e6:	4b21      	ldr	r3, [pc, #132]	@ (800086c <MX_USART2_UART_Init+0x90>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b1f      	ldr	r3, [pc, #124]	@ (800086c <MX_USART2_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b1d      	ldr	r3, [pc, #116]	@ (800086c <MX_USART2_UART_Init+0x90>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b1c      	ldr	r3, [pc, #112]	@ (800086c <MX_USART2_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <MX_USART2_UART_Init+0x90>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b19      	ldr	r3, [pc, #100]	@ (800086c <MX_USART2_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b17      	ldr	r3, [pc, #92]	@ (800086c <MX_USART2_UART_Init+0x90>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000812:	4b16      	ldr	r3, [pc, #88]	@ (800086c <MX_USART2_UART_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000818:	4b14      	ldr	r3, [pc, #80]	@ (800086c <MX_USART2_UART_Init+0x90>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081e:	4b13      	ldr	r3, [pc, #76]	@ (800086c <MX_USART2_UART_Init+0x90>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000824:	4811      	ldr	r0, [pc, #68]	@ (800086c <MX_USART2_UART_Init+0x90>)
 8000826:	f005 f881 	bl	800592c <HAL_UART_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000830:	f000 f97a 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000834:	2100      	movs	r1, #0
 8000836:	480d      	ldr	r0, [pc, #52]	@ (800086c <MX_USART2_UART_Init+0x90>)
 8000838:	f006 fe54 	bl	80074e4 <HAL_UARTEx_SetTxFifoThreshold>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000842:	f000 f971 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000846:	2100      	movs	r1, #0
 8000848:	4808      	ldr	r0, [pc, #32]	@ (800086c <MX_USART2_UART_Init+0x90>)
 800084a:	f006 fe89 	bl	8007560 <HAL_UARTEx_SetRxFifoThreshold>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000854:	f000 f968 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	@ (800086c <MX_USART2_UART_Init+0x90>)
 800085a:	f006 fe0a 	bl	8007472 <HAL_UARTEx_DisableFifoMode>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000864:	f000 f960 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	240001e4 	.word	0x240001e4
 8000870:	40004400 	.word	0x40004400

08000874 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000878:	4b22      	ldr	r3, [pc, #136]	@ (8000904 <MX_USART3_UART_Init+0x90>)
 800087a:	4a23      	ldr	r2, [pc, #140]	@ (8000908 <MX_USART3_UART_Init+0x94>)
 800087c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800087e:	4b21      	ldr	r3, [pc, #132]	@ (8000904 <MX_USART3_UART_Init+0x90>)
 8000880:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000884:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b1f      	ldr	r3, [pc, #124]	@ (8000904 <MX_USART3_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b1d      	ldr	r3, [pc, #116]	@ (8000904 <MX_USART3_UART_Init+0x90>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000892:	4b1c      	ldr	r3, [pc, #112]	@ (8000904 <MX_USART3_UART_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b1a      	ldr	r3, [pc, #104]	@ (8000904 <MX_USART3_UART_Init+0x90>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b19      	ldr	r3, [pc, #100]	@ (8000904 <MX_USART3_UART_Init+0x90>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a4:	4b17      	ldr	r3, [pc, #92]	@ (8000904 <MX_USART3_UART_Init+0x90>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008aa:	4b16      	ldr	r3, [pc, #88]	@ (8000904 <MX_USART3_UART_Init+0x90>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008b0:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <MX_USART3_UART_Init+0x90>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b6:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <MX_USART3_UART_Init+0x90>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008bc:	4811      	ldr	r0, [pc, #68]	@ (8000904 <MX_USART3_UART_Init+0x90>)
 80008be:	f005 f835 	bl	800592c <HAL_UART_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008c8:	f000 f92e 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008cc:	2100      	movs	r1, #0
 80008ce:	480d      	ldr	r0, [pc, #52]	@ (8000904 <MX_USART3_UART_Init+0x90>)
 80008d0:	f006 fe08 	bl	80074e4 <HAL_UARTEx_SetTxFifoThreshold>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008da:	f000 f925 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008de:	2100      	movs	r1, #0
 80008e0:	4808      	ldr	r0, [pc, #32]	@ (8000904 <MX_USART3_UART_Init+0x90>)
 80008e2:	f006 fe3d 	bl	8007560 <HAL_UARTEx_SetRxFifoThreshold>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008ec:	f000 f91c 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008f0:	4804      	ldr	r0, [pc, #16]	@ (8000904 <MX_USART3_UART_Init+0x90>)
 80008f2:	f006 fdbe 	bl	8007472 <HAL_UARTEx_DisableFifoMode>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008fc:	f000 f914 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	24000278 	.word	0x24000278
 8000908:	40004800 	.word	0x40004800

0800090c <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000910:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000912:	4a16      	ldr	r2, [pc, #88]	@ (800096c <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000914:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8000916:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000918:	2209      	movs	r2, #9
 800091a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800091e:	2202      	movs	r2, #2
 8000920:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000924:	2200      	movs	r2, #0
 8000926:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000928:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800092a:	2202      	movs	r2, #2
 800092c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800092e:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000930:	2200      	movs	r2, #0
 8000932:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000934:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000936:	2200      	movs	r2, #0
 8000938:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	@ (8000968 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800093c:	2200      	movs	r2, #0
 800093e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8000940:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000942:	2201      	movs	r2, #1
 8000944:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000946:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000948:	2200      	movs	r2, #0
 800094a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800094e:	2200      	movs	r2, #0
 8000950:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	@ (8000968 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000954:	f002 f947 	bl	8002be6 <HAL_PCD_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 800095e:	f000 f8e3 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2400030c 	.word	0x2400030c
 800096c:	40040000 	.word	0x40040000

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	@ 0x30
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	4b62      	ldr	r3, [pc, #392]	@ (8000b10 <MX_GPIO_Init+0x1a0>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098c:	4a60      	ldr	r2, [pc, #384]	@ (8000b10 <MX_GPIO_Init+0x1a0>)
 800098e:	f043 0304 	orr.w	r3, r3, #4
 8000992:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000996:	4b5e      	ldr	r3, [pc, #376]	@ (8000b10 <MX_GPIO_Init+0x1a0>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099c:	f003 0304 	and.w	r3, r3, #4
 80009a0:	61bb      	str	r3, [r7, #24]
 80009a2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a4:	4b5a      	ldr	r3, [pc, #360]	@ (8000b10 <MX_GPIO_Init+0x1a0>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009aa:	4a59      	ldr	r2, [pc, #356]	@ (8000b10 <MX_GPIO_Init+0x1a0>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b4:	4b56      	ldr	r3, [pc, #344]	@ (8000b10 <MX_GPIO_Init+0x1a0>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b53      	ldr	r3, [pc, #332]	@ (8000b10 <MX_GPIO_Init+0x1a0>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c8:	4a51      	ldr	r2, [pc, #324]	@ (8000b10 <MX_GPIO_Init+0x1a0>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d2:	4b4f      	ldr	r3, [pc, #316]	@ (8000b10 <MX_GPIO_Init+0x1a0>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e0:	4b4b      	ldr	r3, [pc, #300]	@ (8000b10 <MX_GPIO_Init+0x1a0>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e6:	4a4a      	ldr	r2, [pc, #296]	@ (8000b10 <MX_GPIO_Init+0x1a0>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f0:	4b47      	ldr	r3, [pc, #284]	@ (8000b10 <MX_GPIO_Init+0x1a0>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fe:	4b44      	ldr	r3, [pc, #272]	@ (8000b10 <MX_GPIO_Init+0x1a0>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a04:	4a42      	ldr	r2, [pc, #264]	@ (8000b10 <MX_GPIO_Init+0x1a0>)
 8000a06:	f043 0308 	orr.w	r3, r3, #8
 8000a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a0e:	4b40      	ldr	r3, [pc, #256]	@ (8000b10 <MX_GPIO_Init+0x1a0>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a14:	f003 0308 	and.w	r3, r3, #8
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a1c:	4b3c      	ldr	r3, [pc, #240]	@ (8000b10 <MX_GPIO_Init+0x1a0>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a22:	4a3b      	ldr	r2, [pc, #236]	@ (8000b10 <MX_GPIO_Init+0x1a0>)
 8000a24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a2c:	4b38      	ldr	r3, [pc, #224]	@ (8000b10 <MX_GPIO_Init+0x1a0>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a3a:	4b35      	ldr	r3, [pc, #212]	@ (8000b10 <MX_GPIO_Init+0x1a0>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a40:	4a33      	ldr	r2, [pc, #204]	@ (8000b10 <MX_GPIO_Init+0x1a0>)
 8000a42:	f043 0310 	orr.w	r3, r3, #16
 8000a46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a4a:	4b31      	ldr	r3, [pc, #196]	@ (8000b10 <MX_GPIO_Init+0x1a0>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a50:	f003 0310 	and.w	r3, r3, #16
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a5e:	482d      	ldr	r0, [pc, #180]	@ (8000b14 <MX_GPIO_Init+0x1a4>)
 8000a60:	f002 f8a8 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a6a:	482b      	ldr	r0, [pc, #172]	@ (8000b18 <MX_GPIO_Init+0x1a8>)
 8000a6c:	f002 f8a2 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2102      	movs	r1, #2
 8000a74:	4829      	ldr	r0, [pc, #164]	@ (8000b1c <MX_GPIO_Init+0x1ac>)
 8000a76:	f002 f89d 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4824      	ldr	r0, [pc, #144]	@ (8000b20 <MX_GPIO_Init+0x1b0>)
 8000a90:	f001 fee8 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000a94:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4819      	ldr	r0, [pc, #100]	@ (8000b14 <MX_GPIO_Init+0x1a4>)
 8000aae:	f001 fed9 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000ab2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4813      	ldr	r0, [pc, #76]	@ (8000b18 <MX_GPIO_Init+0x1a8>)
 8000acc:	f001 feca 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000ad0:	2380      	movs	r3, #128	@ 0x80
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480f      	ldr	r0, [pc, #60]	@ (8000b24 <MX_GPIO_Init+0x1b4>)
 8000ae6:	f001 febd 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	4806      	ldr	r0, [pc, #24]	@ (8000b1c <MX_GPIO_Init+0x1ac>)
 8000b02:	f001 feaf 	bl	8002864 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b06:	bf00      	nop
 8000b08:	3730      	adds	r7, #48	@ 0x30
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	58024400 	.word	0x58024400
 8000b14:	58020400 	.word	0x58020400
 8000b18:	58020c00 	.word	0x58020c00
 8000b1c:	58021000 	.word	0x58021000
 8000b20:	58020800 	.word	0x58020800
 8000b24:	58021800 	.word	0x58021800

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <Error_Handler+0x8>

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b64 <HAL_MspInit+0x30>)
 8000b3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b40:	4a08      	ldr	r2, [pc, #32]	@ (8000b64 <HAL_MspInit+0x30>)
 8000b42:	f043 0302 	orr.w	r3, r3, #2
 8000b46:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b4a:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <HAL_MspInit+0x30>)
 8000b4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b50:	f003 0302 	and.w	r3, r3, #2
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	58024400 	.word	0x58024400

08000b68 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08e      	sub	sp, #56	@ 0x38
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a59      	ldr	r2, [pc, #356]	@ (8000cec <HAL_ETH_MspInit+0x184>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	f040 80ab 	bne.w	8000ce2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b8c:	4b58      	ldr	r3, [pc, #352]	@ (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000b8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b92:	4a57      	ldr	r2, [pc, #348]	@ (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000b94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b98:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b9c:	4b54      	ldr	r3, [pc, #336]	@ (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000b9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ba2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ba6:	623b      	str	r3, [r7, #32]
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000baa:	4b51      	ldr	r3, [pc, #324]	@ (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000bac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bb0:	4a4f      	ldr	r2, [pc, #316]	@ (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000bb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bb6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000bba:	4b4d      	ldr	r3, [pc, #308]	@ (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000bbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bc4:	61fb      	str	r3, [r7, #28]
 8000bc6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000bc8:	4b49      	ldr	r3, [pc, #292]	@ (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000bca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bce:	4a48      	ldr	r2, [pc, #288]	@ (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000bd8:	4b45      	ldr	r3, [pc, #276]	@ (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000bda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000be2:	61bb      	str	r3, [r7, #24]
 8000be4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	4b42      	ldr	r3, [pc, #264]	@ (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bec:	4a40      	ldr	r2, [pc, #256]	@ (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000bee:	f043 0304 	orr.w	r3, r3, #4
 8000bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf6:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4b3a      	ldr	r3, [pc, #232]	@ (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c0a:	4a39      	ldr	r2, [pc, #228]	@ (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c14:	4b36      	ldr	r3, [pc, #216]	@ (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	4b33      	ldr	r3, [pc, #204]	@ (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c28:	4a31      	ldr	r2, [pc, #196]	@ (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c2a:	f043 0302 	orr.w	r3, r3, #2
 8000c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c32:	4b2f      	ldr	r3, [pc, #188]	@ (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c38:	f003 0302 	and.w	r3, r3, #2
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c40:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c46:	4a2a      	ldr	r2, [pc, #168]	@ (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c50:	4b27      	ldr	r3, [pc, #156]	@ (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c5e:	2332      	movs	r3, #50	@ 0x32
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6e:	230b      	movs	r3, #11
 8000c70:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	481e      	ldr	r0, [pc, #120]	@ (8000cf4 <HAL_ETH_MspInit+0x18c>)
 8000c7a:	f001 fdf3 	bl	8002864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c7e:	2386      	movs	r3, #134	@ 0x86
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c8e:	230b      	movs	r3, #11
 8000c90:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	4817      	ldr	r0, [pc, #92]	@ (8000cf8 <HAL_ETH_MspInit+0x190>)
 8000c9a:	f001 fde3 	bl	8002864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb0:	230b      	movs	r3, #11
 8000cb2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4810      	ldr	r0, [pc, #64]	@ (8000cfc <HAL_ETH_MspInit+0x194>)
 8000cbc:	f001 fdd2 	bl	8002864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cc0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd2:	230b      	movs	r3, #11
 8000cd4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4808      	ldr	r0, [pc, #32]	@ (8000d00 <HAL_ETH_MspInit+0x198>)
 8000cde:	f001 fdc1 	bl	8002864 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3738      	adds	r7, #56	@ 0x38
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40028000 	.word	0x40028000
 8000cf0:	58024400 	.word	0x58024400
 8000cf4:	58020800 	.word	0x58020800
 8000cf8:	58020000 	.word	0x58020000
 8000cfc:	58020400 	.word	0x58020400
 8000d00:	58021800 	.word	0x58021800

08000d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0bc      	sub	sp, #240	@ 0xf0
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d1c:	f107 0320 	add.w	r3, r7, #32
 8000d20:	22b8      	movs	r2, #184	@ 0xb8
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f006 ffae 	bl	8007c86 <memset>
  if(huart->Instance==USART2)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a63      	ldr	r2, [pc, #396]	@ (8000ebc <HAL_UART_MspInit+0x1b8>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d172      	bne.n	8000e1a <HAL_UART_MspInit+0x116>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d34:	f04f 0202 	mov.w	r2, #2
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d46:	f107 0320 	add.w	r3, r7, #32
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f003 f82c 	bl	8003da8 <HAL_RCCEx_PeriphCLKConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d56:	f7ff fee7 	bl	8000b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d5a:	4b59      	ldr	r3, [pc, #356]	@ (8000ec0 <HAL_UART_MspInit+0x1bc>)
 8000d5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d60:	4a57      	ldr	r2, [pc, #348]	@ (8000ec0 <HAL_UART_MspInit+0x1bc>)
 8000d62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d66:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d6a:	4b55      	ldr	r3, [pc, #340]	@ (8000ec0 <HAL_UART_MspInit+0x1bc>)
 8000d6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d74:	61fb      	str	r3, [r7, #28]
 8000d76:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	4b51      	ldr	r3, [pc, #324]	@ (8000ec0 <HAL_UART_MspInit+0x1bc>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7e:	4a50      	ldr	r2, [pc, #320]	@ (8000ec0 <HAL_UART_MspInit+0x1bc>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d88:	4b4d      	ldr	r3, [pc, #308]	@ (8000ec0 <HAL_UART_MspInit+0x1bc>)
 8000d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	61bb      	str	r3, [r7, #24]
 8000d94:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d96:	4b4a      	ldr	r3, [pc, #296]	@ (8000ec0 <HAL_UART_MspInit+0x1bc>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9c:	4a48      	ldr	r2, [pc, #288]	@ (8000ec0 <HAL_UART_MspInit+0x1bc>)
 8000d9e:	f043 0308 	orr.w	r3, r3, #8
 8000da2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000da6:	4b46      	ldr	r3, [pc, #280]	@ (8000ec0 <HAL_UART_MspInit+0x1bc>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dac:	f003 0308 	and.w	r3, r3, #8
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000db4:	2308      	movs	r3, #8
 8000db6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dcc:	2307      	movs	r3, #7
 8000dce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	483a      	ldr	r0, [pc, #232]	@ (8000ec4 <HAL_UART_MspInit+0x1c0>)
 8000dda:	f001 fd43 	bl	8002864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dde:	2320      	movs	r3, #32
 8000de0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000df6:	2307      	movs	r3, #7
 8000df8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dfc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e00:	4619      	mov	r1, r3
 8000e02:	4831      	ldr	r0, [pc, #196]	@ (8000ec8 <HAL_UART_MspInit+0x1c4>)
 8000e04:	f001 fd2e 	bl	8002864 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	2026      	movs	r0, #38	@ 0x26
 8000e0e:	f000 fb5c 	bl	80014ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e12:	2026      	movs	r0, #38	@ 0x26
 8000e14:	f000 fb73 	bl	80014fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e18:	e04b      	b.n	8000eb2 <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART3)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a2b      	ldr	r2, [pc, #172]	@ (8000ecc <HAL_UART_MspInit+0x1c8>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d146      	bne.n	8000eb2 <HAL_UART_MspInit+0x1ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e24:	f04f 0202 	mov.w	r2, #2
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e36:	f107 0320 	add.w	r3, r7, #32
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f002 ffb4 	bl	8003da8 <HAL_RCCEx_PeriphCLKConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_UART_MspInit+0x146>
      Error_Handler();
 8000e46:	f7ff fe6f 	bl	8000b28 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec0 <HAL_UART_MspInit+0x1bc>)
 8000e4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e50:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec0 <HAL_UART_MspInit+0x1bc>)
 8000e52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e56:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <HAL_UART_MspInit+0x1bc>)
 8000e5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e68:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <HAL_UART_MspInit+0x1bc>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6e:	4a14      	ldr	r2, [pc, #80]	@ (8000ec0 <HAL_UART_MspInit+0x1bc>)
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e78:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <HAL_UART_MspInit+0x1bc>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000e86:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ea0:	2307      	movs	r3, #7
 8000ea2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4806      	ldr	r0, [pc, #24]	@ (8000ec8 <HAL_UART_MspInit+0x1c4>)
 8000eae:	f001 fcd9 	bl	8002864 <HAL_GPIO_Init>
}
 8000eb2:	bf00      	nop
 8000eb4:	37f0      	adds	r7, #240	@ 0xf0
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40004400 	.word	0x40004400
 8000ec0:	58024400 	.word	0x58024400
 8000ec4:	58020000 	.word	0x58020000
 8000ec8:	58020c00 	.word	0x58020c00
 8000ecc:	40004800 	.word	0x40004800

08000ed0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b0b8      	sub	sp, #224	@ 0xe0
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	22b8      	movs	r2, #184	@ 0xb8
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f006 fec8 	bl	8007c86 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a30      	ldr	r2, [pc, #192]	@ (8000fbc <HAL_PCD_MspInit+0xec>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d159      	bne.n	8000fb4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f00:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000f0c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8000f10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f002 ff45 	bl	8003da8 <HAL_RCCEx_PeriphCLKConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000f24:	f7ff fe00 	bl	8000b28 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f28:	f001 ffc8 	bl	8002ebc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	4b24      	ldr	r3, [pc, #144]	@ (8000fc0 <HAL_PCD_MspInit+0xf0>)
 8000f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f32:	4a23      	ldr	r2, [pc, #140]	@ (8000fc0 <HAL_PCD_MspInit+0xf0>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f3c:	4b20      	ldr	r3, [pc, #128]	@ (8000fc0 <HAL_PCD_MspInit+0xf0>)
 8000f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA10     ------> USB_OTG_HS_ID
    */
    GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000f4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f4e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000f62:	4619      	mov	r1, r3
 8000f64:	4817      	ldr	r0, [pc, #92]	@ (8000fc4 <HAL_PCD_MspInit+0xf4>)
 8000f66:	f001 fc7d 	bl	8002864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000f6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f6e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000f84:	230a      	movs	r3, #10
 8000f86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480c      	ldr	r0, [pc, #48]	@ (8000fc4 <HAL_PCD_MspInit+0xf4>)
 8000f92:	f001 fc67 	bl	8002864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8000f96:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <HAL_PCD_MspInit+0xf0>)
 8000f98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f9c:	4a08      	ldr	r2, [pc, #32]	@ (8000fc0 <HAL_PCD_MspInit+0xf0>)
 8000f9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fa2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000fa6:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <HAL_PCD_MspInit+0xf0>)
 8000fa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8000fb4:	bf00      	nop
 8000fb6:	37e0      	adds	r7, #224	@ 0xe0
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40040000 	.word	0x40040000
 8000fc0:	58024400 	.word	0x58024400
 8000fc4:	58020000 	.word	0x58020000

08000fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <NMI_Handler+0x4>

08000fd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <HardFault_Handler+0x4>

08000fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <MemManage_Handler+0x4>

08000fe0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <BusFault_Handler+0x4>

08000fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <UsageFault_Handler+0x4>

08000ff0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101e:	f000 f921 	bl	8001264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800102c:	4802      	ldr	r0, [pc, #8]	@ (8001038 <USART2_IRQHandler+0x10>)
 800102e:	f004 fd5b 	bl	8005ae8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	240001e4 	.word	0x240001e4

0800103c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001040:	4b32      	ldr	r3, [pc, #200]	@ (800110c <SystemInit+0xd0>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001046:	4a31      	ldr	r2, [pc, #196]	@ (800110c <SystemInit+0xd0>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001050:	4b2f      	ldr	r3, [pc, #188]	@ (8001110 <SystemInit+0xd4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 030f 	and.w	r3, r3, #15
 8001058:	2b06      	cmp	r3, #6
 800105a:	d807      	bhi.n	800106c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800105c:	4b2c      	ldr	r3, [pc, #176]	@ (8001110 <SystemInit+0xd4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f023 030f 	bic.w	r3, r3, #15
 8001064:	4a2a      	ldr	r2, [pc, #168]	@ (8001110 <SystemInit+0xd4>)
 8001066:	f043 0307 	orr.w	r3, r3, #7
 800106a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800106c:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <SystemInit+0xd8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a28      	ldr	r2, [pc, #160]	@ (8001114 <SystemInit+0xd8>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001078:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <SystemInit+0xd8>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800107e:	4b25      	ldr	r3, [pc, #148]	@ (8001114 <SystemInit+0xd8>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	4924      	ldr	r1, [pc, #144]	@ (8001114 <SystemInit+0xd8>)
 8001084:	4b24      	ldr	r3, [pc, #144]	@ (8001118 <SystemInit+0xdc>)
 8001086:	4013      	ands	r3, r2
 8001088:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800108a:	4b21      	ldr	r3, [pc, #132]	@ (8001110 <SystemInit+0xd4>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	2b00      	cmp	r3, #0
 8001094:	d007      	beq.n	80010a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001096:	4b1e      	ldr	r3, [pc, #120]	@ (8001110 <SystemInit+0xd4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f023 030f 	bic.w	r3, r3, #15
 800109e:	4a1c      	ldr	r2, [pc, #112]	@ (8001110 <SystemInit+0xd4>)
 80010a0:	f043 0307 	orr.w	r3, r3, #7
 80010a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001114 <SystemInit+0xd8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010ac:	4b19      	ldr	r3, [pc, #100]	@ (8001114 <SystemInit+0xd8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010b2:	4b18      	ldr	r3, [pc, #96]	@ (8001114 <SystemInit+0xd8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010b8:	4b16      	ldr	r3, [pc, #88]	@ (8001114 <SystemInit+0xd8>)
 80010ba:	4a18      	ldr	r2, [pc, #96]	@ (800111c <SystemInit+0xe0>)
 80010bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <SystemInit+0xd8>)
 80010c0:	4a17      	ldr	r2, [pc, #92]	@ (8001120 <SystemInit+0xe4>)
 80010c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010c4:	4b13      	ldr	r3, [pc, #76]	@ (8001114 <SystemInit+0xd8>)
 80010c6:	4a17      	ldr	r2, [pc, #92]	@ (8001124 <SystemInit+0xe8>)
 80010c8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010ca:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <SystemInit+0xd8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010d0:	4b10      	ldr	r3, [pc, #64]	@ (8001114 <SystemInit+0xd8>)
 80010d2:	4a14      	ldr	r2, [pc, #80]	@ (8001124 <SystemInit+0xe8>)
 80010d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <SystemInit+0xd8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001114 <SystemInit+0xd8>)
 80010de:	4a11      	ldr	r2, [pc, #68]	@ (8001124 <SystemInit+0xe8>)
 80010e0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <SystemInit+0xd8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <SystemInit+0xd8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a09      	ldr	r2, [pc, #36]	@ (8001114 <SystemInit+0xd8>)
 80010ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010f4:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <SystemInit+0xd8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <SystemInit+0xec>)
 80010fc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001100:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00
 8001110:	52002000 	.word	0x52002000
 8001114:	58024400 	.word	0x58024400
 8001118:	eaf6ed7f 	.word	0xeaf6ed7f
 800111c:	02020200 	.word	0x02020200
 8001120:	01ff0000 	.word	0x01ff0000
 8001124:	01010280 	.word	0x01010280
 8001128:	52004000 	.word	0x52004000

0800112c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800112c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001164 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001130:	f7ff ff84 	bl	800103c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001134:	480c      	ldr	r0, [pc, #48]	@ (8001168 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001136:	490d      	ldr	r1, [pc, #52]	@ (800116c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001138:	4a0d      	ldr	r2, [pc, #52]	@ (8001170 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800114c:	4c0a      	ldr	r4, [pc, #40]	@ (8001178 <LoopFillZerobss+0x22>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800115a:	f006 fd9d 	bl	8007c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115e:	f7ff fa4d 	bl	80005fc <main>
  bx  lr
 8001162:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001164:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001168:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800116c:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 8001170:	08007d40 	.word	0x08007d40
  ldr r2, =_sbss
 8001174:	240000e0 	.word	0x240000e0
  ldr r4, =_ebss
 8001178:	240007fc 	.word	0x240007fc

0800117c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC3_IRQHandler>
	...

08001180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001186:	2003      	movs	r0, #3
 8001188:	f000 f994 	bl	80014b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800118c:	f002 fc36 	bl	80039fc <HAL_RCC_GetSysClockFreq>
 8001190:	4602      	mov	r2, r0
 8001192:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <HAL_Init+0x68>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	0a1b      	lsrs	r3, r3, #8
 8001198:	f003 030f 	and.w	r3, r3, #15
 800119c:	4913      	ldr	r1, [pc, #76]	@ (80011ec <HAL_Init+0x6c>)
 800119e:	5ccb      	ldrb	r3, [r1, r3]
 80011a0:	f003 031f 	and.w	r3, r3, #31
 80011a4:	fa22 f303 	lsr.w	r3, r2, r3
 80011a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011aa:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <HAL_Init+0x68>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	4a0e      	ldr	r2, [pc, #56]	@ (80011ec <HAL_Init+0x6c>)
 80011b4:	5cd3      	ldrb	r3, [r2, r3]
 80011b6:	f003 031f 	and.w	r3, r3, #31
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	fa22 f303 	lsr.w	r3, r2, r3
 80011c0:	4a0b      	ldr	r2, [pc, #44]	@ (80011f0 <HAL_Init+0x70>)
 80011c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011c4:	4a0b      	ldr	r2, [pc, #44]	@ (80011f4 <HAL_Init+0x74>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ca:	2000      	movs	r0, #0
 80011cc:	f000 f814 	bl	80011f8 <HAL_InitTick>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e002      	b.n	80011e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011da:	f7ff fcab 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	58024400 	.word	0x58024400
 80011ec:	08007cf8 	.word	0x08007cf8
 80011f0:	24000014 	.word	0x24000014
 80011f4:	24000010 	.word	0x24000010

080011f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001200:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <HAL_InitTick+0x60>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d101      	bne.n	800120c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e021      	b.n	8001250 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800120c:	4b13      	ldr	r3, [pc, #76]	@ (800125c <HAL_InitTick+0x64>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <HAL_InitTick+0x60>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f979 	bl	800151a <HAL_SYSTICK_Config>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00e      	b.n	8001250 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d80a      	bhi.n	800124e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f000 f943 	bl	80014ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001244:	4a06      	ldr	r2, [pc, #24]	@ (8001260 <HAL_InitTick+0x68>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	2400001c 	.word	0x2400001c
 800125c:	24000010 	.word	0x24000010
 8001260:	24000018 	.word	0x24000018

08001264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_IncTick+0x20>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <HAL_IncTick+0x24>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a04      	ldr	r2, [pc, #16]	@ (8001288 <HAL_IncTick+0x24>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	2400001c 	.word	0x2400001c
 8001288:	240007f8 	.word	0x240007f8

0800128c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b03      	ldr	r3, [pc, #12]	@ (80012a0 <HAL_GetTick+0x14>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	240007f8 	.word	0x240007f8

080012a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ac:	f7ff ffee 	bl	800128c <HAL_GetTick>
 80012b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012bc:	d005      	beq.n	80012ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012be:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <HAL_Delay+0x44>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ca:	bf00      	nop
 80012cc:	f7ff ffde 	bl	800128c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d8f7      	bhi.n	80012cc <HAL_Delay+0x28>
  {
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2400001c 	.word	0x2400001c

080012ec <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80012f4:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80012fc:	4904      	ldr	r1, [pc, #16]	@ (8001310 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4313      	orrs	r3, r2
 8001302:	604b      	str	r3, [r1, #4]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	58000400 	.word	0x58000400

08001314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001324:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <__NVIC_SetPriorityGrouping+0x40>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001330:	4013      	ands	r3, r2
 8001332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 800133e:	4313      	orrs	r3, r2
 8001340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001342:	4a04      	ldr	r2, [pc, #16]	@ (8001354 <__NVIC_SetPriorityGrouping+0x40>)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	60d3      	str	r3, [r2, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00
 8001358:	05fa0000 	.word	0x05fa0000

0800135c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001360:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <__NVIC_GetPriorityGrouping+0x18>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	f003 0307 	and.w	r3, r3, #7
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001386:	2b00      	cmp	r3, #0
 8001388:	db0b      	blt.n	80013a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	f003 021f 	and.w	r2, r3, #31
 8001390:	4907      	ldr	r1, [pc, #28]	@ (80013b0 <__NVIC_EnableIRQ+0x38>)
 8001392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001396:	095b      	lsrs	r3, r3, #5
 8001398:	2001      	movs	r0, #1
 800139a:	fa00 f202 	lsl.w	r2, r0, r2
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e100 	.word	0xe000e100

080013b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db0a      	blt.n	80013de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	490c      	ldr	r1, [pc, #48]	@ (8001400 <__NVIC_SetPriority+0x4c>)
 80013ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013dc:	e00a      	b.n	80013f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4908      	ldr	r1, [pc, #32]	@ (8001404 <__NVIC_SetPriority+0x50>)
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	3b04      	subs	r3, #4
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	761a      	strb	r2, [r3, #24]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000e100 	.word	0xe000e100
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	@ 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f1c3 0307 	rsb	r3, r3, #7
 8001422:	2b04      	cmp	r3, #4
 8001424:	bf28      	it	cs
 8001426:	2304      	movcs	r3, #4
 8001428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3304      	adds	r3, #4
 800142e:	2b06      	cmp	r3, #6
 8001430:	d902      	bls.n	8001438 <NVIC_EncodePriority+0x30>
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3b03      	subs	r3, #3
 8001436:	e000      	b.n	800143a <NVIC_EncodePriority+0x32>
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	401a      	ands	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001450:	f04f 31ff 	mov.w	r1, #4294967295
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43d9      	mvns	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	4313      	orrs	r3, r2
         );
}
 8001462:	4618      	mov	r0, r3
 8001464:	3724      	adds	r7, #36	@ 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001480:	d301      	bcc.n	8001486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001482:	2301      	movs	r3, #1
 8001484:	e00f      	b.n	80014a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001486:	4a0a      	ldr	r2, [pc, #40]	@ (80014b0 <SysTick_Config+0x40>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148e:	210f      	movs	r1, #15
 8001490:	f04f 30ff 	mov.w	r0, #4294967295
 8001494:	f7ff ff8e 	bl	80013b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001498:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <SysTick_Config+0x40>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149e:	4b04      	ldr	r3, [pc, #16]	@ (80014b0 <SysTick_Config+0x40>)
 80014a0:	2207      	movs	r2, #7
 80014a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	e000e010 	.word	0xe000e010

080014b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff29 	bl	8001314 <__NVIC_SetPriorityGrouping>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014d8:	f7ff ff40 	bl	800135c <__NVIC_GetPriorityGrouping>
 80014dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	68b9      	ldr	r1, [r7, #8]
 80014e2:	6978      	ldr	r0, [r7, #20]
 80014e4:	f7ff ff90 	bl	8001408 <NVIC_EncodePriority>
 80014e8:	4602      	mov	r2, r0
 80014ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff5f 	bl	80013b4 <__NVIC_SetPriority>
}
 80014f6:	bf00      	nop
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001508:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff33 	bl	8001378 <__NVIC_EnableIRQ>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ffa4 	bl	8001470 <SysTick_Config>
 8001528:	4603      	mov	r3, r0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800153c:	f7ff fea6 	bl	800128c <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e2dc      	b.n	8001b06 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d008      	beq.n	800156a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2280      	movs	r2, #128	@ 0x80
 800155c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e2cd      	b.n	8001b06 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a76      	ldr	r2, [pc, #472]	@ (8001748 <HAL_DMA_Abort+0x214>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d04a      	beq.n	800160a <HAL_DMA_Abort+0xd6>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a74      	ldr	r2, [pc, #464]	@ (800174c <HAL_DMA_Abort+0x218>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d045      	beq.n	800160a <HAL_DMA_Abort+0xd6>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a73      	ldr	r2, [pc, #460]	@ (8001750 <HAL_DMA_Abort+0x21c>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d040      	beq.n	800160a <HAL_DMA_Abort+0xd6>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a71      	ldr	r2, [pc, #452]	@ (8001754 <HAL_DMA_Abort+0x220>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d03b      	beq.n	800160a <HAL_DMA_Abort+0xd6>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a70      	ldr	r2, [pc, #448]	@ (8001758 <HAL_DMA_Abort+0x224>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d036      	beq.n	800160a <HAL_DMA_Abort+0xd6>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a6e      	ldr	r2, [pc, #440]	@ (800175c <HAL_DMA_Abort+0x228>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d031      	beq.n	800160a <HAL_DMA_Abort+0xd6>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a6d      	ldr	r2, [pc, #436]	@ (8001760 <HAL_DMA_Abort+0x22c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d02c      	beq.n	800160a <HAL_DMA_Abort+0xd6>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a6b      	ldr	r2, [pc, #428]	@ (8001764 <HAL_DMA_Abort+0x230>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d027      	beq.n	800160a <HAL_DMA_Abort+0xd6>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a6a      	ldr	r2, [pc, #424]	@ (8001768 <HAL_DMA_Abort+0x234>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d022      	beq.n	800160a <HAL_DMA_Abort+0xd6>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a68      	ldr	r2, [pc, #416]	@ (800176c <HAL_DMA_Abort+0x238>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d01d      	beq.n	800160a <HAL_DMA_Abort+0xd6>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a67      	ldr	r2, [pc, #412]	@ (8001770 <HAL_DMA_Abort+0x23c>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d018      	beq.n	800160a <HAL_DMA_Abort+0xd6>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a65      	ldr	r2, [pc, #404]	@ (8001774 <HAL_DMA_Abort+0x240>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d013      	beq.n	800160a <HAL_DMA_Abort+0xd6>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a64      	ldr	r2, [pc, #400]	@ (8001778 <HAL_DMA_Abort+0x244>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d00e      	beq.n	800160a <HAL_DMA_Abort+0xd6>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a62      	ldr	r2, [pc, #392]	@ (800177c <HAL_DMA_Abort+0x248>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d009      	beq.n	800160a <HAL_DMA_Abort+0xd6>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a61      	ldr	r2, [pc, #388]	@ (8001780 <HAL_DMA_Abort+0x24c>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d004      	beq.n	800160a <HAL_DMA_Abort+0xd6>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a5f      	ldr	r2, [pc, #380]	@ (8001784 <HAL_DMA_Abort+0x250>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d101      	bne.n	800160e <HAL_DMA_Abort+0xda>
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <HAL_DMA_Abort+0xdc>
 800160e:	2300      	movs	r3, #0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d013      	beq.n	800163c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 021e 	bic.w	r2, r2, #30
 8001622:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	695a      	ldr	r2, [r3, #20]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001632:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e00a      	b.n	8001652 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 020e 	bic.w	r2, r2, #14
 800164a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a3c      	ldr	r2, [pc, #240]	@ (8001748 <HAL_DMA_Abort+0x214>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d072      	beq.n	8001742 <HAL_DMA_Abort+0x20e>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a3a      	ldr	r2, [pc, #232]	@ (800174c <HAL_DMA_Abort+0x218>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d06d      	beq.n	8001742 <HAL_DMA_Abort+0x20e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a39      	ldr	r2, [pc, #228]	@ (8001750 <HAL_DMA_Abort+0x21c>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d068      	beq.n	8001742 <HAL_DMA_Abort+0x20e>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a37      	ldr	r2, [pc, #220]	@ (8001754 <HAL_DMA_Abort+0x220>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d063      	beq.n	8001742 <HAL_DMA_Abort+0x20e>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a36      	ldr	r2, [pc, #216]	@ (8001758 <HAL_DMA_Abort+0x224>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d05e      	beq.n	8001742 <HAL_DMA_Abort+0x20e>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a34      	ldr	r2, [pc, #208]	@ (800175c <HAL_DMA_Abort+0x228>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d059      	beq.n	8001742 <HAL_DMA_Abort+0x20e>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a33      	ldr	r2, [pc, #204]	@ (8001760 <HAL_DMA_Abort+0x22c>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d054      	beq.n	8001742 <HAL_DMA_Abort+0x20e>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a31      	ldr	r2, [pc, #196]	@ (8001764 <HAL_DMA_Abort+0x230>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d04f      	beq.n	8001742 <HAL_DMA_Abort+0x20e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a30      	ldr	r2, [pc, #192]	@ (8001768 <HAL_DMA_Abort+0x234>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d04a      	beq.n	8001742 <HAL_DMA_Abort+0x20e>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a2e      	ldr	r2, [pc, #184]	@ (800176c <HAL_DMA_Abort+0x238>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d045      	beq.n	8001742 <HAL_DMA_Abort+0x20e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a2d      	ldr	r2, [pc, #180]	@ (8001770 <HAL_DMA_Abort+0x23c>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d040      	beq.n	8001742 <HAL_DMA_Abort+0x20e>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a2b      	ldr	r2, [pc, #172]	@ (8001774 <HAL_DMA_Abort+0x240>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d03b      	beq.n	8001742 <HAL_DMA_Abort+0x20e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a2a      	ldr	r2, [pc, #168]	@ (8001778 <HAL_DMA_Abort+0x244>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d036      	beq.n	8001742 <HAL_DMA_Abort+0x20e>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a28      	ldr	r2, [pc, #160]	@ (800177c <HAL_DMA_Abort+0x248>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d031      	beq.n	8001742 <HAL_DMA_Abort+0x20e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a27      	ldr	r2, [pc, #156]	@ (8001780 <HAL_DMA_Abort+0x24c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d02c      	beq.n	8001742 <HAL_DMA_Abort+0x20e>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a25      	ldr	r2, [pc, #148]	@ (8001784 <HAL_DMA_Abort+0x250>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d027      	beq.n	8001742 <HAL_DMA_Abort+0x20e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a24      	ldr	r2, [pc, #144]	@ (8001788 <HAL_DMA_Abort+0x254>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d022      	beq.n	8001742 <HAL_DMA_Abort+0x20e>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a22      	ldr	r2, [pc, #136]	@ (800178c <HAL_DMA_Abort+0x258>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d01d      	beq.n	8001742 <HAL_DMA_Abort+0x20e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a21      	ldr	r2, [pc, #132]	@ (8001790 <HAL_DMA_Abort+0x25c>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d018      	beq.n	8001742 <HAL_DMA_Abort+0x20e>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a1f      	ldr	r2, [pc, #124]	@ (8001794 <HAL_DMA_Abort+0x260>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d013      	beq.n	8001742 <HAL_DMA_Abort+0x20e>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a1e      	ldr	r2, [pc, #120]	@ (8001798 <HAL_DMA_Abort+0x264>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d00e      	beq.n	8001742 <HAL_DMA_Abort+0x20e>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a1c      	ldr	r2, [pc, #112]	@ (800179c <HAL_DMA_Abort+0x268>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d009      	beq.n	8001742 <HAL_DMA_Abort+0x20e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a1b      	ldr	r2, [pc, #108]	@ (80017a0 <HAL_DMA_Abort+0x26c>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d004      	beq.n	8001742 <HAL_DMA_Abort+0x20e>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a19      	ldr	r2, [pc, #100]	@ (80017a4 <HAL_DMA_Abort+0x270>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d132      	bne.n	80017a8 <HAL_DMA_Abort+0x274>
 8001742:	2301      	movs	r3, #1
 8001744:	e031      	b.n	80017aa <HAL_DMA_Abort+0x276>
 8001746:	bf00      	nop
 8001748:	40020010 	.word	0x40020010
 800174c:	40020028 	.word	0x40020028
 8001750:	40020040 	.word	0x40020040
 8001754:	40020058 	.word	0x40020058
 8001758:	40020070 	.word	0x40020070
 800175c:	40020088 	.word	0x40020088
 8001760:	400200a0 	.word	0x400200a0
 8001764:	400200b8 	.word	0x400200b8
 8001768:	40020410 	.word	0x40020410
 800176c:	40020428 	.word	0x40020428
 8001770:	40020440 	.word	0x40020440
 8001774:	40020458 	.word	0x40020458
 8001778:	40020470 	.word	0x40020470
 800177c:	40020488 	.word	0x40020488
 8001780:	400204a0 	.word	0x400204a0
 8001784:	400204b8 	.word	0x400204b8
 8001788:	58025408 	.word	0x58025408
 800178c:	5802541c 	.word	0x5802541c
 8001790:	58025430 	.word	0x58025430
 8001794:	58025444 	.word	0x58025444
 8001798:	58025458 	.word	0x58025458
 800179c:	5802546c 	.word	0x5802546c
 80017a0:	58025480 	.word	0x58025480
 80017a4:	58025494 	.word	0x58025494
 80017a8:	2300      	movs	r3, #0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d007      	beq.n	80017be <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a6d      	ldr	r2, [pc, #436]	@ (8001978 <HAL_DMA_Abort+0x444>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d04a      	beq.n	800185e <HAL_DMA_Abort+0x32a>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a6b      	ldr	r2, [pc, #428]	@ (800197c <HAL_DMA_Abort+0x448>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d045      	beq.n	800185e <HAL_DMA_Abort+0x32a>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a6a      	ldr	r2, [pc, #424]	@ (8001980 <HAL_DMA_Abort+0x44c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d040      	beq.n	800185e <HAL_DMA_Abort+0x32a>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a68      	ldr	r2, [pc, #416]	@ (8001984 <HAL_DMA_Abort+0x450>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d03b      	beq.n	800185e <HAL_DMA_Abort+0x32a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a67      	ldr	r2, [pc, #412]	@ (8001988 <HAL_DMA_Abort+0x454>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d036      	beq.n	800185e <HAL_DMA_Abort+0x32a>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a65      	ldr	r2, [pc, #404]	@ (800198c <HAL_DMA_Abort+0x458>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d031      	beq.n	800185e <HAL_DMA_Abort+0x32a>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a64      	ldr	r2, [pc, #400]	@ (8001990 <HAL_DMA_Abort+0x45c>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d02c      	beq.n	800185e <HAL_DMA_Abort+0x32a>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a62      	ldr	r2, [pc, #392]	@ (8001994 <HAL_DMA_Abort+0x460>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d027      	beq.n	800185e <HAL_DMA_Abort+0x32a>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a61      	ldr	r2, [pc, #388]	@ (8001998 <HAL_DMA_Abort+0x464>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d022      	beq.n	800185e <HAL_DMA_Abort+0x32a>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a5f      	ldr	r2, [pc, #380]	@ (800199c <HAL_DMA_Abort+0x468>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d01d      	beq.n	800185e <HAL_DMA_Abort+0x32a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a5e      	ldr	r2, [pc, #376]	@ (80019a0 <HAL_DMA_Abort+0x46c>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d018      	beq.n	800185e <HAL_DMA_Abort+0x32a>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a5c      	ldr	r2, [pc, #368]	@ (80019a4 <HAL_DMA_Abort+0x470>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d013      	beq.n	800185e <HAL_DMA_Abort+0x32a>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a5b      	ldr	r2, [pc, #364]	@ (80019a8 <HAL_DMA_Abort+0x474>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d00e      	beq.n	800185e <HAL_DMA_Abort+0x32a>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a59      	ldr	r2, [pc, #356]	@ (80019ac <HAL_DMA_Abort+0x478>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d009      	beq.n	800185e <HAL_DMA_Abort+0x32a>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a58      	ldr	r2, [pc, #352]	@ (80019b0 <HAL_DMA_Abort+0x47c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d004      	beq.n	800185e <HAL_DMA_Abort+0x32a>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a56      	ldr	r2, [pc, #344]	@ (80019b4 <HAL_DMA_Abort+0x480>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d108      	bne.n	8001870 <HAL_DMA_Abort+0x33c>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0201 	bic.w	r2, r2, #1
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	e007      	b.n	8001880 <HAL_DMA_Abort+0x34c>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0201 	bic.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001880:	e013      	b.n	80018aa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001882:	f7ff fd03 	bl	800128c <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b05      	cmp	r3, #5
 800188e:	d90c      	bls.n	80018aa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2220      	movs	r2, #32
 8001894:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2203      	movs	r2, #3
 800189a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e12d      	b.n	8001b06 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1e5      	bne.n	8001882 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a2f      	ldr	r2, [pc, #188]	@ (8001978 <HAL_DMA_Abort+0x444>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d04a      	beq.n	8001956 <HAL_DMA_Abort+0x422>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a2d      	ldr	r2, [pc, #180]	@ (800197c <HAL_DMA_Abort+0x448>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d045      	beq.n	8001956 <HAL_DMA_Abort+0x422>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a2c      	ldr	r2, [pc, #176]	@ (8001980 <HAL_DMA_Abort+0x44c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d040      	beq.n	8001956 <HAL_DMA_Abort+0x422>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001984 <HAL_DMA_Abort+0x450>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d03b      	beq.n	8001956 <HAL_DMA_Abort+0x422>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a29      	ldr	r2, [pc, #164]	@ (8001988 <HAL_DMA_Abort+0x454>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d036      	beq.n	8001956 <HAL_DMA_Abort+0x422>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a27      	ldr	r2, [pc, #156]	@ (800198c <HAL_DMA_Abort+0x458>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d031      	beq.n	8001956 <HAL_DMA_Abort+0x422>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a26      	ldr	r2, [pc, #152]	@ (8001990 <HAL_DMA_Abort+0x45c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d02c      	beq.n	8001956 <HAL_DMA_Abort+0x422>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a24      	ldr	r2, [pc, #144]	@ (8001994 <HAL_DMA_Abort+0x460>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d027      	beq.n	8001956 <HAL_DMA_Abort+0x422>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a23      	ldr	r2, [pc, #140]	@ (8001998 <HAL_DMA_Abort+0x464>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d022      	beq.n	8001956 <HAL_DMA_Abort+0x422>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a21      	ldr	r2, [pc, #132]	@ (800199c <HAL_DMA_Abort+0x468>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d01d      	beq.n	8001956 <HAL_DMA_Abort+0x422>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a20      	ldr	r2, [pc, #128]	@ (80019a0 <HAL_DMA_Abort+0x46c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d018      	beq.n	8001956 <HAL_DMA_Abort+0x422>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a1e      	ldr	r2, [pc, #120]	@ (80019a4 <HAL_DMA_Abort+0x470>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d013      	beq.n	8001956 <HAL_DMA_Abort+0x422>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a1d      	ldr	r2, [pc, #116]	@ (80019a8 <HAL_DMA_Abort+0x474>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d00e      	beq.n	8001956 <HAL_DMA_Abort+0x422>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a1b      	ldr	r2, [pc, #108]	@ (80019ac <HAL_DMA_Abort+0x478>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d009      	beq.n	8001956 <HAL_DMA_Abort+0x422>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a1a      	ldr	r2, [pc, #104]	@ (80019b0 <HAL_DMA_Abort+0x47c>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d004      	beq.n	8001956 <HAL_DMA_Abort+0x422>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a18      	ldr	r2, [pc, #96]	@ (80019b4 <HAL_DMA_Abort+0x480>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d101      	bne.n	800195a <HAL_DMA_Abort+0x426>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <HAL_DMA_Abort+0x428>
 800195a:	2300      	movs	r3, #0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d02b      	beq.n	80019b8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001964:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	223f      	movs	r2, #63	@ 0x3f
 8001970:	409a      	lsls	r2, r3
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	e02a      	b.n	80019ce <HAL_DMA_Abort+0x49a>
 8001978:	40020010 	.word	0x40020010
 800197c:	40020028 	.word	0x40020028
 8001980:	40020040 	.word	0x40020040
 8001984:	40020058 	.word	0x40020058
 8001988:	40020070 	.word	0x40020070
 800198c:	40020088 	.word	0x40020088
 8001990:	400200a0 	.word	0x400200a0
 8001994:	400200b8 	.word	0x400200b8
 8001998:	40020410 	.word	0x40020410
 800199c:	40020428 	.word	0x40020428
 80019a0:	40020440 	.word	0x40020440
 80019a4:	40020458 	.word	0x40020458
 80019a8:	40020470 	.word	0x40020470
 80019ac:	40020488 	.word	0x40020488
 80019b0:	400204a0 	.word	0x400204a0
 80019b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019bc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019c2:	f003 031f 	and.w	r3, r3, #31
 80019c6:	2201      	movs	r2, #1
 80019c8:	409a      	lsls	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a4f      	ldr	r2, [pc, #316]	@ (8001b10 <HAL_DMA_Abort+0x5dc>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d072      	beq.n	8001abe <HAL_DMA_Abort+0x58a>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a4d      	ldr	r2, [pc, #308]	@ (8001b14 <HAL_DMA_Abort+0x5e0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d06d      	beq.n	8001abe <HAL_DMA_Abort+0x58a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a4c      	ldr	r2, [pc, #304]	@ (8001b18 <HAL_DMA_Abort+0x5e4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d068      	beq.n	8001abe <HAL_DMA_Abort+0x58a>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a4a      	ldr	r2, [pc, #296]	@ (8001b1c <HAL_DMA_Abort+0x5e8>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d063      	beq.n	8001abe <HAL_DMA_Abort+0x58a>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a49      	ldr	r2, [pc, #292]	@ (8001b20 <HAL_DMA_Abort+0x5ec>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d05e      	beq.n	8001abe <HAL_DMA_Abort+0x58a>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a47      	ldr	r2, [pc, #284]	@ (8001b24 <HAL_DMA_Abort+0x5f0>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d059      	beq.n	8001abe <HAL_DMA_Abort+0x58a>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a46      	ldr	r2, [pc, #280]	@ (8001b28 <HAL_DMA_Abort+0x5f4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d054      	beq.n	8001abe <HAL_DMA_Abort+0x58a>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a44      	ldr	r2, [pc, #272]	@ (8001b2c <HAL_DMA_Abort+0x5f8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d04f      	beq.n	8001abe <HAL_DMA_Abort+0x58a>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a43      	ldr	r2, [pc, #268]	@ (8001b30 <HAL_DMA_Abort+0x5fc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d04a      	beq.n	8001abe <HAL_DMA_Abort+0x58a>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a41      	ldr	r2, [pc, #260]	@ (8001b34 <HAL_DMA_Abort+0x600>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d045      	beq.n	8001abe <HAL_DMA_Abort+0x58a>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a40      	ldr	r2, [pc, #256]	@ (8001b38 <HAL_DMA_Abort+0x604>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d040      	beq.n	8001abe <HAL_DMA_Abort+0x58a>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a3e      	ldr	r2, [pc, #248]	@ (8001b3c <HAL_DMA_Abort+0x608>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d03b      	beq.n	8001abe <HAL_DMA_Abort+0x58a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b40 <HAL_DMA_Abort+0x60c>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d036      	beq.n	8001abe <HAL_DMA_Abort+0x58a>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a3b      	ldr	r2, [pc, #236]	@ (8001b44 <HAL_DMA_Abort+0x610>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d031      	beq.n	8001abe <HAL_DMA_Abort+0x58a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a3a      	ldr	r2, [pc, #232]	@ (8001b48 <HAL_DMA_Abort+0x614>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d02c      	beq.n	8001abe <HAL_DMA_Abort+0x58a>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a38      	ldr	r2, [pc, #224]	@ (8001b4c <HAL_DMA_Abort+0x618>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d027      	beq.n	8001abe <HAL_DMA_Abort+0x58a>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a37      	ldr	r2, [pc, #220]	@ (8001b50 <HAL_DMA_Abort+0x61c>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d022      	beq.n	8001abe <HAL_DMA_Abort+0x58a>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a35      	ldr	r2, [pc, #212]	@ (8001b54 <HAL_DMA_Abort+0x620>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d01d      	beq.n	8001abe <HAL_DMA_Abort+0x58a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a34      	ldr	r2, [pc, #208]	@ (8001b58 <HAL_DMA_Abort+0x624>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d018      	beq.n	8001abe <HAL_DMA_Abort+0x58a>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a32      	ldr	r2, [pc, #200]	@ (8001b5c <HAL_DMA_Abort+0x628>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d013      	beq.n	8001abe <HAL_DMA_Abort+0x58a>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a31      	ldr	r2, [pc, #196]	@ (8001b60 <HAL_DMA_Abort+0x62c>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d00e      	beq.n	8001abe <HAL_DMA_Abort+0x58a>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a2f      	ldr	r2, [pc, #188]	@ (8001b64 <HAL_DMA_Abort+0x630>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d009      	beq.n	8001abe <HAL_DMA_Abort+0x58a>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a2e      	ldr	r2, [pc, #184]	@ (8001b68 <HAL_DMA_Abort+0x634>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d004      	beq.n	8001abe <HAL_DMA_Abort+0x58a>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8001b6c <HAL_DMA_Abort+0x638>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d101      	bne.n	8001ac2 <HAL_DMA_Abort+0x58e>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <HAL_DMA_Abort+0x590>
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d015      	beq.n	8001af4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001ad0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00c      	beq.n	8001af4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ae4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ae8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001af2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40020010 	.word	0x40020010
 8001b14:	40020028 	.word	0x40020028
 8001b18:	40020040 	.word	0x40020040
 8001b1c:	40020058 	.word	0x40020058
 8001b20:	40020070 	.word	0x40020070
 8001b24:	40020088 	.word	0x40020088
 8001b28:	400200a0 	.word	0x400200a0
 8001b2c:	400200b8 	.word	0x400200b8
 8001b30:	40020410 	.word	0x40020410
 8001b34:	40020428 	.word	0x40020428
 8001b38:	40020440 	.word	0x40020440
 8001b3c:	40020458 	.word	0x40020458
 8001b40:	40020470 	.word	0x40020470
 8001b44:	40020488 	.word	0x40020488
 8001b48:	400204a0 	.word	0x400204a0
 8001b4c:	400204b8 	.word	0x400204b8
 8001b50:	58025408 	.word	0x58025408
 8001b54:	5802541c 	.word	0x5802541c
 8001b58:	58025430 	.word	0x58025430
 8001b5c:	58025444 	.word	0x58025444
 8001b60:	58025458 	.word	0x58025458
 8001b64:	5802546c 	.word	0x5802546c
 8001b68:	58025480 	.word	0x58025480
 8001b6c:	58025494 	.word	0x58025494

08001b70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e237      	b.n	8001ff2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d004      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2280      	movs	r2, #128	@ 0x80
 8001b92:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e22c      	b.n	8001ff2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a5c      	ldr	r2, [pc, #368]	@ (8001d10 <HAL_DMA_Abort_IT+0x1a0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d04a      	beq.n	8001c38 <HAL_DMA_Abort_IT+0xc8>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a5b      	ldr	r2, [pc, #364]	@ (8001d14 <HAL_DMA_Abort_IT+0x1a4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d045      	beq.n	8001c38 <HAL_DMA_Abort_IT+0xc8>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a59      	ldr	r2, [pc, #356]	@ (8001d18 <HAL_DMA_Abort_IT+0x1a8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d040      	beq.n	8001c38 <HAL_DMA_Abort_IT+0xc8>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a58      	ldr	r2, [pc, #352]	@ (8001d1c <HAL_DMA_Abort_IT+0x1ac>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d03b      	beq.n	8001c38 <HAL_DMA_Abort_IT+0xc8>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a56      	ldr	r2, [pc, #344]	@ (8001d20 <HAL_DMA_Abort_IT+0x1b0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d036      	beq.n	8001c38 <HAL_DMA_Abort_IT+0xc8>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a55      	ldr	r2, [pc, #340]	@ (8001d24 <HAL_DMA_Abort_IT+0x1b4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d031      	beq.n	8001c38 <HAL_DMA_Abort_IT+0xc8>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a53      	ldr	r2, [pc, #332]	@ (8001d28 <HAL_DMA_Abort_IT+0x1b8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d02c      	beq.n	8001c38 <HAL_DMA_Abort_IT+0xc8>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a52      	ldr	r2, [pc, #328]	@ (8001d2c <HAL_DMA_Abort_IT+0x1bc>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d027      	beq.n	8001c38 <HAL_DMA_Abort_IT+0xc8>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a50      	ldr	r2, [pc, #320]	@ (8001d30 <HAL_DMA_Abort_IT+0x1c0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d022      	beq.n	8001c38 <HAL_DMA_Abort_IT+0xc8>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a4f      	ldr	r2, [pc, #316]	@ (8001d34 <HAL_DMA_Abort_IT+0x1c4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d01d      	beq.n	8001c38 <HAL_DMA_Abort_IT+0xc8>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a4d      	ldr	r2, [pc, #308]	@ (8001d38 <HAL_DMA_Abort_IT+0x1c8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d018      	beq.n	8001c38 <HAL_DMA_Abort_IT+0xc8>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a4c      	ldr	r2, [pc, #304]	@ (8001d3c <HAL_DMA_Abort_IT+0x1cc>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d013      	beq.n	8001c38 <HAL_DMA_Abort_IT+0xc8>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a4a      	ldr	r2, [pc, #296]	@ (8001d40 <HAL_DMA_Abort_IT+0x1d0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00e      	beq.n	8001c38 <HAL_DMA_Abort_IT+0xc8>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a49      	ldr	r2, [pc, #292]	@ (8001d44 <HAL_DMA_Abort_IT+0x1d4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d009      	beq.n	8001c38 <HAL_DMA_Abort_IT+0xc8>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a47      	ldr	r2, [pc, #284]	@ (8001d48 <HAL_DMA_Abort_IT+0x1d8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d004      	beq.n	8001c38 <HAL_DMA_Abort_IT+0xc8>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a46      	ldr	r2, [pc, #280]	@ (8001d4c <HAL_DMA_Abort_IT+0x1dc>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d101      	bne.n	8001c3c <HAL_DMA_Abort_IT+0xcc>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <HAL_DMA_Abort_IT+0xce>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 8086 	beq.w	8001d50 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2204      	movs	r2, #4
 8001c48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a2f      	ldr	r2, [pc, #188]	@ (8001d10 <HAL_DMA_Abort_IT+0x1a0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d04a      	beq.n	8001cec <HAL_DMA_Abort_IT+0x17c>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a2e      	ldr	r2, [pc, #184]	@ (8001d14 <HAL_DMA_Abort_IT+0x1a4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d045      	beq.n	8001cec <HAL_DMA_Abort_IT+0x17c>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a2c      	ldr	r2, [pc, #176]	@ (8001d18 <HAL_DMA_Abort_IT+0x1a8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d040      	beq.n	8001cec <HAL_DMA_Abort_IT+0x17c>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a2b      	ldr	r2, [pc, #172]	@ (8001d1c <HAL_DMA_Abort_IT+0x1ac>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d03b      	beq.n	8001cec <HAL_DMA_Abort_IT+0x17c>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a29      	ldr	r2, [pc, #164]	@ (8001d20 <HAL_DMA_Abort_IT+0x1b0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d036      	beq.n	8001cec <HAL_DMA_Abort_IT+0x17c>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a28      	ldr	r2, [pc, #160]	@ (8001d24 <HAL_DMA_Abort_IT+0x1b4>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d031      	beq.n	8001cec <HAL_DMA_Abort_IT+0x17c>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a26      	ldr	r2, [pc, #152]	@ (8001d28 <HAL_DMA_Abort_IT+0x1b8>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d02c      	beq.n	8001cec <HAL_DMA_Abort_IT+0x17c>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a25      	ldr	r2, [pc, #148]	@ (8001d2c <HAL_DMA_Abort_IT+0x1bc>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d027      	beq.n	8001cec <HAL_DMA_Abort_IT+0x17c>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a23      	ldr	r2, [pc, #140]	@ (8001d30 <HAL_DMA_Abort_IT+0x1c0>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d022      	beq.n	8001cec <HAL_DMA_Abort_IT+0x17c>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a22      	ldr	r2, [pc, #136]	@ (8001d34 <HAL_DMA_Abort_IT+0x1c4>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d01d      	beq.n	8001cec <HAL_DMA_Abort_IT+0x17c>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a20      	ldr	r2, [pc, #128]	@ (8001d38 <HAL_DMA_Abort_IT+0x1c8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d018      	beq.n	8001cec <HAL_DMA_Abort_IT+0x17c>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8001d3c <HAL_DMA_Abort_IT+0x1cc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d013      	beq.n	8001cec <HAL_DMA_Abort_IT+0x17c>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d40 <HAL_DMA_Abort_IT+0x1d0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00e      	beq.n	8001cec <HAL_DMA_Abort_IT+0x17c>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8001d44 <HAL_DMA_Abort_IT+0x1d4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d009      	beq.n	8001cec <HAL_DMA_Abort_IT+0x17c>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a1a      	ldr	r2, [pc, #104]	@ (8001d48 <HAL_DMA_Abort_IT+0x1d8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d004      	beq.n	8001cec <HAL_DMA_Abort_IT+0x17c>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a19      	ldr	r2, [pc, #100]	@ (8001d4c <HAL_DMA_Abort_IT+0x1dc>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d108      	bne.n	8001cfe <HAL_DMA_Abort_IT+0x18e>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0201 	bic.w	r2, r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	e178      	b.n	8001ff0 <HAL_DMA_Abort_IT+0x480>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0201 	bic.w	r2, r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	e16f      	b.n	8001ff0 <HAL_DMA_Abort_IT+0x480>
 8001d10:	40020010 	.word	0x40020010
 8001d14:	40020028 	.word	0x40020028
 8001d18:	40020040 	.word	0x40020040
 8001d1c:	40020058 	.word	0x40020058
 8001d20:	40020070 	.word	0x40020070
 8001d24:	40020088 	.word	0x40020088
 8001d28:	400200a0 	.word	0x400200a0
 8001d2c:	400200b8 	.word	0x400200b8
 8001d30:	40020410 	.word	0x40020410
 8001d34:	40020428 	.word	0x40020428
 8001d38:	40020440 	.word	0x40020440
 8001d3c:	40020458 	.word	0x40020458
 8001d40:	40020470 	.word	0x40020470
 8001d44:	40020488 	.word	0x40020488
 8001d48:	400204a0 	.word	0x400204a0
 8001d4c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 020e 	bic.w	r2, r2, #14
 8001d5e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a6c      	ldr	r2, [pc, #432]	@ (8001f18 <HAL_DMA_Abort_IT+0x3a8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d04a      	beq.n	8001e00 <HAL_DMA_Abort_IT+0x290>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a6b      	ldr	r2, [pc, #428]	@ (8001f1c <HAL_DMA_Abort_IT+0x3ac>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d045      	beq.n	8001e00 <HAL_DMA_Abort_IT+0x290>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a69      	ldr	r2, [pc, #420]	@ (8001f20 <HAL_DMA_Abort_IT+0x3b0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d040      	beq.n	8001e00 <HAL_DMA_Abort_IT+0x290>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a68      	ldr	r2, [pc, #416]	@ (8001f24 <HAL_DMA_Abort_IT+0x3b4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d03b      	beq.n	8001e00 <HAL_DMA_Abort_IT+0x290>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a66      	ldr	r2, [pc, #408]	@ (8001f28 <HAL_DMA_Abort_IT+0x3b8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d036      	beq.n	8001e00 <HAL_DMA_Abort_IT+0x290>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a65      	ldr	r2, [pc, #404]	@ (8001f2c <HAL_DMA_Abort_IT+0x3bc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d031      	beq.n	8001e00 <HAL_DMA_Abort_IT+0x290>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a63      	ldr	r2, [pc, #396]	@ (8001f30 <HAL_DMA_Abort_IT+0x3c0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d02c      	beq.n	8001e00 <HAL_DMA_Abort_IT+0x290>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a62      	ldr	r2, [pc, #392]	@ (8001f34 <HAL_DMA_Abort_IT+0x3c4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d027      	beq.n	8001e00 <HAL_DMA_Abort_IT+0x290>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a60      	ldr	r2, [pc, #384]	@ (8001f38 <HAL_DMA_Abort_IT+0x3c8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d022      	beq.n	8001e00 <HAL_DMA_Abort_IT+0x290>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a5f      	ldr	r2, [pc, #380]	@ (8001f3c <HAL_DMA_Abort_IT+0x3cc>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d01d      	beq.n	8001e00 <HAL_DMA_Abort_IT+0x290>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a5d      	ldr	r2, [pc, #372]	@ (8001f40 <HAL_DMA_Abort_IT+0x3d0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d018      	beq.n	8001e00 <HAL_DMA_Abort_IT+0x290>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a5c      	ldr	r2, [pc, #368]	@ (8001f44 <HAL_DMA_Abort_IT+0x3d4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d013      	beq.n	8001e00 <HAL_DMA_Abort_IT+0x290>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a5a      	ldr	r2, [pc, #360]	@ (8001f48 <HAL_DMA_Abort_IT+0x3d8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00e      	beq.n	8001e00 <HAL_DMA_Abort_IT+0x290>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a59      	ldr	r2, [pc, #356]	@ (8001f4c <HAL_DMA_Abort_IT+0x3dc>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d009      	beq.n	8001e00 <HAL_DMA_Abort_IT+0x290>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a57      	ldr	r2, [pc, #348]	@ (8001f50 <HAL_DMA_Abort_IT+0x3e0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d004      	beq.n	8001e00 <HAL_DMA_Abort_IT+0x290>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a56      	ldr	r2, [pc, #344]	@ (8001f54 <HAL_DMA_Abort_IT+0x3e4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d108      	bne.n	8001e12 <HAL_DMA_Abort_IT+0x2a2>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0201 	bic.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	e007      	b.n	8001e22 <HAL_DMA_Abort_IT+0x2b2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0201 	bic.w	r2, r2, #1
 8001e20:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a3c      	ldr	r2, [pc, #240]	@ (8001f18 <HAL_DMA_Abort_IT+0x3a8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d072      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x3a2>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a3a      	ldr	r2, [pc, #232]	@ (8001f1c <HAL_DMA_Abort_IT+0x3ac>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d06d      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x3a2>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a39      	ldr	r2, [pc, #228]	@ (8001f20 <HAL_DMA_Abort_IT+0x3b0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d068      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x3a2>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a37      	ldr	r2, [pc, #220]	@ (8001f24 <HAL_DMA_Abort_IT+0x3b4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d063      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x3a2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a36      	ldr	r2, [pc, #216]	@ (8001f28 <HAL_DMA_Abort_IT+0x3b8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d05e      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x3a2>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a34      	ldr	r2, [pc, #208]	@ (8001f2c <HAL_DMA_Abort_IT+0x3bc>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d059      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x3a2>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a33      	ldr	r2, [pc, #204]	@ (8001f30 <HAL_DMA_Abort_IT+0x3c0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d054      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x3a2>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a31      	ldr	r2, [pc, #196]	@ (8001f34 <HAL_DMA_Abort_IT+0x3c4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d04f      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x3a2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a30      	ldr	r2, [pc, #192]	@ (8001f38 <HAL_DMA_Abort_IT+0x3c8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d04a      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x3a2>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a2e      	ldr	r2, [pc, #184]	@ (8001f3c <HAL_DMA_Abort_IT+0x3cc>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d045      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x3a2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a2d      	ldr	r2, [pc, #180]	@ (8001f40 <HAL_DMA_Abort_IT+0x3d0>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d040      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x3a2>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a2b      	ldr	r2, [pc, #172]	@ (8001f44 <HAL_DMA_Abort_IT+0x3d4>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d03b      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x3a2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8001f48 <HAL_DMA_Abort_IT+0x3d8>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d036      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x3a2>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a28      	ldr	r2, [pc, #160]	@ (8001f4c <HAL_DMA_Abort_IT+0x3dc>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d031      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x3a2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a27      	ldr	r2, [pc, #156]	@ (8001f50 <HAL_DMA_Abort_IT+0x3e0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d02c      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x3a2>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a25      	ldr	r2, [pc, #148]	@ (8001f54 <HAL_DMA_Abort_IT+0x3e4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d027      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x3a2>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a24      	ldr	r2, [pc, #144]	@ (8001f58 <HAL_DMA_Abort_IT+0x3e8>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d022      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x3a2>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a22      	ldr	r2, [pc, #136]	@ (8001f5c <HAL_DMA_Abort_IT+0x3ec>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d01d      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x3a2>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a21      	ldr	r2, [pc, #132]	@ (8001f60 <HAL_DMA_Abort_IT+0x3f0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d018      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x3a2>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a1f      	ldr	r2, [pc, #124]	@ (8001f64 <HAL_DMA_Abort_IT+0x3f4>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x3a2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a1e      	ldr	r2, [pc, #120]	@ (8001f68 <HAL_DMA_Abort_IT+0x3f8>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d00e      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x3a2>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f6c <HAL_DMA_Abort_IT+0x3fc>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d009      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x3a2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a1b      	ldr	r2, [pc, #108]	@ (8001f70 <HAL_DMA_Abort_IT+0x400>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d004      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x3a2>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a19      	ldr	r2, [pc, #100]	@ (8001f74 <HAL_DMA_Abort_IT+0x404>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d132      	bne.n	8001f78 <HAL_DMA_Abort_IT+0x408>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e031      	b.n	8001f7a <HAL_DMA_Abort_IT+0x40a>
 8001f16:	bf00      	nop
 8001f18:	40020010 	.word	0x40020010
 8001f1c:	40020028 	.word	0x40020028
 8001f20:	40020040 	.word	0x40020040
 8001f24:	40020058 	.word	0x40020058
 8001f28:	40020070 	.word	0x40020070
 8001f2c:	40020088 	.word	0x40020088
 8001f30:	400200a0 	.word	0x400200a0
 8001f34:	400200b8 	.word	0x400200b8
 8001f38:	40020410 	.word	0x40020410
 8001f3c:	40020428 	.word	0x40020428
 8001f40:	40020440 	.word	0x40020440
 8001f44:	40020458 	.word	0x40020458
 8001f48:	40020470 	.word	0x40020470
 8001f4c:	40020488 	.word	0x40020488
 8001f50:	400204a0 	.word	0x400204a0
 8001f54:	400204b8 	.word	0x400204b8
 8001f58:	58025408 	.word	0x58025408
 8001f5c:	5802541c 	.word	0x5802541c
 8001f60:	58025430 	.word	0x58025430
 8001f64:	58025444 	.word	0x58025444
 8001f68:	58025458 	.word	0x58025458
 8001f6c:	5802546c 	.word	0x5802546c
 8001f70:	58025480 	.word	0x58025480
 8001f74:	58025494 	.word	0x58025494
 8001f78:	2300      	movs	r3, #0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d028      	beq.n	8001fd0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f8c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f92:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f98:	f003 031f 	and.w	r3, r3, #31
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001fac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00c      	beq.n	8001fd0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fc4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001fce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop

08001ffc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e0e3      	b.n	80021d6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002014:	2b00      	cmp	r3, #0
 8002016:	d106      	bne.n	8002026 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2223      	movs	r2, #35	@ 0x23
 800201c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7fe fda1 	bl	8000b68 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002026:	4b6e      	ldr	r3, [pc, #440]	@ (80021e0 <HAL_ETH_Init+0x1e4>)
 8002028:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800202c:	4a6c      	ldr	r2, [pc, #432]	@ (80021e0 <HAL_ETH_Init+0x1e4>)
 800202e:	f043 0302 	orr.w	r3, r3, #2
 8002032:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002036:	4b6a      	ldr	r3, [pc, #424]	@ (80021e0 <HAL_ETH_Init+0x1e4>)
 8002038:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	7a1b      	ldrb	r3, [r3, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d103      	bne.n	8002054 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800204c:	2000      	movs	r0, #0
 800204e:	f7ff f94d 	bl	80012ec <HAL_SYSCFG_ETHInterfaceSelect>
 8002052:	e003      	b.n	800205c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002054:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002058:	f7ff f948 	bl	80012ec <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800205c:	4b61      	ldr	r3, [pc, #388]	@ (80021e4 <HAL_ETH_Init+0x1e8>)
 800205e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002076:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002078:	f7ff f908 	bl	800128c <HAL_GetTick>
 800207c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800207e:	e011      	b.n	80020a4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002080:	f7ff f904 	bl	800128c <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800208e:	d909      	bls.n	80020a4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2204      	movs	r2, #4
 8002094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	22e0      	movs	r2, #224	@ 0xe0
 800209c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e098      	b.n	80021d6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1e4      	bne.n	8002080 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f89e 	bl	80021f8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80020bc:	f001 fe18 	bl	8003cf0 <HAL_RCC_GetHCLKFreq>
 80020c0:	4603      	mov	r3, r0
 80020c2:	4a49      	ldr	r2, [pc, #292]	@ (80021e8 <HAL_ETH_Init+0x1ec>)
 80020c4:	fba2 2303 	umull	r2, r3, r2, r3
 80020c8:	0c9a      	lsrs	r2, r3, #18
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3a01      	subs	r2, #1
 80020d0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fa81 	bl	80025dc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80020e6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80020f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020f6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d009      	beq.n	800211a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	22e0      	movs	r2, #224	@ 0xe0
 8002112:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e05d      	b.n	80021d6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002122:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002126:	4b31      	ldr	r3, [pc, #196]	@ (80021ec <HAL_ETH_Init+0x1f0>)
 8002128:	4013      	ands	r3, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6952      	ldr	r2, [r2, #20]
 800212e:	0051      	lsls	r1, r2, #1
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	430b      	orrs	r3, r1
 8002136:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800213a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fae9 	bl	8002716 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 fb2f 	bl	80027a8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	3305      	adds	r3, #5
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	021a      	lsls	r2, r3, #8
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	3304      	adds	r3, #4
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4619      	mov	r1, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	3303      	adds	r3, #3
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	061a      	lsls	r2, r3, #24
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	3302      	adds	r3, #2
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	041b      	lsls	r3, r3, #16
 800217c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	3301      	adds	r3, #1
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002188:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002196:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002198:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b11      	ldr	r3, [pc, #68]	@ (80021f0 <HAL_ETH_Init+0x1f4>)
 80021aa:	430b      	orrs	r3, r1
 80021ac:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4b0d      	ldr	r3, [pc, #52]	@ (80021f4 <HAL_ETH_Init+0x1f8>)
 80021be:	430b      	orrs	r3, r1
 80021c0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2210      	movs	r2, #16
 80021d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	58024400 	.word	0x58024400
 80021e4:	58000400 	.word	0x58000400
 80021e8:	431bde83 	.word	0x431bde83
 80021ec:	ffff8001 	.word	0xffff8001
 80021f0:	0c020060 	.word	0x0c020060
 80021f4:	0c20c000 	.word	0x0c20c000

080021f8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002208:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002210:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002212:	f001 fd6d 	bl	8003cf0 <HAL_RCC_GetHCLKFreq>
 8002216:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4a1a      	ldr	r2, [pc, #104]	@ (8002284 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d804      	bhi.n	800222a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	e022      	b.n	8002270 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	4a16      	ldr	r2, [pc, #88]	@ (8002288 <HAL_ETH_SetMDIOClockRange+0x90>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d204      	bcs.n	800223c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	e019      	b.n	8002270 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	4a13      	ldr	r2, [pc, #76]	@ (800228c <HAL_ETH_SetMDIOClockRange+0x94>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d915      	bls.n	8002270 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4a12      	ldr	r2, [pc, #72]	@ (8002290 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d804      	bhi.n	8002256 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	e00c      	b.n	8002270 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	4a0e      	ldr	r2, [pc, #56]	@ (8002294 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d804      	bhi.n	8002268 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	e003      	b.n	8002270 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800226e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	02160ebf 	.word	0x02160ebf
 8002288:	03938700 	.word	0x03938700
 800228c:	05f5e0ff 	.word	0x05f5e0ff
 8002290:	08f0d17f 	.word	0x08f0d17f
 8002294:	0ee6b27f 	.word	0x0ee6b27f

08002298 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80022aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	791b      	ldrb	r3, [r3, #4]
 80022b0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80022b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	7b1b      	ldrb	r3, [r3, #12]
 80022b8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80022ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	7b5b      	ldrb	r3, [r3, #13]
 80022c0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80022c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	7b9b      	ldrb	r3, [r3, #14]
 80022c8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80022ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	7bdb      	ldrb	r3, [r3, #15]
 80022d0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80022d2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	7c12      	ldrb	r2, [r2, #16]
 80022d8:	2a00      	cmp	r2, #0
 80022da:	d102      	bne.n	80022e2 <ETH_SetMACConfig+0x4a>
 80022dc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80022e0:	e000      	b.n	80022e4 <ETH_SetMACConfig+0x4c>
 80022e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80022e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	7c52      	ldrb	r2, [r2, #17]
 80022ea:	2a00      	cmp	r2, #0
 80022ec:	d102      	bne.n	80022f4 <ETH_SetMACConfig+0x5c>
 80022ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022f2:	e000      	b.n	80022f6 <ETH_SetMACConfig+0x5e>
 80022f4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80022f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	7c9b      	ldrb	r3, [r3, #18]
 80022fc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80022fe:	431a      	orrs	r2, r3
               macconf->Speed |
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002304:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800230a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	7f1b      	ldrb	r3, [r3, #28]
 8002310:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002312:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	7f5b      	ldrb	r3, [r3, #29]
 8002318:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800231a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	7f92      	ldrb	r2, [r2, #30]
 8002320:	2a00      	cmp	r2, #0
 8002322:	d102      	bne.n	800232a <ETH_SetMACConfig+0x92>
 8002324:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002328:	e000      	b.n	800232c <ETH_SetMACConfig+0x94>
 800232a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800232c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	7fdb      	ldrb	r3, [r3, #31]
 8002332:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002334:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	f892 2020 	ldrb.w	r2, [r2, #32]
 800233c:	2a00      	cmp	r2, #0
 800233e:	d102      	bne.n	8002346 <ETH_SetMACConfig+0xae>
 8002340:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002344:	e000      	b.n	8002348 <ETH_SetMACConfig+0xb0>
 8002346:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002348:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800234e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002356:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002358:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800235e:	4313      	orrs	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b56      	ldr	r3, [pc, #344]	@ (80024c4 <ETH_SetMACConfig+0x22c>)
 800236a:	4013      	ands	r3, r2
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	68f9      	ldr	r1, [r7, #12]
 8002372:	430b      	orrs	r3, r1
 8002374:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800237a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002382:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002384:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800238c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800238e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002396:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002398:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80023a0:	2a00      	cmp	r2, #0
 80023a2:	d102      	bne.n	80023aa <ETH_SetMACConfig+0x112>
 80023a4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80023a8:	e000      	b.n	80023ac <ETH_SetMACConfig+0x114>
 80023aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80023ac:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80023b2:	4313      	orrs	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	4b42      	ldr	r3, [pc, #264]	@ (80024c8 <ETH_SetMACConfig+0x230>)
 80023be:	4013      	ands	r3, r2
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	68f9      	ldr	r1, [r7, #12]
 80023c6:	430b      	orrs	r3, r1
 80023c8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023d0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	4b3a      	ldr	r3, [pc, #232]	@ (80024cc <ETH_SetMACConfig+0x234>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	68f9      	ldr	r1, [r7, #12]
 80023ea:	430b      	orrs	r3, r1
 80023ec:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80023f4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80023fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002402:	2a00      	cmp	r2, #0
 8002404:	d101      	bne.n	800240a <ETH_SetMACConfig+0x172>
 8002406:	2280      	movs	r2, #128	@ 0x80
 8002408:	e000      	b.n	800240c <ETH_SetMACConfig+0x174>
 800240a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800240c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002412:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002414:	4313      	orrs	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800241e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002422:	4013      	ands	r3, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	68f9      	ldr	r1, [r7, #12]
 800242a:	430b      	orrs	r3, r1
 800242c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002434:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800243c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800243e:	4313      	orrs	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800244a:	f023 0103 	bic.w	r1, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	430a      	orrs	r2, r1
 8002456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002462:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800247e:	2a00      	cmp	r2, #0
 8002480:	d101      	bne.n	8002486 <ETH_SetMACConfig+0x1ee>
 8002482:	2240      	movs	r2, #64	@ 0x40
 8002484:	e000      	b.n	8002488 <ETH_SetMACConfig+0x1f0>
 8002486:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002488:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002490:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002492:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800249a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800249c:	4313      	orrs	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80024a8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	00048083 	.word	0x00048083
 80024c8:	c0f88000 	.word	0xc0f88000
 80024cc:	fffffef0 	.word	0xfffffef0

080024d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4b38      	ldr	r3, [pc, #224]	@ (80025c8 <ETH_SetDMAConfig+0xf8>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	6811      	ldr	r1, [r2, #0]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	430b      	orrs	r3, r1
 80024f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024f6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	791b      	ldrb	r3, [r3, #4]
 80024fc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002502:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	7b1b      	ldrb	r3, [r3, #12]
 8002508:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800250a:	4313      	orrs	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	4b2c      	ldr	r3, [pc, #176]	@ (80025cc <ETH_SetDMAConfig+0xfc>)
 800251a:	4013      	ands	r3, r2
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	68f9      	ldr	r1, [r7, #12]
 8002522:	430b      	orrs	r3, r1
 8002524:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002528:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	7b5b      	ldrb	r3, [r3, #13]
 800252e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002534:	4313      	orrs	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002540:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002544:	4b22      	ldr	r3, [pc, #136]	@ (80025d0 <ETH_SetDMAConfig+0x100>)
 8002546:	4013      	ands	r3, r2
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	68f9      	ldr	r1, [r7, #12]
 800254e:	430b      	orrs	r3, r1
 8002550:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002554:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	7d1b      	ldrb	r3, [r3, #20]
 8002560:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002562:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	7f5b      	ldrb	r3, [r3, #29]
 8002568:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002576:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800257a:	4b16      	ldr	r3, [pc, #88]	@ (80025d4 <ETH_SetDMAConfig+0x104>)
 800257c:	4013      	ands	r3, r2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	68f9      	ldr	r1, [r7, #12]
 8002584:	430b      	orrs	r3, r1
 8002586:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800258a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	7f1b      	ldrb	r3, [r3, #28]
 8002592:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002598:	4313      	orrs	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025a4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80025a8:	4b0b      	ldr	r3, [pc, #44]	@ (80025d8 <ETH_SetDMAConfig+0x108>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	68f9      	ldr	r1, [r7, #12]
 80025b2:	430b      	orrs	r3, r1
 80025b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025b8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	ffff87fd 	.word	0xffff87fd
 80025cc:	ffff2ffe 	.word	0xffff2ffe
 80025d0:	fffec000 	.word	0xfffec000
 80025d4:	ffc0efef 	.word	0xffc0efef
 80025d8:	7fc0ffff 	.word	0x7fc0ffff

080025dc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b0a4      	sub	sp, #144	@ 0x90
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80025e4:	2301      	movs	r3, #1
 80025e6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80025ea:	2300      	movs	r3, #0
 80025ec:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80025fa:	2301      	movs	r3, #1
 80025fc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002600:	2301      	movs	r3, #1
 8002602:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002606:	2301      	movs	r3, #1
 8002608:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800260c:	2300      	movs	r3, #0
 800260e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002612:	2301      	movs	r3, #1
 8002614:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002618:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800261c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800261e:	2300      	movs	r3, #0
 8002620:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002624:	2300      	movs	r3, #0
 8002626:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002628:	2300      	movs	r3, #0
 800262a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002634:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002638:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800263a:	2300      	movs	r3, #0
 800263c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002640:	2300      	movs	r3, #0
 8002642:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002644:	2301      	movs	r3, #1
 8002646:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800264a:	2300      	movs	r3, #0
 800264c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002650:	2300      	movs	r3, #0
 8002652:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002656:	2300      	movs	r3, #0
 8002658:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800265a:	2300      	movs	r3, #0
 800265c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800265e:	2300      	movs	r3, #0
 8002660:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002662:	2300      	movs	r3, #0
 8002664:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002668:	2300      	movs	r3, #0
 800266a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800266e:	2301      	movs	r3, #1
 8002670:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002674:	2320      	movs	r3, #32
 8002676:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800267a:	2301      	movs	r3, #1
 800267c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002680:	2300      	movs	r3, #0
 8002682:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002686:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800268a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800268c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002690:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002692:	2300      	movs	r3, #0
 8002694:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002698:	2302      	movs	r3, #2
 800269a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80026aa:	2300      	movs	r3, #0
 80026ac:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80026b0:	2301      	movs	r3, #1
 80026b2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80026b6:	2300      	movs	r3, #0
 80026b8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80026ba:	2301      	movs	r3, #1
 80026bc:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80026c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026c4:	4619      	mov	r1, r3
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff fde6 	bl	8002298 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80026cc:	2301      	movs	r3, #1
 80026ce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80026d0:	2301      	movs	r3, #1
 80026d2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80026d8:	2300      	movs	r3, #0
 80026da:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80026de:	2300      	movs	r3, #0
 80026e0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80026e6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80026ea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80026ec:	2300      	movs	r3, #0
 80026ee:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80026f0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80026f4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80026fc:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002700:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002702:	f107 0308 	add.w	r3, r7, #8
 8002706:	4619      	mov	r1, r3
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff fee1 	bl	80024d0 <ETH_SetDMAConfig>
}
 800270e:	bf00      	nop
 8002710:	3790      	adds	r7, #144	@ 0x90
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002716:	b480      	push	{r7}
 8002718:	b085      	sub	sp, #20
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	e01d      	b.n	8002760 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68d9      	ldr	r1, [r3, #12]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	440b      	add	r3, r1
 8002734:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2200      	movs	r2, #0
 8002740:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2200      	movs	r2, #0
 800274c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800274e:	68b9      	ldr	r1, [r7, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	3206      	adds	r2, #6
 8002756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	3301      	adds	r3, #1
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b03      	cmp	r3, #3
 8002764:	d9de      	bls.n	8002724 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002774:	461a      	mov	r2, r3
 8002776:	2303      	movs	r3, #3
 8002778:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002788:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002798:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	e023      	b.n	80027fe <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6919      	ldr	r1, [r3, #16]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	4613      	mov	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	4413      	add	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	440b      	add	r3, r1
 80027c6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2200      	movs	r2, #0
 80027d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2200      	movs	r2, #0
 80027d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2200      	movs	r2, #0
 80027de:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2200      	movs	r2, #0
 80027e4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2200      	movs	r2, #0
 80027ea:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	3212      	adds	r2, #18
 80027f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	3301      	adds	r3, #1
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b03      	cmp	r3, #3
 8002802:	d9d8      	bls.n	80027b6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800282a:	461a      	mov	r2, r3
 800282c:	2303      	movs	r3, #3
 800282e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691a      	ldr	r2, [r3, #16]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800283e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002852:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002856:	bf00      	nop
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
	...

08002864 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002864:	b480      	push	{r7}
 8002866:	b089      	sub	sp, #36	@ 0x24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002872:	4b86      	ldr	r3, [pc, #536]	@ (8002a8c <HAL_GPIO_Init+0x228>)
 8002874:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002876:	e18c      	b.n	8002b92 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	2101      	movs	r1, #1
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	fa01 f303 	lsl.w	r3, r1, r3
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 817e 	beq.w	8002b8c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	2b01      	cmp	r3, #1
 800289a:	d005      	beq.n	80028a8 <HAL_GPIO_Init+0x44>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d130      	bne.n	800290a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	2203      	movs	r2, #3
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028de:	2201      	movs	r2, #1
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	091b      	lsrs	r3, r3, #4
 80028f4:	f003 0201 	and.w	r2, r3, #1
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	2b03      	cmp	r3, #3
 8002914:	d017      	beq.n	8002946 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	2203      	movs	r2, #3
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4013      	ands	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d123      	bne.n	800299a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	08da      	lsrs	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3208      	adds	r2, #8
 800295a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	220f      	movs	r2, #15
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	691a      	ldr	r2, [r3, #16]
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	08da      	lsrs	r2, r3, #3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3208      	adds	r2, #8
 8002994:	69b9      	ldr	r1, [r7, #24]
 8002996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	2203      	movs	r2, #3
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 0203 	and.w	r2, r3, #3
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 80d8 	beq.w	8002b8c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002a90 <HAL_GPIO_Init+0x22c>)
 80029de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80029e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002a90 <HAL_GPIO_Init+0x22c>)
 80029e4:	f043 0302 	orr.w	r3, r3, #2
 80029e8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80029ec:	4b28      	ldr	r3, [pc, #160]	@ (8002a90 <HAL_GPIO_Init+0x22c>)
 80029ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029fa:	4a26      	ldr	r2, [pc, #152]	@ (8002a94 <HAL_GPIO_Init+0x230>)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	089b      	lsrs	r3, r3, #2
 8002a00:	3302      	adds	r3, #2
 8002a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	220f      	movs	r2, #15
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a1d      	ldr	r2, [pc, #116]	@ (8002a98 <HAL_GPIO_Init+0x234>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d04a      	beq.n	8002abc <HAL_GPIO_Init+0x258>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a1c      	ldr	r2, [pc, #112]	@ (8002a9c <HAL_GPIO_Init+0x238>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d02b      	beq.n	8002a86 <HAL_GPIO_Init+0x222>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a1b      	ldr	r2, [pc, #108]	@ (8002aa0 <HAL_GPIO_Init+0x23c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d025      	beq.n	8002a82 <HAL_GPIO_Init+0x21e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a1a      	ldr	r2, [pc, #104]	@ (8002aa4 <HAL_GPIO_Init+0x240>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d01f      	beq.n	8002a7e <HAL_GPIO_Init+0x21a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a19      	ldr	r2, [pc, #100]	@ (8002aa8 <HAL_GPIO_Init+0x244>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d019      	beq.n	8002a7a <HAL_GPIO_Init+0x216>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a18      	ldr	r2, [pc, #96]	@ (8002aac <HAL_GPIO_Init+0x248>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d013      	beq.n	8002a76 <HAL_GPIO_Init+0x212>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a17      	ldr	r2, [pc, #92]	@ (8002ab0 <HAL_GPIO_Init+0x24c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00d      	beq.n	8002a72 <HAL_GPIO_Init+0x20e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a16      	ldr	r2, [pc, #88]	@ (8002ab4 <HAL_GPIO_Init+0x250>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d007      	beq.n	8002a6e <HAL_GPIO_Init+0x20a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a15      	ldr	r2, [pc, #84]	@ (8002ab8 <HAL_GPIO_Init+0x254>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d101      	bne.n	8002a6a <HAL_GPIO_Init+0x206>
 8002a66:	2309      	movs	r3, #9
 8002a68:	e029      	b.n	8002abe <HAL_GPIO_Init+0x25a>
 8002a6a:	230a      	movs	r3, #10
 8002a6c:	e027      	b.n	8002abe <HAL_GPIO_Init+0x25a>
 8002a6e:	2307      	movs	r3, #7
 8002a70:	e025      	b.n	8002abe <HAL_GPIO_Init+0x25a>
 8002a72:	2306      	movs	r3, #6
 8002a74:	e023      	b.n	8002abe <HAL_GPIO_Init+0x25a>
 8002a76:	2305      	movs	r3, #5
 8002a78:	e021      	b.n	8002abe <HAL_GPIO_Init+0x25a>
 8002a7a:	2304      	movs	r3, #4
 8002a7c:	e01f      	b.n	8002abe <HAL_GPIO_Init+0x25a>
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e01d      	b.n	8002abe <HAL_GPIO_Init+0x25a>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e01b      	b.n	8002abe <HAL_GPIO_Init+0x25a>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e019      	b.n	8002abe <HAL_GPIO_Init+0x25a>
 8002a8a:	bf00      	nop
 8002a8c:	58000080 	.word	0x58000080
 8002a90:	58024400 	.word	0x58024400
 8002a94:	58000400 	.word	0x58000400
 8002a98:	58020000 	.word	0x58020000
 8002a9c:	58020400 	.word	0x58020400
 8002aa0:	58020800 	.word	0x58020800
 8002aa4:	58020c00 	.word	0x58020c00
 8002aa8:	58021000 	.word	0x58021000
 8002aac:	58021400 	.word	0x58021400
 8002ab0:	58021800 	.word	0x58021800
 8002ab4:	58021c00 	.word	0x58021c00
 8002ab8:	58022400 	.word	0x58022400
 8002abc:	2300      	movs	r3, #0
 8002abe:	69fa      	ldr	r2, [r7, #28]
 8002ac0:	f002 0203 	and.w	r2, r2, #3
 8002ac4:	0092      	lsls	r2, r2, #2
 8002ac6:	4093      	lsls	r3, r2
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ace:	4938      	ldr	r1, [pc, #224]	@ (8002bb0 <HAL_GPIO_Init+0x34c>)
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	089b      	lsrs	r3, r3, #2
 8002ad4:	3302      	adds	r3, #2
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002b30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f47f ae6b 	bne.w	8002878 <HAL_GPIO_Init+0x14>
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	bf00      	nop
 8002ba6:	3724      	adds	r7, #36	@ 0x24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	58000400 	.word	0x58000400

08002bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bc4:	787b      	ldrb	r3, [r7, #1]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002bd0:	e003      	b.n	8002bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002bd2:	887b      	ldrh	r3, [r7, #2]
 8002bd4:	041a      	lsls	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	619a      	str	r2, [r3, #24]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b086      	sub	sp, #24
 8002bea:	af02      	add	r7, sp, #8
 8002bec:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0fe      	b.n	8002df6 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d106      	bne.n	8002c12 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7fe f95f 	bl	8000ed0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2203      	movs	r2, #3
 8002c16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f004 fd9c 	bl	800775c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6818      	ldr	r0, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	7c1a      	ldrb	r2, [r3, #16]
 8002c2c:	f88d 2000 	strb.w	r2, [sp]
 8002c30:	3304      	adds	r3, #4
 8002c32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c34:	f004 fd20 	bl	8007678 <USB_CoreInit>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2202      	movs	r2, #2
 8002c42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e0d5      	b.n	8002df6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f004 fd94 	bl	800777e <USB_SetCurrentMode>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0c6      	b.n	8002df6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c68:	2300      	movs	r3, #0
 8002c6a:	73fb      	strb	r3, [r7, #15]
 8002c6c:	e04a      	b.n	8002d04 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3315      	adds	r3, #21
 8002c7e:	2201      	movs	r2, #1
 8002c80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	3314      	adds	r3, #20
 8002c92:	7bfa      	ldrb	r2, [r7, #15]
 8002c94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	b298      	uxth	r0, r3
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	332e      	adds	r3, #46	@ 0x2e
 8002caa:	4602      	mov	r2, r0
 8002cac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cae:	7bfa      	ldrb	r2, [r7, #15]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	3318      	adds	r3, #24
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cc2:	7bfa      	ldrb	r2, [r7, #15]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	331c      	adds	r3, #28
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cd6:	7bfa      	ldrb	r2, [r7, #15]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	3320      	adds	r3, #32
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cea:	7bfa      	ldrb	r2, [r7, #15]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	3324      	adds	r3, #36	@ 0x24
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	3301      	adds	r3, #1
 8002d02:	73fb      	strb	r3, [r7, #15]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	791b      	ldrb	r3, [r3, #4]
 8002d08:	7bfa      	ldrb	r2, [r7, #15]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d3af      	bcc.n	8002c6e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d0e:	2300      	movs	r3, #0
 8002d10:	73fb      	strb	r3, [r7, #15]
 8002d12:	e044      	b.n	8002d9e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d14:	7bfa      	ldrb	r2, [r7, #15]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d2a:	7bfa      	ldrb	r2, [r7, #15]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002d3c:	7bfa      	ldrb	r2, [r7, #15]
 8002d3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d40:	7bfa      	ldrb	r2, [r7, #15]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002d52:	2200      	movs	r2, #0
 8002d54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d56:	7bfa      	ldrb	r2, [r7, #15]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	4413      	add	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d6c:	7bfa      	ldrb	r2, [r7, #15]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4413      	add	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d82:	7bfa      	ldrb	r2, [r7, #15]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	73fb      	strb	r3, [r7, #15]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	791b      	ldrb	r3, [r3, #4]
 8002da2:	7bfa      	ldrb	r2, [r7, #15]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d3b5      	bcc.n	8002d14 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	7c1a      	ldrb	r2, [r3, #16]
 8002db0:	f88d 2000 	strb.w	r2, [sp]
 8002db4:	3304      	adds	r3, #4
 8002db6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002db8:	f004 fd2e 	bl	8007818 <USB_DevInit>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d005      	beq.n	8002dce <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e013      	b.n	8002df6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	7b1b      	ldrb	r3, [r3, #12]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d102      	bne.n	8002dea <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f80b 	bl	8002e00 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f004 fee9 	bl	8007bc6 <USB_DevDisconnect>

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e2e:	4b05      	ldr	r3, [pc, #20]	@ (8002e44 <HAL_PCDEx_ActivateLPM+0x44>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	10000003 	.word	0x10000003

08002e48 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002e50:	4b19      	ldr	r3, [pc, #100]	@ (8002eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d00a      	beq.n	8002e72 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002e5c:	4b16      	ldr	r3, [pc, #88]	@ (8002eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d001      	beq.n	8002e6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e01f      	b.n	8002eae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	e01d      	b.n	8002eae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002e72:	4b11      	ldr	r3, [pc, #68]	@ (8002eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f023 0207 	bic.w	r2, r3, #7
 8002e7a:	490f      	ldr	r1, [pc, #60]	@ (8002eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002e82:	f7fe fa03 	bl	800128c <HAL_GetTick>
 8002e86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e88:	e009      	b.n	8002e9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e8a:	f7fe f9ff 	bl	800128c <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e98:	d901      	bls.n	8002e9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e007      	b.n	8002eae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e9e:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ea6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002eaa:	d1ee      	bne.n	8002e8a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	58024800 	.word	0x58024800

08002ebc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002ec0:	4b05      	ldr	r3, [pc, #20]	@ (8002ed8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4a04      	ldr	r2, [pc, #16]	@ (8002ed8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002ec6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eca:	60d3      	str	r3, [r2, #12]
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	58024800 	.word	0x58024800

08002edc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08c      	sub	sp, #48	@ 0x30
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e3c8      	b.n	8003680 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 8087 	beq.w	800300a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002efc:	4b88      	ldr	r3, [pc, #544]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f06:	4b86      	ldr	r3, [pc, #536]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8002f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d007      	beq.n	8002f22 <HAL_RCC_OscConfig+0x46>
 8002f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f14:	2b18      	cmp	r3, #24
 8002f16:	d110      	bne.n	8002f3a <HAL_RCC_OscConfig+0x5e>
 8002f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d10b      	bne.n	8002f3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f22:	4b7f      	ldr	r3, [pc, #508]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d06c      	beq.n	8003008 <HAL_RCC_OscConfig+0x12c>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d168      	bne.n	8003008 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e3a2      	b.n	8003680 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f42:	d106      	bne.n	8002f52 <HAL_RCC_OscConfig+0x76>
 8002f44:	4b76      	ldr	r3, [pc, #472]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a75      	ldr	r2, [pc, #468]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8002f4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	e02e      	b.n	8002fb0 <HAL_RCC_OscConfig+0xd4>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10c      	bne.n	8002f74 <HAL_RCC_OscConfig+0x98>
 8002f5a:	4b71      	ldr	r3, [pc, #452]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a70      	ldr	r2, [pc, #448]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8002f60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	4b6e      	ldr	r3, [pc, #440]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a6d      	ldr	r2, [pc, #436]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8002f6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	e01d      	b.n	8002fb0 <HAL_RCC_OscConfig+0xd4>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f7c:	d10c      	bne.n	8002f98 <HAL_RCC_OscConfig+0xbc>
 8002f7e:	4b68      	ldr	r3, [pc, #416]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a67      	ldr	r2, [pc, #412]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8002f84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	4b65      	ldr	r3, [pc, #404]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a64      	ldr	r2, [pc, #400]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8002f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	e00b      	b.n	8002fb0 <HAL_RCC_OscConfig+0xd4>
 8002f98:	4b61      	ldr	r3, [pc, #388]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a60      	ldr	r2, [pc, #384]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8002f9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	4b5e      	ldr	r3, [pc, #376]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a5d      	ldr	r2, [pc, #372]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8002faa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d013      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb8:	f7fe f968 	bl	800128c <HAL_GetTick>
 8002fbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc0:	f7fe f964 	bl	800128c <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b64      	cmp	r3, #100	@ 0x64
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e356      	b.n	8003680 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fd2:	4b53      	ldr	r3, [pc, #332]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0f0      	beq.n	8002fc0 <HAL_RCC_OscConfig+0xe4>
 8002fde:	e014      	b.n	800300a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7fe f954 	bl	800128c <HAL_GetTick>
 8002fe4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe8:	f7fe f950 	bl	800128c <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	@ 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e342      	b.n	8003680 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ffa:	4b49      	ldr	r3, [pc, #292]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x10c>
 8003006:	e000      	b.n	800300a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 808c 	beq.w	8003130 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003018:	4b41      	ldr	r3, [pc, #260]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003020:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003022:	4b3f      	ldr	r3, [pc, #252]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8003024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003026:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d007      	beq.n	800303e <HAL_RCC_OscConfig+0x162>
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	2b18      	cmp	r3, #24
 8003032:	d137      	bne.n	80030a4 <HAL_RCC_OscConfig+0x1c8>
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d132      	bne.n	80030a4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800303e:	4b38      	ldr	r3, [pc, #224]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <HAL_RCC_OscConfig+0x17a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e314      	b.n	8003680 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003056:	4b32      	ldr	r3, [pc, #200]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 0219 	bic.w	r2, r3, #25
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	492f      	ldr	r1, [pc, #188]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8003064:	4313      	orrs	r3, r2
 8003066:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fe f910 	bl	800128c <HAL_GetTick>
 800306c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003070:	f7fe f90c 	bl	800128c <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e2fe      	b.n	8003680 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003082:	4b27      	ldr	r3, [pc, #156]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308e:	4b24      	ldr	r3, [pc, #144]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	061b      	lsls	r3, r3, #24
 800309c:	4920      	ldr	r1, [pc, #128]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030a2:	e045      	b.n	8003130 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d026      	beq.n	80030fa <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f023 0219 	bic.w	r2, r3, #25
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4919      	ldr	r1, [pc, #100]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030be:	f7fe f8e5 	bl	800128c <HAL_GetTick>
 80030c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c6:	f7fe f8e1 	bl	800128c <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e2d3      	b.n	8003680 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030d8:	4b11      	ldr	r3, [pc, #68]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	061b      	lsls	r3, r3, #24
 80030f2:	490b      	ldr	r1, [pc, #44]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]
 80030f8:	e01a      	b.n	8003130 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030fa:	4b09      	ldr	r3, [pc, #36]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a08      	ldr	r2, [pc, #32]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8003100:	f023 0301 	bic.w	r3, r3, #1
 8003104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003106:	f7fe f8c1 	bl	800128c <HAL_GetTick>
 800310a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800310c:	e00a      	b.n	8003124 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800310e:	f7fe f8bd 	bl	800128c <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d903      	bls.n	8003124 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e2af      	b.n	8003680 <HAL_RCC_OscConfig+0x7a4>
 8003120:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003124:	4b96      	ldr	r3, [pc, #600]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1ee      	bne.n	800310e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	2b00      	cmp	r3, #0
 800313a:	d06a      	beq.n	8003212 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800313c:	4b90      	ldr	r3, [pc, #576]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003144:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003146:	4b8e      	ldr	r3, [pc, #568]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 8003148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	2b08      	cmp	r3, #8
 8003150:	d007      	beq.n	8003162 <HAL_RCC_OscConfig+0x286>
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	2b18      	cmp	r3, #24
 8003156:	d11b      	bne.n	8003190 <HAL_RCC_OscConfig+0x2b4>
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d116      	bne.n	8003190 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003162:	4b87      	ldr	r3, [pc, #540]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316a:	2b00      	cmp	r3, #0
 800316c:	d005      	beq.n	800317a <HAL_RCC_OscConfig+0x29e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	2b80      	cmp	r3, #128	@ 0x80
 8003174:	d001      	beq.n	800317a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e282      	b.n	8003680 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800317a:	4b81      	ldr	r3, [pc, #516]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	061b      	lsls	r3, r3, #24
 8003188:	497d      	ldr	r1, [pc, #500]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 800318a:	4313      	orrs	r3, r2
 800318c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800318e:	e040      	b.n	8003212 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d023      	beq.n	80031e0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003198:	4b79      	ldr	r3, [pc, #484]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a78      	ldr	r2, [pc, #480]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 800319e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fe f872 	bl	800128c <HAL_GetTick>
 80031a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80031ac:	f7fe f86e 	bl	800128c <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e260      	b.n	8003680 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031be:	4b70      	ldr	r3, [pc, #448]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031ca:	4b6d      	ldr	r3, [pc, #436]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	061b      	lsls	r3, r3, #24
 80031d8:	4969      	ldr	r1, [pc, #420]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	60cb      	str	r3, [r1, #12]
 80031de:	e018      	b.n	8003212 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80031e0:	4b67      	ldr	r3, [pc, #412]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a66      	ldr	r2, [pc, #408]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 80031e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ec:	f7fe f84e 	bl	800128c <HAL_GetTick>
 80031f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80031f4:	f7fe f84a 	bl	800128c <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e23c      	b.n	8003680 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003206:	4b5e      	ldr	r3, [pc, #376]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d036      	beq.n	800328c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d019      	beq.n	800325a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003226:	4b56      	ldr	r3, [pc, #344]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 8003228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800322a:	4a55      	ldr	r2, [pc, #340]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003232:	f7fe f82b 	bl	800128c <HAL_GetTick>
 8003236:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800323a:	f7fe f827 	bl	800128c <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e219      	b.n	8003680 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800324c:	4b4c      	ldr	r3, [pc, #304]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 800324e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x35e>
 8003258:	e018      	b.n	800328c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800325a:	4b49      	ldr	r3, [pc, #292]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 800325c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800325e:	4a48      	ldr	r2, [pc, #288]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 8003260:	f023 0301 	bic.w	r3, r3, #1
 8003264:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003266:	f7fe f811 	bl	800128c <HAL_GetTick>
 800326a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800326e:	f7fe f80d 	bl	800128c <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e1ff      	b.n	8003680 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003280:	4b3f      	ldr	r3, [pc, #252]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 8003282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f0      	bne.n	800326e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b00      	cmp	r3, #0
 8003296:	d036      	beq.n	8003306 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d019      	beq.n	80032d4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032a0:	4b37      	ldr	r3, [pc, #220]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a36      	ldr	r2, [pc, #216]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 80032a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80032aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032ac:	f7fd ffee 	bl	800128c <HAL_GetTick>
 80032b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032b4:	f7fd ffea 	bl	800128c <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e1dc      	b.n	8003680 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032c6:	4b2e      	ldr	r3, [pc, #184]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f0      	beq.n	80032b4 <HAL_RCC_OscConfig+0x3d8>
 80032d2:	e018      	b.n	8003306 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a29      	ldr	r2, [pc, #164]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 80032da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032e0:	f7fd ffd4 	bl	800128c <HAL_GetTick>
 80032e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032e8:	f7fd ffd0 	bl	800128c <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e1c2      	b.n	8003680 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032fa:	4b21      	ldr	r3, [pc, #132]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8086 	beq.w	8003420 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003314:	4b1b      	ldr	r3, [pc, #108]	@ (8003384 <HAL_RCC_OscConfig+0x4a8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1a      	ldr	r2, [pc, #104]	@ (8003384 <HAL_RCC_OscConfig+0x4a8>)
 800331a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800331e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003320:	f7fd ffb4 	bl	800128c <HAL_GetTick>
 8003324:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003328:	f7fd ffb0 	bl	800128c <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b64      	cmp	r3, #100	@ 0x64
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e1a2      	b.n	8003680 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800333a:	4b12      	ldr	r3, [pc, #72]	@ (8003384 <HAL_RCC_OscConfig+0x4a8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d106      	bne.n	800335c <HAL_RCC_OscConfig+0x480>
 800334e:	4b0c      	ldr	r3, [pc, #48]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003352:	4a0b      	ldr	r2, [pc, #44]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6713      	str	r3, [r2, #112]	@ 0x70
 800335a:	e032      	b.n	80033c2 <HAL_RCC_OscConfig+0x4e6>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d111      	bne.n	8003388 <HAL_RCC_OscConfig+0x4ac>
 8003364:	4b06      	ldr	r3, [pc, #24]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003368:	4a05      	ldr	r2, [pc, #20]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003370:	4b03      	ldr	r3, [pc, #12]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 8003372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003374:	4a02      	ldr	r2, [pc, #8]	@ (8003380 <HAL_RCC_OscConfig+0x4a4>)
 8003376:	f023 0304 	bic.w	r3, r3, #4
 800337a:	6713      	str	r3, [r2, #112]	@ 0x70
 800337c:	e021      	b.n	80033c2 <HAL_RCC_OscConfig+0x4e6>
 800337e:	bf00      	nop
 8003380:	58024400 	.word	0x58024400
 8003384:	58024800 	.word	0x58024800
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b05      	cmp	r3, #5
 800338e:	d10c      	bne.n	80033aa <HAL_RCC_OscConfig+0x4ce>
 8003390:	4b83      	ldr	r3, [pc, #524]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003394:	4a82      	ldr	r2, [pc, #520]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 8003396:	f043 0304 	orr.w	r3, r3, #4
 800339a:	6713      	str	r3, [r2, #112]	@ 0x70
 800339c:	4b80      	ldr	r3, [pc, #512]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 800339e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a0:	4a7f      	ldr	r2, [pc, #508]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80033a8:	e00b      	b.n	80033c2 <HAL_RCC_OscConfig+0x4e6>
 80033aa:	4b7d      	ldr	r3, [pc, #500]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ae:	4a7c      	ldr	r2, [pc, #496]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80033b6:	4b7a      	ldr	r3, [pc, #488]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ba:	4a79      	ldr	r2, [pc, #484]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 80033bc:	f023 0304 	bic.w	r3, r3, #4
 80033c0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d015      	beq.n	80033f6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ca:	f7fd ff5f 	bl	800128c <HAL_GetTick>
 80033ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033d0:	e00a      	b.n	80033e8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d2:	f7fd ff5b 	bl	800128c <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e14b      	b.n	8003680 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033e8:	4b6d      	ldr	r3, [pc, #436]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 80033ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ee      	beq.n	80033d2 <HAL_RCC_OscConfig+0x4f6>
 80033f4:	e014      	b.n	8003420 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f6:	f7fd ff49 	bl	800128c <HAL_GetTick>
 80033fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033fc:	e00a      	b.n	8003414 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f7fd ff45 	bl	800128c <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e135      	b.n	8003680 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003414:	4b62      	ldr	r3, [pc, #392]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1ee      	bne.n	80033fe <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 812a 	beq.w	800367e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800342a:	4b5d      	ldr	r3, [pc, #372]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003432:	2b18      	cmp	r3, #24
 8003434:	f000 80ba 	beq.w	80035ac <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	2b02      	cmp	r3, #2
 800343e:	f040 8095 	bne.w	800356c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003442:	4b57      	ldr	r3, [pc, #348]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a56      	ldr	r2, [pc, #344]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 8003448:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800344c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344e:	f7fd ff1d 	bl	800128c <HAL_GetTick>
 8003452:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003456:	f7fd ff19 	bl	800128c <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e10b      	b.n	8003680 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003468:	4b4d      	ldr	r3, [pc, #308]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1f0      	bne.n	8003456 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003474:	4b4a      	ldr	r3, [pc, #296]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 8003476:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003478:	4b4a      	ldr	r3, [pc, #296]	@ (80035a4 <HAL_RCC_OscConfig+0x6c8>)
 800347a:	4013      	ands	r3, r2
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003484:	0112      	lsls	r2, r2, #4
 8003486:	430a      	orrs	r2, r1
 8003488:	4945      	ldr	r1, [pc, #276]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 800348a:	4313      	orrs	r3, r2
 800348c:	628b      	str	r3, [r1, #40]	@ 0x28
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003492:	3b01      	subs	r3, #1
 8003494:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800349c:	3b01      	subs	r3, #1
 800349e:	025b      	lsls	r3, r3, #9
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a8:	3b01      	subs	r3, #1
 80034aa:	041b      	lsls	r3, r3, #16
 80034ac:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b6:	3b01      	subs	r3, #1
 80034b8:	061b      	lsls	r3, r3, #24
 80034ba:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80034be:	4938      	ldr	r1, [pc, #224]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80034c4:	4b36      	ldr	r3, [pc, #216]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 80034c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c8:	4a35      	ldr	r2, [pc, #212]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 80034ca:	f023 0301 	bic.w	r3, r3, #1
 80034ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034d0:	4b33      	ldr	r3, [pc, #204]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 80034d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034d4:	4b34      	ldr	r3, [pc, #208]	@ (80035a8 <HAL_RCC_OscConfig+0x6cc>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034dc:	00d2      	lsls	r2, r2, #3
 80034de:	4930      	ldr	r1, [pc, #192]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80034e4:	4b2e      	ldr	r3, [pc, #184]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 80034e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e8:	f023 020c 	bic.w	r2, r3, #12
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f0:	492b      	ldr	r1, [pc, #172]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80034f6:	4b2a      	ldr	r3, [pc, #168]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 80034f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fa:	f023 0202 	bic.w	r2, r3, #2
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003502:	4927      	ldr	r1, [pc, #156]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 8003504:	4313      	orrs	r3, r2
 8003506:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003508:	4b25      	ldr	r3, [pc, #148]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 800350a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350c:	4a24      	ldr	r2, [pc, #144]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 800350e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003512:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003514:	4b22      	ldr	r3, [pc, #136]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 8003516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003518:	4a21      	ldr	r2, [pc, #132]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 800351a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800351e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003520:	4b1f      	ldr	r3, [pc, #124]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 8003522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003524:	4a1e      	ldr	r2, [pc, #120]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 8003526:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800352a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800352c:	4b1c      	ldr	r3, [pc, #112]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 800352e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003530:	4a1b      	ldr	r2, [pc, #108]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003538:	4b19      	ldr	r3, [pc, #100]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a18      	ldr	r2, [pc, #96]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 800353e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fd fea2 	bl	800128c <HAL_GetTick>
 8003548:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800354c:	f7fd fe9e 	bl	800128c <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e090      	b.n	8003680 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800355e:	4b10      	ldr	r3, [pc, #64]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x670>
 800356a:	e088      	b.n	800367e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356c:	4b0c      	ldr	r3, [pc, #48]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a0b      	ldr	r2, [pc, #44]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 8003572:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7fd fe88 	bl	800128c <HAL_GetTick>
 800357c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003580:	f7fd fe84 	bl	800128c <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e076      	b.n	8003680 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003592:	4b03      	ldr	r3, [pc, #12]	@ (80035a0 <HAL_RCC_OscConfig+0x6c4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x6a4>
 800359e:	e06e      	b.n	800367e <HAL_RCC_OscConfig+0x7a2>
 80035a0:	58024400 	.word	0x58024400
 80035a4:	fffffc0c 	.word	0xfffffc0c
 80035a8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80035ac:	4b36      	ldr	r3, [pc, #216]	@ (8003688 <HAL_RCC_OscConfig+0x7ac>)
 80035ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80035b2:	4b35      	ldr	r3, [pc, #212]	@ (8003688 <HAL_RCC_OscConfig+0x7ac>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d031      	beq.n	8003624 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f003 0203 	and.w	r2, r3, #3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d12a      	bne.n	8003624 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	091b      	lsrs	r3, r3, #4
 80035d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035da:	429a      	cmp	r2, r3
 80035dc:	d122      	bne.n	8003624 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d11a      	bne.n	8003624 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	0a5b      	lsrs	r3, r3, #9
 80035f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d111      	bne.n	8003624 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	0c1b      	lsrs	r3, r3, #16
 8003604:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800360c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800360e:	429a      	cmp	r2, r3
 8003610:	d108      	bne.n	8003624 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	0e1b      	lsrs	r3, r3, #24
 8003616:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800361e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d001      	beq.n	8003628 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e02b      	b.n	8003680 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003628:	4b17      	ldr	r3, [pc, #92]	@ (8003688 <HAL_RCC_OscConfig+0x7ac>)
 800362a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800362c:	08db      	lsrs	r3, r3, #3
 800362e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003632:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	429a      	cmp	r2, r3
 800363c:	d01f      	beq.n	800367e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800363e:	4b12      	ldr	r3, [pc, #72]	@ (8003688 <HAL_RCC_OscConfig+0x7ac>)
 8003640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003642:	4a11      	ldr	r2, [pc, #68]	@ (8003688 <HAL_RCC_OscConfig+0x7ac>)
 8003644:	f023 0301 	bic.w	r3, r3, #1
 8003648:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800364a:	f7fd fe1f 	bl	800128c <HAL_GetTick>
 800364e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003650:	bf00      	nop
 8003652:	f7fd fe1b 	bl	800128c <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365a:	4293      	cmp	r3, r2
 800365c:	d0f9      	beq.n	8003652 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800365e:	4b0a      	ldr	r3, [pc, #40]	@ (8003688 <HAL_RCC_OscConfig+0x7ac>)
 8003660:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003662:	4b0a      	ldr	r3, [pc, #40]	@ (800368c <HAL_RCC_OscConfig+0x7b0>)
 8003664:	4013      	ands	r3, r2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800366a:	00d2      	lsls	r2, r2, #3
 800366c:	4906      	ldr	r1, [pc, #24]	@ (8003688 <HAL_RCC_OscConfig+0x7ac>)
 800366e:	4313      	orrs	r3, r2
 8003670:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003672:	4b05      	ldr	r3, [pc, #20]	@ (8003688 <HAL_RCC_OscConfig+0x7ac>)
 8003674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003676:	4a04      	ldr	r2, [pc, #16]	@ (8003688 <HAL_RCC_OscConfig+0x7ac>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3730      	adds	r7, #48	@ 0x30
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	58024400 	.word	0x58024400
 800368c:	ffff0007 	.word	0xffff0007

08003690 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e19c      	b.n	80039de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036a4:	4b8a      	ldr	r3, [pc, #552]	@ (80038d0 <HAL_RCC_ClockConfig+0x240>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 030f 	and.w	r3, r3, #15
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d910      	bls.n	80036d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	4b87      	ldr	r3, [pc, #540]	@ (80038d0 <HAL_RCC_ClockConfig+0x240>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 020f 	bic.w	r2, r3, #15
 80036ba:	4985      	ldr	r1, [pc, #532]	@ (80038d0 <HAL_RCC_ClockConfig+0x240>)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b83      	ldr	r3, [pc, #524]	@ (80038d0 <HAL_RCC_ClockConfig+0x240>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e184      	b.n	80039de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d010      	beq.n	8003702 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	4b7b      	ldr	r3, [pc, #492]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d908      	bls.n	8003702 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036f0:	4b78      	ldr	r3, [pc, #480]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	4975      	ldr	r1, [pc, #468]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d010      	beq.n	8003730 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695a      	ldr	r2, [r3, #20]
 8003712:	4b70      	ldr	r3, [pc, #448]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800371a:	429a      	cmp	r2, r3
 800371c:	d908      	bls.n	8003730 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800371e:	4b6d      	ldr	r3, [pc, #436]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	496a      	ldr	r1, [pc, #424]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 800372c:	4313      	orrs	r3, r2
 800372e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b00      	cmp	r3, #0
 800373a:	d010      	beq.n	800375e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699a      	ldr	r2, [r3, #24]
 8003740:	4b64      	ldr	r3, [pc, #400]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003748:	429a      	cmp	r2, r3
 800374a:	d908      	bls.n	800375e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800374c:	4b61      	ldr	r3, [pc, #388]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	495e      	ldr	r1, [pc, #376]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 800375a:	4313      	orrs	r3, r2
 800375c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b00      	cmp	r3, #0
 8003768:	d010      	beq.n	800378c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69da      	ldr	r2, [r3, #28]
 800376e:	4b59      	ldr	r3, [pc, #356]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003776:	429a      	cmp	r2, r3
 8003778:	d908      	bls.n	800378c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800377a:	4b56      	ldr	r3, [pc, #344]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	4953      	ldr	r1, [pc, #332]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 8003788:	4313      	orrs	r3, r2
 800378a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d010      	beq.n	80037ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	4b4d      	ldr	r3, [pc, #308]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	f003 030f 	and.w	r3, r3, #15
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d908      	bls.n	80037ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a8:	4b4a      	ldr	r3, [pc, #296]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	f023 020f 	bic.w	r2, r3, #15
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	4947      	ldr	r1, [pc, #284]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d055      	beq.n	8003872 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80037c6:	4b43      	ldr	r3, [pc, #268]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	4940      	ldr	r1, [pc, #256]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d107      	bne.n	80037f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037e0:	4b3c      	ldr	r3, [pc, #240]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d121      	bne.n	8003830 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0f6      	b.n	80039de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d107      	bne.n	8003808 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037f8:	4b36      	ldr	r3, [pc, #216]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d115      	bne.n	8003830 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0ea      	b.n	80039de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d107      	bne.n	8003820 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003810:	4b30      	ldr	r3, [pc, #192]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003818:	2b00      	cmp	r3, #0
 800381a:	d109      	bne.n	8003830 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e0de      	b.n	80039de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003820:	4b2c      	ldr	r3, [pc, #176]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0d6      	b.n	80039de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003830:	4b28      	ldr	r3, [pc, #160]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	f023 0207 	bic.w	r2, r3, #7
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4925      	ldr	r1, [pc, #148]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 800383e:	4313      	orrs	r3, r2
 8003840:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003842:	f7fd fd23 	bl	800128c <HAL_GetTick>
 8003846:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003848:	e00a      	b.n	8003860 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800384a:	f7fd fd1f 	bl	800128c <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003858:	4293      	cmp	r3, r2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e0be      	b.n	80039de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003860:	4b1c      	ldr	r3, [pc, #112]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	429a      	cmp	r2, r3
 8003870:	d1eb      	bne.n	800384a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d010      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	4b14      	ldr	r3, [pc, #80]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	429a      	cmp	r2, r3
 800388c:	d208      	bcs.n	80038a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800388e:	4b11      	ldr	r3, [pc, #68]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	f023 020f 	bic.w	r2, r3, #15
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	490e      	ldr	r1, [pc, #56]	@ (80038d4 <HAL_RCC_ClockConfig+0x244>)
 800389c:	4313      	orrs	r3, r2
 800389e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038a0:	4b0b      	ldr	r3, [pc, #44]	@ (80038d0 <HAL_RCC_ClockConfig+0x240>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d214      	bcs.n	80038d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ae:	4b08      	ldr	r3, [pc, #32]	@ (80038d0 <HAL_RCC_ClockConfig+0x240>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f023 020f 	bic.w	r2, r3, #15
 80038b6:	4906      	ldr	r1, [pc, #24]	@ (80038d0 <HAL_RCC_ClockConfig+0x240>)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038be:	4b04      	ldr	r3, [pc, #16]	@ (80038d0 <HAL_RCC_ClockConfig+0x240>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d005      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e086      	b.n	80039de <HAL_RCC_ClockConfig+0x34e>
 80038d0:	52002000 	.word	0x52002000
 80038d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d010      	beq.n	8003906 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	4b3f      	ldr	r3, [pc, #252]	@ (80039e8 <HAL_RCC_ClockConfig+0x358>)
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d208      	bcs.n	8003906 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038f4:	4b3c      	ldr	r3, [pc, #240]	@ (80039e8 <HAL_RCC_ClockConfig+0x358>)
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	4939      	ldr	r1, [pc, #228]	@ (80039e8 <HAL_RCC_ClockConfig+0x358>)
 8003902:	4313      	orrs	r3, r2
 8003904:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d010      	beq.n	8003934 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695a      	ldr	r2, [r3, #20]
 8003916:	4b34      	ldr	r3, [pc, #208]	@ (80039e8 <HAL_RCC_ClockConfig+0x358>)
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800391e:	429a      	cmp	r2, r3
 8003920:	d208      	bcs.n	8003934 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003922:	4b31      	ldr	r3, [pc, #196]	@ (80039e8 <HAL_RCC_ClockConfig+0x358>)
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	492e      	ldr	r1, [pc, #184]	@ (80039e8 <HAL_RCC_ClockConfig+0x358>)
 8003930:	4313      	orrs	r3, r2
 8003932:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b00      	cmp	r3, #0
 800393e:	d010      	beq.n	8003962 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699a      	ldr	r2, [r3, #24]
 8003944:	4b28      	ldr	r3, [pc, #160]	@ (80039e8 <HAL_RCC_ClockConfig+0x358>)
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800394c:	429a      	cmp	r2, r3
 800394e:	d208      	bcs.n	8003962 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003950:	4b25      	ldr	r3, [pc, #148]	@ (80039e8 <HAL_RCC_ClockConfig+0x358>)
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	4922      	ldr	r1, [pc, #136]	@ (80039e8 <HAL_RCC_ClockConfig+0x358>)
 800395e:	4313      	orrs	r3, r2
 8003960:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b00      	cmp	r3, #0
 800396c:	d010      	beq.n	8003990 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69da      	ldr	r2, [r3, #28]
 8003972:	4b1d      	ldr	r3, [pc, #116]	@ (80039e8 <HAL_RCC_ClockConfig+0x358>)
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800397a:	429a      	cmp	r2, r3
 800397c:	d208      	bcs.n	8003990 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800397e:	4b1a      	ldr	r3, [pc, #104]	@ (80039e8 <HAL_RCC_ClockConfig+0x358>)
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	4917      	ldr	r1, [pc, #92]	@ (80039e8 <HAL_RCC_ClockConfig+0x358>)
 800398c:	4313      	orrs	r3, r2
 800398e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003990:	f000 f834 	bl	80039fc <HAL_RCC_GetSysClockFreq>
 8003994:	4602      	mov	r2, r0
 8003996:	4b14      	ldr	r3, [pc, #80]	@ (80039e8 <HAL_RCC_ClockConfig+0x358>)
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	0a1b      	lsrs	r3, r3, #8
 800399c:	f003 030f 	and.w	r3, r3, #15
 80039a0:	4912      	ldr	r1, [pc, #72]	@ (80039ec <HAL_RCC_ClockConfig+0x35c>)
 80039a2:	5ccb      	ldrb	r3, [r1, r3]
 80039a4:	f003 031f 	and.w	r3, r3, #31
 80039a8:	fa22 f303 	lsr.w	r3, r2, r3
 80039ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039ae:	4b0e      	ldr	r3, [pc, #56]	@ (80039e8 <HAL_RCC_ClockConfig+0x358>)
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	4a0d      	ldr	r2, [pc, #52]	@ (80039ec <HAL_RCC_ClockConfig+0x35c>)
 80039b8:	5cd3      	ldrb	r3, [r2, r3]
 80039ba:	f003 031f 	and.w	r3, r3, #31
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	fa22 f303 	lsr.w	r3, r2, r3
 80039c4:	4a0a      	ldr	r2, [pc, #40]	@ (80039f0 <HAL_RCC_ClockConfig+0x360>)
 80039c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039c8:	4a0a      	ldr	r2, [pc, #40]	@ (80039f4 <HAL_RCC_ClockConfig+0x364>)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80039ce:	4b0a      	ldr	r3, [pc, #40]	@ (80039f8 <HAL_RCC_ClockConfig+0x368>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fd fc10 	bl	80011f8 <HAL_InitTick>
 80039d8:	4603      	mov	r3, r0
 80039da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	58024400 	.word	0x58024400
 80039ec:	08007cf8 	.word	0x08007cf8
 80039f0:	24000014 	.word	0x24000014
 80039f4:	24000010 	.word	0x24000010
 80039f8:	24000018 	.word	0x24000018

080039fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b089      	sub	sp, #36	@ 0x24
 8003a00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a02:	4bb3      	ldr	r3, [pc, #716]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a0a:	2b18      	cmp	r3, #24
 8003a0c:	f200 8155 	bhi.w	8003cba <HAL_RCC_GetSysClockFreq+0x2be>
 8003a10:	a201      	add	r2, pc, #4	@ (adr r2, 8003a18 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a16:	bf00      	nop
 8003a18:	08003a7d 	.word	0x08003a7d
 8003a1c:	08003cbb 	.word	0x08003cbb
 8003a20:	08003cbb 	.word	0x08003cbb
 8003a24:	08003cbb 	.word	0x08003cbb
 8003a28:	08003cbb 	.word	0x08003cbb
 8003a2c:	08003cbb 	.word	0x08003cbb
 8003a30:	08003cbb 	.word	0x08003cbb
 8003a34:	08003cbb 	.word	0x08003cbb
 8003a38:	08003aa3 	.word	0x08003aa3
 8003a3c:	08003cbb 	.word	0x08003cbb
 8003a40:	08003cbb 	.word	0x08003cbb
 8003a44:	08003cbb 	.word	0x08003cbb
 8003a48:	08003cbb 	.word	0x08003cbb
 8003a4c:	08003cbb 	.word	0x08003cbb
 8003a50:	08003cbb 	.word	0x08003cbb
 8003a54:	08003cbb 	.word	0x08003cbb
 8003a58:	08003aa9 	.word	0x08003aa9
 8003a5c:	08003cbb 	.word	0x08003cbb
 8003a60:	08003cbb 	.word	0x08003cbb
 8003a64:	08003cbb 	.word	0x08003cbb
 8003a68:	08003cbb 	.word	0x08003cbb
 8003a6c:	08003cbb 	.word	0x08003cbb
 8003a70:	08003cbb 	.word	0x08003cbb
 8003a74:	08003cbb 	.word	0x08003cbb
 8003a78:	08003aaf 	.word	0x08003aaf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a7c:	4b94      	ldr	r3, [pc, #592]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0320 	and.w	r3, r3, #32
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d009      	beq.n	8003a9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a88:	4b91      	ldr	r3, [pc, #580]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	08db      	lsrs	r3, r3, #3
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	4a90      	ldr	r2, [pc, #576]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
 8003a98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003a9a:	e111      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a9c:	4b8d      	ldr	r3, [pc, #564]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a9e:	61bb      	str	r3, [r7, #24]
      break;
 8003aa0:	e10e      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003aa2:	4b8d      	ldr	r3, [pc, #564]	@ (8003cd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003aa4:	61bb      	str	r3, [r7, #24]
      break;
 8003aa6:	e10b      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003aa8:	4b8c      	ldr	r3, [pc, #560]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003aaa:	61bb      	str	r3, [r7, #24]
      break;
 8003aac:	e108      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003aae:	4b88      	ldr	r3, [pc, #544]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003ab8:	4b85      	ldr	r3, [pc, #532]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003abc:	091b      	lsrs	r3, r3, #4
 8003abe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ac2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003ac4:	4b82      	ldr	r3, [pc, #520]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003ace:	4b80      	ldr	r3, [pc, #512]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad2:	08db      	lsrs	r3, r3, #3
 8003ad4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	fb02 f303 	mul.w	r3, r2, r3
 8003ade:	ee07 3a90 	vmov	s15, r3
 8003ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ae6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 80e1 	beq.w	8003cb4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	f000 8083 	beq.w	8003c00 <HAL_RCC_GetSysClockFreq+0x204>
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	f200 80a1 	bhi.w	8003c44 <HAL_RCC_GetSysClockFreq+0x248>
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_RCC_GetSysClockFreq+0x114>
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d056      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0x1c0>
 8003b0e:	e099      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b10:	4b6f      	ldr	r3, [pc, #444]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d02d      	beq.n	8003b78 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b1c:	4b6c      	ldr	r3, [pc, #432]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	08db      	lsrs	r3, r3, #3
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	4a6b      	ldr	r2, [pc, #428]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b28:	fa22 f303 	lsr.w	r3, r2, r3
 8003b2c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	ee07 3a90 	vmov	s15, r3
 8003b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b46:	4b62      	ldr	r3, [pc, #392]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b4e:	ee07 3a90 	vmov	s15, r3
 8003b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b56:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b5a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b72:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003b76:	e087      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	ee07 3a90 	vmov	s15, r3
 8003b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b82:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003ce4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b8a:	4b51      	ldr	r3, [pc, #324]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b92:	ee07 3a90 	vmov	s15, r3
 8003b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b9e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bba:	e065      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	ee07 3a90 	vmov	s15, r3
 8003bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003ce8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bce:	4b40      	ldr	r3, [pc, #256]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd6:	ee07 3a90 	vmov	s15, r3
 8003bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8003be2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bfe:	e043      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	ee07 3a90 	vmov	s15, r3
 8003c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003cec <HAL_RCC_GetSysClockFreq+0x2f0>
 8003c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c12:	4b2f      	ldr	r3, [pc, #188]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c26:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c42:	e021      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	ee07 3a90 	vmov	s15, r3
 8003c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003ce8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c56:	4b1e      	ldr	r3, [pc, #120]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c66:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c6a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c86:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003c88:	4b11      	ldr	r3, [pc, #68]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8c:	0a5b      	lsrs	r3, r3, #9
 8003c8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c92:	3301      	adds	r3, #1
 8003c94:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	ee07 3a90 	vmov	s15, r3
 8003c9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ca0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cac:	ee17 3a90 	vmov	r3, s15
 8003cb0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003cb2:	e005      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	61bb      	str	r3, [r7, #24]
      break;
 8003cb8:	e002      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003cba:	4b07      	ldr	r3, [pc, #28]	@ (8003cd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003cbc:	61bb      	str	r3, [r7, #24]
      break;
 8003cbe:	bf00      	nop
  }

  return sysclockfreq;
 8003cc0:	69bb      	ldr	r3, [r7, #24]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3724      	adds	r7, #36	@ 0x24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	58024400 	.word	0x58024400
 8003cd4:	03d09000 	.word	0x03d09000
 8003cd8:	003d0900 	.word	0x003d0900
 8003cdc:	007a1200 	.word	0x007a1200
 8003ce0:	46000000 	.word	0x46000000
 8003ce4:	4c742400 	.word	0x4c742400
 8003ce8:	4a742400 	.word	0x4a742400
 8003cec:	4af42400 	.word	0x4af42400

08003cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003cf6:	f7ff fe81 	bl	80039fc <HAL_RCC_GetSysClockFreq>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	4b10      	ldr	r3, [pc, #64]	@ (8003d40 <HAL_RCC_GetHCLKFreq+0x50>)
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	0a1b      	lsrs	r3, r3, #8
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	490f      	ldr	r1, [pc, #60]	@ (8003d44 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d08:	5ccb      	ldrb	r3, [r1, r3]
 8003d0a:	f003 031f 	and.w	r3, r3, #31
 8003d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d12:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d14:	4b0a      	ldr	r3, [pc, #40]	@ (8003d40 <HAL_RCC_GetHCLKFreq+0x50>)
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	4a09      	ldr	r2, [pc, #36]	@ (8003d44 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d1e:	5cd3      	ldrb	r3, [r2, r3]
 8003d20:	f003 031f 	and.w	r3, r3, #31
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	fa22 f303 	lsr.w	r3, r2, r3
 8003d2a:	4a07      	ldr	r2, [pc, #28]	@ (8003d48 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d2c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d2e:	4a07      	ldr	r2, [pc, #28]	@ (8003d4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003d34:	4b04      	ldr	r3, [pc, #16]	@ (8003d48 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d36:	681b      	ldr	r3, [r3, #0]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	58024400 	.word	0x58024400
 8003d44:	08007cf8 	.word	0x08007cf8
 8003d48:	24000014 	.word	0x24000014
 8003d4c:	24000010 	.word	0x24000010

08003d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003d54:	f7ff ffcc 	bl	8003cf0 <HAL_RCC_GetHCLKFreq>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	4b06      	ldr	r3, [pc, #24]	@ (8003d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	091b      	lsrs	r3, r3, #4
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	4904      	ldr	r1, [pc, #16]	@ (8003d78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d66:	5ccb      	ldrb	r3, [r1, r3]
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	58024400 	.word	0x58024400
 8003d78:	08007cf8 	.word	0x08007cf8

08003d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003d80:	f7ff ffb6 	bl	8003cf0 <HAL_RCC_GetHCLKFreq>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4b06      	ldr	r3, [pc, #24]	@ (8003da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	0a1b      	lsrs	r3, r3, #8
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	4904      	ldr	r1, [pc, #16]	@ (8003da4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d92:	5ccb      	ldrb	r3, [r1, r3]
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	58024400 	.word	0x58024400
 8003da4:	08007cf8 	.word	0x08007cf8

08003da8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dac:	b0c6      	sub	sp, #280	@ 0x118
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003db4:	2300      	movs	r3, #0
 8003db6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003dcc:	2500      	movs	r5, #0
 8003dce:	ea54 0305 	orrs.w	r3, r4, r5
 8003dd2:	d049      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003dde:	d02f      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003de0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003de4:	d828      	bhi.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003de6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dea:	d01a      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003dec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003df0:	d822      	bhi.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003df6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dfa:	d007      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003dfc:	e01c      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dfe:	4bab      	ldr	r3, [pc, #684]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e02:	4aaa      	ldr	r2, [pc, #680]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e0a:	e01a      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e10:	3308      	adds	r3, #8
 8003e12:	2102      	movs	r1, #2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f001 fc25 	bl	8005664 <RCCEx_PLL2_Config>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e20:	e00f      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e26:	3328      	adds	r3, #40	@ 0x28
 8003e28:	2102      	movs	r1, #2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f001 fccc 	bl	80057c8 <RCCEx_PLL3_Config>
 8003e30:	4603      	mov	r3, r0
 8003e32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e36:	e004      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e3e:	e000      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10a      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003e4a:	4b98      	ldr	r3, [pc, #608]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e58:	4a94      	ldr	r2, [pc, #592]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e5a:	430b      	orrs	r3, r1
 8003e5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e5e:	e003      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e70:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003e74:	f04f 0900 	mov.w	r9, #0
 8003e78:	ea58 0309 	orrs.w	r3, r8, r9
 8003e7c:	d047      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d82a      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003e88:	a201      	add	r2, pc, #4	@ (adr r2, 8003e90 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8e:	bf00      	nop
 8003e90:	08003ea5 	.word	0x08003ea5
 8003e94:	08003eb3 	.word	0x08003eb3
 8003e98:	08003ec9 	.word	0x08003ec9
 8003e9c:	08003ee7 	.word	0x08003ee7
 8003ea0:	08003ee7 	.word	0x08003ee7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea4:	4b81      	ldr	r3, [pc, #516]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea8:	4a80      	ldr	r2, [pc, #512]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003eb0:	e01a      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eb6:	3308      	adds	r3, #8
 8003eb8:	2100      	movs	r1, #0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f001 fbd2 	bl	8005664 <RCCEx_PLL2_Config>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ec6:	e00f      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ecc:	3328      	adds	r3, #40	@ 0x28
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f001 fc79 	bl	80057c8 <RCCEx_PLL3_Config>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003edc:	e004      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ee4:	e000      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ee8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10a      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ef0:	4b6e      	ldr	r3, [pc, #440]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ef4:	f023 0107 	bic.w	r1, r3, #7
 8003ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efe:	4a6b      	ldr	r2, [pc, #428]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f00:	430b      	orrs	r3, r1
 8003f02:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f04:	e003      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f16:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8003f1a:	f04f 0b00 	mov.w	fp, #0
 8003f1e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003f22:	d05b      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f2c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003f30:	d03b      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003f32:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003f36:	d834      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003f38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f3c:	d037      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003f3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f42:	d82e      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003f44:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003f48:	d033      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003f4a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003f4e:	d828      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003f50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f54:	d01a      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003f56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f5a:	d822      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003f60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f64:	d007      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003f66:	e01c      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f68:	4b50      	ldr	r3, [pc, #320]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6c:	4a4f      	ldr	r2, [pc, #316]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f74:	e01e      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f7a:	3308      	adds	r3, #8
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f001 fb70 	bl	8005664 <RCCEx_PLL2_Config>
 8003f84:	4603      	mov	r3, r0
 8003f86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003f8a:	e013      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f90:	3328      	adds	r3, #40	@ 0x28
 8003f92:	2100      	movs	r1, #0
 8003f94:	4618      	mov	r0, r3
 8003f96:	f001 fc17 	bl	80057c8 <RCCEx_PLL3_Config>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003fa8:	e004      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003faa:	bf00      	nop
 8003fac:	e002      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003fae:	bf00      	nop
 8003fb0:	e000      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10b      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003fcc:	4a37      	ldr	r2, [pc, #220]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fce:	430b      	orrs	r3, r1
 8003fd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fd2:	e003      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003fe8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003fec:	2300      	movs	r3, #0
 8003fee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003ff2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	d05d      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004000:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004004:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004008:	d03b      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800400a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800400e:	d834      	bhi.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004010:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004014:	d037      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004016:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800401a:	d82e      	bhi.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800401c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004020:	d033      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004022:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004026:	d828      	bhi.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004028:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800402c:	d01a      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800402e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004032:	d822      	bhi.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004038:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800403c:	d007      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800403e:	e01c      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004040:	4b1a      	ldr	r3, [pc, #104]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004044:	4a19      	ldr	r2, [pc, #100]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004046:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800404a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800404c:	e01e      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800404e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004052:	3308      	adds	r3, #8
 8004054:	2100      	movs	r1, #0
 8004056:	4618      	mov	r0, r3
 8004058:	f001 fb04 	bl	8005664 <RCCEx_PLL2_Config>
 800405c:	4603      	mov	r3, r0
 800405e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004062:	e013      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004068:	3328      	adds	r3, #40	@ 0x28
 800406a:	2100      	movs	r1, #0
 800406c:	4618      	mov	r0, r3
 800406e:	f001 fbab 	bl	80057c8 <RCCEx_PLL3_Config>
 8004072:	4603      	mov	r3, r0
 8004074:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004078:	e008      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004080:	e004      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004082:	bf00      	nop
 8004084:	e002      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004086:	bf00      	nop
 8004088:	e000      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800408a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800408c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10d      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004094:	4b05      	ldr	r3, [pc, #20]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004098:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800409c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80040a4:	4a01      	ldr	r2, [pc, #4]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80040a6:	430b      	orrs	r3, r1
 80040a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80040aa:	e005      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80040ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80040b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80040c4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80040c8:	2300      	movs	r3, #0
 80040ca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80040ce:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4313      	orrs	r3, r2
 80040d6:	d03a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80040d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040de:	2b30      	cmp	r3, #48	@ 0x30
 80040e0:	d01f      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80040e2:	2b30      	cmp	r3, #48	@ 0x30
 80040e4:	d819      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80040e6:	2b20      	cmp	r3, #32
 80040e8:	d00c      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80040ea:	2b20      	cmp	r3, #32
 80040ec:	d815      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d019      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80040f2:	2b10      	cmp	r3, #16
 80040f4:	d111      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f6:	4baa      	ldr	r3, [pc, #680]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fa:	4aa9      	ldr	r2, [pc, #676]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004100:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004102:	e011      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004108:	3308      	adds	r3, #8
 800410a:	2102      	movs	r1, #2
 800410c:	4618      	mov	r0, r3
 800410e:	f001 faa9 	bl	8005664 <RCCEx_PLL2_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004118:	e006      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004120:	e002      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004122:	bf00      	nop
 8004124:	e000      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004128:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10a      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004130:	4b9b      	ldr	r3, [pc, #620]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004134:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800413c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800413e:	4a98      	ldr	r2, [pc, #608]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004140:	430b      	orrs	r3, r1
 8004142:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004144:	e003      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004146:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800414a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800414e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004156:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800415a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800415e:	2300      	movs	r3, #0
 8004160:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004164:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004168:	460b      	mov	r3, r1
 800416a:	4313      	orrs	r3, r2
 800416c:	d051      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800416e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004174:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004178:	d035      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800417a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800417e:	d82e      	bhi.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004180:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004184:	d031      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004186:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800418a:	d828      	bhi.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x436>
 800418c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004190:	d01a      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004192:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004196:	d822      	bhi.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800419c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041a0:	d007      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80041a2:	e01c      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041a4:	4b7e      	ldr	r3, [pc, #504]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a8:	4a7d      	ldr	r2, [pc, #500]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041b0:	e01c      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041b6:	3308      	adds	r3, #8
 80041b8:	2100      	movs	r1, #0
 80041ba:	4618      	mov	r0, r3
 80041bc:	f001 fa52 	bl	8005664 <RCCEx_PLL2_Config>
 80041c0:	4603      	mov	r3, r0
 80041c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041c6:	e011      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041cc:	3328      	adds	r3, #40	@ 0x28
 80041ce:	2100      	movs	r1, #0
 80041d0:	4618      	mov	r0, r3
 80041d2:	f001 faf9 	bl	80057c8 <RCCEx_PLL3_Config>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041dc:	e006      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80041e4:	e002      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80041e6:	bf00      	nop
 80041e8:	e000      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80041ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10a      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80041f4:	4b6a      	ldr	r3, [pc, #424]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041f8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80041fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004202:	4a67      	ldr	r2, [pc, #412]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004204:	430b      	orrs	r3, r1
 8004206:	6513      	str	r3, [r2, #80]	@ 0x50
 8004208:	e003      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800420e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800421e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004222:	2300      	movs	r3, #0
 8004224:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004228:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800422c:	460b      	mov	r3, r1
 800422e:	4313      	orrs	r3, r2
 8004230:	d053      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004238:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800423c:	d033      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800423e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004242:	d82c      	bhi.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004244:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004248:	d02f      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x502>
 800424a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800424e:	d826      	bhi.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004250:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004254:	d02b      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004256:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800425a:	d820      	bhi.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800425c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004260:	d012      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004262:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004266:	d81a      	bhi.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004268:	2b00      	cmp	r3, #0
 800426a:	d022      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800426c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004270:	d115      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004276:	3308      	adds	r3, #8
 8004278:	2101      	movs	r1, #1
 800427a:	4618      	mov	r0, r3
 800427c:	f001 f9f2 	bl	8005664 <RCCEx_PLL2_Config>
 8004280:	4603      	mov	r3, r0
 8004282:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004286:	e015      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800428c:	3328      	adds	r3, #40	@ 0x28
 800428e:	2101      	movs	r1, #1
 8004290:	4618      	mov	r0, r3
 8004292:	f001 fa99 	bl	80057c8 <RCCEx_PLL3_Config>
 8004296:	4603      	mov	r3, r0
 8004298:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800429c:	e00a      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042a4:	e006      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80042a6:	bf00      	nop
 80042a8:	e004      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80042aa:	bf00      	nop
 80042ac:	e002      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80042ae:	bf00      	nop
 80042b0:	e000      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80042b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10a      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80042bc:	4b38      	ldr	r3, [pc, #224]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80042c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ca:	4a35      	ldr	r2, [pc, #212]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042cc:	430b      	orrs	r3, r1
 80042ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80042d0:	e003      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80042da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80042e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042ea:	2300      	movs	r3, #0
 80042ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80042f0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042f4:	460b      	mov	r3, r1
 80042f6:	4313      	orrs	r3, r2
 80042f8:	d058      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80042fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004302:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004306:	d033      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004308:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800430c:	d82c      	bhi.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800430e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004312:	d02f      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004318:	d826      	bhi.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800431a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800431e:	d02b      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004320:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004324:	d820      	bhi.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004326:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800432a:	d012      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800432c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004330:	d81a      	bhi.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d022      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004336:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800433a:	d115      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800433c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004340:	3308      	adds	r3, #8
 8004342:	2101      	movs	r1, #1
 8004344:	4618      	mov	r0, r3
 8004346:	f001 f98d 	bl	8005664 <RCCEx_PLL2_Config>
 800434a:	4603      	mov	r3, r0
 800434c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004350:	e015      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004356:	3328      	adds	r3, #40	@ 0x28
 8004358:	2101      	movs	r1, #1
 800435a:	4618      	mov	r0, r3
 800435c:	f001 fa34 	bl	80057c8 <RCCEx_PLL3_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004366:	e00a      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800436e:	e006      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004370:	bf00      	nop
 8004372:	e004      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004374:	bf00      	nop
 8004376:	e002      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004378:	bf00      	nop
 800437a:	e000      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800437c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800437e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10e      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004386:	4b06      	ldr	r3, [pc, #24]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800438e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004392:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004396:	4a02      	ldr	r2, [pc, #8]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004398:	430b      	orrs	r3, r1
 800439a:	6593      	str	r3, [r2, #88]	@ 0x58
 800439c:	e006      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x604>
 800439e:	bf00      	nop
 80043a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80043b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043bc:	2300      	movs	r3, #0
 80043be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80043c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4313      	orrs	r3, r2
 80043ca:	d037      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80043cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043d6:	d00e      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80043d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043dc:	d816      	bhi.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d018      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80043e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043e6:	d111      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043e8:	4bc4      	ldr	r3, [pc, #784]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ec:	4ac3      	ldr	r2, [pc, #780]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80043f4:	e00f      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043fa:	3308      	adds	r3, #8
 80043fc:	2101      	movs	r1, #1
 80043fe:	4618      	mov	r0, r3
 8004400:	f001 f930 	bl	8005664 <RCCEx_PLL2_Config>
 8004404:	4603      	mov	r3, r0
 8004406:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800440a:	e004      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004412:	e000      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004416:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10a      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800441e:	4bb7      	ldr	r3, [pc, #732]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004422:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800442a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800442c:	4ab3      	ldr	r2, [pc, #716]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800442e:	430b      	orrs	r3, r1
 8004430:	6513      	str	r3, [r2, #80]	@ 0x50
 8004432:	e003      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004434:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004438:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800443c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004444:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004448:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800444c:	2300      	movs	r3, #0
 800444e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004452:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004456:	460b      	mov	r3, r1
 8004458:	4313      	orrs	r3, r2
 800445a:	d039      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800445c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004462:	2b03      	cmp	r3, #3
 8004464:	d81c      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004466:	a201      	add	r2, pc, #4	@ (adr r2, 800446c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446c:	080044a9 	.word	0x080044a9
 8004470:	0800447d 	.word	0x0800447d
 8004474:	0800448b 	.word	0x0800448b
 8004478:	080044a9 	.word	0x080044a9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800447c:	4b9f      	ldr	r3, [pc, #636]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800447e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004480:	4a9e      	ldr	r2, [pc, #632]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004486:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004488:	e00f      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800448a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800448e:	3308      	adds	r3, #8
 8004490:	2102      	movs	r1, #2
 8004492:	4618      	mov	r0, r3
 8004494:	f001 f8e6 	bl	8005664 <RCCEx_PLL2_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800449e:	e004      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80044a6:	e000      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80044a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10a      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80044b2:	4b92      	ldr	r3, [pc, #584]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044b6:	f023 0103 	bic.w	r1, r3, #3
 80044ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044c0:	4a8e      	ldr	r2, [pc, #568]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044c2:	430b      	orrs	r3, r1
 80044c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044c6:	e003      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80044dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044e0:	2300      	movs	r3, #0
 80044e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f000 8099 	beq.w	8004624 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044f2:	4b83      	ldr	r3, [pc, #524]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a82      	ldr	r2, [pc, #520]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80044f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044fe:	f7fc fec5 	bl	800128c <HAL_GetTick>
 8004502:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004506:	e00b      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004508:	f7fc fec0 	bl	800128c <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b64      	cmp	r3, #100	@ 0x64
 8004516:	d903      	bls.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800451e:	e005      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004520:	4b77      	ldr	r3, [pc, #476]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0ed      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800452c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004530:	2b00      	cmp	r3, #0
 8004532:	d173      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004534:	4b71      	ldr	r3, [pc, #452]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004536:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800453c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004540:	4053      	eors	r3, r2
 8004542:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004546:	2b00      	cmp	r3, #0
 8004548:	d015      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800454a:	4b6c      	ldr	r3, [pc, #432]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800454c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800454e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004552:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004556:	4b69      	ldr	r3, [pc, #420]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455a:	4a68      	ldr	r2, [pc, #416]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800455c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004560:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004562:	4b66      	ldr	r3, [pc, #408]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004566:	4a65      	ldr	r2, [pc, #404]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004568:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800456c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800456e:	4a63      	ldr	r2, [pc, #396]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004570:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004574:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800457a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800457e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004582:	d118      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004584:	f7fc fe82 	bl	800128c <HAL_GetTick>
 8004588:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800458c:	e00d      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800458e:	f7fc fe7d 	bl	800128c <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004598:	1ad2      	subs	r2, r2, r3
 800459a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800459e:	429a      	cmp	r2, r3
 80045a0:	d903      	bls.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80045a8:	e005      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045aa:	4b54      	ldr	r3, [pc, #336]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0eb      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80045b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d129      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80045c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045ce:	d10e      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x846>
 80045d0:	4b4a      	ldr	r3, [pc, #296]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80045d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80045e0:	091a      	lsrs	r2, r3, #4
 80045e2:	4b48      	ldr	r3, [pc, #288]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	4a45      	ldr	r2, [pc, #276]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045e8:	430b      	orrs	r3, r1
 80045ea:	6113      	str	r3, [r2, #16]
 80045ec:	e005      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x852>
 80045ee:	4b43      	ldr	r3, [pc, #268]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	4a42      	ldr	r2, [pc, #264]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045f4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80045f8:	6113      	str	r3, [r2, #16]
 80045fa:	4b40      	ldr	r3, [pc, #256]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045fc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80045fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004602:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800460a:	4a3c      	ldr	r2, [pc, #240]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800460c:	430b      	orrs	r3, r1
 800460e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004610:	e008      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004612:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004616:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800461a:	e003      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004620:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462c:	f002 0301 	and.w	r3, r2, #1
 8004630:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004634:	2300      	movs	r3, #0
 8004636:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800463a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800463e:	460b      	mov	r3, r1
 8004640:	4313      	orrs	r3, r2
 8004642:	f000 808f 	beq.w	8004764 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800464a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800464c:	2b28      	cmp	r3, #40	@ 0x28
 800464e:	d871      	bhi.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004650:	a201      	add	r2, pc, #4	@ (adr r2, 8004658 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004656:	bf00      	nop
 8004658:	0800473d 	.word	0x0800473d
 800465c:	08004735 	.word	0x08004735
 8004660:	08004735 	.word	0x08004735
 8004664:	08004735 	.word	0x08004735
 8004668:	08004735 	.word	0x08004735
 800466c:	08004735 	.word	0x08004735
 8004670:	08004735 	.word	0x08004735
 8004674:	08004735 	.word	0x08004735
 8004678:	08004709 	.word	0x08004709
 800467c:	08004735 	.word	0x08004735
 8004680:	08004735 	.word	0x08004735
 8004684:	08004735 	.word	0x08004735
 8004688:	08004735 	.word	0x08004735
 800468c:	08004735 	.word	0x08004735
 8004690:	08004735 	.word	0x08004735
 8004694:	08004735 	.word	0x08004735
 8004698:	0800471f 	.word	0x0800471f
 800469c:	08004735 	.word	0x08004735
 80046a0:	08004735 	.word	0x08004735
 80046a4:	08004735 	.word	0x08004735
 80046a8:	08004735 	.word	0x08004735
 80046ac:	08004735 	.word	0x08004735
 80046b0:	08004735 	.word	0x08004735
 80046b4:	08004735 	.word	0x08004735
 80046b8:	0800473d 	.word	0x0800473d
 80046bc:	08004735 	.word	0x08004735
 80046c0:	08004735 	.word	0x08004735
 80046c4:	08004735 	.word	0x08004735
 80046c8:	08004735 	.word	0x08004735
 80046cc:	08004735 	.word	0x08004735
 80046d0:	08004735 	.word	0x08004735
 80046d4:	08004735 	.word	0x08004735
 80046d8:	0800473d 	.word	0x0800473d
 80046dc:	08004735 	.word	0x08004735
 80046e0:	08004735 	.word	0x08004735
 80046e4:	08004735 	.word	0x08004735
 80046e8:	08004735 	.word	0x08004735
 80046ec:	08004735 	.word	0x08004735
 80046f0:	08004735 	.word	0x08004735
 80046f4:	08004735 	.word	0x08004735
 80046f8:	0800473d 	.word	0x0800473d
 80046fc:	58024400 	.word	0x58024400
 8004700:	58024800 	.word	0x58024800
 8004704:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800470c:	3308      	adds	r3, #8
 800470e:	2101      	movs	r1, #1
 8004710:	4618      	mov	r0, r3
 8004712:	f000 ffa7 	bl	8005664 <RCCEx_PLL2_Config>
 8004716:	4603      	mov	r3, r0
 8004718:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800471c:	e00f      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800471e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004722:	3328      	adds	r3, #40	@ 0x28
 8004724:	2101      	movs	r1, #1
 8004726:	4618      	mov	r0, r3
 8004728:	f001 f84e 	bl	80057c8 <RCCEx_PLL3_Config>
 800472c:	4603      	mov	r3, r0
 800472e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004732:	e004      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800473a:	e000      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800473c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800473e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10a      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004746:	4bbf      	ldr	r3, [pc, #764]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800474a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800474e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004752:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004754:	4abb      	ldr	r2, [pc, #748]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004756:	430b      	orrs	r3, r1
 8004758:	6553      	str	r3, [r2, #84]	@ 0x54
 800475a:	e003      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004760:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476c:	f002 0302 	and.w	r3, r2, #2
 8004770:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004774:	2300      	movs	r3, #0
 8004776:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800477a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800477e:	460b      	mov	r3, r1
 8004780:	4313      	orrs	r3, r2
 8004782:	d041      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800478a:	2b05      	cmp	r3, #5
 800478c:	d824      	bhi.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800478e:	a201      	add	r2, pc, #4	@ (adr r2, 8004794 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004794:	080047e1 	.word	0x080047e1
 8004798:	080047ad 	.word	0x080047ad
 800479c:	080047c3 	.word	0x080047c3
 80047a0:	080047e1 	.word	0x080047e1
 80047a4:	080047e1 	.word	0x080047e1
 80047a8:	080047e1 	.word	0x080047e1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047b0:	3308      	adds	r3, #8
 80047b2:	2101      	movs	r1, #1
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 ff55 	bl	8005664 <RCCEx_PLL2_Config>
 80047ba:	4603      	mov	r3, r0
 80047bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80047c0:	e00f      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047c6:	3328      	adds	r3, #40	@ 0x28
 80047c8:	2101      	movs	r1, #1
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fffc 	bl	80057c8 <RCCEx_PLL3_Config>
 80047d0:	4603      	mov	r3, r0
 80047d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80047d6:	e004      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80047de:	e000      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80047e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10a      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80047ea:	4b96      	ldr	r3, [pc, #600]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80047ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ee:	f023 0107 	bic.w	r1, r3, #7
 80047f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047f8:	4a92      	ldr	r2, [pc, #584]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80047fa:	430b      	orrs	r3, r1
 80047fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80047fe:	e003      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004800:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004804:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800480c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004810:	f002 0304 	and.w	r3, r2, #4
 8004814:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004818:	2300      	movs	r3, #0
 800481a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800481e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004822:	460b      	mov	r3, r1
 8004824:	4313      	orrs	r3, r2
 8004826:	d044      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004830:	2b05      	cmp	r3, #5
 8004832:	d825      	bhi.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004834:	a201      	add	r2, pc, #4	@ (adr r2, 800483c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483a:	bf00      	nop
 800483c:	08004889 	.word	0x08004889
 8004840:	08004855 	.word	0x08004855
 8004844:	0800486b 	.word	0x0800486b
 8004848:	08004889 	.word	0x08004889
 800484c:	08004889 	.word	0x08004889
 8004850:	08004889 	.word	0x08004889
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004858:	3308      	adds	r3, #8
 800485a:	2101      	movs	r1, #1
 800485c:	4618      	mov	r0, r3
 800485e:	f000 ff01 	bl	8005664 <RCCEx_PLL2_Config>
 8004862:	4603      	mov	r3, r0
 8004864:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004868:	e00f      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800486a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800486e:	3328      	adds	r3, #40	@ 0x28
 8004870:	2101      	movs	r1, #1
 8004872:	4618      	mov	r0, r3
 8004874:	f000 ffa8 	bl	80057c8 <RCCEx_PLL3_Config>
 8004878:	4603      	mov	r3, r0
 800487a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800487e:	e004      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004886:	e000      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800488a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10b      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004892:	4b6c      	ldr	r3, [pc, #432]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004896:	f023 0107 	bic.w	r1, r3, #7
 800489a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a2:	4a68      	ldr	r2, [pc, #416]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80048a8:	e003      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ba:	f002 0320 	and.w	r3, r2, #32
 80048be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80048c2:	2300      	movs	r3, #0
 80048c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80048c8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80048cc:	460b      	mov	r3, r1
 80048ce:	4313      	orrs	r3, r2
 80048d0:	d055      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80048d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048de:	d033      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80048e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048e4:	d82c      	bhi.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80048e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ea:	d02f      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80048ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f0:	d826      	bhi.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80048f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048f6:	d02b      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80048f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048fc:	d820      	bhi.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80048fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004902:	d012      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004904:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004908:	d81a      	bhi.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800490a:	2b00      	cmp	r3, #0
 800490c:	d022      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800490e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004912:	d115      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004918:	3308      	adds	r3, #8
 800491a:	2100      	movs	r1, #0
 800491c:	4618      	mov	r0, r3
 800491e:	f000 fea1 	bl	8005664 <RCCEx_PLL2_Config>
 8004922:	4603      	mov	r3, r0
 8004924:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004928:	e015      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800492a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800492e:	3328      	adds	r3, #40	@ 0x28
 8004930:	2102      	movs	r1, #2
 8004932:	4618      	mov	r0, r3
 8004934:	f000 ff48 	bl	80057c8 <RCCEx_PLL3_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800493e:	e00a      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004946:	e006      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004948:	bf00      	nop
 800494a:	e004      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800494c:	bf00      	nop
 800494e:	e002      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004950:	bf00      	nop
 8004952:	e000      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004956:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10b      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800495e:	4b39      	ldr	r3, [pc, #228]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004962:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800496a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800496e:	4a35      	ldr	r2, [pc, #212]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004970:	430b      	orrs	r3, r1
 8004972:	6553      	str	r3, [r2, #84]	@ 0x54
 8004974:	e003      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004976:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800497a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800497e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004986:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800498a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800498e:	2300      	movs	r3, #0
 8004990:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004994:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004998:	460b      	mov	r3, r1
 800499a:	4313      	orrs	r3, r2
 800499c:	d058      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800499e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049a6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80049aa:	d033      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80049ac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80049b0:	d82c      	bhi.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80049b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049b6:	d02f      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80049b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049bc:	d826      	bhi.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80049be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049c2:	d02b      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80049c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049c8:	d820      	bhi.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80049ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049ce:	d012      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80049d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049d4:	d81a      	bhi.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d022      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80049da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049de:	d115      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049e4:	3308      	adds	r3, #8
 80049e6:	2100      	movs	r1, #0
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fe3b 	bl	8005664 <RCCEx_PLL2_Config>
 80049ee:	4603      	mov	r3, r0
 80049f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80049f4:	e015      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049fa:	3328      	adds	r3, #40	@ 0x28
 80049fc:	2102      	movs	r1, #2
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fee2 	bl	80057c8 <RCCEx_PLL3_Config>
 8004a04:	4603      	mov	r3, r0
 8004a06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a0a:	e00a      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a12:	e006      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004a14:	bf00      	nop
 8004a16:	e004      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004a18:	bf00      	nop
 8004a1a:	e002      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004a1c:	bf00      	nop
 8004a1e:	e000      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10e      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a2a:	4b06      	ldr	r3, [pc, #24]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a2e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a3a:	4a02      	ldr	r2, [pc, #8]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a40:	e006      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004a42:	bf00      	nop
 8004a44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004a5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a60:	2300      	movs	r3, #0
 8004a62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a66:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	d055      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a78:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004a7c:	d033      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004a7e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004a82:	d82c      	bhi.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004a84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a88:	d02f      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004a8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a8e:	d826      	bhi.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004a90:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004a94:	d02b      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004a96:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004a9a:	d820      	bhi.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004a9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004aa0:	d012      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004aa2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004aa6:	d81a      	bhi.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d022      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004aac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ab0:	d115      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	2100      	movs	r1, #0
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fdd2 	bl	8005664 <RCCEx_PLL2_Config>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004ac6:	e015      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004acc:	3328      	adds	r3, #40	@ 0x28
 8004ace:	2102      	movs	r1, #2
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fe79 	bl	80057c8 <RCCEx_PLL3_Config>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004adc:	e00a      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ae4:	e006      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004ae6:	bf00      	nop
 8004ae8:	e004      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004aea:	bf00      	nop
 8004aec:	e002      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004aee:	bf00      	nop
 8004af0:	e000      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004af2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004af4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10b      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004afc:	4ba0      	ldr	r3, [pc, #640]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b00:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b0c:	4a9c      	ldr	r2, [pc, #624]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b0e:	430b      	orrs	r3, r1
 8004b10:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b12:	e003      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b24:	f002 0308 	and.w	r3, r2, #8
 8004b28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b32:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004b36:	460b      	mov	r3, r1
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	d01e      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b48:	d10c      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b4e:	3328      	adds	r3, #40	@ 0x28
 8004b50:	2102      	movs	r1, #2
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fe38 	bl	80057c8 <RCCEx_PLL3_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004b64:	4b86      	ldr	r3, [pc, #536]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b68:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b74:	4a82      	ldr	r2, [pc, #520]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b76:	430b      	orrs	r3, r1
 8004b78:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b82:	f002 0310 	and.w	r3, r2, #16
 8004b86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b90:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004b94:	460b      	mov	r3, r1
 8004b96:	4313      	orrs	r3, r2
 8004b98:	d01e      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ba6:	d10c      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bac:	3328      	adds	r3, #40	@ 0x28
 8004bae:	2102      	movs	r1, #2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 fe09 	bl	80057c8 <RCCEx_PLL3_Config>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bc2:	4b6f      	ldr	r3, [pc, #444]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bd2:	4a6b      	ldr	r2, [pc, #428]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004bd4:	430b      	orrs	r3, r1
 8004bd6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004be4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004be6:	2300      	movs	r3, #0
 8004be8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bea:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	d03e      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bf8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004bfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c00:	d022      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004c02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c06:	d81b      	bhi.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c10:	d00b      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004c12:	e015      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c18:	3308      	adds	r3, #8
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 fd21 	bl	8005664 <RCCEx_PLL2_Config>
 8004c22:	4603      	mov	r3, r0
 8004c24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c28:	e00f      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c2e:	3328      	adds	r3, #40	@ 0x28
 8004c30:	2102      	movs	r1, #2
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fdc8 	bl	80057c8 <RCCEx_PLL3_Config>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c3e:	e004      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c46:	e000      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10b      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c52:	4b4b      	ldr	r3, [pc, #300]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c56:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004c62:	4a47      	ldr	r2, [pc, #284]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c64:	430b      	orrs	r3, r1
 8004c66:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c68:	e003      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004c7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c80:	2300      	movs	r3, #0
 8004c82:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c84:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	d03b      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c9a:	d01f      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004c9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ca0:	d818      	bhi.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004ca2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ca6:	d003      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004ca8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cac:	d007      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004cae:	e011      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cb0:	4b33      	ldr	r3, [pc, #204]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb4:	4a32      	ldr	r2, [pc, #200]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004cb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004cbc:	e00f      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cc2:	3328      	adds	r3, #40	@ 0x28
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 fd7e 	bl	80057c8 <RCCEx_PLL3_Config>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004cd2:	e004      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004cda:	e000      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10b      	bne.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ce6:	4b26      	ldr	r3, [pc, #152]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cf6:	4a22      	ldr	r2, [pc, #136]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004cf8:	430b      	orrs	r3, r1
 8004cfa:	6553      	str	r3, [r2, #84]	@ 0x54
 8004cfc:	e003      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004d12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d14:	2300      	movs	r3, #0
 8004d16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d18:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	d034      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d30:	d007      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004d32:	e011      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d34:	4b12      	ldr	r3, [pc, #72]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d38:	4a11      	ldr	r2, [pc, #68]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d40:	e00e      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d46:	3308      	adds	r3, #8
 8004d48:	2102      	movs	r1, #2
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fc8a 	bl	8005664 <RCCEx_PLL2_Config>
 8004d50:	4603      	mov	r3, r0
 8004d52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d56:	e003      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10d      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004d68:	4b05      	ldr	r3, [pc, #20]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d6c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d76:	4a02      	ldr	r2, [pc, #8]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d78:	430b      	orrs	r3, r1
 8004d7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d7c:	e006      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004d7e:	bf00      	nop
 8004d80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d94:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004d98:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d9e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004da2:	460b      	mov	r3, r1
 8004da4:	4313      	orrs	r3, r2
 8004da6:	d00c      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dac:	3328      	adds	r3, #40	@ 0x28
 8004dae:	2102      	movs	r1, #2
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fd09 	bl	80057c8 <RCCEx_PLL3_Config>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004dce:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dd4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	d036      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004de2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004de4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004de8:	d018      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004dea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dee:	d811      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004df0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004df4:	d014      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004df6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dfa:	d80b      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d011      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004e00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e04:	d106      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e06:	4bb7      	ldr	r3, [pc, #732]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0a:	4ab6      	ldr	r2, [pc, #728]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004e12:	e008      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e1a:	e004      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004e1c:	bf00      	nop
 8004e1e:	e002      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004e20:	bf00      	nop
 8004e22:	e000      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e2e:	4bad      	ldr	r3, [pc, #692]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e32:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e3c:	4aa9      	ldr	r2, [pc, #676]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e3e:	430b      	orrs	r3, r1
 8004e40:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e42:	e003      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004e58:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e5e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004e62:	460b      	mov	r3, r1
 8004e64:	4313      	orrs	r3, r2
 8004e66:	d009      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e68:	4b9e      	ldr	r3, [pc, #632]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e6c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e76:	4a9b      	ldr	r2, [pc, #620]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e78:	430b      	orrs	r3, r1
 8004e7a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e84:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004e88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e8e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004e92:	460b      	mov	r3, r1
 8004e94:	4313      	orrs	r3, r2
 8004e96:	d009      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e98:	4b92      	ldr	r3, [pc, #584]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e9c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ea4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ea6:	4a8f      	ldr	r2, [pc, #572]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ea8:	430b      	orrs	r3, r1
 8004eaa:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004eb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004eba:	2300      	movs	r3, #0
 8004ebc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ebe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	d00e      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ec8:	4b86      	ldr	r3, [pc, #536]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	4a85      	ldr	r2, [pc, #532]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ece:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004ed2:	6113      	str	r3, [r2, #16]
 8004ed4:	4b83      	ldr	r3, [pc, #524]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ed6:	6919      	ldr	r1, [r3, #16]
 8004ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004edc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ee0:	4a80      	ldr	r2, [pc, #512]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ee2:	430b      	orrs	r3, r1
 8004ee4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eee:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ef8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004efc:	460b      	mov	r3, r1
 8004efe:	4313      	orrs	r3, r2
 8004f00:	d009      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f02:	4b78      	ldr	r3, [pc, #480]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f06:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f10:	4a74      	ldr	r2, [pc, #464]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f12:	430b      	orrs	r3, r1
 8004f14:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004f22:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f24:	2300      	movs	r3, #0
 8004f26:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f28:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	d00a      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f32:	4b6c      	ldr	r3, [pc, #432]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f36:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f42:	4a68      	ldr	r2, [pc, #416]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f44:	430b      	orrs	r3, r1
 8004f46:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f50:	2100      	movs	r1, #0
 8004f52:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f5a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4313      	orrs	r3, r2
 8004f62:	d011      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f68:	3308      	adds	r3, #8
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fb79 	bl	8005664 <RCCEx_PLL2_Config>
 8004f72:	4603      	mov	r3, r0
 8004f74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004f78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f90:	2100      	movs	r1, #0
 8004f92:	6239      	str	r1, [r7, #32]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f9a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	d011      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fa8:	3308      	adds	r3, #8
 8004faa:	2101      	movs	r1, #1
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fb59 	bl	8005664 <RCCEx_PLL2_Config>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004fb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	61b9      	str	r1, [r7, #24]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	61fb      	str	r3, [r7, #28]
 8004fda:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	d011      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fe8:	3308      	adds	r3, #8
 8004fea:	2102      	movs	r1, #2
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fb39 	bl	8005664 <RCCEx_PLL2_Config>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004ff8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005000:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005004:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005010:	2100      	movs	r1, #0
 8005012:	6139      	str	r1, [r7, #16]
 8005014:	f003 0308 	and.w	r3, r3, #8
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800501e:	460b      	mov	r3, r1
 8005020:	4313      	orrs	r3, r2
 8005022:	d011      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005028:	3328      	adds	r3, #40	@ 0x28
 800502a:	2100      	movs	r1, #0
 800502c:	4618      	mov	r0, r3
 800502e:	f000 fbcb 	bl	80057c8 <RCCEx_PLL3_Config>
 8005032:	4603      	mov	r3, r0
 8005034:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005038:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005040:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005044:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	2100      	movs	r1, #0
 8005052:	60b9      	str	r1, [r7, #8]
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800505e:	460b      	mov	r3, r1
 8005060:	4313      	orrs	r3, r2
 8005062:	d011      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005068:	3328      	adds	r3, #40	@ 0x28
 800506a:	2101      	movs	r1, #1
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fbab 	bl	80057c8 <RCCEx_PLL3_Config>
 8005072:	4603      	mov	r3, r0
 8005074:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005078:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800507c:	2b00      	cmp	r3, #0
 800507e:	d003      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005080:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005084:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005090:	2100      	movs	r1, #0
 8005092:	6039      	str	r1, [r7, #0]
 8005094:	f003 0320 	and.w	r3, r3, #32
 8005098:	607b      	str	r3, [r7, #4]
 800509a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800509e:	460b      	mov	r3, r1
 80050a0:	4313      	orrs	r3, r2
 80050a2:	d011      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050a8:	3328      	adds	r3, #40	@ 0x28
 80050aa:	2102      	movs	r1, #2
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 fb8b 	bl	80057c8 <RCCEx_PLL3_Config>
 80050b2:	4603      	mov	r3, r0
 80050b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80050b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80050c8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	e000      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80050dc:	46bd      	mov	sp, r7
 80050de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050e2:	bf00      	nop
 80050e4:	58024400 	.word	0x58024400

080050e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80050ec:	f7fe fe00 	bl	8003cf0 <HAL_RCC_GetHCLKFreq>
 80050f0:	4602      	mov	r2, r0
 80050f2:	4b06      	ldr	r3, [pc, #24]	@ (800510c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	091b      	lsrs	r3, r3, #4
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	4904      	ldr	r1, [pc, #16]	@ (8005110 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80050fe:	5ccb      	ldrb	r3, [r1, r3]
 8005100:	f003 031f 	and.w	r3, r3, #31
 8005104:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005108:	4618      	mov	r0, r3
 800510a:	bd80      	pop	{r7, pc}
 800510c:	58024400 	.word	0x58024400
 8005110:	08007cf8 	.word	0x08007cf8

08005114 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005114:	b480      	push	{r7}
 8005116:	b089      	sub	sp, #36	@ 0x24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800511c:	4ba1      	ldr	r3, [pc, #644]	@ (80053a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800511e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005126:	4b9f      	ldr	r3, [pc, #636]	@ (80053a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512a:	0b1b      	lsrs	r3, r3, #12
 800512c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005130:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005132:	4b9c      	ldr	r3, [pc, #624]	@ (80053a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005136:	091b      	lsrs	r3, r3, #4
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800513e:	4b99      	ldr	r3, [pc, #612]	@ (80053a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005142:	08db      	lsrs	r3, r3, #3
 8005144:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	fb02 f303 	mul.w	r3, r2, r3
 800514e:	ee07 3a90 	vmov	s15, r3
 8005152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005156:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 8111 	beq.w	8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2b02      	cmp	r3, #2
 8005166:	f000 8083 	beq.w	8005270 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	2b02      	cmp	r3, #2
 800516e:	f200 80a1 	bhi.w	80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d056      	beq.n	800522c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800517e:	e099      	b.n	80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005180:	4b88      	ldr	r3, [pc, #544]	@ (80053a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0320 	and.w	r3, r3, #32
 8005188:	2b00      	cmp	r3, #0
 800518a:	d02d      	beq.n	80051e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800518c:	4b85      	ldr	r3, [pc, #532]	@ (80053a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	08db      	lsrs	r3, r3, #3
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	4a84      	ldr	r2, [pc, #528]	@ (80053a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005198:	fa22 f303 	lsr.w	r3, r2, r3
 800519c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	ee07 3a90 	vmov	s15, r3
 80051a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051b6:	4b7b      	ldr	r3, [pc, #492]	@ (80053a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051be:	ee07 3a90 	vmov	s15, r3
 80051c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80053ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80051e6:	e087      	b.n	80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	ee07 3a90 	vmov	s15, r3
 80051ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80053b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80051f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051fa:	4b6a      	ldr	r3, [pc, #424]	@ (80053a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005202:	ee07 3a90 	vmov	s15, r3
 8005206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800520a:	ed97 6a03 	vldr	s12, [r7, #12]
 800520e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80053ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800521a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800521e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005226:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800522a:	e065      	b.n	80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	ee07 3a90 	vmov	s15, r3
 8005232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005236:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800523a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800523e:	4b59      	ldr	r3, [pc, #356]	@ (80053a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005246:	ee07 3a90 	vmov	s15, r3
 800524a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800524e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005252:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80053ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800525a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800525e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800526a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800526e:	e043      	b.n	80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	ee07 3a90 	vmov	s15, r3
 8005276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80053b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800527e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005282:	4b48      	ldr	r3, [pc, #288]	@ (80053a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800528a:	ee07 3a90 	vmov	s15, r3
 800528e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005292:	ed97 6a03 	vldr	s12, [r7, #12]
 8005296:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80053ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800529a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800529e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052b2:	e021      	b.n	80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	ee07 3a90 	vmov	s15, r3
 80052ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80052c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052c6:	4b37      	ldr	r3, [pc, #220]	@ (80053a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ce:	ee07 3a90 	vmov	s15, r3
 80052d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80052da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80053ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80052f8:	4b2a      	ldr	r3, [pc, #168]	@ (80053a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fc:	0a5b      	lsrs	r3, r3, #9
 80052fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800530a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800530e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005312:	edd7 6a07 	vldr	s13, [r7, #28]
 8005316:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800531a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800531e:	ee17 2a90 	vmov	r2, s15
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005326:	4b1f      	ldr	r3, [pc, #124]	@ (80053a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532a:	0c1b      	lsrs	r3, r3, #16
 800532c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005330:	ee07 3a90 	vmov	s15, r3
 8005334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005338:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800533c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005340:	edd7 6a07 	vldr	s13, [r7, #28]
 8005344:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800534c:	ee17 2a90 	vmov	r2, s15
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005354:	4b13      	ldr	r3, [pc, #76]	@ (80053a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005358:	0e1b      	lsrs	r3, r3, #24
 800535a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800535e:	ee07 3a90 	vmov	s15, r3
 8005362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005366:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800536a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800536e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005372:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005376:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800537a:	ee17 2a90 	vmov	r2, s15
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005382:	e008      	b.n	8005396 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	609a      	str	r2, [r3, #8]
}
 8005396:	bf00      	nop
 8005398:	3724      	adds	r7, #36	@ 0x24
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	58024400 	.word	0x58024400
 80053a8:	03d09000 	.word	0x03d09000
 80053ac:	46000000 	.word	0x46000000
 80053b0:	4c742400 	.word	0x4c742400
 80053b4:	4a742400 	.word	0x4a742400
 80053b8:	4af42400 	.word	0x4af42400

080053bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80053bc:	b480      	push	{r7}
 80053be:	b089      	sub	sp, #36	@ 0x24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053c4:	4ba1      	ldr	r3, [pc, #644]	@ (800564c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c8:	f003 0303 	and.w	r3, r3, #3
 80053cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80053ce:	4b9f      	ldr	r3, [pc, #636]	@ (800564c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d2:	0d1b      	lsrs	r3, r3, #20
 80053d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80053da:	4b9c      	ldr	r3, [pc, #624]	@ (800564c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053de:	0a1b      	lsrs	r3, r3, #8
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80053e6:	4b99      	ldr	r3, [pc, #612]	@ (800564c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ea:	08db      	lsrs	r3, r3, #3
 80053ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	fb02 f303 	mul.w	r3, r2, r3
 80053f6:	ee07 3a90 	vmov	s15, r3
 80053fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 8111 	beq.w	800562c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	2b02      	cmp	r3, #2
 800540e:	f000 8083 	beq.w	8005518 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	2b02      	cmp	r3, #2
 8005416:	f200 80a1 	bhi.w	800555c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d003      	beq.n	8005428 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d056      	beq.n	80054d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005426:	e099      	b.n	800555c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005428:	4b88      	ldr	r3, [pc, #544]	@ (800564c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0320 	and.w	r3, r3, #32
 8005430:	2b00      	cmp	r3, #0
 8005432:	d02d      	beq.n	8005490 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005434:	4b85      	ldr	r3, [pc, #532]	@ (800564c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	08db      	lsrs	r3, r3, #3
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	4a84      	ldr	r2, [pc, #528]	@ (8005650 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005440:	fa22 f303 	lsr.w	r3, r2, r3
 8005444:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	ee07 3a90 	vmov	s15, r3
 800544c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	ee07 3a90 	vmov	s15, r3
 8005456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800545e:	4b7b      	ldr	r3, [pc, #492]	@ (800564c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005466:	ee07 3a90 	vmov	s15, r3
 800546a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800546e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005472:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005654 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800547a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800547e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800548a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800548e:	e087      	b.n	80055a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	ee07 3a90 	vmov	s15, r3
 8005496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005658 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800549e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054a2:	4b6a      	ldr	r3, [pc, #424]	@ (800564c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054aa:	ee07 3a90 	vmov	s15, r3
 80054ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80054b6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005654 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054d2:	e065      	b.n	80055a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	ee07 3a90 	vmov	s15, r3
 80054da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054de:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800565c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80054e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054e6:	4b59      	ldr	r3, [pc, #356]	@ (800564c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ee:	ee07 3a90 	vmov	s15, r3
 80054f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80054fa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005654 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005506:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800550a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800550e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005512:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005516:	e043      	b.n	80055a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	ee07 3a90 	vmov	s15, r3
 800551e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005522:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005660 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800552a:	4b48      	ldr	r3, [pc, #288]	@ (800564c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800552c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005532:	ee07 3a90 	vmov	s15, r3
 8005536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800553a:	ed97 6a03 	vldr	s12, [r7, #12]
 800553e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005654 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800554a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800554e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800555a:	e021      	b.n	80055a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	ee07 3a90 	vmov	s15, r3
 8005562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005566:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800565c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800556a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800556e:	4b37      	ldr	r3, [pc, #220]	@ (800564c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005576:	ee07 3a90 	vmov	s15, r3
 800557a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800557e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005582:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005654 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800558a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800558e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800559a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800559e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80055a0:	4b2a      	ldr	r3, [pc, #168]	@ (800564c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a4:	0a5b      	lsrs	r3, r3, #9
 80055a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055aa:	ee07 3a90 	vmov	s15, r3
 80055ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80055be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055c6:	ee17 2a90 	vmov	r2, s15
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80055ce:	4b1f      	ldr	r3, [pc, #124]	@ (800564c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d2:	0c1b      	lsrs	r3, r3, #16
 80055d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055d8:	ee07 3a90 	vmov	s15, r3
 80055dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80055ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055f4:	ee17 2a90 	vmov	r2, s15
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80055fc:	4b13      	ldr	r3, [pc, #76]	@ (800564c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005600:	0e1b      	lsrs	r3, r3, #24
 8005602:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005606:	ee07 3a90 	vmov	s15, r3
 800560a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005612:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005616:	edd7 6a07 	vldr	s13, [r7, #28]
 800561a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800561e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005622:	ee17 2a90 	vmov	r2, s15
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800562a:	e008      	b.n	800563e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	609a      	str	r2, [r3, #8]
}
 800563e:	bf00      	nop
 8005640:	3724      	adds	r7, #36	@ 0x24
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	58024400 	.word	0x58024400
 8005650:	03d09000 	.word	0x03d09000
 8005654:	46000000 	.word	0x46000000
 8005658:	4c742400 	.word	0x4c742400
 800565c:	4a742400 	.word	0x4a742400
 8005660:	4af42400 	.word	0x4af42400

08005664 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005672:	4b53      	ldr	r3, [pc, #332]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 8005674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	2b03      	cmp	r3, #3
 800567c:	d101      	bne.n	8005682 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e099      	b.n	80057b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005682:	4b4f      	ldr	r3, [pc, #316]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a4e      	ldr	r2, [pc, #312]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 8005688:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800568c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800568e:	f7fb fdfd 	bl	800128c <HAL_GetTick>
 8005692:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005694:	e008      	b.n	80056a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005696:	f7fb fdf9 	bl	800128c <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e086      	b.n	80057b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056a8:	4b45      	ldr	r3, [pc, #276]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1f0      	bne.n	8005696 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80056b4:	4b42      	ldr	r3, [pc, #264]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 80056b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	031b      	lsls	r3, r3, #12
 80056c2:	493f      	ldr	r1, [pc, #252]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	025b      	lsls	r3, r3, #9
 80056da:	b29b      	uxth	r3, r3
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	041b      	lsls	r3, r3, #16
 80056e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80056ea:	431a      	orrs	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	061b      	lsls	r3, r3, #24
 80056f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80056f8:	4931      	ldr	r1, [pc, #196]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80056fe:	4b30      	ldr	r3, [pc, #192]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 8005700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005702:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	492d      	ldr	r1, [pc, #180]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 800570c:	4313      	orrs	r3, r2
 800570e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005710:	4b2b      	ldr	r3, [pc, #172]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 8005712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005714:	f023 0220 	bic.w	r2, r3, #32
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	4928      	ldr	r1, [pc, #160]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 800571e:	4313      	orrs	r3, r2
 8005720:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005722:	4b27      	ldr	r3, [pc, #156]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 8005724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005726:	4a26      	ldr	r2, [pc, #152]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 8005728:	f023 0310 	bic.w	r3, r3, #16
 800572c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800572e:	4b24      	ldr	r3, [pc, #144]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 8005730:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005732:	4b24      	ldr	r3, [pc, #144]	@ (80057c4 <RCCEx_PLL2_Config+0x160>)
 8005734:	4013      	ands	r3, r2
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	69d2      	ldr	r2, [r2, #28]
 800573a:	00d2      	lsls	r2, r2, #3
 800573c:	4920      	ldr	r1, [pc, #128]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 800573e:	4313      	orrs	r3, r2
 8005740:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005742:	4b1f      	ldr	r3, [pc, #124]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 8005744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005746:	4a1e      	ldr	r2, [pc, #120]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 8005748:	f043 0310 	orr.w	r3, r3, #16
 800574c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d106      	bne.n	8005762 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005754:	4b1a      	ldr	r3, [pc, #104]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 8005756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005758:	4a19      	ldr	r2, [pc, #100]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 800575a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800575e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005760:	e00f      	b.n	8005782 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d106      	bne.n	8005776 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005768:	4b15      	ldr	r3, [pc, #84]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 800576a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576c:	4a14      	ldr	r2, [pc, #80]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 800576e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005772:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005774:	e005      	b.n	8005782 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005776:	4b12      	ldr	r3, [pc, #72]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 8005778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577a:	4a11      	ldr	r2, [pc, #68]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 800577c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005780:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005782:	4b0f      	ldr	r3, [pc, #60]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a0e      	ldr	r2, [pc, #56]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 8005788:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800578c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800578e:	f7fb fd7d 	bl	800128c <HAL_GetTick>
 8005792:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005794:	e008      	b.n	80057a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005796:	f7fb fd79 	bl	800128c <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e006      	b.n	80057b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057a8:	4b05      	ldr	r3, [pc, #20]	@ (80057c0 <RCCEx_PLL2_Config+0x15c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0f0      	beq.n	8005796 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80057b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	58024400 	.word	0x58024400
 80057c4:	ffff0007 	.word	0xffff0007

080057c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057d6:	4b53      	ldr	r3, [pc, #332]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 80057d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	2b03      	cmp	r3, #3
 80057e0:	d101      	bne.n	80057e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e099      	b.n	800591a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80057e6:	4b4f      	ldr	r3, [pc, #316]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a4e      	ldr	r2, [pc, #312]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 80057ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057f2:	f7fb fd4b 	bl	800128c <HAL_GetTick>
 80057f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80057f8:	e008      	b.n	800580c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80057fa:	f7fb fd47 	bl	800128c <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d901      	bls.n	800580c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e086      	b.n	800591a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800580c:	4b45      	ldr	r3, [pc, #276]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1f0      	bne.n	80057fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005818:	4b42      	ldr	r3, [pc, #264]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 800581a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	051b      	lsls	r3, r3, #20
 8005826:	493f      	ldr	r1, [pc, #252]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 8005828:	4313      	orrs	r3, r2
 800582a:	628b      	str	r3, [r1, #40]	@ 0x28
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	3b01      	subs	r3, #1
 8005832:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	3b01      	subs	r3, #1
 800583c:	025b      	lsls	r3, r3, #9
 800583e:	b29b      	uxth	r3, r3
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	3b01      	subs	r3, #1
 8005848:	041b      	lsls	r3, r3, #16
 800584a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800584e:	431a      	orrs	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	3b01      	subs	r3, #1
 8005856:	061b      	lsls	r3, r3, #24
 8005858:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800585c:	4931      	ldr	r1, [pc, #196]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 800585e:	4313      	orrs	r3, r2
 8005860:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005862:	4b30      	ldr	r3, [pc, #192]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 8005864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005866:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	492d      	ldr	r1, [pc, #180]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 8005870:	4313      	orrs	r3, r2
 8005872:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005874:	4b2b      	ldr	r3, [pc, #172]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 8005876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005878:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	4928      	ldr	r1, [pc, #160]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 8005882:	4313      	orrs	r3, r2
 8005884:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005886:	4b27      	ldr	r3, [pc, #156]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 8005888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588a:	4a26      	ldr	r2, [pc, #152]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 800588c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005890:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005892:	4b24      	ldr	r3, [pc, #144]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 8005894:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005896:	4b24      	ldr	r3, [pc, #144]	@ (8005928 <RCCEx_PLL3_Config+0x160>)
 8005898:	4013      	ands	r3, r2
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	69d2      	ldr	r2, [r2, #28]
 800589e:	00d2      	lsls	r2, r2, #3
 80058a0:	4920      	ldr	r1, [pc, #128]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80058a6:	4b1f      	ldr	r3, [pc, #124]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 80058a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 80058ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d106      	bne.n	80058c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80058b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 80058ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058bc:	4a19      	ldr	r2, [pc, #100]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 80058be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80058c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80058c4:	e00f      	b.n	80058e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d106      	bne.n	80058da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80058cc:	4b15      	ldr	r3, [pc, #84]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 80058ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d0:	4a14      	ldr	r2, [pc, #80]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 80058d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80058d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80058d8:	e005      	b.n	80058e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80058da:	4b12      	ldr	r3, [pc, #72]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 80058dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058de:	4a11      	ldr	r2, [pc, #68]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 80058e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80058e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a0e      	ldr	r2, [pc, #56]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 80058ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058f2:	f7fb fccb 	bl	800128c <HAL_GetTick>
 80058f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80058f8:	e008      	b.n	800590c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80058fa:	f7fb fcc7 	bl	800128c <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b02      	cmp	r3, #2
 8005906:	d901      	bls.n	800590c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e006      	b.n	800591a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800590c:	4b05      	ldr	r3, [pc, #20]	@ (8005924 <RCCEx_PLL3_Config+0x15c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0f0      	beq.n	80058fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005918:	7bfb      	ldrb	r3, [r7, #15]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	58024400 	.word	0x58024400
 8005928:	ffff0007 	.word	0xffff0007

0800592c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e042      	b.n	80059c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005944:	2b00      	cmp	r3, #0
 8005946:	d106      	bne.n	8005956 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7fb f9d7 	bl	8000d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2224      	movs	r2, #36	@ 0x24
 800595a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0201 	bic.w	r2, r2, #1
 800596c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f001 fafc 	bl	8006f74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fc8d 	bl	800629c <UART_SetConfig>
 8005982:	4603      	mov	r3, r0
 8005984:	2b01      	cmp	r3, #1
 8005986:	d101      	bne.n	800598c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e01b      	b.n	80059c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800599a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f042 0201 	orr.w	r2, r2, #1
 80059ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f001 fb7b 	bl	80070b8 <UART_CheckIdleState>
 80059c2:	4603      	mov	r3, r0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08a      	sub	sp, #40	@ 0x28
 80059d0:	af02      	add	r7, sp, #8
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	603b      	str	r3, [r7, #0]
 80059d8:	4613      	mov	r3, r2
 80059da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e2:	2b20      	cmp	r3, #32
 80059e4:	d17b      	bne.n	8005ade <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <HAL_UART_Transmit+0x26>
 80059ec:	88fb      	ldrh	r3, [r7, #6]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e074      	b.n	8005ae0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2221      	movs	r2, #33	@ 0x21
 8005a02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a06:	f7fb fc41 	bl	800128c <HAL_GetTick>
 8005a0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	88fa      	ldrh	r2, [r7, #6]
 8005a10:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	88fa      	ldrh	r2, [r7, #6]
 8005a18:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a24:	d108      	bne.n	8005a38 <HAL_UART_Transmit+0x6c>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d104      	bne.n	8005a38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	61bb      	str	r3, [r7, #24]
 8005a36:	e003      	b.n	8005a40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a40:	e030      	b.n	8005aa4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	2180      	movs	r1, #128	@ 0x80
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f001 fbdd 	bl	800720c <UART_WaitOnFlagUntilTimeout>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e03d      	b.n	8005ae0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10b      	bne.n	8005a82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	3302      	adds	r3, #2
 8005a7e:	61bb      	str	r3, [r7, #24]
 8005a80:	e007      	b.n	8005a92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	781a      	ldrb	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1c8      	bne.n	8005a42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2140      	movs	r1, #64	@ 0x40
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f001 fba6 	bl	800720c <UART_WaitOnFlagUntilTimeout>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d005      	beq.n	8005ad2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e006      	b.n	8005ae0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	e000      	b.n	8005ae0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005ade:	2302      	movs	r3, #2
  }
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3720      	adds	r7, #32
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b0ba      	sub	sp, #232	@ 0xe8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005b12:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005b16:	4013      	ands	r3, r2
 8005b18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005b1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d11b      	bne.n	8005b5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b28:	f003 0320 	and.w	r3, r3, #32
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d015      	beq.n	8005b5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b34:	f003 0320 	and.w	r3, r3, #32
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d105      	bne.n	8005b48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d009      	beq.n	8005b5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 8377 	beq.w	8006240 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	4798      	blx	r3
      }
      return;
 8005b5a:	e371      	b.n	8006240 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f000 8123 	beq.w	8005dac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005b66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005b6a:	4b8d      	ldr	r3, [pc, #564]	@ (8005da0 <HAL_UART_IRQHandler+0x2b8>)
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d106      	bne.n	8005b80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005b72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005b76:	4b8b      	ldr	r3, [pc, #556]	@ (8005da4 <HAL_UART_IRQHandler+0x2bc>)
 8005b78:	4013      	ands	r3, r2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 8116 	beq.w	8005dac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d011      	beq.n	8005bb0 <HAL_UART_IRQHandler+0xc8>
 8005b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00b      	beq.n	8005bb0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba6:	f043 0201 	orr.w	r2, r3, #1
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d011      	beq.n	8005be0 <HAL_UART_IRQHandler+0xf8>
 8005bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00b      	beq.n	8005be0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bd6:	f043 0204 	orr.w	r2, r3, #4
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d011      	beq.n	8005c10 <HAL_UART_IRQHandler+0x128>
 8005bec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00b      	beq.n	8005c10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2204      	movs	r2, #4
 8005bfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c06:	f043 0202 	orr.w	r2, r3, #2
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d017      	beq.n	8005c4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c20:	f003 0320 	and.w	r3, r3, #32
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d105      	bne.n	8005c34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005c28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005c2c:	4b5c      	ldr	r3, [pc, #368]	@ (8005da0 <HAL_UART_IRQHandler+0x2b8>)
 8005c2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00b      	beq.n	8005c4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2208      	movs	r2, #8
 8005c3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c42:	f043 0208 	orr.w	r2, r3, #8
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d012      	beq.n	8005c7e <HAL_UART_IRQHandler+0x196>
 8005c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00c      	beq.n	8005c7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c74:	f043 0220 	orr.w	r2, r3, #32
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 82dd 	beq.w	8006244 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c8e:	f003 0320 	and.w	r3, r3, #32
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d013      	beq.n	8005cbe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c9a:	f003 0320 	and.w	r3, r3, #32
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d105      	bne.n	8005cae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d007      	beq.n	8005cbe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd2:	2b40      	cmp	r3, #64	@ 0x40
 8005cd4:	d005      	beq.n	8005ce2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005cd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cda:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d054      	beq.n	8005d8c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f001 fb00 	bl	80072e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf2:	2b40      	cmp	r3, #64	@ 0x40
 8005cf4:	d146      	bne.n	8005d84 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	3308      	adds	r3, #8
 8005cfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d04:	e853 3f00 	ldrex	r3, [r3]
 8005d08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3308      	adds	r3, #8
 8005d1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005d22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005d26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005d2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005d32:	e841 2300 	strex	r3, r2, [r1]
 8005d36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005d3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1d9      	bne.n	8005cf6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d017      	beq.n	8005d7c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d52:	4a15      	ldr	r2, [pc, #84]	@ (8005da8 <HAL_UART_IRQHandler+0x2c0>)
 8005d54:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fb ff07 	bl	8001b70 <HAL_DMA_Abort_IT>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d019      	beq.n	8005d9c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005d76:	4610      	mov	r0, r2
 8005d78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d7a:	e00f      	b.n	8005d9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fa77 	bl	8006270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d82:	e00b      	b.n	8005d9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fa73 	bl	8006270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d8a:	e007      	b.n	8005d9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 fa6f 	bl	8006270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005d9a:	e253      	b.n	8006244 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d9c:	bf00      	nop
    return;
 8005d9e:	e251      	b.n	8006244 <HAL_UART_IRQHandler+0x75c>
 8005da0:	10000001 	.word	0x10000001
 8005da4:	04000120 	.word	0x04000120
 8005da8:	080073b5 	.word	0x080073b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	f040 81e7 	bne.w	8006184 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dba:	f003 0310 	and.w	r3, r3, #16
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 81e0 	beq.w	8006184 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dc8:	f003 0310 	and.w	r3, r3, #16
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 81d9 	beq.w	8006184 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2210      	movs	r2, #16
 8005dd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005de4:	2b40      	cmp	r3, #64	@ 0x40
 8005de6:	f040 8151 	bne.w	800608c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a96      	ldr	r2, [pc, #600]	@ (800604c <HAL_UART_IRQHandler+0x564>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d068      	beq.n	8005eca <HAL_UART_IRQHandler+0x3e2>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a93      	ldr	r2, [pc, #588]	@ (8006050 <HAL_UART_IRQHandler+0x568>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d061      	beq.n	8005eca <HAL_UART_IRQHandler+0x3e2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a91      	ldr	r2, [pc, #580]	@ (8006054 <HAL_UART_IRQHandler+0x56c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d05a      	beq.n	8005eca <HAL_UART_IRQHandler+0x3e2>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a8e      	ldr	r2, [pc, #568]	@ (8006058 <HAL_UART_IRQHandler+0x570>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d053      	beq.n	8005eca <HAL_UART_IRQHandler+0x3e2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a8c      	ldr	r2, [pc, #560]	@ (800605c <HAL_UART_IRQHandler+0x574>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d04c      	beq.n	8005eca <HAL_UART_IRQHandler+0x3e2>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a89      	ldr	r2, [pc, #548]	@ (8006060 <HAL_UART_IRQHandler+0x578>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d045      	beq.n	8005eca <HAL_UART_IRQHandler+0x3e2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a87      	ldr	r2, [pc, #540]	@ (8006064 <HAL_UART_IRQHandler+0x57c>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d03e      	beq.n	8005eca <HAL_UART_IRQHandler+0x3e2>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a84      	ldr	r2, [pc, #528]	@ (8006068 <HAL_UART_IRQHandler+0x580>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d037      	beq.n	8005eca <HAL_UART_IRQHandler+0x3e2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a82      	ldr	r2, [pc, #520]	@ (800606c <HAL_UART_IRQHandler+0x584>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d030      	beq.n	8005eca <HAL_UART_IRQHandler+0x3e2>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a7f      	ldr	r2, [pc, #508]	@ (8006070 <HAL_UART_IRQHandler+0x588>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d029      	beq.n	8005eca <HAL_UART_IRQHandler+0x3e2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a7d      	ldr	r2, [pc, #500]	@ (8006074 <HAL_UART_IRQHandler+0x58c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d022      	beq.n	8005eca <HAL_UART_IRQHandler+0x3e2>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a7a      	ldr	r2, [pc, #488]	@ (8006078 <HAL_UART_IRQHandler+0x590>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d01b      	beq.n	8005eca <HAL_UART_IRQHandler+0x3e2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a78      	ldr	r2, [pc, #480]	@ (800607c <HAL_UART_IRQHandler+0x594>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d014      	beq.n	8005eca <HAL_UART_IRQHandler+0x3e2>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a75      	ldr	r2, [pc, #468]	@ (8006080 <HAL_UART_IRQHandler+0x598>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d00d      	beq.n	8005eca <HAL_UART_IRQHandler+0x3e2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a73      	ldr	r2, [pc, #460]	@ (8006084 <HAL_UART_IRQHandler+0x59c>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d006      	beq.n	8005eca <HAL_UART_IRQHandler+0x3e2>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a70      	ldr	r2, [pc, #448]	@ (8006088 <HAL_UART_IRQHandler+0x5a0>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d106      	bne.n	8005ed8 <HAL_UART_IRQHandler+0x3f0>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	e005      	b.n	8005ee4 <HAL_UART_IRQHandler+0x3fc>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ee8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 81ab 	beq.w	8006248 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005ef8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005efc:	429a      	cmp	r2, r3
 8005efe:	f080 81a3 	bcs.w	8006248 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f12:	69db      	ldr	r3, [r3, #28]
 8005f14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f18:	f000 8087 	beq.w	800602a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005f30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	461a      	mov	r2, r3
 8005f42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005f46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f4a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005f52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005f56:	e841 2300 	strex	r3, r2, [r1]
 8005f5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005f5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1da      	bne.n	8005f1c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3308      	adds	r3, #8
 8005f6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f70:	e853 3f00 	ldrex	r3, [r3]
 8005f74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005f76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f78:	f023 0301 	bic.w	r3, r3, #1
 8005f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	3308      	adds	r3, #8
 8005f86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005f8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005f92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005f96:	e841 2300 	strex	r3, r2, [r1]
 8005f9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005f9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1e1      	bne.n	8005f66 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	3308      	adds	r3, #8
 8005fa8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005faa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fac:	e853 3f00 	ldrex	r3, [r3]
 8005fb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005fb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3308      	adds	r3, #8
 8005fc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005fc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005fc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005fcc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005fce:	e841 2300 	strex	r3, r2, [r1]
 8005fd2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005fd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1e3      	bne.n	8005fa2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ff0:	e853 3f00 	ldrex	r3, [r3]
 8005ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ff6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ff8:	f023 0310 	bic.w	r3, r3, #16
 8005ffc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	461a      	mov	r2, r3
 8006006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800600a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800600c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006010:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006018:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1e4      	bne.n	8005fe8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006024:	4618      	mov	r0, r3
 8006026:	f7fb fa85 	bl	8001534 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2202      	movs	r2, #2
 800602e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800603c:	b29b      	uxth	r3, r3
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	b29b      	uxth	r3, r3
 8006042:	4619      	mov	r1, r3
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f91d 	bl	8006284 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800604a:	e0fd      	b.n	8006248 <HAL_UART_IRQHandler+0x760>
 800604c:	40020010 	.word	0x40020010
 8006050:	40020028 	.word	0x40020028
 8006054:	40020040 	.word	0x40020040
 8006058:	40020058 	.word	0x40020058
 800605c:	40020070 	.word	0x40020070
 8006060:	40020088 	.word	0x40020088
 8006064:	400200a0 	.word	0x400200a0
 8006068:	400200b8 	.word	0x400200b8
 800606c:	40020410 	.word	0x40020410
 8006070:	40020428 	.word	0x40020428
 8006074:	40020440 	.word	0x40020440
 8006078:	40020458 	.word	0x40020458
 800607c:	40020470 	.word	0x40020470
 8006080:	40020488 	.word	0x40020488
 8006084:	400204a0 	.word	0x400204a0
 8006088:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006098:	b29b      	uxth	r3, r3
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 80cf 	beq.w	800624c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80060ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 80ca 	beq.w	800624c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c0:	e853 3f00 	ldrex	r3, [r3]
 80060c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	461a      	mov	r2, r3
 80060d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060da:	647b      	str	r3, [r7, #68]	@ 0x44
 80060dc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060e2:	e841 2300 	strex	r3, r2, [r1]
 80060e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1e4      	bne.n	80060b8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3308      	adds	r3, #8
 80060f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	623b      	str	r3, [r7, #32]
   return(result);
 80060fe:	6a3a      	ldr	r2, [r7, #32]
 8006100:	4b55      	ldr	r3, [pc, #340]	@ (8006258 <HAL_UART_IRQHandler+0x770>)
 8006102:	4013      	ands	r3, r2
 8006104:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3308      	adds	r3, #8
 800610e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006112:	633a      	str	r2, [r7, #48]	@ 0x30
 8006114:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800611a:	e841 2300 	strex	r3, r2, [r1]
 800611e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1e3      	bne.n	80060ee <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2220      	movs	r2, #32
 800612a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	e853 3f00 	ldrex	r3, [r3]
 8006146:	60fb      	str	r3, [r7, #12]
   return(result);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0310 	bic.w	r3, r3, #16
 800614e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	461a      	mov	r2, r3
 8006158:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800615c:	61fb      	str	r3, [r7, #28]
 800615e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006160:	69b9      	ldr	r1, [r7, #24]
 8006162:	69fa      	ldr	r2, [r7, #28]
 8006164:	e841 2300 	strex	r3, r2, [r1]
 8006168:	617b      	str	r3, [r7, #20]
   return(result);
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1e4      	bne.n	800613a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006176:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800617a:	4619      	mov	r1, r3
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f881 	bl	8006284 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006182:	e063      	b.n	800624c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006188:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00e      	beq.n	80061ae <HAL_UART_IRQHandler+0x6c6>
 8006190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006194:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d008      	beq.n	80061ae <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80061a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f001 f945 	bl	8007436 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061ac:	e051      	b.n	8006252 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80061ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d014      	beq.n	80061e4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80061ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d105      	bne.n	80061d2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80061c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d008      	beq.n	80061e4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d03a      	beq.n	8006250 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	4798      	blx	r3
    }
    return;
 80061e2:	e035      	b.n	8006250 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80061e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d009      	beq.n	8006204 <HAL_UART_IRQHandler+0x71c>
 80061f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f001 f8ef 	bl	80073e0 <UART_EndTransmit_IT>
    return;
 8006202:	e026      	b.n	8006252 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006208:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d009      	beq.n	8006224 <HAL_UART_IRQHandler+0x73c>
 8006210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006214:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d003      	beq.n	8006224 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f001 f91e 	bl	800745e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006222:	e016      	b.n	8006252 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006228:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d010      	beq.n	8006252 <HAL_UART_IRQHandler+0x76a>
 8006230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006234:	2b00      	cmp	r3, #0
 8006236:	da0c      	bge.n	8006252 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 f906 	bl	800744a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800623e:	e008      	b.n	8006252 <HAL_UART_IRQHandler+0x76a>
      return;
 8006240:	bf00      	nop
 8006242:	e006      	b.n	8006252 <HAL_UART_IRQHandler+0x76a>
    return;
 8006244:	bf00      	nop
 8006246:	e004      	b.n	8006252 <HAL_UART_IRQHandler+0x76a>
      return;
 8006248:	bf00      	nop
 800624a:	e002      	b.n	8006252 <HAL_UART_IRQHandler+0x76a>
      return;
 800624c:	bf00      	nop
 800624e:	e000      	b.n	8006252 <HAL_UART_IRQHandler+0x76a>
    return;
 8006250:	bf00      	nop
  }
}
 8006252:	37e8      	adds	r7, #232	@ 0xe8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	effffffe 	.word	0xeffffffe

0800625c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800629c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062a0:	b092      	sub	sp, #72	@ 0x48
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062a6:	2300      	movs	r3, #0
 80062a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	431a      	orrs	r2, r3
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	431a      	orrs	r2, r3
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	4bbe      	ldr	r3, [pc, #760]	@ (80065c4 <UART_SetConfig+0x328>)
 80062cc:	4013      	ands	r3, r2
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	6812      	ldr	r2, [r2, #0]
 80062d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80062d4:	430b      	orrs	r3, r1
 80062d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4ab3      	ldr	r2, [pc, #716]	@ (80065c8 <UART_SetConfig+0x32c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d004      	beq.n	8006308 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006304:	4313      	orrs	r3, r2
 8006306:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689a      	ldr	r2, [r3, #8]
 800630e:	4baf      	ldr	r3, [pc, #700]	@ (80065cc <UART_SetConfig+0x330>)
 8006310:	4013      	ands	r3, r2
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	6812      	ldr	r2, [r2, #0]
 8006316:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006318:	430b      	orrs	r3, r1
 800631a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006322:	f023 010f 	bic.w	r1, r3, #15
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4aa6      	ldr	r2, [pc, #664]	@ (80065d0 <UART_SetConfig+0x334>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d177      	bne.n	800642c <UART_SetConfig+0x190>
 800633c:	4ba5      	ldr	r3, [pc, #660]	@ (80065d4 <UART_SetConfig+0x338>)
 800633e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006340:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006344:	2b28      	cmp	r3, #40	@ 0x28
 8006346:	d86d      	bhi.n	8006424 <UART_SetConfig+0x188>
 8006348:	a201      	add	r2, pc, #4	@ (adr r2, 8006350 <UART_SetConfig+0xb4>)
 800634a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634e:	bf00      	nop
 8006350:	080063f5 	.word	0x080063f5
 8006354:	08006425 	.word	0x08006425
 8006358:	08006425 	.word	0x08006425
 800635c:	08006425 	.word	0x08006425
 8006360:	08006425 	.word	0x08006425
 8006364:	08006425 	.word	0x08006425
 8006368:	08006425 	.word	0x08006425
 800636c:	08006425 	.word	0x08006425
 8006370:	080063fd 	.word	0x080063fd
 8006374:	08006425 	.word	0x08006425
 8006378:	08006425 	.word	0x08006425
 800637c:	08006425 	.word	0x08006425
 8006380:	08006425 	.word	0x08006425
 8006384:	08006425 	.word	0x08006425
 8006388:	08006425 	.word	0x08006425
 800638c:	08006425 	.word	0x08006425
 8006390:	08006405 	.word	0x08006405
 8006394:	08006425 	.word	0x08006425
 8006398:	08006425 	.word	0x08006425
 800639c:	08006425 	.word	0x08006425
 80063a0:	08006425 	.word	0x08006425
 80063a4:	08006425 	.word	0x08006425
 80063a8:	08006425 	.word	0x08006425
 80063ac:	08006425 	.word	0x08006425
 80063b0:	0800640d 	.word	0x0800640d
 80063b4:	08006425 	.word	0x08006425
 80063b8:	08006425 	.word	0x08006425
 80063bc:	08006425 	.word	0x08006425
 80063c0:	08006425 	.word	0x08006425
 80063c4:	08006425 	.word	0x08006425
 80063c8:	08006425 	.word	0x08006425
 80063cc:	08006425 	.word	0x08006425
 80063d0:	08006415 	.word	0x08006415
 80063d4:	08006425 	.word	0x08006425
 80063d8:	08006425 	.word	0x08006425
 80063dc:	08006425 	.word	0x08006425
 80063e0:	08006425 	.word	0x08006425
 80063e4:	08006425 	.word	0x08006425
 80063e8:	08006425 	.word	0x08006425
 80063ec:	08006425 	.word	0x08006425
 80063f0:	0800641d 	.word	0x0800641d
 80063f4:	2301      	movs	r3, #1
 80063f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063fa:	e326      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80063fc:	2304      	movs	r3, #4
 80063fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006402:	e322      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006404:	2308      	movs	r3, #8
 8006406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800640a:	e31e      	b.n	8006a4a <UART_SetConfig+0x7ae>
 800640c:	2310      	movs	r3, #16
 800640e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006412:	e31a      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006414:	2320      	movs	r3, #32
 8006416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800641a:	e316      	b.n	8006a4a <UART_SetConfig+0x7ae>
 800641c:	2340      	movs	r3, #64	@ 0x40
 800641e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006422:	e312      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006424:	2380      	movs	r3, #128	@ 0x80
 8006426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800642a:	e30e      	b.n	8006a4a <UART_SetConfig+0x7ae>
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a69      	ldr	r2, [pc, #420]	@ (80065d8 <UART_SetConfig+0x33c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d130      	bne.n	8006498 <UART_SetConfig+0x1fc>
 8006436:	4b67      	ldr	r3, [pc, #412]	@ (80065d4 <UART_SetConfig+0x338>)
 8006438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800643a:	f003 0307 	and.w	r3, r3, #7
 800643e:	2b05      	cmp	r3, #5
 8006440:	d826      	bhi.n	8006490 <UART_SetConfig+0x1f4>
 8006442:	a201      	add	r2, pc, #4	@ (adr r2, 8006448 <UART_SetConfig+0x1ac>)
 8006444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006448:	08006461 	.word	0x08006461
 800644c:	08006469 	.word	0x08006469
 8006450:	08006471 	.word	0x08006471
 8006454:	08006479 	.word	0x08006479
 8006458:	08006481 	.word	0x08006481
 800645c:	08006489 	.word	0x08006489
 8006460:	2300      	movs	r3, #0
 8006462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006466:	e2f0      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006468:	2304      	movs	r3, #4
 800646a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800646e:	e2ec      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006470:	2308      	movs	r3, #8
 8006472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006476:	e2e8      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006478:	2310      	movs	r3, #16
 800647a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800647e:	e2e4      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006480:	2320      	movs	r3, #32
 8006482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006486:	e2e0      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006488:	2340      	movs	r3, #64	@ 0x40
 800648a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800648e:	e2dc      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006490:	2380      	movs	r3, #128	@ 0x80
 8006492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006496:	e2d8      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a4f      	ldr	r2, [pc, #316]	@ (80065dc <UART_SetConfig+0x340>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d130      	bne.n	8006504 <UART_SetConfig+0x268>
 80064a2:	4b4c      	ldr	r3, [pc, #304]	@ (80065d4 <UART_SetConfig+0x338>)
 80064a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a6:	f003 0307 	and.w	r3, r3, #7
 80064aa:	2b05      	cmp	r3, #5
 80064ac:	d826      	bhi.n	80064fc <UART_SetConfig+0x260>
 80064ae:	a201      	add	r2, pc, #4	@ (adr r2, 80064b4 <UART_SetConfig+0x218>)
 80064b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b4:	080064cd 	.word	0x080064cd
 80064b8:	080064d5 	.word	0x080064d5
 80064bc:	080064dd 	.word	0x080064dd
 80064c0:	080064e5 	.word	0x080064e5
 80064c4:	080064ed 	.word	0x080064ed
 80064c8:	080064f5 	.word	0x080064f5
 80064cc:	2300      	movs	r3, #0
 80064ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064d2:	e2ba      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80064d4:	2304      	movs	r3, #4
 80064d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064da:	e2b6      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80064dc:	2308      	movs	r3, #8
 80064de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064e2:	e2b2      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80064e4:	2310      	movs	r3, #16
 80064e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ea:	e2ae      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80064ec:	2320      	movs	r3, #32
 80064ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064f2:	e2aa      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80064f4:	2340      	movs	r3, #64	@ 0x40
 80064f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064fa:	e2a6      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80064fc:	2380      	movs	r3, #128	@ 0x80
 80064fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006502:	e2a2      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a35      	ldr	r2, [pc, #212]	@ (80065e0 <UART_SetConfig+0x344>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d130      	bne.n	8006570 <UART_SetConfig+0x2d4>
 800650e:	4b31      	ldr	r3, [pc, #196]	@ (80065d4 <UART_SetConfig+0x338>)
 8006510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006512:	f003 0307 	and.w	r3, r3, #7
 8006516:	2b05      	cmp	r3, #5
 8006518:	d826      	bhi.n	8006568 <UART_SetConfig+0x2cc>
 800651a:	a201      	add	r2, pc, #4	@ (adr r2, 8006520 <UART_SetConfig+0x284>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	08006539 	.word	0x08006539
 8006524:	08006541 	.word	0x08006541
 8006528:	08006549 	.word	0x08006549
 800652c:	08006551 	.word	0x08006551
 8006530:	08006559 	.word	0x08006559
 8006534:	08006561 	.word	0x08006561
 8006538:	2300      	movs	r3, #0
 800653a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800653e:	e284      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006540:	2304      	movs	r3, #4
 8006542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006546:	e280      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006548:	2308      	movs	r3, #8
 800654a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800654e:	e27c      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006550:	2310      	movs	r3, #16
 8006552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006556:	e278      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006558:	2320      	movs	r3, #32
 800655a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800655e:	e274      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006560:	2340      	movs	r3, #64	@ 0x40
 8006562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006566:	e270      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006568:	2380      	movs	r3, #128	@ 0x80
 800656a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800656e:	e26c      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a1b      	ldr	r2, [pc, #108]	@ (80065e4 <UART_SetConfig+0x348>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d142      	bne.n	8006600 <UART_SetConfig+0x364>
 800657a:	4b16      	ldr	r3, [pc, #88]	@ (80065d4 <UART_SetConfig+0x338>)
 800657c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800657e:	f003 0307 	and.w	r3, r3, #7
 8006582:	2b05      	cmp	r3, #5
 8006584:	d838      	bhi.n	80065f8 <UART_SetConfig+0x35c>
 8006586:	a201      	add	r2, pc, #4	@ (adr r2, 800658c <UART_SetConfig+0x2f0>)
 8006588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658c:	080065a5 	.word	0x080065a5
 8006590:	080065ad 	.word	0x080065ad
 8006594:	080065b5 	.word	0x080065b5
 8006598:	080065bd 	.word	0x080065bd
 800659c:	080065e9 	.word	0x080065e9
 80065a0:	080065f1 	.word	0x080065f1
 80065a4:	2300      	movs	r3, #0
 80065a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065aa:	e24e      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80065ac:	2304      	movs	r3, #4
 80065ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065b2:	e24a      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80065b4:	2308      	movs	r3, #8
 80065b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ba:	e246      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80065bc:	2310      	movs	r3, #16
 80065be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065c2:	e242      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80065c4:	cfff69f3 	.word	0xcfff69f3
 80065c8:	58000c00 	.word	0x58000c00
 80065cc:	11fff4ff 	.word	0x11fff4ff
 80065d0:	40011000 	.word	0x40011000
 80065d4:	58024400 	.word	0x58024400
 80065d8:	40004400 	.word	0x40004400
 80065dc:	40004800 	.word	0x40004800
 80065e0:	40004c00 	.word	0x40004c00
 80065e4:	40005000 	.word	0x40005000
 80065e8:	2320      	movs	r3, #32
 80065ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ee:	e22c      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80065f0:	2340      	movs	r3, #64	@ 0x40
 80065f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065f6:	e228      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80065f8:	2380      	movs	r3, #128	@ 0x80
 80065fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065fe:	e224      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4ab1      	ldr	r2, [pc, #708]	@ (80068cc <UART_SetConfig+0x630>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d176      	bne.n	80066f8 <UART_SetConfig+0x45c>
 800660a:	4bb1      	ldr	r3, [pc, #708]	@ (80068d0 <UART_SetConfig+0x634>)
 800660c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800660e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006612:	2b28      	cmp	r3, #40	@ 0x28
 8006614:	d86c      	bhi.n	80066f0 <UART_SetConfig+0x454>
 8006616:	a201      	add	r2, pc, #4	@ (adr r2, 800661c <UART_SetConfig+0x380>)
 8006618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661c:	080066c1 	.word	0x080066c1
 8006620:	080066f1 	.word	0x080066f1
 8006624:	080066f1 	.word	0x080066f1
 8006628:	080066f1 	.word	0x080066f1
 800662c:	080066f1 	.word	0x080066f1
 8006630:	080066f1 	.word	0x080066f1
 8006634:	080066f1 	.word	0x080066f1
 8006638:	080066f1 	.word	0x080066f1
 800663c:	080066c9 	.word	0x080066c9
 8006640:	080066f1 	.word	0x080066f1
 8006644:	080066f1 	.word	0x080066f1
 8006648:	080066f1 	.word	0x080066f1
 800664c:	080066f1 	.word	0x080066f1
 8006650:	080066f1 	.word	0x080066f1
 8006654:	080066f1 	.word	0x080066f1
 8006658:	080066f1 	.word	0x080066f1
 800665c:	080066d1 	.word	0x080066d1
 8006660:	080066f1 	.word	0x080066f1
 8006664:	080066f1 	.word	0x080066f1
 8006668:	080066f1 	.word	0x080066f1
 800666c:	080066f1 	.word	0x080066f1
 8006670:	080066f1 	.word	0x080066f1
 8006674:	080066f1 	.word	0x080066f1
 8006678:	080066f1 	.word	0x080066f1
 800667c:	080066d9 	.word	0x080066d9
 8006680:	080066f1 	.word	0x080066f1
 8006684:	080066f1 	.word	0x080066f1
 8006688:	080066f1 	.word	0x080066f1
 800668c:	080066f1 	.word	0x080066f1
 8006690:	080066f1 	.word	0x080066f1
 8006694:	080066f1 	.word	0x080066f1
 8006698:	080066f1 	.word	0x080066f1
 800669c:	080066e1 	.word	0x080066e1
 80066a0:	080066f1 	.word	0x080066f1
 80066a4:	080066f1 	.word	0x080066f1
 80066a8:	080066f1 	.word	0x080066f1
 80066ac:	080066f1 	.word	0x080066f1
 80066b0:	080066f1 	.word	0x080066f1
 80066b4:	080066f1 	.word	0x080066f1
 80066b8:	080066f1 	.word	0x080066f1
 80066bc:	080066e9 	.word	0x080066e9
 80066c0:	2301      	movs	r3, #1
 80066c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066c6:	e1c0      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80066c8:	2304      	movs	r3, #4
 80066ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ce:	e1bc      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80066d0:	2308      	movs	r3, #8
 80066d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066d6:	e1b8      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80066d8:	2310      	movs	r3, #16
 80066da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066de:	e1b4      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80066e0:	2320      	movs	r3, #32
 80066e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e6:	e1b0      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80066e8:	2340      	movs	r3, #64	@ 0x40
 80066ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ee:	e1ac      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80066f0:	2380      	movs	r3, #128	@ 0x80
 80066f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066f6:	e1a8      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a75      	ldr	r2, [pc, #468]	@ (80068d4 <UART_SetConfig+0x638>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d130      	bne.n	8006764 <UART_SetConfig+0x4c8>
 8006702:	4b73      	ldr	r3, [pc, #460]	@ (80068d0 <UART_SetConfig+0x634>)
 8006704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	2b05      	cmp	r3, #5
 800670c:	d826      	bhi.n	800675c <UART_SetConfig+0x4c0>
 800670e:	a201      	add	r2, pc, #4	@ (adr r2, 8006714 <UART_SetConfig+0x478>)
 8006710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006714:	0800672d 	.word	0x0800672d
 8006718:	08006735 	.word	0x08006735
 800671c:	0800673d 	.word	0x0800673d
 8006720:	08006745 	.word	0x08006745
 8006724:	0800674d 	.word	0x0800674d
 8006728:	08006755 	.word	0x08006755
 800672c:	2300      	movs	r3, #0
 800672e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006732:	e18a      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006734:	2304      	movs	r3, #4
 8006736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800673a:	e186      	b.n	8006a4a <UART_SetConfig+0x7ae>
 800673c:	2308      	movs	r3, #8
 800673e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006742:	e182      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006744:	2310      	movs	r3, #16
 8006746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800674a:	e17e      	b.n	8006a4a <UART_SetConfig+0x7ae>
 800674c:	2320      	movs	r3, #32
 800674e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006752:	e17a      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006754:	2340      	movs	r3, #64	@ 0x40
 8006756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800675a:	e176      	b.n	8006a4a <UART_SetConfig+0x7ae>
 800675c:	2380      	movs	r3, #128	@ 0x80
 800675e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006762:	e172      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a5b      	ldr	r2, [pc, #364]	@ (80068d8 <UART_SetConfig+0x63c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d130      	bne.n	80067d0 <UART_SetConfig+0x534>
 800676e:	4b58      	ldr	r3, [pc, #352]	@ (80068d0 <UART_SetConfig+0x634>)
 8006770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006772:	f003 0307 	and.w	r3, r3, #7
 8006776:	2b05      	cmp	r3, #5
 8006778:	d826      	bhi.n	80067c8 <UART_SetConfig+0x52c>
 800677a:	a201      	add	r2, pc, #4	@ (adr r2, 8006780 <UART_SetConfig+0x4e4>)
 800677c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006780:	08006799 	.word	0x08006799
 8006784:	080067a1 	.word	0x080067a1
 8006788:	080067a9 	.word	0x080067a9
 800678c:	080067b1 	.word	0x080067b1
 8006790:	080067b9 	.word	0x080067b9
 8006794:	080067c1 	.word	0x080067c1
 8006798:	2300      	movs	r3, #0
 800679a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800679e:	e154      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80067a0:	2304      	movs	r3, #4
 80067a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067a6:	e150      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80067a8:	2308      	movs	r3, #8
 80067aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ae:	e14c      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80067b0:	2310      	movs	r3, #16
 80067b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067b6:	e148      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80067b8:	2320      	movs	r3, #32
 80067ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067be:	e144      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80067c0:	2340      	movs	r3, #64	@ 0x40
 80067c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067c6:	e140      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80067c8:	2380      	movs	r3, #128	@ 0x80
 80067ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ce:	e13c      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a41      	ldr	r2, [pc, #260]	@ (80068dc <UART_SetConfig+0x640>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	f040 8082 	bne.w	80068e0 <UART_SetConfig+0x644>
 80067dc:	4b3c      	ldr	r3, [pc, #240]	@ (80068d0 <UART_SetConfig+0x634>)
 80067de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067e4:	2b28      	cmp	r3, #40	@ 0x28
 80067e6:	d86d      	bhi.n	80068c4 <UART_SetConfig+0x628>
 80067e8:	a201      	add	r2, pc, #4	@ (adr r2, 80067f0 <UART_SetConfig+0x554>)
 80067ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ee:	bf00      	nop
 80067f0:	08006895 	.word	0x08006895
 80067f4:	080068c5 	.word	0x080068c5
 80067f8:	080068c5 	.word	0x080068c5
 80067fc:	080068c5 	.word	0x080068c5
 8006800:	080068c5 	.word	0x080068c5
 8006804:	080068c5 	.word	0x080068c5
 8006808:	080068c5 	.word	0x080068c5
 800680c:	080068c5 	.word	0x080068c5
 8006810:	0800689d 	.word	0x0800689d
 8006814:	080068c5 	.word	0x080068c5
 8006818:	080068c5 	.word	0x080068c5
 800681c:	080068c5 	.word	0x080068c5
 8006820:	080068c5 	.word	0x080068c5
 8006824:	080068c5 	.word	0x080068c5
 8006828:	080068c5 	.word	0x080068c5
 800682c:	080068c5 	.word	0x080068c5
 8006830:	080068a5 	.word	0x080068a5
 8006834:	080068c5 	.word	0x080068c5
 8006838:	080068c5 	.word	0x080068c5
 800683c:	080068c5 	.word	0x080068c5
 8006840:	080068c5 	.word	0x080068c5
 8006844:	080068c5 	.word	0x080068c5
 8006848:	080068c5 	.word	0x080068c5
 800684c:	080068c5 	.word	0x080068c5
 8006850:	080068ad 	.word	0x080068ad
 8006854:	080068c5 	.word	0x080068c5
 8006858:	080068c5 	.word	0x080068c5
 800685c:	080068c5 	.word	0x080068c5
 8006860:	080068c5 	.word	0x080068c5
 8006864:	080068c5 	.word	0x080068c5
 8006868:	080068c5 	.word	0x080068c5
 800686c:	080068c5 	.word	0x080068c5
 8006870:	080068b5 	.word	0x080068b5
 8006874:	080068c5 	.word	0x080068c5
 8006878:	080068c5 	.word	0x080068c5
 800687c:	080068c5 	.word	0x080068c5
 8006880:	080068c5 	.word	0x080068c5
 8006884:	080068c5 	.word	0x080068c5
 8006888:	080068c5 	.word	0x080068c5
 800688c:	080068c5 	.word	0x080068c5
 8006890:	080068bd 	.word	0x080068bd
 8006894:	2301      	movs	r3, #1
 8006896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800689a:	e0d6      	b.n	8006a4a <UART_SetConfig+0x7ae>
 800689c:	2304      	movs	r3, #4
 800689e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068a2:	e0d2      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80068a4:	2308      	movs	r3, #8
 80068a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068aa:	e0ce      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80068ac:	2310      	movs	r3, #16
 80068ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068b2:	e0ca      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80068b4:	2320      	movs	r3, #32
 80068b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ba:	e0c6      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80068bc:	2340      	movs	r3, #64	@ 0x40
 80068be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068c2:	e0c2      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80068c4:	2380      	movs	r3, #128	@ 0x80
 80068c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ca:	e0be      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80068cc:	40011400 	.word	0x40011400
 80068d0:	58024400 	.word	0x58024400
 80068d4:	40007800 	.word	0x40007800
 80068d8:	40007c00 	.word	0x40007c00
 80068dc:	40011800 	.word	0x40011800
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4aad      	ldr	r2, [pc, #692]	@ (8006b9c <UART_SetConfig+0x900>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d176      	bne.n	80069d8 <UART_SetConfig+0x73c>
 80068ea:	4bad      	ldr	r3, [pc, #692]	@ (8006ba0 <UART_SetConfig+0x904>)
 80068ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068f2:	2b28      	cmp	r3, #40	@ 0x28
 80068f4:	d86c      	bhi.n	80069d0 <UART_SetConfig+0x734>
 80068f6:	a201      	add	r2, pc, #4	@ (adr r2, 80068fc <UART_SetConfig+0x660>)
 80068f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fc:	080069a1 	.word	0x080069a1
 8006900:	080069d1 	.word	0x080069d1
 8006904:	080069d1 	.word	0x080069d1
 8006908:	080069d1 	.word	0x080069d1
 800690c:	080069d1 	.word	0x080069d1
 8006910:	080069d1 	.word	0x080069d1
 8006914:	080069d1 	.word	0x080069d1
 8006918:	080069d1 	.word	0x080069d1
 800691c:	080069a9 	.word	0x080069a9
 8006920:	080069d1 	.word	0x080069d1
 8006924:	080069d1 	.word	0x080069d1
 8006928:	080069d1 	.word	0x080069d1
 800692c:	080069d1 	.word	0x080069d1
 8006930:	080069d1 	.word	0x080069d1
 8006934:	080069d1 	.word	0x080069d1
 8006938:	080069d1 	.word	0x080069d1
 800693c:	080069b1 	.word	0x080069b1
 8006940:	080069d1 	.word	0x080069d1
 8006944:	080069d1 	.word	0x080069d1
 8006948:	080069d1 	.word	0x080069d1
 800694c:	080069d1 	.word	0x080069d1
 8006950:	080069d1 	.word	0x080069d1
 8006954:	080069d1 	.word	0x080069d1
 8006958:	080069d1 	.word	0x080069d1
 800695c:	080069b9 	.word	0x080069b9
 8006960:	080069d1 	.word	0x080069d1
 8006964:	080069d1 	.word	0x080069d1
 8006968:	080069d1 	.word	0x080069d1
 800696c:	080069d1 	.word	0x080069d1
 8006970:	080069d1 	.word	0x080069d1
 8006974:	080069d1 	.word	0x080069d1
 8006978:	080069d1 	.word	0x080069d1
 800697c:	080069c1 	.word	0x080069c1
 8006980:	080069d1 	.word	0x080069d1
 8006984:	080069d1 	.word	0x080069d1
 8006988:	080069d1 	.word	0x080069d1
 800698c:	080069d1 	.word	0x080069d1
 8006990:	080069d1 	.word	0x080069d1
 8006994:	080069d1 	.word	0x080069d1
 8006998:	080069d1 	.word	0x080069d1
 800699c:	080069c9 	.word	0x080069c9
 80069a0:	2301      	movs	r3, #1
 80069a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069a6:	e050      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80069a8:	2304      	movs	r3, #4
 80069aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ae:	e04c      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80069b0:	2308      	movs	r3, #8
 80069b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069b6:	e048      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80069b8:	2310      	movs	r3, #16
 80069ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069be:	e044      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80069c0:	2320      	movs	r3, #32
 80069c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069c6:	e040      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80069c8:	2340      	movs	r3, #64	@ 0x40
 80069ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ce:	e03c      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80069d0:	2380      	movs	r3, #128	@ 0x80
 80069d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069d6:	e038      	b.n	8006a4a <UART_SetConfig+0x7ae>
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a71      	ldr	r2, [pc, #452]	@ (8006ba4 <UART_SetConfig+0x908>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d130      	bne.n	8006a44 <UART_SetConfig+0x7a8>
 80069e2:	4b6f      	ldr	r3, [pc, #444]	@ (8006ba0 <UART_SetConfig+0x904>)
 80069e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069e6:	f003 0307 	and.w	r3, r3, #7
 80069ea:	2b05      	cmp	r3, #5
 80069ec:	d826      	bhi.n	8006a3c <UART_SetConfig+0x7a0>
 80069ee:	a201      	add	r2, pc, #4	@ (adr r2, 80069f4 <UART_SetConfig+0x758>)
 80069f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f4:	08006a0d 	.word	0x08006a0d
 80069f8:	08006a15 	.word	0x08006a15
 80069fc:	08006a1d 	.word	0x08006a1d
 8006a00:	08006a25 	.word	0x08006a25
 8006a04:	08006a2d 	.word	0x08006a2d
 8006a08:	08006a35 	.word	0x08006a35
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a12:	e01a      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006a14:	2304      	movs	r3, #4
 8006a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a1a:	e016      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006a1c:	2308      	movs	r3, #8
 8006a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a22:	e012      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006a24:	2310      	movs	r3, #16
 8006a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a2a:	e00e      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006a2c:	2320      	movs	r3, #32
 8006a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a32:	e00a      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006a34:	2340      	movs	r3, #64	@ 0x40
 8006a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a3a:	e006      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006a3c:	2380      	movs	r3, #128	@ 0x80
 8006a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a42:	e002      	b.n	8006a4a <UART_SetConfig+0x7ae>
 8006a44:	2380      	movs	r3, #128	@ 0x80
 8006a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a55      	ldr	r2, [pc, #340]	@ (8006ba4 <UART_SetConfig+0x908>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	f040 80f8 	bne.w	8006c46 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a56:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006a5a:	2b20      	cmp	r3, #32
 8006a5c:	dc46      	bgt.n	8006aec <UART_SetConfig+0x850>
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	db75      	blt.n	8006b4e <UART_SetConfig+0x8b2>
 8006a62:	3b02      	subs	r3, #2
 8006a64:	2b1e      	cmp	r3, #30
 8006a66:	d872      	bhi.n	8006b4e <UART_SetConfig+0x8b2>
 8006a68:	a201      	add	r2, pc, #4	@ (adr r2, 8006a70 <UART_SetConfig+0x7d4>)
 8006a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6e:	bf00      	nop
 8006a70:	08006af3 	.word	0x08006af3
 8006a74:	08006b4f 	.word	0x08006b4f
 8006a78:	08006afb 	.word	0x08006afb
 8006a7c:	08006b4f 	.word	0x08006b4f
 8006a80:	08006b4f 	.word	0x08006b4f
 8006a84:	08006b4f 	.word	0x08006b4f
 8006a88:	08006b0b 	.word	0x08006b0b
 8006a8c:	08006b4f 	.word	0x08006b4f
 8006a90:	08006b4f 	.word	0x08006b4f
 8006a94:	08006b4f 	.word	0x08006b4f
 8006a98:	08006b4f 	.word	0x08006b4f
 8006a9c:	08006b4f 	.word	0x08006b4f
 8006aa0:	08006b4f 	.word	0x08006b4f
 8006aa4:	08006b4f 	.word	0x08006b4f
 8006aa8:	08006b1b 	.word	0x08006b1b
 8006aac:	08006b4f 	.word	0x08006b4f
 8006ab0:	08006b4f 	.word	0x08006b4f
 8006ab4:	08006b4f 	.word	0x08006b4f
 8006ab8:	08006b4f 	.word	0x08006b4f
 8006abc:	08006b4f 	.word	0x08006b4f
 8006ac0:	08006b4f 	.word	0x08006b4f
 8006ac4:	08006b4f 	.word	0x08006b4f
 8006ac8:	08006b4f 	.word	0x08006b4f
 8006acc:	08006b4f 	.word	0x08006b4f
 8006ad0:	08006b4f 	.word	0x08006b4f
 8006ad4:	08006b4f 	.word	0x08006b4f
 8006ad8:	08006b4f 	.word	0x08006b4f
 8006adc:	08006b4f 	.word	0x08006b4f
 8006ae0:	08006b4f 	.word	0x08006b4f
 8006ae4:	08006b4f 	.word	0x08006b4f
 8006ae8:	08006b41 	.word	0x08006b41
 8006aec:	2b40      	cmp	r3, #64	@ 0x40
 8006aee:	d02a      	beq.n	8006b46 <UART_SetConfig+0x8aa>
 8006af0:	e02d      	b.n	8006b4e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006af2:	f7fe faf9 	bl	80050e8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006af6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006af8:	e02f      	b.n	8006b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006afa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fe fb08 	bl	8005114 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b08:	e027      	b.n	8006b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b0a:	f107 0318 	add.w	r3, r7, #24
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fe fc54 	bl	80053bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b18:	e01f      	b.n	8006b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b1a:	4b21      	ldr	r3, [pc, #132]	@ (8006ba0 <UART_SetConfig+0x904>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0320 	and.w	r3, r3, #32
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d009      	beq.n	8006b3a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b26:	4b1e      	ldr	r3, [pc, #120]	@ (8006ba0 <UART_SetConfig+0x904>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	08db      	lsrs	r3, r3, #3
 8006b2c:	f003 0303 	and.w	r3, r3, #3
 8006b30:	4a1d      	ldr	r2, [pc, #116]	@ (8006ba8 <UART_SetConfig+0x90c>)
 8006b32:	fa22 f303 	lsr.w	r3, r2, r3
 8006b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b38:	e00f      	b.n	8006b5a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ba8 <UART_SetConfig+0x90c>)
 8006b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b3e:	e00c      	b.n	8006b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b40:	4b1a      	ldr	r3, [pc, #104]	@ (8006bac <UART_SetConfig+0x910>)
 8006b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b44:	e009      	b.n	8006b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b4c:	e005      	b.n	8006b5a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006b58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 81ee 	beq.w	8006f3e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b66:	4a12      	ldr	r2, [pc, #72]	@ (8006bb0 <UART_SetConfig+0x914>)
 8006b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b70:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b74:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	005b      	lsls	r3, r3, #1
 8006b7e:	4413      	add	r3, r2
 8006b80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d305      	bcc.n	8006b92 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d910      	bls.n	8006bb4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006b98:	e1d1      	b.n	8006f3e <UART_SetConfig+0xca2>
 8006b9a:	bf00      	nop
 8006b9c:	40011c00 	.word	0x40011c00
 8006ba0:	58024400 	.word	0x58024400
 8006ba4:	58000c00 	.word	0x58000c00
 8006ba8:	03d09000 	.word	0x03d09000
 8006bac:	003d0900 	.word	0x003d0900
 8006bb0:	08007d08 	.word	0x08007d08
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	60bb      	str	r3, [r7, #8]
 8006bba:	60fa      	str	r2, [r7, #12]
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc0:	4ac0      	ldr	r2, [pc, #768]	@ (8006ec4 <UART_SetConfig+0xc28>)
 8006bc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	2200      	movs	r2, #0
 8006bca:	603b      	str	r3, [r7, #0]
 8006bcc:	607a      	str	r2, [r7, #4]
 8006bce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006bd6:	f7f9 fb99 	bl	800030c <__aeabi_uldivmod>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4610      	mov	r0, r2
 8006be0:	4619      	mov	r1, r3
 8006be2:	f04f 0200 	mov.w	r2, #0
 8006be6:	f04f 0300 	mov.w	r3, #0
 8006bea:	020b      	lsls	r3, r1, #8
 8006bec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006bf0:	0202      	lsls	r2, r0, #8
 8006bf2:	6979      	ldr	r1, [r7, #20]
 8006bf4:	6849      	ldr	r1, [r1, #4]
 8006bf6:	0849      	lsrs	r1, r1, #1
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	4605      	mov	r5, r0
 8006bfe:	eb12 0804 	adds.w	r8, r2, r4
 8006c02:	eb43 0905 	adc.w	r9, r3, r5
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	469a      	mov	sl, r3
 8006c0e:	4693      	mov	fp, r2
 8006c10:	4652      	mov	r2, sl
 8006c12:	465b      	mov	r3, fp
 8006c14:	4640      	mov	r0, r8
 8006c16:	4649      	mov	r1, r9
 8006c18:	f7f9 fb78 	bl	800030c <__aeabi_uldivmod>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	4613      	mov	r3, r2
 8006c22:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c2a:	d308      	bcc.n	8006c3e <UART_SetConfig+0x9a2>
 8006c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c32:	d204      	bcs.n	8006c3e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c3a:	60da      	str	r2, [r3, #12]
 8006c3c:	e17f      	b.n	8006f3e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006c44:	e17b      	b.n	8006f3e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c4e:	f040 80bd 	bne.w	8006dcc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006c52:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006c56:	2b20      	cmp	r3, #32
 8006c58:	dc48      	bgt.n	8006cec <UART_SetConfig+0xa50>
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	db7b      	blt.n	8006d56 <UART_SetConfig+0xaba>
 8006c5e:	2b20      	cmp	r3, #32
 8006c60:	d879      	bhi.n	8006d56 <UART_SetConfig+0xaba>
 8006c62:	a201      	add	r2, pc, #4	@ (adr r2, 8006c68 <UART_SetConfig+0x9cc>)
 8006c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c68:	08006cf3 	.word	0x08006cf3
 8006c6c:	08006cfb 	.word	0x08006cfb
 8006c70:	08006d57 	.word	0x08006d57
 8006c74:	08006d57 	.word	0x08006d57
 8006c78:	08006d03 	.word	0x08006d03
 8006c7c:	08006d57 	.word	0x08006d57
 8006c80:	08006d57 	.word	0x08006d57
 8006c84:	08006d57 	.word	0x08006d57
 8006c88:	08006d13 	.word	0x08006d13
 8006c8c:	08006d57 	.word	0x08006d57
 8006c90:	08006d57 	.word	0x08006d57
 8006c94:	08006d57 	.word	0x08006d57
 8006c98:	08006d57 	.word	0x08006d57
 8006c9c:	08006d57 	.word	0x08006d57
 8006ca0:	08006d57 	.word	0x08006d57
 8006ca4:	08006d57 	.word	0x08006d57
 8006ca8:	08006d23 	.word	0x08006d23
 8006cac:	08006d57 	.word	0x08006d57
 8006cb0:	08006d57 	.word	0x08006d57
 8006cb4:	08006d57 	.word	0x08006d57
 8006cb8:	08006d57 	.word	0x08006d57
 8006cbc:	08006d57 	.word	0x08006d57
 8006cc0:	08006d57 	.word	0x08006d57
 8006cc4:	08006d57 	.word	0x08006d57
 8006cc8:	08006d57 	.word	0x08006d57
 8006ccc:	08006d57 	.word	0x08006d57
 8006cd0:	08006d57 	.word	0x08006d57
 8006cd4:	08006d57 	.word	0x08006d57
 8006cd8:	08006d57 	.word	0x08006d57
 8006cdc:	08006d57 	.word	0x08006d57
 8006ce0:	08006d57 	.word	0x08006d57
 8006ce4:	08006d57 	.word	0x08006d57
 8006ce8:	08006d49 	.word	0x08006d49
 8006cec:	2b40      	cmp	r3, #64	@ 0x40
 8006cee:	d02e      	beq.n	8006d4e <UART_SetConfig+0xab2>
 8006cf0:	e031      	b.n	8006d56 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cf2:	f7fd f82d 	bl	8003d50 <HAL_RCC_GetPCLK1Freq>
 8006cf6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006cf8:	e033      	b.n	8006d62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cfa:	f7fd f83f 	bl	8003d7c <HAL_RCC_GetPCLK2Freq>
 8006cfe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d00:	e02f      	b.n	8006d62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fe fa04 	bl	8005114 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d10:	e027      	b.n	8006d62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d12:	f107 0318 	add.w	r3, r7, #24
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fe fb50 	bl	80053bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d20:	e01f      	b.n	8006d62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d22:	4b69      	ldr	r3, [pc, #420]	@ (8006ec8 <UART_SetConfig+0xc2c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0320 	and.w	r3, r3, #32
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d009      	beq.n	8006d42 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d2e:	4b66      	ldr	r3, [pc, #408]	@ (8006ec8 <UART_SetConfig+0xc2c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	08db      	lsrs	r3, r3, #3
 8006d34:	f003 0303 	and.w	r3, r3, #3
 8006d38:	4a64      	ldr	r2, [pc, #400]	@ (8006ecc <UART_SetConfig+0xc30>)
 8006d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d40:	e00f      	b.n	8006d62 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006d42:	4b62      	ldr	r3, [pc, #392]	@ (8006ecc <UART_SetConfig+0xc30>)
 8006d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d46:	e00c      	b.n	8006d62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d48:	4b61      	ldr	r3, [pc, #388]	@ (8006ed0 <UART_SetConfig+0xc34>)
 8006d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d4c:	e009      	b.n	8006d62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d54:	e005      	b.n	8006d62 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006d60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 80ea 	beq.w	8006f3e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6e:	4a55      	ldr	r2, [pc, #340]	@ (8006ec4 <UART_SetConfig+0xc28>)
 8006d70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d74:	461a      	mov	r2, r3
 8006d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d78:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d7c:	005a      	lsls	r2, r3, #1
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	085b      	lsrs	r3, r3, #1
 8006d84:	441a      	add	r2, r3
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d92:	2b0f      	cmp	r3, #15
 8006d94:	d916      	bls.n	8006dc4 <UART_SetConfig+0xb28>
 8006d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d9c:	d212      	bcs.n	8006dc4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	f023 030f 	bic.w	r3, r3, #15
 8006da6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006daa:	085b      	lsrs	r3, r3, #1
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	f003 0307 	and.w	r3, r3, #7
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006db6:	4313      	orrs	r3, r2
 8006db8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006dc0:	60da      	str	r2, [r3, #12]
 8006dc2:	e0bc      	b.n	8006f3e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006dca:	e0b8      	b.n	8006f3e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006dcc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006dd0:	2b20      	cmp	r3, #32
 8006dd2:	dc4b      	bgt.n	8006e6c <UART_SetConfig+0xbd0>
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f2c0 8087 	blt.w	8006ee8 <UART_SetConfig+0xc4c>
 8006dda:	2b20      	cmp	r3, #32
 8006ddc:	f200 8084 	bhi.w	8006ee8 <UART_SetConfig+0xc4c>
 8006de0:	a201      	add	r2, pc, #4	@ (adr r2, 8006de8 <UART_SetConfig+0xb4c>)
 8006de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de6:	bf00      	nop
 8006de8:	08006e73 	.word	0x08006e73
 8006dec:	08006e7b 	.word	0x08006e7b
 8006df0:	08006ee9 	.word	0x08006ee9
 8006df4:	08006ee9 	.word	0x08006ee9
 8006df8:	08006e83 	.word	0x08006e83
 8006dfc:	08006ee9 	.word	0x08006ee9
 8006e00:	08006ee9 	.word	0x08006ee9
 8006e04:	08006ee9 	.word	0x08006ee9
 8006e08:	08006e93 	.word	0x08006e93
 8006e0c:	08006ee9 	.word	0x08006ee9
 8006e10:	08006ee9 	.word	0x08006ee9
 8006e14:	08006ee9 	.word	0x08006ee9
 8006e18:	08006ee9 	.word	0x08006ee9
 8006e1c:	08006ee9 	.word	0x08006ee9
 8006e20:	08006ee9 	.word	0x08006ee9
 8006e24:	08006ee9 	.word	0x08006ee9
 8006e28:	08006ea3 	.word	0x08006ea3
 8006e2c:	08006ee9 	.word	0x08006ee9
 8006e30:	08006ee9 	.word	0x08006ee9
 8006e34:	08006ee9 	.word	0x08006ee9
 8006e38:	08006ee9 	.word	0x08006ee9
 8006e3c:	08006ee9 	.word	0x08006ee9
 8006e40:	08006ee9 	.word	0x08006ee9
 8006e44:	08006ee9 	.word	0x08006ee9
 8006e48:	08006ee9 	.word	0x08006ee9
 8006e4c:	08006ee9 	.word	0x08006ee9
 8006e50:	08006ee9 	.word	0x08006ee9
 8006e54:	08006ee9 	.word	0x08006ee9
 8006e58:	08006ee9 	.word	0x08006ee9
 8006e5c:	08006ee9 	.word	0x08006ee9
 8006e60:	08006ee9 	.word	0x08006ee9
 8006e64:	08006ee9 	.word	0x08006ee9
 8006e68:	08006edb 	.word	0x08006edb
 8006e6c:	2b40      	cmp	r3, #64	@ 0x40
 8006e6e:	d037      	beq.n	8006ee0 <UART_SetConfig+0xc44>
 8006e70:	e03a      	b.n	8006ee8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e72:	f7fc ff6d 	bl	8003d50 <HAL_RCC_GetPCLK1Freq>
 8006e76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e78:	e03c      	b.n	8006ef4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e7a:	f7fc ff7f 	bl	8003d7c <HAL_RCC_GetPCLK2Freq>
 8006e7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e80:	e038      	b.n	8006ef4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7fe f944 	bl	8005114 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e90:	e030      	b.n	8006ef4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e92:	f107 0318 	add.w	r3, r7, #24
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fe fa90 	bl	80053bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ea0:	e028      	b.n	8006ef4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ea2:	4b09      	ldr	r3, [pc, #36]	@ (8006ec8 <UART_SetConfig+0xc2c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0320 	and.w	r3, r3, #32
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d012      	beq.n	8006ed4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006eae:	4b06      	ldr	r3, [pc, #24]	@ (8006ec8 <UART_SetConfig+0xc2c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	08db      	lsrs	r3, r3, #3
 8006eb4:	f003 0303 	and.w	r3, r3, #3
 8006eb8:	4a04      	ldr	r2, [pc, #16]	@ (8006ecc <UART_SetConfig+0xc30>)
 8006eba:	fa22 f303 	lsr.w	r3, r2, r3
 8006ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ec0:	e018      	b.n	8006ef4 <UART_SetConfig+0xc58>
 8006ec2:	bf00      	nop
 8006ec4:	08007d08 	.word	0x08007d08
 8006ec8:	58024400 	.word	0x58024400
 8006ecc:	03d09000 	.word	0x03d09000
 8006ed0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006ed4:	4b24      	ldr	r3, [pc, #144]	@ (8006f68 <UART_SetConfig+0xccc>)
 8006ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ed8:	e00c      	b.n	8006ef4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006eda:	4b24      	ldr	r3, [pc, #144]	@ (8006f6c <UART_SetConfig+0xcd0>)
 8006edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ede:	e009      	b.n	8006ef4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ee0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ee6:	e005      	b.n	8006ef4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006ef2:	bf00      	nop
    }

    if (pclk != 0U)
 8006ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d021      	beq.n	8006f3e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efe:	4a1c      	ldr	r2, [pc, #112]	@ (8006f70 <UART_SetConfig+0xcd4>)
 8006f00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f04:	461a      	mov	r2, r3
 8006f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f08:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	085b      	lsrs	r3, r3, #1
 8006f12:	441a      	add	r2, r3
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f20:	2b0f      	cmp	r3, #15
 8006f22:	d909      	bls.n	8006f38 <UART_SetConfig+0xc9c>
 8006f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f2a:	d205      	bcs.n	8006f38 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	60da      	str	r2, [r3, #12]
 8006f36:	e002      	b.n	8006f3e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2200      	movs	r2, #0
 8006f52:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	2200      	movs	r2, #0
 8006f58:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006f5a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3748      	adds	r7, #72	@ 0x48
 8006f62:	46bd      	mov	sp, r7
 8006f64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f68:	03d09000 	.word	0x03d09000
 8006f6c:	003d0900 	.word	0x003d0900
 8006f70:	08007d08 	.word	0x08007d08

08006f74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f80:	f003 0308 	and.w	r3, r3, #8
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00a      	beq.n	8006f9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00a      	beq.n	8006fc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc4:	f003 0302 	and.w	r3, r3, #2
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00a      	beq.n	8006fe2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe6:	f003 0304 	and.w	r3, r3, #4
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00a      	beq.n	8007004 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	430a      	orrs	r2, r1
 8007002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007008:	f003 0310 	and.w	r3, r3, #16
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00a      	beq.n	8007026 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702a:	f003 0320 	and.w	r3, r3, #32
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800704c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007050:	2b00      	cmp	r3, #0
 8007052:	d01a      	beq.n	800708a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800706e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007072:	d10a      	bne.n	800708a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	430a      	orrs	r2, r1
 8007088:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800708e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00a      	beq.n	80070ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	430a      	orrs	r2, r1
 80070aa:	605a      	str	r2, [r3, #4]
  }
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b098      	sub	sp, #96	@ 0x60
 80070bc:	af02      	add	r7, sp, #8
 80070be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070c8:	f7fa f8e0 	bl	800128c <HAL_GetTick>
 80070cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0308 	and.w	r3, r3, #8
 80070d8:	2b08      	cmp	r3, #8
 80070da:	d12f      	bne.n	800713c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070e4:	2200      	movs	r2, #0
 80070e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f88e 	bl	800720c <UART_WaitOnFlagUntilTimeout>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d022      	beq.n	800713c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070fe:	e853 3f00 	ldrex	r3, [r3]
 8007102:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007106:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800710a:	653b      	str	r3, [r7, #80]	@ 0x50
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	461a      	mov	r2, r3
 8007112:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007114:	647b      	str	r3, [r7, #68]	@ 0x44
 8007116:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007118:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800711a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800711c:	e841 2300 	strex	r3, r2, [r1]
 8007120:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1e6      	bne.n	80070f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2220      	movs	r2, #32
 800712c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e063      	b.n	8007204 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0304 	and.w	r3, r3, #4
 8007146:	2b04      	cmp	r3, #4
 8007148:	d149      	bne.n	80071de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800714a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007152:	2200      	movs	r2, #0
 8007154:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f857 	bl	800720c <UART_WaitOnFlagUntilTimeout>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d03c      	beq.n	80071de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716c:	e853 3f00 	ldrex	r3, [r3]
 8007170:	623b      	str	r3, [r7, #32]
   return(result);
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007178:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	461a      	mov	r2, r3
 8007180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007182:	633b      	str	r3, [r7, #48]	@ 0x30
 8007184:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007186:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007188:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800718a:	e841 2300 	strex	r3, r2, [r1]
 800718e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1e6      	bne.n	8007164 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3308      	adds	r3, #8
 800719c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f023 0301 	bic.w	r3, r3, #1
 80071ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3308      	adds	r3, #8
 80071b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071b6:	61fa      	str	r2, [r7, #28]
 80071b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ba:	69b9      	ldr	r1, [r7, #24]
 80071bc:	69fa      	ldr	r2, [r7, #28]
 80071be:	e841 2300 	strex	r3, r2, [r1]
 80071c2:	617b      	str	r3, [r7, #20]
   return(result);
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1e5      	bne.n	8007196 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2220      	movs	r2, #32
 80071ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e012      	b.n	8007204 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2220      	movs	r2, #32
 80071ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3758      	adds	r7, #88	@ 0x58
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	603b      	str	r3, [r7, #0]
 8007218:	4613      	mov	r3, r2
 800721a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800721c:	e04f      	b.n	80072be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007224:	d04b      	beq.n	80072be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007226:	f7fa f831 	bl	800128c <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	69ba      	ldr	r2, [r7, #24]
 8007232:	429a      	cmp	r2, r3
 8007234:	d302      	bcc.n	800723c <UART_WaitOnFlagUntilTimeout+0x30>
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d101      	bne.n	8007240 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e04e      	b.n	80072de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0304 	and.w	r3, r3, #4
 800724a:	2b00      	cmp	r3, #0
 800724c:	d037      	beq.n	80072be <UART_WaitOnFlagUntilTimeout+0xb2>
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2b80      	cmp	r3, #128	@ 0x80
 8007252:	d034      	beq.n	80072be <UART_WaitOnFlagUntilTimeout+0xb2>
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2b40      	cmp	r3, #64	@ 0x40
 8007258:	d031      	beq.n	80072be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	69db      	ldr	r3, [r3, #28]
 8007260:	f003 0308 	and.w	r3, r3, #8
 8007264:	2b08      	cmp	r3, #8
 8007266:	d110      	bne.n	800728a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2208      	movs	r2, #8
 800726e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f000 f839 	bl	80072e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2208      	movs	r2, #8
 800727a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e029      	b.n	80072de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	69db      	ldr	r3, [r3, #28]
 8007290:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007294:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007298:	d111      	bne.n	80072be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 f81f 	bl	80072e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2220      	movs	r2, #32
 80072ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e00f      	b.n	80072de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69da      	ldr	r2, [r3, #28]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	4013      	ands	r3, r2
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	bf0c      	ite	eq
 80072ce:	2301      	moveq	r3, #1
 80072d0:	2300      	movne	r3, #0
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	461a      	mov	r2, r3
 80072d6:	79fb      	ldrb	r3, [r7, #7]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d0a0      	beq.n	800721e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b095      	sub	sp, #84	@ 0x54
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072f8:	e853 3f00 	ldrex	r3, [r3]
 80072fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007300:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007304:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	461a      	mov	r2, r3
 800730c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800730e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007310:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007312:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007314:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007316:	e841 2300 	strex	r3, r2, [r1]
 800731a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800731c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1e6      	bne.n	80072f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	3308      	adds	r3, #8
 8007328:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732a:	6a3b      	ldr	r3, [r7, #32]
 800732c:	e853 3f00 	ldrex	r3, [r3]
 8007330:	61fb      	str	r3, [r7, #28]
   return(result);
 8007332:	69fa      	ldr	r2, [r7, #28]
 8007334:	4b1e      	ldr	r3, [pc, #120]	@ (80073b0 <UART_EndRxTransfer+0xc8>)
 8007336:	4013      	ands	r3, r2
 8007338:	64bb      	str	r3, [r7, #72]	@ 0x48
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3308      	adds	r3, #8
 8007340:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007342:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007344:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007346:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007348:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800734a:	e841 2300 	strex	r3, r2, [r1]
 800734e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1e5      	bne.n	8007322 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800735a:	2b01      	cmp	r3, #1
 800735c:	d118      	bne.n	8007390 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	e853 3f00 	ldrex	r3, [r3]
 800736a:	60bb      	str	r3, [r7, #8]
   return(result);
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	f023 0310 	bic.w	r3, r3, #16
 8007372:	647b      	str	r3, [r7, #68]	@ 0x44
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	461a      	mov	r2, r3
 800737a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800737c:	61bb      	str	r3, [r7, #24]
 800737e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007380:	6979      	ldr	r1, [r7, #20]
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	e841 2300 	strex	r3, r2, [r1]
 8007388:	613b      	str	r3, [r7, #16]
   return(result);
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1e6      	bne.n	800735e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2220      	movs	r2, #32
 8007394:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80073a4:	bf00      	nop
 80073a6:	3754      	adds	r7, #84	@ 0x54
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	effffffe 	.word	0xeffffffe

080073b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f7fe ff4c 	bl	8006270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073d8:	bf00      	nop
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b088      	sub	sp, #32
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	e853 3f00 	ldrex	r3, [r3]
 80073f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073fc:	61fb      	str	r3, [r7, #28]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	61bb      	str	r3, [r7, #24]
 8007408:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740a:	6979      	ldr	r1, [r7, #20]
 800740c:	69ba      	ldr	r2, [r7, #24]
 800740e:	e841 2300 	strex	r3, r2, [r1]
 8007412:	613b      	str	r3, [r7, #16]
   return(result);
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1e6      	bne.n	80073e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2220      	movs	r2, #32
 800741e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7fe ff17 	bl	800625c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800742e:	bf00      	nop
 8007430:	3720      	adds	r7, #32
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007436:	b480      	push	{r7}
 8007438:	b083      	sub	sp, #12
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800743e:	bf00      	nop
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007452:	bf00      	nop
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800745e:	b480      	push	{r7}
 8007460:	b083      	sub	sp, #12
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007466:	bf00      	nop
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007472:	b480      	push	{r7}
 8007474:	b085      	sub	sp, #20
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007480:	2b01      	cmp	r3, #1
 8007482:	d101      	bne.n	8007488 <HAL_UARTEx_DisableFifoMode+0x16>
 8007484:	2302      	movs	r3, #2
 8007486:	e027      	b.n	80074d8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2224      	movs	r2, #36	@ 0x24
 8007494:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f022 0201 	bic.w	r2, r2, #1
 80074ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80074b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2220      	movs	r2, #32
 80074ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d101      	bne.n	80074fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074f8:	2302      	movs	r3, #2
 80074fa:	e02d      	b.n	8007558 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2224      	movs	r2, #36	@ 0x24
 8007508:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f022 0201 	bic.w	r2, r2, #1
 8007522:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	430a      	orrs	r2, r1
 8007536:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f84f 	bl	80075dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2220      	movs	r2, #32
 800754a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007570:	2b01      	cmp	r3, #1
 8007572:	d101      	bne.n	8007578 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007574:	2302      	movs	r3, #2
 8007576:	e02d      	b.n	80075d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2224      	movs	r2, #36	@ 0x24
 8007584:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f022 0201 	bic.w	r2, r2, #1
 800759e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	430a      	orrs	r2, r1
 80075b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f811 	bl	80075dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2220      	movs	r2, #32
 80075c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d108      	bne.n	80075fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075fc:	e031      	b.n	8007662 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075fe:	2310      	movs	r3, #16
 8007600:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007602:	2310      	movs	r3, #16
 8007604:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	0e5b      	lsrs	r3, r3, #25
 800760e:	b2db      	uxtb	r3, r3
 8007610:	f003 0307 	and.w	r3, r3, #7
 8007614:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	0f5b      	lsrs	r3, r3, #29
 800761e:	b2db      	uxtb	r3, r3
 8007620:	f003 0307 	and.w	r3, r3, #7
 8007624:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007626:	7bbb      	ldrb	r3, [r7, #14]
 8007628:	7b3a      	ldrb	r2, [r7, #12]
 800762a:	4911      	ldr	r1, [pc, #68]	@ (8007670 <UARTEx_SetNbDataToProcess+0x94>)
 800762c:	5c8a      	ldrb	r2, [r1, r2]
 800762e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007632:	7b3a      	ldrb	r2, [r7, #12]
 8007634:	490f      	ldr	r1, [pc, #60]	@ (8007674 <UARTEx_SetNbDataToProcess+0x98>)
 8007636:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007638:	fb93 f3f2 	sdiv	r3, r3, r2
 800763c:	b29a      	uxth	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007644:	7bfb      	ldrb	r3, [r7, #15]
 8007646:	7b7a      	ldrb	r2, [r7, #13]
 8007648:	4909      	ldr	r1, [pc, #36]	@ (8007670 <UARTEx_SetNbDataToProcess+0x94>)
 800764a:	5c8a      	ldrb	r2, [r1, r2]
 800764c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007650:	7b7a      	ldrb	r2, [r7, #13]
 8007652:	4908      	ldr	r1, [pc, #32]	@ (8007674 <UARTEx_SetNbDataToProcess+0x98>)
 8007654:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007656:	fb93 f3f2 	sdiv	r3, r3, r2
 800765a:	b29a      	uxth	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007662:	bf00      	nop
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	08007d20 	.word	0x08007d20
 8007674:	08007d28 	.word	0x08007d28

08007678 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007678:	b084      	sub	sp, #16
 800767a:	b580      	push	{r7, lr}
 800767c:	b084      	sub	sp, #16
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	f107 001c 	add.w	r0, r7, #28
 8007686:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800768a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800768e:	2b01      	cmp	r3, #1
 8007690:	d121      	bne.n	80076d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007696:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68da      	ldr	r2, [r3, #12]
 80076a2:	4b2c      	ldr	r3, [pc, #176]	@ (8007754 <USB_CoreInit+0xdc>)
 80076a4:	4013      	ands	r3, r2
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80076b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d105      	bne.n	80076ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 faaa 	bl	8007c24 <USB_CoreReset>
 80076d0:	4603      	mov	r3, r0
 80076d2:	73fb      	strb	r3, [r7, #15]
 80076d4:	e01b      	b.n	800770e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fa9e 	bl	8007c24 <USB_CoreReset>
 80076e8:	4603      	mov	r3, r0
 80076ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80076ec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d106      	bne.n	8007702 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8007700:	e005      	b.n	800770e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007706:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800770e:	7fbb      	ldrb	r3, [r7, #30]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d116      	bne.n	8007742 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007718:	b29a      	uxth	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007722:	4b0d      	ldr	r3, [pc, #52]	@ (8007758 <USB_CoreInit+0xe0>)
 8007724:	4313      	orrs	r3, r2
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f043 0206 	orr.w	r2, r3, #6
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f043 0220 	orr.w	r2, r3, #32
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007742:	7bfb      	ldrb	r3, [r7, #15]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800774e:	b004      	add	sp, #16
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	ffbdffbf 	.word	0xffbdffbf
 8007758:	03ee0000 	.word	0x03ee0000

0800775c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f023 0201 	bic.w	r2, r3, #1
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b084      	sub	sp, #16
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	460b      	mov	r3, r1
 8007788:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800778a:	2300      	movs	r3, #0
 800778c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800779a:	78fb      	ldrb	r3, [r7, #3]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d115      	bne.n	80077cc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80077ac:	200a      	movs	r0, #10
 80077ae:	f7f9 fd79 	bl	80012a4 <HAL_Delay>
      ms += 10U;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	330a      	adds	r3, #10
 80077b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fa25 	bl	8007c08 <USB_GetMode>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d01e      	beq.n	8007802 <USB_SetCurrentMode+0x84>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2bc7      	cmp	r3, #199	@ 0xc7
 80077c8:	d9f0      	bls.n	80077ac <USB_SetCurrentMode+0x2e>
 80077ca:	e01a      	b.n	8007802 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80077cc:	78fb      	ldrb	r3, [r7, #3]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d115      	bne.n	80077fe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80077de:	200a      	movs	r0, #10
 80077e0:	f7f9 fd60 	bl	80012a4 <HAL_Delay>
      ms += 10U;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	330a      	adds	r3, #10
 80077e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fa0c 	bl	8007c08 <USB_GetMode>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d005      	beq.n	8007802 <USB_SetCurrentMode+0x84>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2bc7      	cmp	r3, #199	@ 0xc7
 80077fa:	d9f0      	bls.n	80077de <USB_SetCurrentMode+0x60>
 80077fc:	e001      	b.n	8007802 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e005      	b.n	800780e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2bc8      	cmp	r3, #200	@ 0xc8
 8007806:	d101      	bne.n	800780c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e000      	b.n	800780e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
	...

08007818 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007818:	b084      	sub	sp, #16
 800781a:	b580      	push	{r7, lr}
 800781c:	b086      	sub	sp, #24
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007826:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007832:	2300      	movs	r3, #0
 8007834:	613b      	str	r3, [r7, #16]
 8007836:	e009      	b.n	800784c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	3340      	adds	r3, #64	@ 0x40
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	2200      	movs	r2, #0
 8007844:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	3301      	adds	r3, #1
 800784a:	613b      	str	r3, [r7, #16]
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	2b0e      	cmp	r3, #14
 8007850:	d9f2      	bls.n	8007838 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007852:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007856:	2b00      	cmp	r3, #0
 8007858:	d11c      	bne.n	8007894 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007868:	f043 0302 	orr.w	r3, r3, #2
 800786c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007872:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	601a      	str	r2, [r3, #0]
 8007892:	e005      	b.n	80078a0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007898:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80078a6:	461a      	mov	r2, r3
 80078a8:	2300      	movs	r3, #0
 80078aa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078ac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d10d      	bne.n	80078d0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80078b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d104      	bne.n	80078c6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80078bc:	2100      	movs	r1, #0
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f968 	bl	8007b94 <USB_SetDevSpeed>
 80078c4:	e008      	b.n	80078d8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80078c6:	2101      	movs	r1, #1
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f963 	bl	8007b94 <USB_SetDevSpeed>
 80078ce:	e003      	b.n	80078d8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80078d0:	2103      	movs	r1, #3
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f95e 	bl	8007b94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078d8:	2110      	movs	r1, #16
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f8fa 	bl	8007ad4 <USB_FlushTxFifo>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f924 	bl	8007b38 <USB_FlushRxFifo>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007900:	461a      	mov	r2, r3
 8007902:	2300      	movs	r3, #0
 8007904:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800790c:	461a      	mov	r2, r3
 800790e:	2300      	movs	r3, #0
 8007910:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007918:	461a      	mov	r2, r3
 800791a:	2300      	movs	r3, #0
 800791c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800791e:	2300      	movs	r3, #0
 8007920:	613b      	str	r3, [r7, #16]
 8007922:	e043      	b.n	80079ac <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	4413      	add	r3, r2
 800792c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007936:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800793a:	d118      	bne.n	800796e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10a      	bne.n	8007958 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	015a      	lsls	r2, r3, #5
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	4413      	add	r3, r2
 800794a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800794e:	461a      	mov	r2, r3
 8007950:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007954:	6013      	str	r3, [r2, #0]
 8007956:	e013      	b.n	8007980 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	4413      	add	r3, r2
 8007960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007964:	461a      	mov	r2, r3
 8007966:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800796a:	6013      	str	r3, [r2, #0]
 800796c:	e008      	b.n	8007980 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	4413      	add	r3, r2
 8007976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800797a:	461a      	mov	r2, r3
 800797c:	2300      	movs	r3, #0
 800797e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4413      	add	r3, r2
 8007988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800798c:	461a      	mov	r2, r3
 800798e:	2300      	movs	r3, #0
 8007990:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	015a      	lsls	r2, r3, #5
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	4413      	add	r3, r2
 800799a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800799e:	461a      	mov	r2, r3
 80079a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80079a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	3301      	adds	r3, #1
 80079aa:	613b      	str	r3, [r7, #16]
 80079ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80079b0:	461a      	mov	r2, r3
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d3b5      	bcc.n	8007924 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079b8:	2300      	movs	r3, #0
 80079ba:	613b      	str	r3, [r7, #16]
 80079bc:	e043      	b.n	8007a46 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	015a      	lsls	r2, r3, #5
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	4413      	add	r3, r2
 80079c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079d4:	d118      	bne.n	8007a08 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10a      	bne.n	80079f2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079e8:	461a      	mov	r2, r3
 80079ea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80079ee:	6013      	str	r3, [r2, #0]
 80079f0:	e013      	b.n	8007a1a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	015a      	lsls	r2, r3, #5
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	4413      	add	r3, r2
 80079fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079fe:	461a      	mov	r2, r3
 8007a00:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007a04:	6013      	str	r3, [r2, #0]
 8007a06:	e008      	b.n	8007a1a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a14:	461a      	mov	r2, r3
 8007a16:	2300      	movs	r3, #0
 8007a18:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a26:	461a      	mov	r2, r3
 8007a28:	2300      	movs	r3, #0
 8007a2a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a38:	461a      	mov	r2, r3
 8007a3a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	3301      	adds	r3, #1
 8007a44:	613b      	str	r3, [r7, #16]
 8007a46:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d3b5      	bcc.n	80079be <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a64:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007a72:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d105      	bne.n	8007a88 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	f043 0210 	orr.w	r2, r3, #16
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	699a      	ldr	r2, [r3, #24]
 8007a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8007acc <USB_DevInit+0x2b4>)
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a94:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d005      	beq.n	8007aa8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	f043 0208 	orr.w	r2, r3, #8
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007aa8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d105      	bne.n	8007abc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	699a      	ldr	r2, [r3, #24]
 8007ab4:	4b06      	ldr	r3, [pc, #24]	@ (8007ad0 <USB_DevInit+0x2b8>)
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ac8:	b004      	add	sp, #16
 8007aca:	4770      	bx	lr
 8007acc:	803c3800 	.word	0x803c3800
 8007ad0:	40000004 	.word	0x40000004

08007ad4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007aee:	d901      	bls.n	8007af4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007af0:	2303      	movs	r3, #3
 8007af2:	e01b      	b.n	8007b2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	daf2      	bge.n	8007ae2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007afc:	2300      	movs	r3, #0
 8007afe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	019b      	lsls	r3, r3, #6
 8007b04:	f043 0220 	orr.w	r2, r3, #32
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b18:	d901      	bls.n	8007b1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e006      	b.n	8007b2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	f003 0320 	and.w	r3, r3, #32
 8007b26:	2b20      	cmp	r3, #32
 8007b28:	d0f0      	beq.n	8007b0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3714      	adds	r7, #20
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b40:	2300      	movs	r3, #0
 8007b42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3301      	adds	r3, #1
 8007b48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b50:	d901      	bls.n	8007b56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007b52:	2303      	movs	r3, #3
 8007b54:	e018      	b.n	8007b88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	daf2      	bge.n	8007b44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2210      	movs	r2, #16
 8007b66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b74:	d901      	bls.n	8007b7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e006      	b.n	8007b88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	f003 0310 	and.w	r3, r3, #16
 8007b82:	2b10      	cmp	r3, #16
 8007b84:	d0f0      	beq.n	8007b68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	78fb      	ldrb	r3, [r7, #3]
 8007bae:	68f9      	ldr	r1, [r7, #12]
 8007bb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b085      	sub	sp, #20
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007be0:	f023 0303 	bic.w	r3, r3, #3
 8007be4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007bf4:	f043 0302 	orr.w	r3, r3, #2
 8007bf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	695b      	ldr	r3, [r3, #20]
 8007c14:	f003 0301 	and.w	r3, r3, #1
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	3301      	adds	r3, #1
 8007c34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c3c:	d901      	bls.n	8007c42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e01b      	b.n	8007c7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	daf2      	bge.n	8007c30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	f043 0201 	orr.w	r2, r3, #1
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c66:	d901      	bls.n	8007c6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e006      	b.n	8007c7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d0f0      	beq.n	8007c5a <USB_CoreReset+0x36>

  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <memset>:
 8007c86:	4402      	add	r2, r0
 8007c88:	4603      	mov	r3, r0
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d100      	bne.n	8007c90 <memset+0xa>
 8007c8e:	4770      	bx	lr
 8007c90:	f803 1b01 	strb.w	r1, [r3], #1
 8007c94:	e7f9      	b.n	8007c8a <memset+0x4>
	...

08007c98 <__libc_init_array>:
 8007c98:	b570      	push	{r4, r5, r6, lr}
 8007c9a:	4d0d      	ldr	r5, [pc, #52]	@ (8007cd0 <__libc_init_array+0x38>)
 8007c9c:	4c0d      	ldr	r4, [pc, #52]	@ (8007cd4 <__libc_init_array+0x3c>)
 8007c9e:	1b64      	subs	r4, r4, r5
 8007ca0:	10a4      	asrs	r4, r4, #2
 8007ca2:	2600      	movs	r6, #0
 8007ca4:	42a6      	cmp	r6, r4
 8007ca6:	d109      	bne.n	8007cbc <__libc_init_array+0x24>
 8007ca8:	4d0b      	ldr	r5, [pc, #44]	@ (8007cd8 <__libc_init_array+0x40>)
 8007caa:	4c0c      	ldr	r4, [pc, #48]	@ (8007cdc <__libc_init_array+0x44>)
 8007cac:	f000 f818 	bl	8007ce0 <_init>
 8007cb0:	1b64      	subs	r4, r4, r5
 8007cb2:	10a4      	asrs	r4, r4, #2
 8007cb4:	2600      	movs	r6, #0
 8007cb6:	42a6      	cmp	r6, r4
 8007cb8:	d105      	bne.n	8007cc6 <__libc_init_array+0x2e>
 8007cba:	bd70      	pop	{r4, r5, r6, pc}
 8007cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cc0:	4798      	blx	r3
 8007cc2:	3601      	adds	r6, #1
 8007cc4:	e7ee      	b.n	8007ca4 <__libc_init_array+0xc>
 8007cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cca:	4798      	blx	r3
 8007ccc:	3601      	adds	r6, #1
 8007cce:	e7f2      	b.n	8007cb6 <__libc_init_array+0x1e>
 8007cd0:	08007d38 	.word	0x08007d38
 8007cd4:	08007d38 	.word	0x08007d38
 8007cd8:	08007d38 	.word	0x08007d38
 8007cdc:	08007d3c 	.word	0x08007d3c

08007ce0 <_init>:
 8007ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce2:	bf00      	nop
 8007ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ce6:	bc08      	pop	{r3}
 8007ce8:	469e      	mov	lr, r3
 8007cea:	4770      	bx	lr

08007cec <_fini>:
 8007cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cee:	bf00      	nop
 8007cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cf2:	bc08      	pop	{r3}
 8007cf4:	469e      	mov	lr, r3
 8007cf6:	4770      	bx	lr
