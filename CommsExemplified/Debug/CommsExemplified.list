
CommsExemplified.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e6c  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006138  08006138  00007138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006180  08006180  00007180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006188  08006188  00007188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800618c  0800618c  0000718c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  08006190  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000014  080061a4  00008014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000074  08006204  00008074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  240000d4  08006264  000080d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240003a0  08006264  000083a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000080d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001349e  00000000  00000000  00008102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002001  00000000  00000000  0001b5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  0001d5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000096f  00000000  00000000  0001e1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032174  00000000  00000000  0001eb47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010058  00000000  00000000  00050cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014539b  00000000  00000000  00060d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a60ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032e0  00000000  00000000  001a60f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001a93d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d4 	.word	0x240000d4
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08006120 	.word	0x08006120

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d8 	.word	0x240000d8
 8000308:	08006120 	.word	0x08006120

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <__aeabi_uldivmod>:
 800031c:	b953      	cbnz	r3, 8000334 <__aeabi_uldivmod+0x18>
 800031e:	b94a      	cbnz	r2, 8000334 <__aeabi_uldivmod+0x18>
 8000320:	2900      	cmp	r1, #0
 8000322:	bf08      	it	eq
 8000324:	2800      	cmpeq	r0, #0
 8000326:	bf1c      	itt	ne
 8000328:	f04f 31ff 	movne.w	r1, #4294967295
 800032c:	f04f 30ff 	movne.w	r0, #4294967295
 8000330:	f000 b96a 	b.w	8000608 <__aeabi_idiv0>
 8000334:	f1ad 0c08 	sub.w	ip, sp, #8
 8000338:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033c:	f000 f806 	bl	800034c <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4770      	bx	lr

0800034c <__udivmoddi4>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	9d08      	ldr	r5, [sp, #32]
 8000352:	460c      	mov	r4, r1
 8000354:	2b00      	cmp	r3, #0
 8000356:	d14e      	bne.n	80003f6 <__udivmoddi4+0xaa>
 8000358:	4694      	mov	ip, r2
 800035a:	458c      	cmp	ip, r1
 800035c:	4686      	mov	lr, r0
 800035e:	fab2 f282 	clz	r2, r2
 8000362:	d962      	bls.n	800042a <__udivmoddi4+0xde>
 8000364:	b14a      	cbz	r2, 800037a <__udivmoddi4+0x2e>
 8000366:	f1c2 0320 	rsb	r3, r2, #32
 800036a:	4091      	lsls	r1, r2
 800036c:	fa20 f303 	lsr.w	r3, r0, r3
 8000370:	fa0c fc02 	lsl.w	ip, ip, r2
 8000374:	4319      	orrs	r1, r3
 8000376:	fa00 fe02 	lsl.w	lr, r0, r2
 800037a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800037e:	fa1f f68c 	uxth.w	r6, ip
 8000382:	fbb1 f4f7 	udiv	r4, r1, r7
 8000386:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038a:	fb07 1114 	mls	r1, r7, r4, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb04 f106 	mul.w	r1, r4, r6
 8000396:	4299      	cmp	r1, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x64>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f104 30ff 	add.w	r0, r4, #4294967295
 80003a2:	f080 8112 	bcs.w	80005ca <__udivmoddi4+0x27e>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 810f 	bls.w	80005ca <__udivmoddi4+0x27e>
 80003ac:	3c02      	subs	r4, #2
 80003ae:	4463      	add	r3, ip
 80003b0:	1a59      	subs	r1, r3, r1
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ba:	fb07 1110 	mls	r1, r7, r0, r1
 80003be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c2:	fb00 f606 	mul.w	r6, r0, r6
 80003c6:	429e      	cmp	r6, r3
 80003c8:	d90a      	bls.n	80003e0 <__udivmoddi4+0x94>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d2:	f080 80fc 	bcs.w	80005ce <__udivmoddi4+0x282>
 80003d6:	429e      	cmp	r6, r3
 80003d8:	f240 80f9 	bls.w	80005ce <__udivmoddi4+0x282>
 80003dc:	4463      	add	r3, ip
 80003de:	3802      	subs	r0, #2
 80003e0:	1b9b      	subs	r3, r3, r6
 80003e2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003e6:	2100      	movs	r1, #0
 80003e8:	b11d      	cbz	r5, 80003f2 <__udivmoddi4+0xa6>
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	2200      	movs	r2, #0
 80003ee:	e9c5 3200 	strd	r3, r2, [r5]
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d905      	bls.n	8000406 <__udivmoddi4+0xba>
 80003fa:	b10d      	cbz	r5, 8000400 <__udivmoddi4+0xb4>
 80003fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	4608      	mov	r0, r1
 8000404:	e7f5      	b.n	80003f2 <__udivmoddi4+0xa6>
 8000406:	fab3 f183 	clz	r1, r3
 800040a:	2900      	cmp	r1, #0
 800040c:	d146      	bne.n	800049c <__udivmoddi4+0x150>
 800040e:	42a3      	cmp	r3, r4
 8000410:	d302      	bcc.n	8000418 <__udivmoddi4+0xcc>
 8000412:	4290      	cmp	r0, r2
 8000414:	f0c0 80f0 	bcc.w	80005f8 <__udivmoddi4+0x2ac>
 8000418:	1a86      	subs	r6, r0, r2
 800041a:	eb64 0303 	sbc.w	r3, r4, r3
 800041e:	2001      	movs	r0, #1
 8000420:	2d00      	cmp	r5, #0
 8000422:	d0e6      	beq.n	80003f2 <__udivmoddi4+0xa6>
 8000424:	e9c5 6300 	strd	r6, r3, [r5]
 8000428:	e7e3      	b.n	80003f2 <__udivmoddi4+0xa6>
 800042a:	2a00      	cmp	r2, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x204>
 8000430:	eba1 040c 	sub.w	r4, r1, ip
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	2101      	movs	r1, #1
 800043e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000442:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000446:	fb08 4416 	mls	r4, r8, r6, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb07 f006 	mul.w	r0, r7, r6
 8000452:	4298      	cmp	r0, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x11c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f106 34ff 	add.w	r4, r6, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x11a>
 8000460:	4298      	cmp	r0, r3
 8000462:	f200 80cd 	bhi.w	8000600 <__udivmoddi4+0x2b4>
 8000466:	4626      	mov	r6, r4
 8000468:	1a1c      	subs	r4, r3, r0
 800046a:	fa1f f38e 	uxth.w	r3, lr
 800046e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000472:	fb08 4410 	mls	r4, r8, r0, r4
 8000476:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800047a:	fb00 f707 	mul.w	r7, r0, r7
 800047e:	429f      	cmp	r7, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x148>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 34ff 	add.w	r4, r0, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0x146>
 800048c:	429f      	cmp	r7, r3
 800048e:	f200 80b0 	bhi.w	80005f2 <__udivmoddi4+0x2a6>
 8000492:	4620      	mov	r0, r4
 8000494:	1bdb      	subs	r3, r3, r7
 8000496:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800049a:	e7a5      	b.n	80003e8 <__udivmoddi4+0x9c>
 800049c:	f1c1 0620 	rsb	r6, r1, #32
 80004a0:	408b      	lsls	r3, r1
 80004a2:	fa22 f706 	lsr.w	r7, r2, r6
 80004a6:	431f      	orrs	r7, r3
 80004a8:	fa20 fc06 	lsr.w	ip, r0, r6
 80004ac:	fa04 f301 	lsl.w	r3, r4, r1
 80004b0:	ea43 030c 	orr.w	r3, r3, ip
 80004b4:	40f4      	lsrs	r4, r6
 80004b6:	fa00 f801 	lsl.w	r8, r0, r1
 80004ba:	0c38      	lsrs	r0, r7, #16
 80004bc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004c0:	fbb4 fef0 	udiv	lr, r4, r0
 80004c4:	fa1f fc87 	uxth.w	ip, r7
 80004c8:	fb00 441e 	mls	r4, r0, lr, r4
 80004cc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d0:	fb0e f90c 	mul.w	r9, lr, ip
 80004d4:	45a1      	cmp	r9, r4
 80004d6:	fa02 f201 	lsl.w	r2, r2, r1
 80004da:	d90a      	bls.n	80004f2 <__udivmoddi4+0x1a6>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004e2:	f080 8084 	bcs.w	80005ee <__udivmoddi4+0x2a2>
 80004e6:	45a1      	cmp	r9, r4
 80004e8:	f240 8081 	bls.w	80005ee <__udivmoddi4+0x2a2>
 80004ec:	f1ae 0e02 	sub.w	lr, lr, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	eba4 0409 	sub.w	r4, r4, r9
 80004f6:	fa1f f983 	uxth.w	r9, r3
 80004fa:	fbb4 f3f0 	udiv	r3, r4, r0
 80004fe:	fb00 4413 	mls	r4, r0, r3, r4
 8000502:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000506:	fb03 fc0c 	mul.w	ip, r3, ip
 800050a:	45a4      	cmp	ip, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x1d2>
 800050e:	193c      	adds	r4, r7, r4
 8000510:	f103 30ff 	add.w	r0, r3, #4294967295
 8000514:	d267      	bcs.n	80005e6 <__udivmoddi4+0x29a>
 8000516:	45a4      	cmp	ip, r4
 8000518:	d965      	bls.n	80005e6 <__udivmoddi4+0x29a>
 800051a:	3b02      	subs	r3, #2
 800051c:	443c      	add	r4, r7
 800051e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000522:	fba0 9302 	umull	r9, r3, r0, r2
 8000526:	eba4 040c 	sub.w	r4, r4, ip
 800052a:	429c      	cmp	r4, r3
 800052c:	46ce      	mov	lr, r9
 800052e:	469c      	mov	ip, r3
 8000530:	d351      	bcc.n	80005d6 <__udivmoddi4+0x28a>
 8000532:	d04e      	beq.n	80005d2 <__udivmoddi4+0x286>
 8000534:	b155      	cbz	r5, 800054c <__udivmoddi4+0x200>
 8000536:	ebb8 030e 	subs.w	r3, r8, lr
 800053a:	eb64 040c 	sbc.w	r4, r4, ip
 800053e:	fa04 f606 	lsl.w	r6, r4, r6
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431e      	orrs	r6, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	e9c5 6400 	strd	r6, r4, [r5]
 800054c:	2100      	movs	r1, #0
 800054e:	e750      	b.n	80003f2 <__udivmoddi4+0xa6>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f103 	lsr.w	r1, r0, r3
 8000558:	fa0c fc02 	lsl.w	ip, ip, r2
 800055c:	fa24 f303 	lsr.w	r3, r4, r3
 8000560:	4094      	lsls	r4, r2
 8000562:	430c      	orrs	r4, r1
 8000564:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000568:	fa00 fe02 	lsl.w	lr, r0, r2
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	fbb3 f0f8 	udiv	r0, r3, r8
 8000574:	fb08 3110 	mls	r1, r8, r0, r3
 8000578:	0c23      	lsrs	r3, r4, #16
 800057a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800057e:	fb00 f107 	mul.w	r1, r0, r7
 8000582:	4299      	cmp	r1, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x24c>
 8000586:	eb1c 0303 	adds.w	r3, ip, r3
 800058a:	f100 36ff 	add.w	r6, r0, #4294967295
 800058e:	d22c      	bcs.n	80005ea <__udivmoddi4+0x29e>
 8000590:	4299      	cmp	r1, r3
 8000592:	d92a      	bls.n	80005ea <__udivmoddi4+0x29e>
 8000594:	3802      	subs	r0, #2
 8000596:	4463      	add	r3, ip
 8000598:	1a5b      	subs	r3, r3, r1
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb3 f1f8 	udiv	r1, r3, r8
 80005a0:	fb08 3311 	mls	r3, r8, r1, r3
 80005a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005a8:	fb01 f307 	mul.w	r3, r1, r7
 80005ac:	42a3      	cmp	r3, r4
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x276>
 80005b0:	eb1c 0404 	adds.w	r4, ip, r4
 80005b4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005b8:	d213      	bcs.n	80005e2 <__udivmoddi4+0x296>
 80005ba:	42a3      	cmp	r3, r4
 80005bc:	d911      	bls.n	80005e2 <__udivmoddi4+0x296>
 80005be:	3902      	subs	r1, #2
 80005c0:	4464      	add	r4, ip
 80005c2:	1ae4      	subs	r4, r4, r3
 80005c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005c8:	e739      	b.n	800043e <__udivmoddi4+0xf2>
 80005ca:	4604      	mov	r4, r0
 80005cc:	e6f0      	b.n	80003b0 <__udivmoddi4+0x64>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e706      	b.n	80003e0 <__udivmoddi4+0x94>
 80005d2:	45c8      	cmp	r8, r9
 80005d4:	d2ae      	bcs.n	8000534 <__udivmoddi4+0x1e8>
 80005d6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005da:	eb63 0c07 	sbc.w	ip, r3, r7
 80005de:	3801      	subs	r0, #1
 80005e0:	e7a8      	b.n	8000534 <__udivmoddi4+0x1e8>
 80005e2:	4631      	mov	r1, r6
 80005e4:	e7ed      	b.n	80005c2 <__udivmoddi4+0x276>
 80005e6:	4603      	mov	r3, r0
 80005e8:	e799      	b.n	800051e <__udivmoddi4+0x1d2>
 80005ea:	4630      	mov	r0, r6
 80005ec:	e7d4      	b.n	8000598 <__udivmoddi4+0x24c>
 80005ee:	46d6      	mov	lr, sl
 80005f0:	e77f      	b.n	80004f2 <__udivmoddi4+0x1a6>
 80005f2:	4463      	add	r3, ip
 80005f4:	3802      	subs	r0, #2
 80005f6:	e74d      	b.n	8000494 <__udivmoddi4+0x148>
 80005f8:	4606      	mov	r6, r0
 80005fa:	4623      	mov	r3, r4
 80005fc:	4608      	mov	r0, r1
 80005fe:	e70f      	b.n	8000420 <__udivmoddi4+0xd4>
 8000600:	3e02      	subs	r6, #2
 8000602:	4463      	add	r3, ip
 8000604:	e730      	b.n	8000468 <__udivmoddi4+0x11c>
 8000606:	bf00      	nop

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b598      	push	{r3, r4, r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000610:	f000 fde6 	bl	80011e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f82a 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f000 f9d0 	bl	80009bc <MX_GPIO_Init>
  MX_ETH_Init();
 800061c:	f000 f896 	bl	800074c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000620:	f000 f978 	bl	8000914 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000624:	f000 f9c2 	bl	80009ac <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 8000628:	f000 f8dc 	bl	80007e4 <MX_UART4_Init>
  MX_UART5_Init();
 800062c:	f000 f926 	bl	800087c <MX_UART5_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(1000);  // Delay to allow system to stabilize
 8000630:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000634:	f000 fe66 	bl	8001304 <HAL_Delay>

	  HAL_UART_Transmit(&huart4, (uint8_t*)message, strlen(message), 1000);
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <main+0x58>)
 800063a:	681c      	ldr	r4, [r3, #0]
 800063c:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <main+0x58>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fe63 	bl	800030c <strlen>
 8000646:	4603      	mov	r3, r0
 8000648:	b29a      	uxth	r2, r3
 800064a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800064e:	4621      	mov	r1, r4
 8000650:	4805      	ldr	r0, [pc, #20]	@ (8000668 <main+0x5c>)
 8000652:	f004 fb1b 	bl	8004c8c <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000656:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800065a:	f000 fe53 	bl	8001304 <HAL_Delay>
	  HAL_Delay(1000);  // Delay to allow system to stabilize
 800065e:	bf00      	nop
 8000660:	e7e6      	b.n	8000630 <main+0x24>
 8000662:	bf00      	nop
 8000664:	24000000 	.word	0x24000000
 8000668:	240001d8 	.word	0x240001d8

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b09c      	sub	sp, #112	@ 0x70
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000676:	224c      	movs	r2, #76	@ 0x4c
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f005 fd24 	bl	80060c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2220      	movs	r2, #32
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f005 fd1e 	bl	80060c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800068c:	2002      	movs	r0, #2
 800068e:	f001 fd4b 	bl	8002128 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000692:	2300      	movs	r3, #0
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	4b2c      	ldr	r3, [pc, #176]	@ (8000748 <SystemClock_Config+0xdc>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	4a2b      	ldr	r2, [pc, #172]	@ (8000748 <SystemClock_Config+0xdc>)
 800069c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006a0:	6193      	str	r3, [r2, #24]
 80006a2:	4b29      	ldr	r3, [pc, #164]	@ (8000748 <SystemClock_Config+0xdc>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ae:	bf00      	nop
 80006b0:	4b25      	ldr	r3, [pc, #148]	@ (8000748 <SystemClock_Config+0xdc>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006bc:	d1f8      	bne.n	80006b0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006be:	2321      	movs	r3, #33	@ 0x21
 80006c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80006d8:	f240 1313 	movw	r3, #275	@ 0x113
 80006dc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006de:	2301      	movs	r3, #1
 80006e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e2:	2304      	movs	r3, #4
 80006e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80006ea:	2304      	movs	r3, #4
 80006ec:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 fd4e 	bl	800219c <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000706:	f000 fa55 	bl	8000bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	233f      	movs	r3, #63	@ 0x3f
 800070c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2303      	movs	r3, #3
 8000710:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000716:	2308      	movs	r3, #8
 8000718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800071a:	2340      	movs	r3, #64	@ 0x40
 800071c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800071e:	2340      	movs	r3, #64	@ 0x40
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000722:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000726:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000728:	2340      	movs	r3, #64	@ 0x40
 800072a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2103      	movs	r1, #3
 8000730:	4618      	mov	r0, r3
 8000732:	f002 f90d 	bl	8002950 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800073c:	f000 fa3a 	bl	8000bb4 <Error_Handler>
  }
}
 8000740:	bf00      	nop
 8000742:	3770      	adds	r7, #112	@ 0x70
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	58024800 	.word	0x58024800

0800074c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000750:	4b1e      	ldr	r3, [pc, #120]	@ (80007cc <MX_ETH_Init+0x80>)
 8000752:	4a1f      	ldr	r2, [pc, #124]	@ (80007d0 <MX_ETH_Init+0x84>)
 8000754:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000756:	4b1f      	ldr	r3, [pc, #124]	@ (80007d4 <MX_ETH_Init+0x88>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800075c:	4b1d      	ldr	r3, [pc, #116]	@ (80007d4 <MX_ETH_Init+0x88>)
 800075e:	2280      	movs	r2, #128	@ 0x80
 8000760:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000762:	4b1c      	ldr	r3, [pc, #112]	@ (80007d4 <MX_ETH_Init+0x88>)
 8000764:	22e1      	movs	r2, #225	@ 0xe1
 8000766:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000768:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <MX_ETH_Init+0x88>)
 800076a:	2200      	movs	r2, #0
 800076c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800076e:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <MX_ETH_Init+0x88>)
 8000770:	2200      	movs	r2, #0
 8000772:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000774:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <MX_ETH_Init+0x88>)
 8000776:	2200      	movs	r2, #0
 8000778:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800077a:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <MX_ETH_Init+0x80>)
 800077c:	4a15      	ldr	r2, [pc, #84]	@ (80007d4 <MX_ETH_Init+0x88>)
 800077e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000780:	4b12      	ldr	r3, [pc, #72]	@ (80007cc <MX_ETH_Init+0x80>)
 8000782:	2201      	movs	r2, #1
 8000784:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000786:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <MX_ETH_Init+0x80>)
 8000788:	4a13      	ldr	r2, [pc, #76]	@ (80007d8 <MX_ETH_Init+0x8c>)
 800078a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800078c:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <MX_ETH_Init+0x80>)
 800078e:	4a13      	ldr	r2, [pc, #76]	@ (80007dc <MX_ETH_Init+0x90>)
 8000790:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000792:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <MX_ETH_Init+0x80>)
 8000794:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000798:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800079a:	480c      	ldr	r0, [pc, #48]	@ (80007cc <MX_ETH_Init+0x80>)
 800079c:	f000 fece 	bl	800153c <HAL_ETH_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80007a6:	f000 fa05 	bl	8000bb4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007aa:	2238      	movs	r2, #56	@ 0x38
 80007ac:	2100      	movs	r1, #0
 80007ae:	480c      	ldr	r0, [pc, #48]	@ (80007e0 <MX_ETH_Init+0x94>)
 80007b0:	f005 fc8a 	bl	80060c8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <MX_ETH_Init+0x94>)
 80007b6:	2221      	movs	r2, #33	@ 0x21
 80007b8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007ba:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_ETH_Init+0x94>)
 80007bc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007c0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007c2:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <MX_ETH_Init+0x94>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	24000128 	.word	0x24000128
 80007d0:	40028000 	.word	0x40028000
 80007d4:	24000394 	.word	0x24000394
 80007d8:	24000074 	.word	0x24000074
 80007dc:	24000014 	.word	0x24000014
 80007e0:	240000f0 	.word	0x240000f0

080007e4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80007e8:	4b22      	ldr	r3, [pc, #136]	@ (8000874 <MX_UART4_Init+0x90>)
 80007ea:	4a23      	ldr	r2, [pc, #140]	@ (8000878 <MX_UART4_Init+0x94>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80007ee:	4b21      	ldr	r3, [pc, #132]	@ (8000874 <MX_UART4_Init+0x90>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000874 <MX_UART4_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000874 <MX_UART4_Init+0x90>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000802:	4b1c      	ldr	r3, [pc, #112]	@ (8000874 <MX_UART4_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b1a      	ldr	r3, [pc, #104]	@ (8000874 <MX_UART4_Init+0x90>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <MX_UART4_Init+0x90>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b17      	ldr	r3, [pc, #92]	@ (8000874 <MX_UART4_Init+0x90>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081a:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <MX_UART4_Init+0x90>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000820:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <MX_UART4_Init+0x90>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000826:	4b13      	ldr	r3, [pc, #76]	@ (8000874 <MX_UART4_Init+0x90>)
 8000828:	2200      	movs	r2, #0
 800082a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800082c:	4811      	ldr	r0, [pc, #68]	@ (8000874 <MX_UART4_Init+0x90>)
 800082e:	f004 f9dd 	bl	8004bec <HAL_UART_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000838:	f000 f9bc 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800083c:	2100      	movs	r1, #0
 800083e:	480d      	ldr	r0, [pc, #52]	@ (8000874 <MX_UART4_Init+0x90>)
 8000840:	f005 fb77 	bl	8005f32 <HAL_UARTEx_SetTxFifoThreshold>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800084a:	f000 f9b3 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800084e:	2100      	movs	r1, #0
 8000850:	4808      	ldr	r0, [pc, #32]	@ (8000874 <MX_UART4_Init+0x90>)
 8000852:	f005 fbac 	bl	8005fae <HAL_UARTEx_SetRxFifoThreshold>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800085c:	f000 f9aa 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	@ (8000874 <MX_UART4_Init+0x90>)
 8000862:	f005 fb2d 	bl	8005ec0 <HAL_UARTEx_DisableFifoMode>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800086c:	f000 f9a2 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	240001d8 	.word	0x240001d8
 8000878:	40004c00 	.word	0x40004c00

0800087c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000880:	4b22      	ldr	r3, [pc, #136]	@ (800090c <MX_UART5_Init+0x90>)
 8000882:	4a23      	ldr	r2, [pc, #140]	@ (8000910 <MX_UART5_Init+0x94>)
 8000884:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000886:	4b21      	ldr	r3, [pc, #132]	@ (800090c <MX_UART5_Init+0x90>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b1f      	ldr	r3, [pc, #124]	@ (800090c <MX_UART5_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b1d      	ldr	r3, [pc, #116]	@ (800090c <MX_UART5_Init+0x90>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800089a:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <MX_UART5_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	@ (800090c <MX_UART5_Init+0x90>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b19      	ldr	r3, [pc, #100]	@ (800090c <MX_UART5_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b17      	ldr	r3, [pc, #92]	@ (800090c <MX_UART5_Init+0x90>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b2:	4b16      	ldr	r3, [pc, #88]	@ (800090c <MX_UART5_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008b8:	4b14      	ldr	r3, [pc, #80]	@ (800090c <MX_UART5_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008be:	4b13      	ldr	r3, [pc, #76]	@ (800090c <MX_UART5_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80008c4:	4811      	ldr	r0, [pc, #68]	@ (800090c <MX_UART5_Init+0x90>)
 80008c6:	f004 f991 	bl	8004bec <HAL_UART_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80008d0:	f000 f970 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d4:	2100      	movs	r1, #0
 80008d6:	480d      	ldr	r0, [pc, #52]	@ (800090c <MX_UART5_Init+0x90>)
 80008d8:	f005 fb2b 	bl	8005f32 <HAL_UARTEx_SetTxFifoThreshold>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80008e2:	f000 f967 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e6:	2100      	movs	r1, #0
 80008e8:	4808      	ldr	r0, [pc, #32]	@ (800090c <MX_UART5_Init+0x90>)
 80008ea:	f005 fb60 	bl	8005fae <HAL_UARTEx_SetRxFifoThreshold>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80008f4:	f000 f95e 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80008f8:	4804      	ldr	r0, [pc, #16]	@ (800090c <MX_UART5_Init+0x90>)
 80008fa:	f005 fae1 	bl	8005ec0 <HAL_UARTEx_DisableFifoMode>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000904:	f000 f956 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	2400026c 	.word	0x2400026c
 8000910:	40005000 	.word	0x40005000

08000914 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000918:	4b22      	ldr	r3, [pc, #136]	@ (80009a4 <MX_USART3_UART_Init+0x90>)
 800091a:	4a23      	ldr	r2, [pc, #140]	@ (80009a8 <MX_USART3_UART_Init+0x94>)
 800091c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800091e:	4b21      	ldr	r3, [pc, #132]	@ (80009a4 <MX_USART3_UART_Init+0x90>)
 8000920:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000924:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b1f      	ldr	r3, [pc, #124]	@ (80009a4 <MX_USART3_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b1d      	ldr	r3, [pc, #116]	@ (80009a4 <MX_USART3_UART_Init+0x90>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000932:	4b1c      	ldr	r3, [pc, #112]	@ (80009a4 <MX_USART3_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b1a      	ldr	r3, [pc, #104]	@ (80009a4 <MX_USART3_UART_Init+0x90>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <MX_USART3_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <MX_USART3_UART_Init+0x90>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094a:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <MX_USART3_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000950:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <MX_USART3_UART_Init+0x90>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000956:	4b13      	ldr	r3, [pc, #76]	@ (80009a4 <MX_USART3_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800095c:	4811      	ldr	r0, [pc, #68]	@ (80009a4 <MX_USART3_UART_Init+0x90>)
 800095e:	f004 f945 	bl	8004bec <HAL_UART_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000968:	f000 f924 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800096c:	2100      	movs	r1, #0
 800096e:	480d      	ldr	r0, [pc, #52]	@ (80009a4 <MX_USART3_UART_Init+0x90>)
 8000970:	f005 fadf 	bl	8005f32 <HAL_UARTEx_SetTxFifoThreshold>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800097a:	f000 f91b 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800097e:	2100      	movs	r1, #0
 8000980:	4808      	ldr	r0, [pc, #32]	@ (80009a4 <MX_USART3_UART_Init+0x90>)
 8000982:	f005 fb14 	bl	8005fae <HAL_UARTEx_SetRxFifoThreshold>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800098c:	f000 f912 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	@ (80009a4 <MX_USART3_UART_Init+0x90>)
 8000992:	f005 fa95 	bl	8005ec0 <HAL_UARTEx_DisableFifoMode>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800099c:	f000 f90a 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	24000300 	.word	0x24000300
 80009a8:	40004800 	.word	0x40004800

080009ac <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
	...

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08c      	sub	sp, #48	@ 0x30
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	4b71      	ldr	r3, [pc, #452]	@ (8000b98 <MX_GPIO_Init+0x1dc>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d8:	4a6f      	ldr	r2, [pc, #444]	@ (8000b98 <MX_GPIO_Init+0x1dc>)
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009e2:	4b6d      	ldr	r3, [pc, #436]	@ (8000b98 <MX_GPIO_Init+0x1dc>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e8:	f003 0304 	and.w	r3, r3, #4
 80009ec:	61bb      	str	r3, [r7, #24]
 80009ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f0:	4b69      	ldr	r3, [pc, #420]	@ (8000b98 <MX_GPIO_Init+0x1dc>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f6:	4a68      	ldr	r2, [pc, #416]	@ (8000b98 <MX_GPIO_Init+0x1dc>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a00:	4b65      	ldr	r3, [pc, #404]	@ (8000b98 <MX_GPIO_Init+0x1dc>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b62      	ldr	r3, [pc, #392]	@ (8000b98 <MX_GPIO_Init+0x1dc>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a14:	4a60      	ldr	r2, [pc, #384]	@ (8000b98 <MX_GPIO_Init+0x1dc>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a1e:	4b5e      	ldr	r3, [pc, #376]	@ (8000b98 <MX_GPIO_Init+0x1dc>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2c:	4b5a      	ldr	r3, [pc, #360]	@ (8000b98 <MX_GPIO_Init+0x1dc>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a32:	4a59      	ldr	r2, [pc, #356]	@ (8000b98 <MX_GPIO_Init+0x1dc>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a3c:	4b56      	ldr	r3, [pc, #344]	@ (8000b98 <MX_GPIO_Init+0x1dc>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	4b53      	ldr	r3, [pc, #332]	@ (8000b98 <MX_GPIO_Init+0x1dc>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a50:	4a51      	ldr	r2, [pc, #324]	@ (8000b98 <MX_GPIO_Init+0x1dc>)
 8000a52:	f043 0308 	orr.w	r3, r3, #8
 8000a56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a5a:	4b4f      	ldr	r3, [pc, #316]	@ (8000b98 <MX_GPIO_Init+0x1dc>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a60:	f003 0308 	and.w	r3, r3, #8
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a68:	4b4b      	ldr	r3, [pc, #300]	@ (8000b98 <MX_GPIO_Init+0x1dc>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6e:	4a4a      	ldr	r2, [pc, #296]	@ (8000b98 <MX_GPIO_Init+0x1dc>)
 8000a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a78:	4b47      	ldr	r3, [pc, #284]	@ (8000b98 <MX_GPIO_Init+0x1dc>)
 8000a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a86:	4b44      	ldr	r3, [pc, #272]	@ (8000b98 <MX_GPIO_Init+0x1dc>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8c:	4a42      	ldr	r2, [pc, #264]	@ (8000b98 <MX_GPIO_Init+0x1dc>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a96:	4b40      	ldr	r3, [pc, #256]	@ (8000b98 <MX_GPIO_Init+0x1dc>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9c:	f003 0310 	and.w	r3, r3, #16
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000aaa:	483c      	ldr	r0, [pc, #240]	@ (8000b9c <MX_GPIO_Init+0x1e0>)
 8000aac:	f001 fb22 	bl	80020f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ab6:	483a      	ldr	r0, [pc, #232]	@ (8000ba0 <MX_GPIO_Init+0x1e4>)
 8000ab8:	f001 fb1c 	bl	80020f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2102      	movs	r1, #2
 8000ac0:	4838      	ldr	r0, [pc, #224]	@ (8000ba4 <MX_GPIO_Init+0x1e8>)
 8000ac2:	f001 fb17 	bl	80020f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ac6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4833      	ldr	r0, [pc, #204]	@ (8000ba8 <MX_GPIO_Init+0x1ec>)
 8000adc:	f001 f962 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000ae0:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	4828      	ldr	r0, [pc, #160]	@ (8000b9c <MX_GPIO_Init+0x1e0>)
 8000afa:	f001 f953 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000afe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	4619      	mov	r1, r3
 8000b16:	4822      	ldr	r0, [pc, #136]	@ (8000ba0 <MX_GPIO_Init+0x1e4>)
 8000b18:	f001 f944 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000b1c:	2380      	movs	r3, #128	@ 0x80
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b20:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	4619      	mov	r1, r3
 8000b30:	481e      	ldr	r0, [pc, #120]	@ (8000bac <MX_GPIO_Init+0x1f0>)
 8000b32:	f001 f937 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000b36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4819      	ldr	r0, [pc, #100]	@ (8000bb0 <MX_GPIO_Init+0x1f4>)
 8000b4c:	f001 f92a 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000b50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000b62:	230a      	movs	r3, #10
 8000b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4810      	ldr	r0, [pc, #64]	@ (8000bb0 <MX_GPIO_Init+0x1f4>)
 8000b6e:	f001 f919 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	4619      	mov	r1, r3
 8000b88:	4806      	ldr	r0, [pc, #24]	@ (8000ba4 <MX_GPIO_Init+0x1e8>)
 8000b8a:	f001 f90b 	bl	8001da4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b8e:	bf00      	nop
 8000b90:	3730      	adds	r7, #48	@ 0x30
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	58024400 	.word	0x58024400
 8000b9c:	58020400 	.word	0x58020400
 8000ba0:	58020c00 	.word	0x58020c00
 8000ba4:	58021000 	.word	0x58021000
 8000ba8:	58020800 	.word	0x58020800
 8000bac:	58021800 	.word	0x58021800
 8000bb0:	58020000 	.word	0x58020000

08000bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb8:	b672      	cpsid	i
}
 8000bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <Error_Handler+0x8>

08000bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <HAL_MspInit+0x30>)
 8000bc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bcc:	4a08      	ldr	r2, [pc, #32]	@ (8000bf0 <HAL_MspInit+0x30>)
 8000bce:	f043 0302 	orr.w	r3, r3, #2
 8000bd2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000bd6:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_MspInit+0x30>)
 8000bd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	58024400 	.word	0x58024400

08000bf4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08e      	sub	sp, #56	@ 0x38
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a59      	ldr	r2, [pc, #356]	@ (8000d78 <HAL_ETH_MspInit+0x184>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	f040 80ab 	bne.w	8000d6e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c18:	4b58      	ldr	r3, [pc, #352]	@ (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c1e:	4a57      	ldr	r2, [pc, #348]	@ (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c24:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c28:	4b54      	ldr	r3, [pc, #336]	@ (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c32:	623b      	str	r3, [r7, #32]
 8000c34:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c36:	4b51      	ldr	r3, [pc, #324]	@ (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c3c:	4a4f      	ldr	r2, [pc, #316]	@ (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c42:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c46:	4b4d      	ldr	r3, [pc, #308]	@ (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c50:	61fb      	str	r3, [r7, #28]
 8000c52:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c54:	4b49      	ldr	r3, [pc, #292]	@ (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c5a:	4a48      	ldr	r2, [pc, #288]	@ (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c60:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c64:	4b45      	ldr	r3, [pc, #276]	@ (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c6e:	61bb      	str	r3, [r7, #24]
 8000c70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c72:	4b42      	ldr	r3, [pc, #264]	@ (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c78:	4a40      	ldr	r2, [pc, #256]	@ (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c7a:	f043 0304 	orr.w	r3, r3, #4
 8000c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c82:	4b3e      	ldr	r3, [pc, #248]	@ (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	4b3a      	ldr	r3, [pc, #232]	@ (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c96:	4a39      	ldr	r2, [pc, #228]	@ (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca0:	4b36      	ldr	r3, [pc, #216]	@ (8000d7c <HAL_ETH_MspInit+0x188>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	4b33      	ldr	r3, [pc, #204]	@ (8000d7c <HAL_ETH_MspInit+0x188>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb4:	4a31      	ldr	r2, [pc, #196]	@ (8000d7c <HAL_ETH_MspInit+0x188>)
 8000cb6:	f043 0302 	orr.w	r3, r3, #2
 8000cba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8000d7c <HAL_ETH_MspInit+0x188>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8000d7c <HAL_ETH_MspInit+0x188>)
 8000cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd2:	4a2a      	ldr	r2, [pc, #168]	@ (8000d7c <HAL_ETH_MspInit+0x188>)
 8000cd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cdc:	4b27      	ldr	r3, [pc, #156]	@ (8000d7c <HAL_ETH_MspInit+0x188>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cea:	2332      	movs	r3, #50	@ 0x32
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cfa:	230b      	movs	r3, #11
 8000cfc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d02:	4619      	mov	r1, r3
 8000d04:	481e      	ldr	r0, [pc, #120]	@ (8000d80 <HAL_ETH_MspInit+0x18c>)
 8000d06:	f001 f84d 	bl	8001da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d0a:	2386      	movs	r3, #134	@ 0x86
 8000d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d1a:	230b      	movs	r3, #11
 8000d1c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d22:	4619      	mov	r1, r3
 8000d24:	4817      	ldr	r0, [pc, #92]	@ (8000d84 <HAL_ETH_MspInit+0x190>)
 8000d26:	f001 f83d 	bl	8001da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d3c:	230b      	movs	r3, #11
 8000d3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d44:	4619      	mov	r1, r3
 8000d46:	4810      	ldr	r0, [pc, #64]	@ (8000d88 <HAL_ETH_MspInit+0x194>)
 8000d48:	f001 f82c 	bl	8001da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d4c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d5e:	230b      	movs	r3, #11
 8000d60:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	4808      	ldr	r0, [pc, #32]	@ (8000d8c <HAL_ETH_MspInit+0x198>)
 8000d6a:	f001 f81b 	bl	8001da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3738      	adds	r7, #56	@ 0x38
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40028000 	.word	0x40028000
 8000d7c:	58024400 	.word	0x58024400
 8000d80:	58020800 	.word	0x58020800
 8000d84:	58020000 	.word	0x58020000
 8000d88:	58020400 	.word	0x58020400
 8000d8c:	58021800 	.word	0x58021800

08000d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b0be      	sub	sp, #248	@ 0xf8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dac:	22b8      	movs	r2, #184	@ 0xb8
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f005 f989 	bl	80060c8 <memset>
  if(huart->Instance==UART4)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a98      	ldr	r2, [pc, #608]	@ (800101c <HAL_UART_MspInit+0x28c>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d16b      	bne.n	8000e98 <HAL_UART_MspInit+0x108>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000dc0:	f04f 0202 	mov.w	r2, #2
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f002 f946 	bl	8003068 <HAL_RCCEx_PeriphCLKConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000de2:	f7ff fee7 	bl	8000bb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000de6:	4b8e      	ldr	r3, [pc, #568]	@ (8001020 <HAL_UART_MspInit+0x290>)
 8000de8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dec:	4a8c      	ldr	r2, [pc, #560]	@ (8001020 <HAL_UART_MspInit+0x290>)
 8000dee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000df2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000df6:	4b8a      	ldr	r3, [pc, #552]	@ (8001020 <HAL_UART_MspInit+0x290>)
 8000df8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e04:	4b86      	ldr	r3, [pc, #536]	@ (8001020 <HAL_UART_MspInit+0x290>)
 8000e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0a:	4a85      	ldr	r2, [pc, #532]	@ (8001020 <HAL_UART_MspInit+0x290>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e14:	4b82      	ldr	r3, [pc, #520]	@ (8001020 <HAL_UART_MspInit+0x290>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	623b      	str	r3, [r7, #32]
 8000e20:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	4b7f      	ldr	r3, [pc, #508]	@ (8001020 <HAL_UART_MspInit+0x290>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e28:	4a7d      	ldr	r2, [pc, #500]	@ (8001020 <HAL_UART_MspInit+0x290>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e32:	4b7b      	ldr	r3, [pc, #492]	@ (8001020 <HAL_UART_MspInit+0x290>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	61fb      	str	r3, [r7, #28]
 8000e3e:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e40:	2301      	movs	r3, #1
 8000e42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e58:	2308      	movs	r3, #8
 8000e5a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000e62:	4619      	mov	r1, r3
 8000e64:	486f      	ldr	r0, [pc, #444]	@ (8001024 <HAL_UART_MspInit+0x294>)
 8000e66:	f000 ff9d 	bl	8001da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e84:	2308      	movs	r3, #8
 8000e86:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4865      	ldr	r0, [pc, #404]	@ (8001028 <HAL_UART_MspInit+0x298>)
 8000e92:	f000 ff87 	bl	8001da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e96:	e0bd      	b.n	8001014 <HAL_UART_MspInit+0x284>
  else if(huart->Instance==UART5)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a63      	ldr	r2, [pc, #396]	@ (800102c <HAL_UART_MspInit+0x29c>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d16c      	bne.n	8000f7c <HAL_UART_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000ea2:	f04f 0202 	mov.w	r2, #2
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f002 f8d5 	bl	8003068 <HAL_RCCEx_PeriphCLKConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8000ec4:	f7ff fe76 	bl	8000bb4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000ec8:	4b55      	ldr	r3, [pc, #340]	@ (8001020 <HAL_UART_MspInit+0x290>)
 8000eca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ece:	4a54      	ldr	r2, [pc, #336]	@ (8001020 <HAL_UART_MspInit+0x290>)
 8000ed0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ed4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ed8:	4b51      	ldr	r3, [pc, #324]	@ (8001020 <HAL_UART_MspInit+0x290>)
 8000eda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ede:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ee2:	61bb      	str	r3, [r7, #24]
 8000ee4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	4b4e      	ldr	r3, [pc, #312]	@ (8001020 <HAL_UART_MspInit+0x290>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eec:	4a4c      	ldr	r2, [pc, #304]	@ (8001020 <HAL_UART_MspInit+0x290>)
 8000eee:	f043 0302 	orr.w	r3, r3, #2
 8000ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8001020 <HAL_UART_MspInit+0x290>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f04:	4b46      	ldr	r3, [pc, #280]	@ (8001020 <HAL_UART_MspInit+0x290>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0a:	4a45      	ldr	r2, [pc, #276]	@ (8001020 <HAL_UART_MspInit+0x290>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f14:	4b42      	ldr	r3, [pc, #264]	@ (8001020 <HAL_UART_MspInit+0x290>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8000f3c:	230e      	movs	r3, #14
 8000f3e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f42:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f46:	4619      	mov	r1, r3
 8000f48:	4839      	ldr	r0, [pc, #228]	@ (8001030 <HAL_UART_MspInit+0x2a0>)
 8000f4a:	f000 ff2b 	bl	8001da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f68:	2308      	movs	r3, #8
 8000f6a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f72:	4619      	mov	r1, r3
 8000f74:	482c      	ldr	r0, [pc, #176]	@ (8001028 <HAL_UART_MspInit+0x298>)
 8000f76:	f000 ff15 	bl	8001da4 <HAL_GPIO_Init>
}
 8000f7a:	e04b      	b.n	8001014 <HAL_UART_MspInit+0x284>
  else if(huart->Instance==USART3)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a2c      	ldr	r2, [pc, #176]	@ (8001034 <HAL_UART_MspInit+0x2a4>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d146      	bne.n	8001014 <HAL_UART_MspInit+0x284>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f86:	f04f 0202 	mov.w	r2, #2
 8000f8a:	f04f 0300 	mov.w	r3, #0
 8000f8e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 f863 	bl	8003068 <HAL_RCCEx_PeriphCLKConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_UART_MspInit+0x21c>
      Error_Handler();
 8000fa8:	f7ff fe04 	bl	8000bb4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fac:	4b1c      	ldr	r3, [pc, #112]	@ (8001020 <HAL_UART_MspInit+0x290>)
 8000fae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fb2:	4a1b      	ldr	r2, [pc, #108]	@ (8001020 <HAL_UART_MspInit+0x290>)
 8000fb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fb8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fbc:	4b18      	ldr	r3, [pc, #96]	@ (8001020 <HAL_UART_MspInit+0x290>)
 8000fbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fca:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <HAL_UART_MspInit+0x290>)
 8000fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd0:	4a13      	ldr	r2, [pc, #76]	@ (8001020 <HAL_UART_MspInit+0x290>)
 8000fd2:	f043 0308 	orr.w	r3, r3, #8
 8000fd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fda:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <HAL_UART_MspInit+0x290>)
 8000fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe0:	f003 0308 	and.w	r3, r3, #8
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000fe8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001002:	2307      	movs	r3, #7
 8001004:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001008:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800100c:	4619      	mov	r1, r3
 800100e:	480a      	ldr	r0, [pc, #40]	@ (8001038 <HAL_UART_MspInit+0x2a8>)
 8001010:	f000 fec8 	bl	8001da4 <HAL_GPIO_Init>
}
 8001014:	bf00      	nop
 8001016:	37f8      	adds	r7, #248	@ 0xf8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40004c00 	.word	0x40004c00
 8001020:	58024400 	.word	0x58024400
 8001024:	58020000 	.word	0x58020000
 8001028:	58020800 	.word	0x58020800
 800102c:	40005000 	.word	0x40005000
 8001030:	58020400 	.word	0x58020400
 8001034:	40004800 	.word	0x40004800
 8001038:	58020c00 	.word	0x58020c00

0800103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <NMI_Handler+0x4>

08001044 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <HardFault_Handler+0x4>

0800104c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <MemManage_Handler+0x4>

08001054 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <BusFault_Handler+0x4>

0800105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <UsageFault_Handler+0x4>

08001064 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001092:	f000 f917 	bl	80012c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010a0:	4b32      	ldr	r3, [pc, #200]	@ (800116c <SystemInit+0xd0>)
 80010a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010a6:	4a31      	ldr	r2, [pc, #196]	@ (800116c <SystemInit+0xd0>)
 80010a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001170 <SystemInit+0xd4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 030f 	and.w	r3, r3, #15
 80010b8:	2b06      	cmp	r3, #6
 80010ba:	d807      	bhi.n	80010cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001170 <SystemInit+0xd4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f023 030f 	bic.w	r3, r3, #15
 80010c4:	4a2a      	ldr	r2, [pc, #168]	@ (8001170 <SystemInit+0xd4>)
 80010c6:	f043 0307 	orr.w	r3, r3, #7
 80010ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010cc:	4b29      	ldr	r3, [pc, #164]	@ (8001174 <SystemInit+0xd8>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a28      	ldr	r2, [pc, #160]	@ (8001174 <SystemInit+0xd8>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010d8:	4b26      	ldr	r3, [pc, #152]	@ (8001174 <SystemInit+0xd8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010de:	4b25      	ldr	r3, [pc, #148]	@ (8001174 <SystemInit+0xd8>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4924      	ldr	r1, [pc, #144]	@ (8001174 <SystemInit+0xd8>)
 80010e4:	4b24      	ldr	r3, [pc, #144]	@ (8001178 <SystemInit+0xdc>)
 80010e6:	4013      	ands	r3, r2
 80010e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010ea:	4b21      	ldr	r3, [pc, #132]	@ (8001170 <SystemInit+0xd4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d007      	beq.n	8001106 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001170 <SystemInit+0xd4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f023 030f 	bic.w	r3, r3, #15
 80010fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001170 <SystemInit+0xd4>)
 8001100:	f043 0307 	orr.w	r3, r3, #7
 8001104:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001106:	4b1b      	ldr	r3, [pc, #108]	@ (8001174 <SystemInit+0xd8>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800110c:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <SystemInit+0xd8>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001112:	4b18      	ldr	r3, [pc, #96]	@ (8001174 <SystemInit+0xd8>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001118:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <SystemInit+0xd8>)
 800111a:	4a18      	ldr	r2, [pc, #96]	@ (800117c <SystemInit+0xe0>)
 800111c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800111e:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <SystemInit+0xd8>)
 8001120:	4a17      	ldr	r2, [pc, #92]	@ (8001180 <SystemInit+0xe4>)
 8001122:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001124:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <SystemInit+0xd8>)
 8001126:	4a17      	ldr	r2, [pc, #92]	@ (8001184 <SystemInit+0xe8>)
 8001128:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800112a:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <SystemInit+0xd8>)
 800112c:	2200      	movs	r2, #0
 800112e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001130:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <SystemInit+0xd8>)
 8001132:	4a14      	ldr	r2, [pc, #80]	@ (8001184 <SystemInit+0xe8>)
 8001134:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001136:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <SystemInit+0xd8>)
 8001138:	2200      	movs	r2, #0
 800113a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800113c:	4b0d      	ldr	r3, [pc, #52]	@ (8001174 <SystemInit+0xd8>)
 800113e:	4a11      	ldr	r2, [pc, #68]	@ (8001184 <SystemInit+0xe8>)
 8001140:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001142:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <SystemInit+0xd8>)
 8001144:	2200      	movs	r2, #0
 8001146:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001148:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <SystemInit+0xd8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a09      	ldr	r2, [pc, #36]	@ (8001174 <SystemInit+0xd8>)
 800114e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001152:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001154:	4b07      	ldr	r3, [pc, #28]	@ (8001174 <SystemInit+0xd8>)
 8001156:	2200      	movs	r2, #0
 8001158:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800115a:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <SystemInit+0xec>)
 800115c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001160:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00
 8001170:	52002000 	.word	0x52002000
 8001174:	58024400 	.word	0x58024400
 8001178:	eaf6ed7f 	.word	0xeaf6ed7f
 800117c:	02020200 	.word	0x02020200
 8001180:	01ff0000 	.word	0x01ff0000
 8001184:	01010280 	.word	0x01010280
 8001188:	52004000 	.word	0x52004000

0800118c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800118c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001190:	f7ff ff84 	bl	800109c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001194:	480c      	ldr	r0, [pc, #48]	@ (80011c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001196:	490d      	ldr	r1, [pc, #52]	@ (80011cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001198:	4a0d      	ldr	r2, [pc, #52]	@ (80011d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800119c:	e002      	b.n	80011a4 <LoopCopyDataInit>

0800119e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a2:	3304      	adds	r3, #4

080011a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a8:	d3f9      	bcc.n	800119e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011aa:	4a0a      	ldr	r2, [pc, #40]	@ (80011d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011ac:	4c0a      	ldr	r4, [pc, #40]	@ (80011d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b0:	e001      	b.n	80011b6 <LoopFillZerobss>

080011b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b4:	3204      	adds	r2, #4

080011b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b8:	d3fb      	bcc.n	80011b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ba:	f004 ff8d 	bl	80060d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011be:	f7ff fa25 	bl	800060c <main>
  bx  lr
 80011c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011c4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80011c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011cc:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80011d0:	08006190 	.word	0x08006190
  ldr r2, =_sbss
 80011d4:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 80011d8:	240003a0 	.word	0x240003a0

080011dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011dc:	e7fe      	b.n	80011dc <ADC3_IRQHandler>
	...

080011e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e6:	2003      	movs	r0, #3
 80011e8:	f000 f976 	bl	80014d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011ec:	f001 fd66 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 80011f0:	4602      	mov	r2, r0
 80011f2:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <HAL_Init+0x68>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	0a1b      	lsrs	r3, r3, #8
 80011f8:	f003 030f 	and.w	r3, r3, #15
 80011fc:	4913      	ldr	r1, [pc, #76]	@ (800124c <HAL_Init+0x6c>)
 80011fe:	5ccb      	ldrb	r3, [r1, r3]
 8001200:	f003 031f 	and.w	r3, r3, #31
 8001204:	fa22 f303 	lsr.w	r3, r2, r3
 8001208:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800120a:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <HAL_Init+0x68>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	4a0e      	ldr	r2, [pc, #56]	@ (800124c <HAL_Init+0x6c>)
 8001214:	5cd3      	ldrb	r3, [r2, r3]
 8001216:	f003 031f 	and.w	r3, r3, #31
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	fa22 f303 	lsr.w	r3, r2, r3
 8001220:	4a0b      	ldr	r2, [pc, #44]	@ (8001250 <HAL_Init+0x70>)
 8001222:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001224:	4a0b      	ldr	r2, [pc, #44]	@ (8001254 <HAL_Init+0x74>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800122a:	2000      	movs	r0, #0
 800122c:	f000 f814 	bl	8001258 <HAL_InitTick>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e002      	b.n	8001240 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800123a:	f7ff fcc1 	bl	8000bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	58024400 	.word	0x58024400
 800124c:	08006148 	.word	0x08006148
 8001250:	24000008 	.word	0x24000008
 8001254:	24000004 	.word	0x24000004

08001258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001260:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <HAL_InitTick+0x60>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e021      	b.n	80012b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800126c:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <HAL_InitTick+0x64>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <HAL_InitTick+0x60>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f94d 	bl	8001522 <HAL_SYSTICK_Config>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e00e      	b.n	80012b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d80a      	bhi.n	80012ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f000 f925 	bl	80014ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a4:	4a06      	ldr	r2, [pc, #24]	@ (80012c0 <HAL_InitTick+0x68>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e000      	b.n	80012b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	24000010 	.word	0x24000010
 80012bc:	24000004 	.word	0x24000004
 80012c0:	2400000c 	.word	0x2400000c

080012c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <HAL_IncTick+0x20>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <HAL_IncTick+0x24>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a04      	ldr	r2, [pc, #16]	@ (80012e8 <HAL_IncTick+0x24>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	24000010 	.word	0x24000010
 80012e8:	2400039c 	.word	0x2400039c

080012ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return uwTick;
 80012f0:	4b03      	ldr	r3, [pc, #12]	@ (8001300 <HAL_GetTick+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	2400039c 	.word	0x2400039c

08001304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff ffee 	bl	80012ec <HAL_GetTick>
 8001310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131c:	d005      	beq.n	800132a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131e:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <HAL_Delay+0x44>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800132a:	bf00      	nop
 800132c:	f7ff ffde 	bl	80012ec <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	429a      	cmp	r2, r3
 800133a:	d8f7      	bhi.n	800132c <HAL_Delay+0x28>
  {
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	24000010 	.word	0x24000010

0800134c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001354:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800135c:	4904      	ldr	r1, [pc, #16]	@ (8001370 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4313      	orrs	r3, r2
 8001362:	604b      	str	r3, [r1, #4]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	58000400 	.word	0x58000400

08001374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001384:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <__NVIC_SetPriorityGrouping+0x40>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001390:	4013      	ands	r3, r2
 8001392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a2:	4a04      	ldr	r2, [pc, #16]	@ (80013b4 <__NVIC_SetPriorityGrouping+0x40>)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	60d3      	str	r3, [r2, #12]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00
 80013b8:	05fa0000 	.word	0x05fa0000

080013bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c0:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <__NVIC_GetPriorityGrouping+0x18>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	f003 0307 	and.w	r3, r3, #7
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	db0a      	blt.n	8001402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	490c      	ldr	r1, [pc, #48]	@ (8001424 <__NVIC_SetPriority+0x4c>)
 80013f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001400:	e00a      	b.n	8001418 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4908      	ldr	r1, [pc, #32]	@ (8001428 <__NVIC_SetPriority+0x50>)
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	3b04      	subs	r3, #4
 8001410:	0112      	lsls	r2, r2, #4
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	440b      	add	r3, r1
 8001416:	761a      	strb	r2, [r3, #24]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000e100 	.word	0xe000e100
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	@ 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f1c3 0307 	rsb	r3, r3, #7
 8001446:	2b04      	cmp	r3, #4
 8001448:	bf28      	it	cs
 800144a:	2304      	movcs	r3, #4
 800144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3304      	adds	r3, #4
 8001452:	2b06      	cmp	r3, #6
 8001454:	d902      	bls.n	800145c <NVIC_EncodePriority+0x30>
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3b03      	subs	r3, #3
 800145a:	e000      	b.n	800145e <NVIC_EncodePriority+0x32>
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	f04f 32ff 	mov.w	r2, #4294967295
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43d9      	mvns	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	4313      	orrs	r3, r2
         );
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	@ 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014a4:	d301      	bcc.n	80014aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00f      	b.n	80014ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014aa:	4a0a      	ldr	r2, [pc, #40]	@ (80014d4 <SysTick_Config+0x40>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b2:	210f      	movs	r1, #15
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
 80014b8:	f7ff ff8e 	bl	80013d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014bc:	4b05      	ldr	r3, [pc, #20]	@ (80014d4 <SysTick_Config+0x40>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c2:	4b04      	ldr	r3, [pc, #16]	@ (80014d4 <SysTick_Config+0x40>)
 80014c4:	2207      	movs	r2, #7
 80014c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	e000e010 	.word	0xe000e010

080014d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff47 	bl	8001374 <__NVIC_SetPriorityGrouping>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014fc:	f7ff ff5e 	bl	80013bc <__NVIC_GetPriorityGrouping>
 8001500:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	6978      	ldr	r0, [r7, #20]
 8001508:	f7ff ff90 	bl	800142c <NVIC_EncodePriority>
 800150c:	4602      	mov	r2, r0
 800150e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff5f 	bl	80013d8 <__NVIC_SetPriority>
}
 800151a:	bf00      	nop
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffb2 	bl	8001494 <SysTick_Config>
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e0e3      	b.n	8001716 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001554:	2b00      	cmp	r3, #0
 8001556:	d106      	bne.n	8001566 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2223      	movs	r2, #35	@ 0x23
 800155c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff fb47 	bl	8000bf4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001566:	4b6e      	ldr	r3, [pc, #440]	@ (8001720 <HAL_ETH_Init+0x1e4>)
 8001568:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800156c:	4a6c      	ldr	r2, [pc, #432]	@ (8001720 <HAL_ETH_Init+0x1e4>)
 800156e:	f043 0302 	orr.w	r3, r3, #2
 8001572:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001576:	4b6a      	ldr	r3, [pc, #424]	@ (8001720 <HAL_ETH_Init+0x1e4>)
 8001578:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	7a1b      	ldrb	r3, [r3, #8]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d103      	bne.n	8001594 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800158c:	2000      	movs	r0, #0
 800158e:	f7ff fedd 	bl	800134c <HAL_SYSCFG_ETHInterfaceSelect>
 8001592:	e003      	b.n	800159c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001594:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001598:	f7ff fed8 	bl	800134c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800159c:	4b61      	ldr	r3, [pc, #388]	@ (8001724 <HAL_ETH_Init+0x1e8>)
 800159e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015b8:	f7ff fe98 	bl	80012ec <HAL_GetTick>
 80015bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80015be:	e011      	b.n	80015e4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80015c0:	f7ff fe94 	bl	80012ec <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015ce:	d909      	bls.n	80015e4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2204      	movs	r2, #4
 80015d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	22e0      	movs	r2, #224	@ 0xe0
 80015dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e098      	b.n	8001716 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1e4      	bne.n	80015c0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 f89e 	bl	8001738 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80015fc:	f001 fcd8 	bl	8002fb0 <HAL_RCC_GetHCLKFreq>
 8001600:	4603      	mov	r3, r0
 8001602:	4a49      	ldr	r2, [pc, #292]	@ (8001728 <HAL_ETH_Init+0x1ec>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	0c9a      	lsrs	r2, r3, #18
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	3a01      	subs	r2, #1
 8001610:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 fa81 	bl	8001b1c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001622:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001626:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6812      	ldr	r2, [r2, #0]
 800162e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001632:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001636:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d009      	beq.n	800165a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	22e0      	movs	r2, #224	@ 0xe0
 8001652:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e05d      	b.n	8001716 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001662:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001666:	4b31      	ldr	r3, [pc, #196]	@ (800172c <HAL_ETH_Init+0x1f0>)
 8001668:	4013      	ands	r3, r2
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6952      	ldr	r2, [r2, #20]
 800166e:	0051      	lsls	r1, r2, #1
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	430b      	orrs	r3, r1
 8001676:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800167a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 fae9 	bl	8001c56 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 fb2f 	bl	8001ce8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	3305      	adds	r3, #5
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	021a      	lsls	r2, r3, #8
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	3304      	adds	r3, #4
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	3303      	adds	r3, #3
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	061a      	lsls	r2, r3, #24
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	3302      	adds	r3, #2
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	041b      	lsls	r3, r3, #16
 80016bc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	3301      	adds	r3, #1
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016c8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80016d6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016d8:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <HAL_ETH_Init+0x1f4>)
 80016ea:	430b      	orrs	r3, r1
 80016ec:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001734 <HAL_ETH_Init+0x1f8>)
 80016fe:	430b      	orrs	r3, r1
 8001700:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2210      	movs	r2, #16
 8001710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	58024400 	.word	0x58024400
 8001724:	58000400 	.word	0x58000400
 8001728:	431bde83 	.word	0x431bde83
 800172c:	ffff8001 	.word	0xffff8001
 8001730:	0c020060 	.word	0x0c020060
 8001734:	0c20c000 	.word	0x0c20c000

08001738 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001748:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001750:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001752:	f001 fc2d 	bl	8002fb0 <HAL_RCC_GetHCLKFreq>
 8001756:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4a1a      	ldr	r2, [pc, #104]	@ (80017c4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d804      	bhi.n	800176a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	e022      	b.n	80017b0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	4a16      	ldr	r2, [pc, #88]	@ (80017c8 <HAL_ETH_SetMDIOClockRange+0x90>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d204      	bcs.n	800177c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	e019      	b.n	80017b0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4a13      	ldr	r2, [pc, #76]	@ (80017cc <HAL_ETH_SetMDIOClockRange+0x94>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d915      	bls.n	80017b0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4a12      	ldr	r2, [pc, #72]	@ (80017d0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d804      	bhi.n	8001796 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	e00c      	b.n	80017b0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	4a0e      	ldr	r2, [pc, #56]	@ (80017d4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d804      	bhi.n	80017a8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	e003      	b.n	80017b0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80017ae:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	02160ebf 	.word	0x02160ebf
 80017c8:	03938700 	.word	0x03938700
 80017cc:	05f5e0ff 	.word	0x05f5e0ff
 80017d0:	08f0d17f 	.word	0x08f0d17f
 80017d4:	0ee6b27f 	.word	0x0ee6b27f

080017d8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80017ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	791b      	ldrb	r3, [r3, #4]
 80017f0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80017f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	7b1b      	ldrb	r3, [r3, #12]
 80017f8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80017fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	7b5b      	ldrb	r3, [r3, #13]
 8001800:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001802:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	7b9b      	ldrb	r3, [r3, #14]
 8001808:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800180a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	7bdb      	ldrb	r3, [r3, #15]
 8001810:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001812:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	7c12      	ldrb	r2, [r2, #16]
 8001818:	2a00      	cmp	r2, #0
 800181a:	d102      	bne.n	8001822 <ETH_SetMACConfig+0x4a>
 800181c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001820:	e000      	b.n	8001824 <ETH_SetMACConfig+0x4c>
 8001822:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001824:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	7c52      	ldrb	r2, [r2, #17]
 800182a:	2a00      	cmp	r2, #0
 800182c:	d102      	bne.n	8001834 <ETH_SetMACConfig+0x5c>
 800182e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001832:	e000      	b.n	8001836 <ETH_SetMACConfig+0x5e>
 8001834:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001836:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	7c9b      	ldrb	r3, [r3, #18]
 800183c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800183e:	431a      	orrs	r2, r3
               macconf->Speed |
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001844:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800184a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	7f1b      	ldrb	r3, [r3, #28]
 8001850:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001852:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	7f5b      	ldrb	r3, [r3, #29]
 8001858:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800185a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	7f92      	ldrb	r2, [r2, #30]
 8001860:	2a00      	cmp	r2, #0
 8001862:	d102      	bne.n	800186a <ETH_SetMACConfig+0x92>
 8001864:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001868:	e000      	b.n	800186c <ETH_SetMACConfig+0x94>
 800186a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800186c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	7fdb      	ldrb	r3, [r3, #31]
 8001872:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001874:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	f892 2020 	ldrb.w	r2, [r2, #32]
 800187c:	2a00      	cmp	r2, #0
 800187e:	d102      	bne.n	8001886 <ETH_SetMACConfig+0xae>
 8001880:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001884:	e000      	b.n	8001888 <ETH_SetMACConfig+0xb0>
 8001886:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001888:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800188e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001896:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001898:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800189e:	4313      	orrs	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b56      	ldr	r3, [pc, #344]	@ (8001a04 <ETH_SetMACConfig+0x22c>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	68f9      	ldr	r1, [r7, #12]
 80018b2:	430b      	orrs	r3, r1
 80018b4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018ba:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80018c2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80018c4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018cc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80018ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80018d6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80018d8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80018e0:	2a00      	cmp	r2, #0
 80018e2:	d102      	bne.n	80018ea <ETH_SetMACConfig+0x112>
 80018e4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018e8:	e000      	b.n	80018ec <ETH_SetMACConfig+0x114>
 80018ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80018ec:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80018f2:	4313      	orrs	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	4b42      	ldr	r3, [pc, #264]	@ (8001a08 <ETH_SetMACConfig+0x230>)
 80018fe:	4013      	ands	r3, r2
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	68f9      	ldr	r1, [r7, #12]
 8001906:	430b      	orrs	r3, r1
 8001908:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001910:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001916:	4313      	orrs	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	4b3a      	ldr	r3, [pc, #232]	@ (8001a0c <ETH_SetMACConfig+0x234>)
 8001922:	4013      	ands	r3, r2
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	68f9      	ldr	r1, [r7, #12]
 800192a:	430b      	orrs	r3, r1
 800192c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001934:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800193a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001942:	2a00      	cmp	r2, #0
 8001944:	d101      	bne.n	800194a <ETH_SetMACConfig+0x172>
 8001946:	2280      	movs	r2, #128	@ 0x80
 8001948:	e000      	b.n	800194c <ETH_SetMACConfig+0x174>
 800194a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800194c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001952:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001954:	4313      	orrs	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800195e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001962:	4013      	ands	r3, r2
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	68f9      	ldr	r1, [r7, #12]
 800196a:	430b      	orrs	r3, r1
 800196c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001974:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800197c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800197e:	4313      	orrs	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800198a:	f023 0103 	bic.w	r1, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	430a      	orrs	r2, r1
 8001996:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80019a2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80019be:	2a00      	cmp	r2, #0
 80019c0:	d101      	bne.n	80019c6 <ETH_SetMACConfig+0x1ee>
 80019c2:	2240      	movs	r2, #64	@ 0x40
 80019c4:	e000      	b.n	80019c8 <ETH_SetMACConfig+0x1f0>
 80019c6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80019c8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80019d0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80019d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80019da:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80019dc:	4313      	orrs	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80019e8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	00048083 	.word	0x00048083
 8001a08:	c0f88000 	.word	0xc0f88000
 8001a0c:	fffffef0 	.word	0xfffffef0

08001a10 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b38      	ldr	r3, [pc, #224]	@ (8001b08 <ETH_SetDMAConfig+0xf8>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	6811      	ldr	r1, [r2, #0]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	430b      	orrs	r3, r1
 8001a32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a36:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	791b      	ldrb	r3, [r3, #4]
 8001a3c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a42:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	7b1b      	ldrb	r3, [r3, #12]
 8001a48:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	4b2c      	ldr	r3, [pc, #176]	@ (8001b0c <ETH_SetDMAConfig+0xfc>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	68f9      	ldr	r1, [r7, #12]
 8001a62:	430b      	orrs	r3, r1
 8001a64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a68:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	7b5b      	ldrb	r3, [r3, #13]
 8001a6e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001a74:	4313      	orrs	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a80:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001a84:	4b22      	ldr	r3, [pc, #136]	@ (8001b10 <ETH_SetDMAConfig+0x100>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	68f9      	ldr	r1, [r7, #12]
 8001a8e:	430b      	orrs	r3, r1
 8001a90:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a94:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	7d1b      	ldrb	r3, [r3, #20]
 8001aa0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001aa2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	7f5b      	ldrb	r3, [r3, #29]
 8001aa8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ab6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001aba:	4b16      	ldr	r3, [pc, #88]	@ (8001b14 <ETH_SetDMAConfig+0x104>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6812      	ldr	r2, [r2, #0]
 8001ac2:	68f9      	ldr	r1, [r7, #12]
 8001ac4:	430b      	orrs	r3, r1
 8001ac6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001aca:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	7f1b      	ldrb	r3, [r3, #28]
 8001ad2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ae4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b18 <ETH_SetDMAConfig+0x108>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	68f9      	ldr	r1, [r7, #12]
 8001af2:	430b      	orrs	r3, r1
 8001af4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001af8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001afc:	bf00      	nop
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	ffff87fd 	.word	0xffff87fd
 8001b0c:	ffff2ffe 	.word	0xffff2ffe
 8001b10:	fffec000 	.word	0xfffec000
 8001b14:	ffc0efef 	.word	0xffc0efef
 8001b18:	7fc0ffff 	.word	0x7fc0ffff

08001b1c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b0a4      	sub	sp, #144	@ 0x90
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001b24:	2301      	movs	r3, #1
 8001b26:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001b40:	2301      	movs	r3, #1
 8001b42:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001b46:	2301      	movs	r3, #1
 8001b48:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001b52:	2301      	movs	r3, #1
 8001b54:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001b58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b5c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001b74:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001b78:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001b80:	2300      	movs	r3, #0
 8001b82:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001b84:	2301      	movs	r3, #1
 8001b86:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001b96:	2300      	movs	r3, #0
 8001b98:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001bb4:	2320      	movs	r3, #32
 8001bb6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001bc6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001bcc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001bd0:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c04:	4619      	mov	r1, r3
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fde6 	bl	80017d8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c10:	2301      	movs	r3, #1
 8001c12:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c26:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c2a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c30:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c34:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001c3c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001c40:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c42:	f107 0308 	add.w	r3, r7, #8
 8001c46:	4619      	mov	r1, r3
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff fee1 	bl	8001a10 <ETH_SetDMAConfig>
}
 8001c4e:	bf00      	nop
 8001c50:	3790      	adds	r7, #144	@ 0x90
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b085      	sub	sp, #20
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	e01d      	b.n	8001ca0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68d9      	ldr	r1, [r3, #12]
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4413      	add	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	440b      	add	r3, r1
 8001c74:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001c8e:	68b9      	ldr	r1, [r7, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	3206      	adds	r2, #6
 8001c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d9de      	bls.n	8001c64 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cc8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cd8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	e023      	b.n	8001d3e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6919      	ldr	r1, [r3, #16]
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	440b      	add	r3, r1
 8001d06:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2200      	movs	r2, #0
 8001d12:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2200      	movs	r2, #0
 8001d24:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	3212      	adds	r2, #18
 8001d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d9d8      	bls.n	8001cf6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691a      	ldr	r2, [r3, #16]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d7e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d92:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001d96:	bf00      	nop
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	@ 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001db2:	4b86      	ldr	r3, [pc, #536]	@ (8001fcc <HAL_GPIO_Init+0x228>)
 8001db4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001db6:	e18c      	b.n	80020d2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 817e 	beq.w	80020cc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d005      	beq.n	8001de8 <HAL_GPIO_Init+0x44>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d130      	bne.n	8001e4a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	2203      	movs	r2, #3
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e1e:	2201      	movs	r2, #1
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	091b      	lsrs	r3, r3, #4
 8001e34:	f003 0201 	and.w	r2, r3, #1
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d017      	beq.n	8001e86 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	2203      	movs	r2, #3
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d123      	bne.n	8001eda <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	08da      	lsrs	r2, r3, #3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3208      	adds	r2, #8
 8001e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	220f      	movs	r2, #15
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	691a      	ldr	r2, [r3, #16]
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	08da      	lsrs	r2, r3, #3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3208      	adds	r2, #8
 8001ed4:	69b9      	ldr	r1, [r7, #24]
 8001ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0203 	and.w	r2, r3, #3
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 80d8 	beq.w	80020cc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1c:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd0 <HAL_GPIO_Init+0x22c>)
 8001f1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f22:	4a2b      	ldr	r2, [pc, #172]	@ (8001fd0 <HAL_GPIO_Init+0x22c>)
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f2c:	4b28      	ldr	r3, [pc, #160]	@ (8001fd0 <HAL_GPIO_Init+0x22c>)
 8001f2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f3a:	4a26      	ldr	r2, [pc, #152]	@ (8001fd4 <HAL_GPIO_Init+0x230>)
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	3302      	adds	r3, #2
 8001f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	220f      	movs	r2, #15
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a1d      	ldr	r2, [pc, #116]	@ (8001fd8 <HAL_GPIO_Init+0x234>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d04a      	beq.n	8001ffc <HAL_GPIO_Init+0x258>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a1c      	ldr	r2, [pc, #112]	@ (8001fdc <HAL_GPIO_Init+0x238>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d02b      	beq.n	8001fc6 <HAL_GPIO_Init+0x222>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe0 <HAL_GPIO_Init+0x23c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d025      	beq.n	8001fc2 <HAL_GPIO_Init+0x21e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a1a      	ldr	r2, [pc, #104]	@ (8001fe4 <HAL_GPIO_Init+0x240>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d01f      	beq.n	8001fbe <HAL_GPIO_Init+0x21a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a19      	ldr	r2, [pc, #100]	@ (8001fe8 <HAL_GPIO_Init+0x244>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d019      	beq.n	8001fba <HAL_GPIO_Init+0x216>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a18      	ldr	r2, [pc, #96]	@ (8001fec <HAL_GPIO_Init+0x248>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d013      	beq.n	8001fb6 <HAL_GPIO_Init+0x212>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a17      	ldr	r2, [pc, #92]	@ (8001ff0 <HAL_GPIO_Init+0x24c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00d      	beq.n	8001fb2 <HAL_GPIO_Init+0x20e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a16      	ldr	r2, [pc, #88]	@ (8001ff4 <HAL_GPIO_Init+0x250>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d007      	beq.n	8001fae <HAL_GPIO_Init+0x20a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a15      	ldr	r2, [pc, #84]	@ (8001ff8 <HAL_GPIO_Init+0x254>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d101      	bne.n	8001faa <HAL_GPIO_Init+0x206>
 8001fa6:	2309      	movs	r3, #9
 8001fa8:	e029      	b.n	8001ffe <HAL_GPIO_Init+0x25a>
 8001faa:	230a      	movs	r3, #10
 8001fac:	e027      	b.n	8001ffe <HAL_GPIO_Init+0x25a>
 8001fae:	2307      	movs	r3, #7
 8001fb0:	e025      	b.n	8001ffe <HAL_GPIO_Init+0x25a>
 8001fb2:	2306      	movs	r3, #6
 8001fb4:	e023      	b.n	8001ffe <HAL_GPIO_Init+0x25a>
 8001fb6:	2305      	movs	r3, #5
 8001fb8:	e021      	b.n	8001ffe <HAL_GPIO_Init+0x25a>
 8001fba:	2304      	movs	r3, #4
 8001fbc:	e01f      	b.n	8001ffe <HAL_GPIO_Init+0x25a>
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e01d      	b.n	8001ffe <HAL_GPIO_Init+0x25a>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e01b      	b.n	8001ffe <HAL_GPIO_Init+0x25a>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e019      	b.n	8001ffe <HAL_GPIO_Init+0x25a>
 8001fca:	bf00      	nop
 8001fcc:	58000080 	.word	0x58000080
 8001fd0:	58024400 	.word	0x58024400
 8001fd4:	58000400 	.word	0x58000400
 8001fd8:	58020000 	.word	0x58020000
 8001fdc:	58020400 	.word	0x58020400
 8001fe0:	58020800 	.word	0x58020800
 8001fe4:	58020c00 	.word	0x58020c00
 8001fe8:	58021000 	.word	0x58021000
 8001fec:	58021400 	.word	0x58021400
 8001ff0:	58021800 	.word	0x58021800
 8001ff4:	58021c00 	.word	0x58021c00
 8001ff8:	58022400 	.word	0x58022400
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	f002 0203 	and.w	r2, r2, #3
 8002004:	0092      	lsls	r2, r2, #2
 8002006:	4093      	lsls	r3, r2
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800200e:	4938      	ldr	r1, [pc, #224]	@ (80020f0 <HAL_GPIO_Init+0x34c>)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	3302      	adds	r3, #2
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800201c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002042:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800204a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002070:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	3301      	adds	r3, #1
 80020d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa22 f303 	lsr.w	r3, r2, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f47f ae6b 	bne.w	8001db8 <HAL_GPIO_Init+0x14>
  }
}
 80020e2:	bf00      	nop
 80020e4:	bf00      	nop
 80020e6:	3724      	adds	r7, #36	@ 0x24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	58000400 	.word	0x58000400

080020f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	807b      	strh	r3, [r7, #2]
 8002100:	4613      	mov	r3, r2
 8002102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002104:	787b      	ldrb	r3, [r7, #1]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800210a:	887a      	ldrh	r2, [r7, #2]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002110:	e003      	b.n	800211a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002112:	887b      	ldrh	r3, [r7, #2]
 8002114:	041a      	lsls	r2, r3, #16
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	619a      	str	r2, [r3, #24]
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002130:	4b19      	ldr	r3, [pc, #100]	@ (8002198 <HAL_PWREx_ConfigSupply+0x70>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b04      	cmp	r3, #4
 800213a:	d00a      	beq.n	8002152 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800213c:	4b16      	ldr	r3, [pc, #88]	@ (8002198 <HAL_PWREx_ConfigSupply+0x70>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	429a      	cmp	r2, r3
 8002148:	d001      	beq.n	800214e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e01f      	b.n	800218e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	e01d      	b.n	800218e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002152:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <HAL_PWREx_ConfigSupply+0x70>)
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f023 0207 	bic.w	r2, r3, #7
 800215a:	490f      	ldr	r1, [pc, #60]	@ (8002198 <HAL_PWREx_ConfigSupply+0x70>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4313      	orrs	r3, r2
 8002160:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002162:	f7ff f8c3 	bl	80012ec <HAL_GetTick>
 8002166:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002168:	e009      	b.n	800217e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800216a:	f7ff f8bf 	bl	80012ec <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002178:	d901      	bls.n	800217e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e007      	b.n	800218e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800217e:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_PWREx_ConfigSupply+0x70>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800218a:	d1ee      	bne.n	800216a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	58024800 	.word	0x58024800

0800219c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08c      	sub	sp, #48	@ 0x30
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e3c8      	b.n	8002940 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 8087 	beq.w	80022ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021bc:	4b88      	ldr	r3, [pc, #544]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021c6:	4b86      	ldr	r3, [pc, #536]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 80021c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80021cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ce:	2b10      	cmp	r3, #16
 80021d0:	d007      	beq.n	80021e2 <HAL_RCC_OscConfig+0x46>
 80021d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021d4:	2b18      	cmp	r3, #24
 80021d6:	d110      	bne.n	80021fa <HAL_RCC_OscConfig+0x5e>
 80021d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d10b      	bne.n	80021fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e2:	4b7f      	ldr	r3, [pc, #508]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d06c      	beq.n	80022c8 <HAL_RCC_OscConfig+0x12c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d168      	bne.n	80022c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e3a2      	b.n	8002940 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002202:	d106      	bne.n	8002212 <HAL_RCC_OscConfig+0x76>
 8002204:	4b76      	ldr	r3, [pc, #472]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a75      	ldr	r2, [pc, #468]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 800220a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	e02e      	b.n	8002270 <HAL_RCC_OscConfig+0xd4>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10c      	bne.n	8002234 <HAL_RCC_OscConfig+0x98>
 800221a:	4b71      	ldr	r3, [pc, #452]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a70      	ldr	r2, [pc, #448]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 8002220:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b6e      	ldr	r3, [pc, #440]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a6d      	ldr	r2, [pc, #436]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 800222c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e01d      	b.n	8002270 <HAL_RCC_OscConfig+0xd4>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800223c:	d10c      	bne.n	8002258 <HAL_RCC_OscConfig+0xbc>
 800223e:	4b68      	ldr	r3, [pc, #416]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a67      	ldr	r2, [pc, #412]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 8002244:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	4b65      	ldr	r3, [pc, #404]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a64      	ldr	r2, [pc, #400]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 8002250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e00b      	b.n	8002270 <HAL_RCC_OscConfig+0xd4>
 8002258:	4b61      	ldr	r3, [pc, #388]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a60      	ldr	r2, [pc, #384]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 800225e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	4b5e      	ldr	r3, [pc, #376]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a5d      	ldr	r2, [pc, #372]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 800226a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800226e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d013      	beq.n	80022a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7ff f838 	bl	80012ec <HAL_GetTick>
 800227c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002280:	f7ff f834 	bl	80012ec <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	@ 0x64
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e356      	b.n	8002940 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002292:	4b53      	ldr	r3, [pc, #332]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0xe4>
 800229e:	e014      	b.n	80022ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7ff f824 	bl	80012ec <HAL_GetTick>
 80022a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a8:	f7ff f820 	bl	80012ec <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	@ 0x64
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e342      	b.n	8002940 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022ba:	4b49      	ldr	r3, [pc, #292]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x10c>
 80022c6:	e000      	b.n	80022ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 808c 	beq.w	80023f0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022d8:	4b41      	ldr	r3, [pc, #260]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022e2:	4b3f      	ldr	r3, [pc, #252]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 80022e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d007      	beq.n	80022fe <HAL_RCC_OscConfig+0x162>
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	2b18      	cmp	r3, #24
 80022f2:	d137      	bne.n	8002364 <HAL_RCC_OscConfig+0x1c8>
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d132      	bne.n	8002364 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022fe:	4b38      	ldr	r3, [pc, #224]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <HAL_RCC_OscConfig+0x17a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e314      	b.n	8002940 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002316:	4b32      	ldr	r3, [pc, #200]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f023 0219 	bic.w	r2, r3, #25
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	492f      	ldr	r1, [pc, #188]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 8002324:	4313      	orrs	r3, r2
 8002326:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7fe ffe0 	bl	80012ec <HAL_GetTick>
 800232c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002330:	f7fe ffdc 	bl	80012ec <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e2fe      	b.n	8002940 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002342:	4b27      	ldr	r3, [pc, #156]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234e:	4b24      	ldr	r3, [pc, #144]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	061b      	lsls	r3, r3, #24
 800235c:	4920      	ldr	r1, [pc, #128]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 800235e:	4313      	orrs	r3, r2
 8002360:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002362:	e045      	b.n	80023f0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d026      	beq.n	80023ba <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800236c:	4b1c      	ldr	r3, [pc, #112]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f023 0219 	bic.w	r2, r3, #25
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4919      	ldr	r1, [pc, #100]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237e:	f7fe ffb5 	bl	80012ec <HAL_GetTick>
 8002382:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002386:	f7fe ffb1 	bl	80012ec <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e2d3      	b.n	8002940 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002398:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a4:	4b0e      	ldr	r3, [pc, #56]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	061b      	lsls	r3, r3, #24
 80023b2:	490b      	ldr	r1, [pc, #44]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
 80023b8:	e01a      	b.n	80023f0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ba:	4b09      	ldr	r3, [pc, #36]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a08      	ldr	r2, [pc, #32]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c6:	f7fe ff91 	bl	80012ec <HAL_GetTick>
 80023ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023cc:	e00a      	b.n	80023e4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ce:	f7fe ff8d 	bl	80012ec <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d903      	bls.n	80023e4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e2af      	b.n	8002940 <HAL_RCC_OscConfig+0x7a4>
 80023e0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023e4:	4b96      	ldr	r3, [pc, #600]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1ee      	bne.n	80023ce <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0310 	and.w	r3, r3, #16
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d06a      	beq.n	80024d2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023fc:	4b90      	ldr	r3, [pc, #576]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002404:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002406:	4b8e      	ldr	r3, [pc, #568]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 8002408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	2b08      	cmp	r3, #8
 8002410:	d007      	beq.n	8002422 <HAL_RCC_OscConfig+0x286>
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2b18      	cmp	r3, #24
 8002416:	d11b      	bne.n	8002450 <HAL_RCC_OscConfig+0x2b4>
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b01      	cmp	r3, #1
 8002420:	d116      	bne.n	8002450 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002422:	4b87      	ldr	r3, [pc, #540]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_RCC_OscConfig+0x29e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	2b80      	cmp	r3, #128	@ 0x80
 8002434:	d001      	beq.n	800243a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e282      	b.n	8002940 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800243a:	4b81      	ldr	r3, [pc, #516]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	061b      	lsls	r3, r3, #24
 8002448:	497d      	ldr	r1, [pc, #500]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 800244a:	4313      	orrs	r3, r2
 800244c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800244e:	e040      	b.n	80024d2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d023      	beq.n	80024a0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002458:	4b79      	ldr	r3, [pc, #484]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a78      	ldr	r2, [pc, #480]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 800245e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe ff42 	bl	80012ec <HAL_GetTick>
 8002468:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800246c:	f7fe ff3e 	bl	80012ec <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e260      	b.n	8002940 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800247e:	4b70      	ldr	r3, [pc, #448]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800248a:	4b6d      	ldr	r3, [pc, #436]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	061b      	lsls	r3, r3, #24
 8002498:	4969      	ldr	r1, [pc, #420]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 800249a:	4313      	orrs	r3, r2
 800249c:	60cb      	str	r3, [r1, #12]
 800249e:	e018      	b.n	80024d2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80024a0:	4b67      	ldr	r3, [pc, #412]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a66      	ldr	r2, [pc, #408]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 80024a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7fe ff1e 	bl	80012ec <HAL_GetTick>
 80024b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80024b4:	f7fe ff1a 	bl	80012ec <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e23c      	b.n	8002940 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024c6:	4b5e      	ldr	r3, [pc, #376]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d036      	beq.n	800254c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d019      	beq.n	800251a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024e6:	4b56      	ldr	r3, [pc, #344]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 80024e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ea:	4a55      	ldr	r2, [pc, #340]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f2:	f7fe fefb 	bl	80012ec <HAL_GetTick>
 80024f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024fa:	f7fe fef7 	bl	80012ec <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e219      	b.n	8002940 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800250c:	4b4c      	ldr	r3, [pc, #304]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 800250e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f0      	beq.n	80024fa <HAL_RCC_OscConfig+0x35e>
 8002518:	e018      	b.n	800254c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800251a:	4b49      	ldr	r3, [pc, #292]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 800251c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800251e:	4a48      	ldr	r2, [pc, #288]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002526:	f7fe fee1 	bl	80012ec <HAL_GetTick>
 800252a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800252e:	f7fe fedd 	bl	80012ec <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e1ff      	b.n	8002940 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002540:	4b3f      	ldr	r3, [pc, #252]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 8002542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1f0      	bne.n	800252e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b00      	cmp	r3, #0
 8002556:	d036      	beq.n	80025c6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d019      	beq.n	8002594 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002560:	4b37      	ldr	r3, [pc, #220]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a36      	ldr	r2, [pc, #216]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 8002566:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800256a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800256c:	f7fe febe 	bl	80012ec <HAL_GetTick>
 8002570:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002574:	f7fe feba 	bl	80012ec <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e1dc      	b.n	8002940 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002586:	4b2e      	ldr	r3, [pc, #184]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x3d8>
 8002592:	e018      	b.n	80025c6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002594:	4b2a      	ldr	r3, [pc, #168]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a29      	ldr	r2, [pc, #164]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 800259a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800259e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025a0:	f7fe fea4 	bl	80012ec <HAL_GetTick>
 80025a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025a8:	f7fe fea0 	bl	80012ec <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e1c2      	b.n	8002940 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025ba:	4b21      	ldr	r3, [pc, #132]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 8086 	beq.w	80026e0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80025d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002644 <HAL_RCC_OscConfig+0x4a8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1a      	ldr	r2, [pc, #104]	@ (8002644 <HAL_RCC_OscConfig+0x4a8>)
 80025da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025e0:	f7fe fe84 	bl	80012ec <HAL_GetTick>
 80025e4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e8:	f7fe fe80 	bl	80012ec <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	@ 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e1a2      	b.n	8002940 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025fa:	4b12      	ldr	r3, [pc, #72]	@ (8002644 <HAL_RCC_OscConfig+0x4a8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d106      	bne.n	800261c <HAL_RCC_OscConfig+0x480>
 800260e:	4b0c      	ldr	r3, [pc, #48]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002612:	4a0b      	ldr	r2, [pc, #44]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6713      	str	r3, [r2, #112]	@ 0x70
 800261a:	e032      	b.n	8002682 <HAL_RCC_OscConfig+0x4e6>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d111      	bne.n	8002648 <HAL_RCC_OscConfig+0x4ac>
 8002624:	4b06      	ldr	r3, [pc, #24]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 8002626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002628:	4a05      	ldr	r2, [pc, #20]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 800262a:	f023 0301 	bic.w	r3, r3, #1
 800262e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002630:	4b03      	ldr	r3, [pc, #12]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002634:	4a02      	ldr	r2, [pc, #8]	@ (8002640 <HAL_RCC_OscConfig+0x4a4>)
 8002636:	f023 0304 	bic.w	r3, r3, #4
 800263a:	6713      	str	r3, [r2, #112]	@ 0x70
 800263c:	e021      	b.n	8002682 <HAL_RCC_OscConfig+0x4e6>
 800263e:	bf00      	nop
 8002640:	58024400 	.word	0x58024400
 8002644:	58024800 	.word	0x58024800
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b05      	cmp	r3, #5
 800264e:	d10c      	bne.n	800266a <HAL_RCC_OscConfig+0x4ce>
 8002650:	4b83      	ldr	r3, [pc, #524]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 8002652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002654:	4a82      	ldr	r2, [pc, #520]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 8002656:	f043 0304 	orr.w	r3, r3, #4
 800265a:	6713      	str	r3, [r2, #112]	@ 0x70
 800265c:	4b80      	ldr	r3, [pc, #512]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 800265e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002660:	4a7f      	ldr	r2, [pc, #508]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6713      	str	r3, [r2, #112]	@ 0x70
 8002668:	e00b      	b.n	8002682 <HAL_RCC_OscConfig+0x4e6>
 800266a:	4b7d      	ldr	r3, [pc, #500]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266e:	4a7c      	ldr	r2, [pc, #496]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	6713      	str	r3, [r2, #112]	@ 0x70
 8002676:	4b7a      	ldr	r3, [pc, #488]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 8002678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800267a:	4a79      	ldr	r2, [pc, #484]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 800267c:	f023 0304 	bic.w	r3, r3, #4
 8002680:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d015      	beq.n	80026b6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268a:	f7fe fe2f 	bl	80012ec <HAL_GetTick>
 800268e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002690:	e00a      	b.n	80026a8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002692:	f7fe fe2b 	bl	80012ec <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e14b      	b.n	8002940 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026a8:	4b6d      	ldr	r3, [pc, #436]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0ee      	beq.n	8002692 <HAL_RCC_OscConfig+0x4f6>
 80026b4:	e014      	b.n	80026e0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b6:	f7fe fe19 	bl	80012ec <HAL_GetTick>
 80026ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026bc:	e00a      	b.n	80026d4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026be:	f7fe fe15 	bl	80012ec <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e135      	b.n	8002940 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026d4:	4b62      	ldr	r3, [pc, #392]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1ee      	bne.n	80026be <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 812a 	beq.w	800293e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80026ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026f2:	2b18      	cmp	r3, #24
 80026f4:	f000 80ba 	beq.w	800286c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	f040 8095 	bne.w	800282c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002702:	4b57      	ldr	r3, [pc, #348]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a56      	ldr	r2, [pc, #344]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 8002708:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800270c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270e:	f7fe fded 	bl	80012ec <HAL_GetTick>
 8002712:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002716:	f7fe fde9 	bl	80012ec <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e10b      	b.n	8002940 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002728:	4b4d      	ldr	r3, [pc, #308]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f0      	bne.n	8002716 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002734:	4b4a      	ldr	r3, [pc, #296]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 8002736:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002738:	4b4a      	ldr	r3, [pc, #296]	@ (8002864 <HAL_RCC_OscConfig+0x6c8>)
 800273a:	4013      	ands	r3, r2
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002744:	0112      	lsls	r2, r2, #4
 8002746:	430a      	orrs	r2, r1
 8002748:	4945      	ldr	r1, [pc, #276]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	628b      	str	r3, [r1, #40]	@ 0x28
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	3b01      	subs	r3, #1
 8002754:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800275c:	3b01      	subs	r3, #1
 800275e:	025b      	lsls	r3, r3, #9
 8002760:	b29b      	uxth	r3, r3
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002768:	3b01      	subs	r3, #1
 800276a:	041b      	lsls	r3, r3, #16
 800276c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002776:	3b01      	subs	r3, #1
 8002778:	061b      	lsls	r3, r3, #24
 800277a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800277e:	4938      	ldr	r1, [pc, #224]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 8002780:	4313      	orrs	r3, r2
 8002782:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002784:	4b36      	ldr	r3, [pc, #216]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 8002786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002788:	4a35      	ldr	r2, [pc, #212]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 800278a:	f023 0301 	bic.w	r3, r3, #1
 800278e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002790:	4b33      	ldr	r3, [pc, #204]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 8002792:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002794:	4b34      	ldr	r3, [pc, #208]	@ (8002868 <HAL_RCC_OscConfig+0x6cc>)
 8002796:	4013      	ands	r3, r2
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800279c:	00d2      	lsls	r2, r2, #3
 800279e:	4930      	ldr	r1, [pc, #192]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80027a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 80027a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a8:	f023 020c 	bic.w	r2, r3, #12
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b0:	492b      	ldr	r1, [pc, #172]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80027b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 80027b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ba:	f023 0202 	bic.w	r2, r3, #2
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c2:	4927      	ldr	r1, [pc, #156]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80027c8:	4b25      	ldr	r3, [pc, #148]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 80027ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027cc:	4a24      	ldr	r2, [pc, #144]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 80027ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027d4:	4b22      	ldr	r3, [pc, #136]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 80027d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d8:	4a21      	ldr	r2, [pc, #132]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 80027da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80027e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 80027e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 80027e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80027ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 80027ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027f8:	4b19      	ldr	r3, [pc, #100]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a18      	ldr	r2, [pc, #96]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 80027fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7fe fd72 	bl	80012ec <HAL_GetTick>
 8002808:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280c:	f7fe fd6e 	bl	80012ec <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e090      	b.n	8002940 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800281e:	4b10      	ldr	r3, [pc, #64]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x670>
 800282a:	e088      	b.n	800293e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282c:	4b0c      	ldr	r3, [pc, #48]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a0b      	ldr	r2, [pc, #44]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 8002832:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002838:	f7fe fd58 	bl	80012ec <HAL_GetTick>
 800283c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002840:	f7fe fd54 	bl	80012ec <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e076      	b.n	8002940 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002852:	4b03      	ldr	r3, [pc, #12]	@ (8002860 <HAL_RCC_OscConfig+0x6c4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x6a4>
 800285e:	e06e      	b.n	800293e <HAL_RCC_OscConfig+0x7a2>
 8002860:	58024400 	.word	0x58024400
 8002864:	fffffc0c 	.word	0xfffffc0c
 8002868:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800286c:	4b36      	ldr	r3, [pc, #216]	@ (8002948 <HAL_RCC_OscConfig+0x7ac>)
 800286e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002870:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002872:	4b35      	ldr	r3, [pc, #212]	@ (8002948 <HAL_RCC_OscConfig+0x7ac>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287c:	2b01      	cmp	r3, #1
 800287e:	d031      	beq.n	80028e4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	f003 0203 	and.w	r2, r3, #3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800288a:	429a      	cmp	r2, r3
 800288c:	d12a      	bne.n	80028e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d122      	bne.n	80028e4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d11a      	bne.n	80028e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	0a5b      	lsrs	r3, r3, #9
 80028b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d111      	bne.n	80028e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	0c1b      	lsrs	r3, r3, #16
 80028c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d108      	bne.n	80028e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	0e1b      	lsrs	r3, r3, #24
 80028d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028de:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e02b      	b.n	8002940 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80028e8:	4b17      	ldr	r3, [pc, #92]	@ (8002948 <HAL_RCC_OscConfig+0x7ac>)
 80028ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ec:	08db      	lsrs	r3, r3, #3
 80028ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028f2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d01f      	beq.n	800293e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80028fe:	4b12      	ldr	r3, [pc, #72]	@ (8002948 <HAL_RCC_OscConfig+0x7ac>)
 8002900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002902:	4a11      	ldr	r2, [pc, #68]	@ (8002948 <HAL_RCC_OscConfig+0x7ac>)
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800290a:	f7fe fcef 	bl	80012ec <HAL_GetTick>
 800290e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002910:	bf00      	nop
 8002912:	f7fe fceb 	bl	80012ec <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291a:	4293      	cmp	r3, r2
 800291c:	d0f9      	beq.n	8002912 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800291e:	4b0a      	ldr	r3, [pc, #40]	@ (8002948 <HAL_RCC_OscConfig+0x7ac>)
 8002920:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002922:	4b0a      	ldr	r3, [pc, #40]	@ (800294c <HAL_RCC_OscConfig+0x7b0>)
 8002924:	4013      	ands	r3, r2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800292a:	00d2      	lsls	r2, r2, #3
 800292c:	4906      	ldr	r1, [pc, #24]	@ (8002948 <HAL_RCC_OscConfig+0x7ac>)
 800292e:	4313      	orrs	r3, r2
 8002930:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002932:	4b05      	ldr	r3, [pc, #20]	@ (8002948 <HAL_RCC_OscConfig+0x7ac>)
 8002934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002936:	4a04      	ldr	r2, [pc, #16]	@ (8002948 <HAL_RCC_OscConfig+0x7ac>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3730      	adds	r7, #48	@ 0x30
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	58024400 	.word	0x58024400
 800294c:	ffff0007 	.word	0xffff0007

08002950 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e19c      	b.n	8002c9e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002964:	4b8a      	ldr	r3, [pc, #552]	@ (8002b90 <HAL_RCC_ClockConfig+0x240>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 030f 	and.w	r3, r3, #15
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d910      	bls.n	8002994 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b87      	ldr	r3, [pc, #540]	@ (8002b90 <HAL_RCC_ClockConfig+0x240>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 020f 	bic.w	r2, r3, #15
 800297a:	4985      	ldr	r1, [pc, #532]	@ (8002b90 <HAL_RCC_ClockConfig+0x240>)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b83      	ldr	r3, [pc, #524]	@ (8002b90 <HAL_RCC_ClockConfig+0x240>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e184      	b.n	8002c9e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d010      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	4b7b      	ldr	r3, [pc, #492]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d908      	bls.n	80029c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80029b0:	4b78      	ldr	r3, [pc, #480]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	4975      	ldr	r1, [pc, #468]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695a      	ldr	r2, [r3, #20]
 80029d2:	4b70      	ldr	r3, [pc, #448]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029da:	429a      	cmp	r2, r3
 80029dc:	d908      	bls.n	80029f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029de:	4b6d      	ldr	r3, [pc, #436]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	496a      	ldr	r1, [pc, #424]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d010      	beq.n	8002a1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	699a      	ldr	r2, [r3, #24]
 8002a00:	4b64      	ldr	r3, [pc, #400]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d908      	bls.n	8002a1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a0c:	4b61      	ldr	r3, [pc, #388]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	495e      	ldr	r1, [pc, #376]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d010      	beq.n	8002a4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69da      	ldr	r2, [r3, #28]
 8002a2e:	4b59      	ldr	r3, [pc, #356]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d908      	bls.n	8002a4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002a3a:	4b56      	ldr	r3, [pc, #344]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	4953      	ldr	r1, [pc, #332]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d010      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	4b4d      	ldr	r3, [pc, #308]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d908      	bls.n	8002a7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a68:	4b4a      	ldr	r3, [pc, #296]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	f023 020f 	bic.w	r2, r3, #15
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4947      	ldr	r1, [pc, #284]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d055      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002a86:	4b43      	ldr	r3, [pc, #268]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	4940      	ldr	r1, [pc, #256]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d107      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002aa0:	4b3c      	ldr	r3, [pc, #240]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d121      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0f6      	b.n	8002c9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d107      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ab8:	4b36      	ldr	r3, [pc, #216]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d115      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0ea      	b.n	8002c9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d107      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ad0:	4b30      	ldr	r3, [pc, #192]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d109      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0de      	b.n	8002c9e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ae0:	4b2c      	ldr	r3, [pc, #176]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0d6      	b.n	8002c9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002af0:	4b28      	ldr	r3, [pc, #160]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f023 0207 	bic.w	r2, r3, #7
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	4925      	ldr	r1, [pc, #148]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b02:	f7fe fbf3 	bl	80012ec <HAL_GetTick>
 8002b06:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b08:	e00a      	b.n	8002b20 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b0a:	f7fe fbef 	bl	80012ec <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e0be      	b.n	8002c9e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b20:	4b1c      	ldr	r3, [pc, #112]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d1eb      	bne.n	8002b0a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d010      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	4b14      	ldr	r3, [pc, #80]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d208      	bcs.n	8002b60 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b4e:	4b11      	ldr	r3, [pc, #68]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f023 020f 	bic.w	r2, r3, #15
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	490e      	ldr	r1, [pc, #56]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b60:	4b0b      	ldr	r3, [pc, #44]	@ (8002b90 <HAL_RCC_ClockConfig+0x240>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d214      	bcs.n	8002b98 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6e:	4b08      	ldr	r3, [pc, #32]	@ (8002b90 <HAL_RCC_ClockConfig+0x240>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 020f 	bic.w	r2, r3, #15
 8002b76:	4906      	ldr	r1, [pc, #24]	@ (8002b90 <HAL_RCC_ClockConfig+0x240>)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7e:	4b04      	ldr	r3, [pc, #16]	@ (8002b90 <HAL_RCC_ClockConfig+0x240>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d005      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e086      	b.n	8002c9e <HAL_RCC_ClockConfig+0x34e>
 8002b90:	52002000 	.word	0x52002000
 8002b94:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d010      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ca8 <HAL_RCC_ClockConfig+0x358>)
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d208      	bcs.n	8002bc6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002bb4:	4b3c      	ldr	r3, [pc, #240]	@ (8002ca8 <HAL_RCC_ClockConfig+0x358>)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	4939      	ldr	r1, [pc, #228]	@ (8002ca8 <HAL_RCC_ClockConfig+0x358>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d010      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	4b34      	ldr	r3, [pc, #208]	@ (8002ca8 <HAL_RCC_ClockConfig+0x358>)
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d208      	bcs.n	8002bf4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002be2:	4b31      	ldr	r3, [pc, #196]	@ (8002ca8 <HAL_RCC_ClockConfig+0x358>)
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	492e      	ldr	r1, [pc, #184]	@ (8002ca8 <HAL_RCC_ClockConfig+0x358>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d010      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699a      	ldr	r2, [r3, #24]
 8002c04:	4b28      	ldr	r3, [pc, #160]	@ (8002ca8 <HAL_RCC_ClockConfig+0x358>)
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d208      	bcs.n	8002c22 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c10:	4b25      	ldr	r3, [pc, #148]	@ (8002ca8 <HAL_RCC_ClockConfig+0x358>)
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	4922      	ldr	r1, [pc, #136]	@ (8002ca8 <HAL_RCC_ClockConfig+0x358>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0320 	and.w	r3, r3, #32
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d010      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69da      	ldr	r2, [r3, #28]
 8002c32:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca8 <HAL_RCC_ClockConfig+0x358>)
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d208      	bcs.n	8002c50 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca8 <HAL_RCC_ClockConfig+0x358>)
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	4917      	ldr	r1, [pc, #92]	@ (8002ca8 <HAL_RCC_ClockConfig+0x358>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c50:	f000 f834 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 8002c54:	4602      	mov	r2, r0
 8002c56:	4b14      	ldr	r3, [pc, #80]	@ (8002ca8 <HAL_RCC_ClockConfig+0x358>)
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	0a1b      	lsrs	r3, r3, #8
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	4912      	ldr	r1, [pc, #72]	@ (8002cac <HAL_RCC_ClockConfig+0x35c>)
 8002c62:	5ccb      	ldrb	r3, [r1, r3]
 8002c64:	f003 031f 	and.w	r3, r3, #31
 8002c68:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca8 <HAL_RCC_ClockConfig+0x358>)
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	4a0d      	ldr	r2, [pc, #52]	@ (8002cac <HAL_RCC_ClockConfig+0x35c>)
 8002c78:	5cd3      	ldrb	r3, [r2, r3]
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	fa22 f303 	lsr.w	r3, r2, r3
 8002c84:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb0 <HAL_RCC_ClockConfig+0x360>)
 8002c86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c88:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb4 <HAL_RCC_ClockConfig+0x364>)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb8 <HAL_RCC_ClockConfig+0x368>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe fae0 	bl	8001258 <HAL_InitTick>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	58024400 	.word	0x58024400
 8002cac:	08006148 	.word	0x08006148
 8002cb0:	24000008 	.word	0x24000008
 8002cb4:	24000004 	.word	0x24000004
 8002cb8:	2400000c 	.word	0x2400000c

08002cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b089      	sub	sp, #36	@ 0x24
 8002cc0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cc2:	4bb3      	ldr	r3, [pc, #716]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cca:	2b18      	cmp	r3, #24
 8002ccc:	f200 8155 	bhi.w	8002f7a <HAL_RCC_GetSysClockFreq+0x2be>
 8002cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8002cd8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd6:	bf00      	nop
 8002cd8:	08002d3d 	.word	0x08002d3d
 8002cdc:	08002f7b 	.word	0x08002f7b
 8002ce0:	08002f7b 	.word	0x08002f7b
 8002ce4:	08002f7b 	.word	0x08002f7b
 8002ce8:	08002f7b 	.word	0x08002f7b
 8002cec:	08002f7b 	.word	0x08002f7b
 8002cf0:	08002f7b 	.word	0x08002f7b
 8002cf4:	08002f7b 	.word	0x08002f7b
 8002cf8:	08002d63 	.word	0x08002d63
 8002cfc:	08002f7b 	.word	0x08002f7b
 8002d00:	08002f7b 	.word	0x08002f7b
 8002d04:	08002f7b 	.word	0x08002f7b
 8002d08:	08002f7b 	.word	0x08002f7b
 8002d0c:	08002f7b 	.word	0x08002f7b
 8002d10:	08002f7b 	.word	0x08002f7b
 8002d14:	08002f7b 	.word	0x08002f7b
 8002d18:	08002d69 	.word	0x08002d69
 8002d1c:	08002f7b 	.word	0x08002f7b
 8002d20:	08002f7b 	.word	0x08002f7b
 8002d24:	08002f7b 	.word	0x08002f7b
 8002d28:	08002f7b 	.word	0x08002f7b
 8002d2c:	08002f7b 	.word	0x08002f7b
 8002d30:	08002f7b 	.word	0x08002f7b
 8002d34:	08002f7b 	.word	0x08002f7b
 8002d38:	08002d6f 	.word	0x08002d6f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d3c:	4b94      	ldr	r3, [pc, #592]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d009      	beq.n	8002d5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d48:	4b91      	ldr	r3, [pc, #580]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	08db      	lsrs	r3, r3, #3
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	4a90      	ldr	r2, [pc, #576]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d54:	fa22 f303 	lsr.w	r3, r2, r3
 8002d58:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002d5a:	e111      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002d5c:	4b8d      	ldr	r3, [pc, #564]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d5e:	61bb      	str	r3, [r7, #24]
      break;
 8002d60:	e10e      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002d62:	4b8d      	ldr	r3, [pc, #564]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d64:	61bb      	str	r3, [r7, #24]
      break;
 8002d66:	e10b      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002d68:	4b8c      	ldr	r3, [pc, #560]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002d6a:	61bb      	str	r3, [r7, #24]
      break;
 8002d6c:	e108      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d6e:	4b88      	ldr	r3, [pc, #544]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002d78:	4b85      	ldr	r3, [pc, #532]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d82:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002d84:	4b82      	ldr	r3, [pc, #520]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002d8e:	4b80      	ldr	r3, [pc, #512]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d92:	08db      	lsrs	r3, r3, #3
 8002d94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	fb02 f303 	mul.w	r3, r2, r3
 8002d9e:	ee07 3a90 	vmov	s15, r3
 8002da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 80e1 	beq.w	8002f74 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	f000 8083 	beq.w	8002ec0 <HAL_RCC_GetSysClockFreq+0x204>
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	f200 80a1 	bhi.w	8002f04 <HAL_RCC_GetSysClockFreq+0x248>
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x114>
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d056      	beq.n	8002e7c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002dce:	e099      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dd0:	4b6f      	ldr	r3, [pc, #444]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d02d      	beq.n	8002e38 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ddc:	4b6c      	ldr	r3, [pc, #432]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	08db      	lsrs	r3, r3, #3
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	4a6b      	ldr	r2, [pc, #428]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	ee07 3a90 	vmov	s15, r3
 8002df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	ee07 3a90 	vmov	s15, r3
 8002dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e06:	4b62      	ldr	r3, [pc, #392]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e0e:	ee07 3a90 	vmov	s15, r3
 8002e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e16:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e1a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002fa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e32:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002e36:	e087      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	ee07 3a90 	vmov	s15, r3
 8002e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e42:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002fa4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e4a:	4b51      	ldr	r3, [pc, #324]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e52:	ee07 3a90 	vmov	s15, r3
 8002e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e5e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002fa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e7a:	e065      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	ee07 3a90 	vmov	s15, r3
 8002e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e86:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002fa8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e8e:	4b40      	ldr	r3, [pc, #256]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e96:	ee07 3a90 	vmov	s15, r3
 8002e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ea2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002fa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ebe:	e043      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	ee07 3a90 	vmov	s15, r3
 8002ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002fac <HAL_RCC_GetSysClockFreq+0x2f0>
 8002ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ed2:	4b2f      	ldr	r3, [pc, #188]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eda:	ee07 3a90 	vmov	s15, r3
 8002ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ee2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ee6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002fa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002efe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f02:	e021      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	ee07 3a90 	vmov	s15, r3
 8002f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f0e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002fa8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f16:	4b1e      	ldr	r3, [pc, #120]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f1e:	ee07 3a90 	vmov	s15, r3
 8002f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f26:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f2a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002fa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f46:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002f48:	4b11      	ldr	r3, [pc, #68]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4c:	0a5b      	lsrs	r3, r3, #9
 8002f4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f52:	3301      	adds	r3, #1
 8002f54:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	ee07 3a90 	vmov	s15, r3
 8002f5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f60:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f6c:	ee17 3a90 	vmov	r3, s15
 8002f70:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002f72:	e005      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61bb      	str	r3, [r7, #24]
      break;
 8002f78:	e002      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002f7a:	4b07      	ldr	r3, [pc, #28]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f7c:	61bb      	str	r3, [r7, #24]
      break;
 8002f7e:	bf00      	nop
  }

  return sysclockfreq;
 8002f80:	69bb      	ldr	r3, [r7, #24]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3724      	adds	r7, #36	@ 0x24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	58024400 	.word	0x58024400
 8002f94:	03d09000 	.word	0x03d09000
 8002f98:	003d0900 	.word	0x003d0900
 8002f9c:	007a1200 	.word	0x007a1200
 8002fa0:	46000000 	.word	0x46000000
 8002fa4:	4c742400 	.word	0x4c742400
 8002fa8:	4a742400 	.word	0x4a742400
 8002fac:	4af42400 	.word	0x4af42400

08002fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002fb6:	f7ff fe81 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	4b10      	ldr	r3, [pc, #64]	@ (8003000 <HAL_RCC_GetHCLKFreq+0x50>)
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	0a1b      	lsrs	r3, r3, #8
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	490f      	ldr	r1, [pc, #60]	@ (8003004 <HAL_RCC_GetHCLKFreq+0x54>)
 8002fc8:	5ccb      	ldrb	r3, [r1, r3]
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003000 <HAL_RCC_GetHCLKFreq+0x50>)
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	4a09      	ldr	r2, [pc, #36]	@ (8003004 <HAL_RCC_GetHCLKFreq+0x54>)
 8002fde:	5cd3      	ldrb	r3, [r2, r3]
 8002fe0:	f003 031f 	and.w	r3, r3, #31
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fea:	4a07      	ldr	r2, [pc, #28]	@ (8003008 <HAL_RCC_GetHCLKFreq+0x58>)
 8002fec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fee:	4a07      	ldr	r2, [pc, #28]	@ (800300c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002ff4:	4b04      	ldr	r3, [pc, #16]	@ (8003008 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	58024400 	.word	0x58024400
 8003004:	08006148 	.word	0x08006148
 8003008:	24000008 	.word	0x24000008
 800300c:	24000004 	.word	0x24000004

08003010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003014:	f7ff ffcc 	bl	8002fb0 <HAL_RCC_GetHCLKFreq>
 8003018:	4602      	mov	r2, r0
 800301a:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <HAL_RCC_GetPCLK1Freq+0x24>)
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	091b      	lsrs	r3, r3, #4
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	4904      	ldr	r1, [pc, #16]	@ (8003038 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003026:	5ccb      	ldrb	r3, [r1, r3]
 8003028:	f003 031f 	and.w	r3, r3, #31
 800302c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003030:	4618      	mov	r0, r3
 8003032:	bd80      	pop	{r7, pc}
 8003034:	58024400 	.word	0x58024400
 8003038:	08006148 	.word	0x08006148

0800303c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003040:	f7ff ffb6 	bl	8002fb0 <HAL_RCC_GetHCLKFreq>
 8003044:	4602      	mov	r2, r0
 8003046:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	0a1b      	lsrs	r3, r3, #8
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	4904      	ldr	r1, [pc, #16]	@ (8003064 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003052:	5ccb      	ldrb	r3, [r1, r3]
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800305c:	4618      	mov	r0, r3
 800305e:	bd80      	pop	{r7, pc}
 8003060:	58024400 	.word	0x58024400
 8003064:	08006148 	.word	0x08006148

08003068 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800306c:	b0c6      	sub	sp, #280	@ 0x118
 800306e:	af00      	add	r7, sp, #0
 8003070:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003074:	2300      	movs	r3, #0
 8003076:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800307a:	2300      	movs	r3, #0
 800307c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003088:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800308c:	2500      	movs	r5, #0
 800308e:	ea54 0305 	orrs.w	r3, r4, r5
 8003092:	d049      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003098:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800309a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800309e:	d02f      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80030a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80030a4:	d828      	bhi.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80030a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030aa:	d01a      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80030ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030b0:	d822      	bhi.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x56>
 80030b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030ba:	d007      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030bc:	e01c      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030be:	4bab      	ldr	r3, [pc, #684]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c2:	4aaa      	ldr	r2, [pc, #680]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030ca:	e01a      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030d0:	3308      	adds	r3, #8
 80030d2:	2102      	movs	r1, #2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f001 fc25 	bl	8004924 <RCCEx_PLL2_Config>
 80030da:	4603      	mov	r3, r0
 80030dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030e0:	e00f      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030e6:	3328      	adds	r3, #40	@ 0x28
 80030e8:	2102      	movs	r1, #2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f001 fccc 	bl	8004a88 <RCCEx_PLL3_Config>
 80030f0:	4603      	mov	r3, r0
 80030f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030f6:	e004      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80030fe:	e000      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003102:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10a      	bne.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800310a:	4b98      	ldr	r3, [pc, #608]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800310c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800310e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003116:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003118:	4a94      	ldr	r2, [pc, #592]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800311a:	430b      	orrs	r3, r1
 800311c:	6513      	str	r3, [r2, #80]	@ 0x50
 800311e:	e003      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003120:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003124:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800312c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003130:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003134:	f04f 0900 	mov.w	r9, #0
 8003138:	ea58 0309 	orrs.w	r3, r8, r9
 800313c:	d047      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800313e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003144:	2b04      	cmp	r3, #4
 8003146:	d82a      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003148:	a201      	add	r2, pc, #4	@ (adr r2, 8003150 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800314a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314e:	bf00      	nop
 8003150:	08003165 	.word	0x08003165
 8003154:	08003173 	.word	0x08003173
 8003158:	08003189 	.word	0x08003189
 800315c:	080031a7 	.word	0x080031a7
 8003160:	080031a7 	.word	0x080031a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003164:	4b81      	ldr	r3, [pc, #516]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003168:	4a80      	ldr	r2, [pc, #512]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800316a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800316e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003170:	e01a      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003176:	3308      	adds	r3, #8
 8003178:	2100      	movs	r1, #0
 800317a:	4618      	mov	r0, r3
 800317c:	f001 fbd2 	bl	8004924 <RCCEx_PLL2_Config>
 8003180:	4603      	mov	r3, r0
 8003182:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003186:	e00f      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800318c:	3328      	adds	r3, #40	@ 0x28
 800318e:	2100      	movs	r1, #0
 8003190:	4618      	mov	r0, r3
 8003192:	f001 fc79 	bl	8004a88 <RCCEx_PLL3_Config>
 8003196:	4603      	mov	r3, r0
 8003198:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800319c:	e004      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80031a4:	e000      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80031a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10a      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031b0:	4b6e      	ldr	r3, [pc, #440]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031b4:	f023 0107 	bic.w	r1, r3, #7
 80031b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031be:	4a6b      	ldr	r2, [pc, #428]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031c0:	430b      	orrs	r3, r1
 80031c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80031c4:	e003      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80031ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80031da:	f04f 0b00 	mov.w	fp, #0
 80031de:	ea5a 030b 	orrs.w	r3, sl, fp
 80031e2:	d05b      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80031e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80031ec:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80031f0:	d03b      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80031f2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80031f6:	d834      	bhi.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80031f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031fc:	d037      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80031fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003202:	d82e      	bhi.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003204:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003208:	d033      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800320a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800320e:	d828      	bhi.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003210:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003214:	d01a      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003216:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800321a:	d822      	bhi.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003220:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003224:	d007      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003226:	e01c      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003228:	4b50      	ldr	r3, [pc, #320]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800322a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322c:	4a4f      	ldr	r2, [pc, #316]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800322e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003232:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003234:	e01e      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800323a:	3308      	adds	r3, #8
 800323c:	2100      	movs	r1, #0
 800323e:	4618      	mov	r0, r3
 8003240:	f001 fb70 	bl	8004924 <RCCEx_PLL2_Config>
 8003244:	4603      	mov	r3, r0
 8003246:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800324a:	e013      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800324c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003250:	3328      	adds	r3, #40	@ 0x28
 8003252:	2100      	movs	r1, #0
 8003254:	4618      	mov	r0, r3
 8003256:	f001 fc17 	bl	8004a88 <RCCEx_PLL3_Config>
 800325a:	4603      	mov	r3, r0
 800325c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003260:	e008      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003268:	e004      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800326a:	bf00      	nop
 800326c:	e002      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800326e:	bf00      	nop
 8003270:	e000      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003272:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003274:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10b      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800327c:	4b3b      	ldr	r3, [pc, #236]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800327e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003280:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003288:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800328c:	4a37      	ldr	r2, [pc, #220]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800328e:	430b      	orrs	r3, r1
 8003290:	6593      	str	r3, [r2, #88]	@ 0x58
 8003292:	e003      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003294:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003298:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800329c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80032a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80032ac:	2300      	movs	r3, #0
 80032ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80032b2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80032b6:	460b      	mov	r3, r1
 80032b8:	4313      	orrs	r3, r2
 80032ba:	d05d      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80032bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80032c4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80032c8:	d03b      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80032ca:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80032ce:	d834      	bhi.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80032d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032d4:	d037      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80032d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032da:	d82e      	bhi.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80032dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032e0:	d033      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80032e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032e6:	d828      	bhi.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80032e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032ec:	d01a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80032ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032f2:	d822      	bhi.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80032f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032fc:	d007      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80032fe:	e01c      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003300:	4b1a      	ldr	r3, [pc, #104]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003304:	4a19      	ldr	r2, [pc, #100]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003306:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800330a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800330c:	e01e      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800330e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003312:	3308      	adds	r3, #8
 8003314:	2100      	movs	r1, #0
 8003316:	4618      	mov	r0, r3
 8003318:	f001 fb04 	bl	8004924 <RCCEx_PLL2_Config>
 800331c:	4603      	mov	r3, r0
 800331e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003322:	e013      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003328:	3328      	adds	r3, #40	@ 0x28
 800332a:	2100      	movs	r1, #0
 800332c:	4618      	mov	r0, r3
 800332e:	f001 fbab 	bl	8004a88 <RCCEx_PLL3_Config>
 8003332:	4603      	mov	r3, r0
 8003334:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003338:	e008      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003340:	e004      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003342:	bf00      	nop
 8003344:	e002      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003346:	bf00      	nop
 8003348:	e000      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800334a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800334c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10d      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003354:	4b05      	ldr	r3, [pc, #20]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003358:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800335c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003360:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003364:	4a01      	ldr	r2, [pc, #4]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003366:	430b      	orrs	r3, r1
 8003368:	6593      	str	r3, [r2, #88]	@ 0x58
 800336a:	e005      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800336c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003370:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003374:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800337c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003380:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003384:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003388:	2300      	movs	r3, #0
 800338a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800338e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003392:	460b      	mov	r3, r1
 8003394:	4313      	orrs	r3, r2
 8003396:	d03a      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800339c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339e:	2b30      	cmp	r3, #48	@ 0x30
 80033a0:	d01f      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80033a2:	2b30      	cmp	r3, #48	@ 0x30
 80033a4:	d819      	bhi.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x372>
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	d00c      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80033aa:	2b20      	cmp	r3, #32
 80033ac:	d815      	bhi.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x372>
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d019      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80033b2:	2b10      	cmp	r3, #16
 80033b4:	d111      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033b6:	4baa      	ldr	r3, [pc, #680]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ba:	4aa9      	ldr	r2, [pc, #676]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80033c2:	e011      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033c8:	3308      	adds	r3, #8
 80033ca:	2102      	movs	r1, #2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f001 faa9 	bl	8004924 <RCCEx_PLL2_Config>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80033d8:	e006      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80033e0:	e002      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80033e2:	bf00      	nop
 80033e4:	e000      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80033e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10a      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80033f0:	4b9b      	ldr	r3, [pc, #620]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80033f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033fe:	4a98      	ldr	r2, [pc, #608]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003400:	430b      	orrs	r3, r1
 8003402:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003404:	e003      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003406:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800340a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800340e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003416:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800341a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800341e:	2300      	movs	r3, #0
 8003420:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003424:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003428:	460b      	mov	r3, r1
 800342a:	4313      	orrs	r3, r2
 800342c:	d051      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800342e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003434:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003438:	d035      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800343a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800343e:	d82e      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003440:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003444:	d031      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003446:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800344a:	d828      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800344c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003450:	d01a      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003456:	d822      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800345c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003460:	d007      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003462:	e01c      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003464:	4b7e      	ldr	r3, [pc, #504]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003468:	4a7d      	ldr	r2, [pc, #500]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800346a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800346e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003470:	e01c      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003476:	3308      	adds	r3, #8
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f001 fa52 	bl	8004924 <RCCEx_PLL2_Config>
 8003480:	4603      	mov	r3, r0
 8003482:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003486:	e011      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800348c:	3328      	adds	r3, #40	@ 0x28
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f001 faf9 	bl	8004a88 <RCCEx_PLL3_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800349c:	e006      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034a4:	e002      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80034a6:	bf00      	nop
 80034a8:	e000      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80034aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10a      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80034b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034b8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80034bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c2:	4a67      	ldr	r2, [pc, #412]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034c4:	430b      	orrs	r3, r1
 80034c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80034c8:	e003      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80034d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034da:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80034de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80034e2:	2300      	movs	r3, #0
 80034e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80034e8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4313      	orrs	r3, r2
 80034f0:	d053      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80034f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034fc:	d033      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80034fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003502:	d82c      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003504:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003508:	d02f      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800350a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800350e:	d826      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003510:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003514:	d02b      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003516:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800351a:	d820      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800351c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003520:	d012      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003522:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003526:	d81a      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003528:	2b00      	cmp	r3, #0
 800352a:	d022      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800352c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003530:	d115      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003536:	3308      	adds	r3, #8
 8003538:	2101      	movs	r1, #1
 800353a:	4618      	mov	r0, r3
 800353c:	f001 f9f2 	bl	8004924 <RCCEx_PLL2_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003546:	e015      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800354c:	3328      	adds	r3, #40	@ 0x28
 800354e:	2101      	movs	r1, #1
 8003550:	4618      	mov	r0, r3
 8003552:	f001 fa99 	bl	8004a88 <RCCEx_PLL3_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800355c:	e00a      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003564:	e006      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003566:	bf00      	nop
 8003568:	e004      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800356a:	bf00      	nop
 800356c:	e002      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800356e:	bf00      	nop
 8003570:	e000      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003574:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10a      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800357c:	4b38      	ldr	r3, [pc, #224]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800357e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003580:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800358a:	4a35      	ldr	r2, [pc, #212]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800358c:	430b      	orrs	r3, r1
 800358e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003590:	e003      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003592:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003596:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800359a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80035a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80035aa:	2300      	movs	r3, #0
 80035ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80035b0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80035b4:	460b      	mov	r3, r1
 80035b6:	4313      	orrs	r3, r2
 80035b8:	d058      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80035ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035c6:	d033      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80035c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035cc:	d82c      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80035ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d2:	d02f      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80035d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d8:	d826      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80035da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80035de:	d02b      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80035e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80035e4:	d820      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80035e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035ea:	d012      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80035ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035f0:	d81a      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d022      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80035f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035fa:	d115      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003600:	3308      	adds	r3, #8
 8003602:	2101      	movs	r1, #1
 8003604:	4618      	mov	r0, r3
 8003606:	f001 f98d 	bl	8004924 <RCCEx_PLL2_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003610:	e015      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003616:	3328      	adds	r3, #40	@ 0x28
 8003618:	2101      	movs	r1, #1
 800361a:	4618      	mov	r0, r3
 800361c:	f001 fa34 	bl	8004a88 <RCCEx_PLL3_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003626:	e00a      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800362e:	e006      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003630:	bf00      	nop
 8003632:	e004      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003634:	bf00      	nop
 8003636:	e002      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003638:	bf00      	nop
 800363a:	e000      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800363c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800363e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10e      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003646:	4b06      	ldr	r3, [pc, #24]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800364e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003652:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003656:	4a02      	ldr	r2, [pc, #8]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003658:	430b      	orrs	r3, r1
 800365a:	6593      	str	r3, [r2, #88]	@ 0x58
 800365c:	e006      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800365e:	bf00      	nop
 8003660:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003664:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003668:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800366c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003674:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003678:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800367c:	2300      	movs	r3, #0
 800367e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003682:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003686:	460b      	mov	r3, r1
 8003688:	4313      	orrs	r3, r2
 800368a:	d037      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800368c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003690:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003696:	d00e      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003698:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800369c:	d816      	bhi.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x664>
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d018      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80036a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036a6:	d111      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a8:	4bc4      	ldr	r3, [pc, #784]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ac:	4ac3      	ldr	r2, [pc, #780]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80036b4:	e00f      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036ba:	3308      	adds	r3, #8
 80036bc:	2101      	movs	r1, #1
 80036be:	4618      	mov	r0, r3
 80036c0:	f001 f930 	bl	8004924 <RCCEx_PLL2_Config>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80036ca:	e004      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036d2:	e000      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80036d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10a      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036de:	4bb7      	ldr	r3, [pc, #732]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80036e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036ec:	4ab3      	ldr	r2, [pc, #716]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036ee:	430b      	orrs	r3, r1
 80036f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80036f2:	e003      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80036fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003704:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003708:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800370c:	2300      	movs	r3, #0
 800370e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003712:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003716:	460b      	mov	r3, r1
 8003718:	4313      	orrs	r3, r2
 800371a:	d039      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800371c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003722:	2b03      	cmp	r3, #3
 8003724:	d81c      	bhi.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003726:	a201      	add	r2, pc, #4	@ (adr r2, 800372c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372c:	08003769 	.word	0x08003769
 8003730:	0800373d 	.word	0x0800373d
 8003734:	0800374b 	.word	0x0800374b
 8003738:	08003769 	.word	0x08003769
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800373c:	4b9f      	ldr	r3, [pc, #636]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800373e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003740:	4a9e      	ldr	r2, [pc, #632]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003742:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003746:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003748:	e00f      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800374a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800374e:	3308      	adds	r3, #8
 8003750:	2102      	movs	r1, #2
 8003752:	4618      	mov	r0, r3
 8003754:	f001 f8e6 	bl	8004924 <RCCEx_PLL2_Config>
 8003758:	4603      	mov	r3, r0
 800375a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800375e:	e004      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003766:	e000      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800376a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10a      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003772:	4b92      	ldr	r3, [pc, #584]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003776:	f023 0103 	bic.w	r1, r3, #3
 800377a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800377e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003780:	4a8e      	ldr	r2, [pc, #568]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003782:	430b      	orrs	r3, r1
 8003784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003786:	e003      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003788:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800378c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003798:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800379c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037a0:	2300      	movs	r3, #0
 80037a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80037a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f000 8099 	beq.w	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037b2:	4b83      	ldr	r3, [pc, #524]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a82      	ldr	r2, [pc, #520]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80037b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037be:	f7fd fd95 	bl	80012ec <HAL_GetTick>
 80037c2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037c6:	e00b      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c8:	f7fd fd90 	bl	80012ec <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b64      	cmp	r3, #100	@ 0x64
 80037d6:	d903      	bls.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037de:	e005      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037e0:	4b77      	ldr	r3, [pc, #476]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0ed      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80037ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d173      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80037f4:	4b71      	ldr	r3, [pc, #452]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80037f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003800:	4053      	eors	r3, r2
 8003802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003806:	2b00      	cmp	r3, #0
 8003808:	d015      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800380a:	4b6c      	ldr	r3, [pc, #432]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003812:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003816:	4b69      	ldr	r3, [pc, #420]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800381a:	4a68      	ldr	r2, [pc, #416]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800381c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003820:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003822:	4b66      	ldr	r3, [pc, #408]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003826:	4a65      	ldr	r2, [pc, #404]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800382c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800382e:	4a63      	ldr	r2, [pc, #396]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003830:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003834:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800383a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800383e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003842:	d118      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003844:	f7fd fd52 	bl	80012ec <HAL_GetTick>
 8003848:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800384c:	e00d      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384e:	f7fd fd4d 	bl	80012ec <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003858:	1ad2      	subs	r2, r2, r3
 800385a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800385e:	429a      	cmp	r2, r3
 8003860:	d903      	bls.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003868:	e005      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800386a:	4b54      	ldr	r3, [pc, #336]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800386c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0eb      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003876:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800387a:	2b00      	cmp	r3, #0
 800387c:	d129      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800387e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003882:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003886:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800388a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800388e:	d10e      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003890:	4b4a      	ldr	r3, [pc, #296]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800389c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038a0:	091a      	lsrs	r2, r3, #4
 80038a2:	4b48      	ldr	r3, [pc, #288]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	4a45      	ldr	r2, [pc, #276]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038a8:	430b      	orrs	r3, r1
 80038aa:	6113      	str	r3, [r2, #16]
 80038ac:	e005      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x852>
 80038ae:	4b43      	ldr	r3, [pc, #268]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	4a42      	ldr	r2, [pc, #264]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80038b8:	6113      	str	r3, [r2, #16]
 80038ba:	4b40      	ldr	r3, [pc, #256]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038bc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80038be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ca:	4a3c      	ldr	r2, [pc, #240]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038cc:	430b      	orrs	r3, r1
 80038ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80038d0:	e008      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80038da:	e003      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80038e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ec:	f002 0301 	and.w	r3, r2, #1
 80038f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038f4:	2300      	movs	r3, #0
 80038f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80038fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80038fe:	460b      	mov	r3, r1
 8003900:	4313      	orrs	r3, r2
 8003902:	f000 808f 	beq.w	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800390a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800390c:	2b28      	cmp	r3, #40	@ 0x28
 800390e:	d871      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003910:	a201      	add	r2, pc, #4	@ (adr r2, 8003918 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003916:	bf00      	nop
 8003918:	080039fd 	.word	0x080039fd
 800391c:	080039f5 	.word	0x080039f5
 8003920:	080039f5 	.word	0x080039f5
 8003924:	080039f5 	.word	0x080039f5
 8003928:	080039f5 	.word	0x080039f5
 800392c:	080039f5 	.word	0x080039f5
 8003930:	080039f5 	.word	0x080039f5
 8003934:	080039f5 	.word	0x080039f5
 8003938:	080039c9 	.word	0x080039c9
 800393c:	080039f5 	.word	0x080039f5
 8003940:	080039f5 	.word	0x080039f5
 8003944:	080039f5 	.word	0x080039f5
 8003948:	080039f5 	.word	0x080039f5
 800394c:	080039f5 	.word	0x080039f5
 8003950:	080039f5 	.word	0x080039f5
 8003954:	080039f5 	.word	0x080039f5
 8003958:	080039df 	.word	0x080039df
 800395c:	080039f5 	.word	0x080039f5
 8003960:	080039f5 	.word	0x080039f5
 8003964:	080039f5 	.word	0x080039f5
 8003968:	080039f5 	.word	0x080039f5
 800396c:	080039f5 	.word	0x080039f5
 8003970:	080039f5 	.word	0x080039f5
 8003974:	080039f5 	.word	0x080039f5
 8003978:	080039fd 	.word	0x080039fd
 800397c:	080039f5 	.word	0x080039f5
 8003980:	080039f5 	.word	0x080039f5
 8003984:	080039f5 	.word	0x080039f5
 8003988:	080039f5 	.word	0x080039f5
 800398c:	080039f5 	.word	0x080039f5
 8003990:	080039f5 	.word	0x080039f5
 8003994:	080039f5 	.word	0x080039f5
 8003998:	080039fd 	.word	0x080039fd
 800399c:	080039f5 	.word	0x080039f5
 80039a0:	080039f5 	.word	0x080039f5
 80039a4:	080039f5 	.word	0x080039f5
 80039a8:	080039f5 	.word	0x080039f5
 80039ac:	080039f5 	.word	0x080039f5
 80039b0:	080039f5 	.word	0x080039f5
 80039b4:	080039f5 	.word	0x080039f5
 80039b8:	080039fd 	.word	0x080039fd
 80039bc:	58024400 	.word	0x58024400
 80039c0:	58024800 	.word	0x58024800
 80039c4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039cc:	3308      	adds	r3, #8
 80039ce:	2101      	movs	r1, #1
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 ffa7 	bl	8004924 <RCCEx_PLL2_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80039dc:	e00f      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039e2:	3328      	adds	r3, #40	@ 0x28
 80039e4:	2101      	movs	r1, #1
 80039e6:	4618      	mov	r0, r3
 80039e8:	f001 f84e 	bl	8004a88 <RCCEx_PLL3_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80039f2:	e004      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039fa:	e000      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80039fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10a      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a06:	4bbf      	ldr	r3, [pc, #764]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a14:	4abb      	ldr	r2, [pc, #748]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a16:	430b      	orrs	r3, r1
 8003a18:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a1a:	e003      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2c:	f002 0302 	and.w	r3, r2, #2
 8003a30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a34:	2300      	movs	r3, #0
 8003a36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a3a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4313      	orrs	r3, r2
 8003a42:	d041      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a4a:	2b05      	cmp	r3, #5
 8003a4c:	d824      	bhi.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a54 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a54:	08003aa1 	.word	0x08003aa1
 8003a58:	08003a6d 	.word	0x08003a6d
 8003a5c:	08003a83 	.word	0x08003a83
 8003a60:	08003aa1 	.word	0x08003aa1
 8003a64:	08003aa1 	.word	0x08003aa1
 8003a68:	08003aa1 	.word	0x08003aa1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a70:	3308      	adds	r3, #8
 8003a72:	2101      	movs	r1, #1
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 ff55 	bl	8004924 <RCCEx_PLL2_Config>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003a80:	e00f      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a86:	3328      	adds	r3, #40	@ 0x28
 8003a88:	2101      	movs	r1, #1
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fffc 	bl	8004a88 <RCCEx_PLL3_Config>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003a96:	e004      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a9e:	e000      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10a      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003aaa:	4b96      	ldr	r3, [pc, #600]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aae:	f023 0107 	bic.w	r1, r3, #7
 8003ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ab6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ab8:	4a92      	ldr	r2, [pc, #584]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003aba:	430b      	orrs	r3, r1
 8003abc:	6553      	str	r3, [r2, #84]	@ 0x54
 8003abe:	e003      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ac4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad0:	f002 0304 	and.w	r3, r2, #4
 8003ad4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ade:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	d044      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af0:	2b05      	cmp	r3, #5
 8003af2:	d825      	bhi.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003af4:	a201      	add	r2, pc, #4	@ (adr r2, 8003afc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afa:	bf00      	nop
 8003afc:	08003b49 	.word	0x08003b49
 8003b00:	08003b15 	.word	0x08003b15
 8003b04:	08003b2b 	.word	0x08003b2b
 8003b08:	08003b49 	.word	0x08003b49
 8003b0c:	08003b49 	.word	0x08003b49
 8003b10:	08003b49 	.word	0x08003b49
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b18:	3308      	adds	r3, #8
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 ff01 	bl	8004924 <RCCEx_PLL2_Config>
 8003b22:	4603      	mov	r3, r0
 8003b24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b28:	e00f      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b2e:	3328      	adds	r3, #40	@ 0x28
 8003b30:	2101      	movs	r1, #1
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 ffa8 	bl	8004a88 <RCCEx_PLL3_Config>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b3e:	e004      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b46:	e000      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10b      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b52:	4b6c      	ldr	r3, [pc, #432]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b56:	f023 0107 	bic.w	r1, r3, #7
 8003b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b62:	4a68      	ldr	r2, [pc, #416]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b64:	430b      	orrs	r3, r1
 8003b66:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b68:	e003      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7a:	f002 0320 	and.w	r3, r2, #32
 8003b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b82:	2300      	movs	r3, #0
 8003b84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003b88:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	d055      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b9e:	d033      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ba4:	d82c      	bhi.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003baa:	d02f      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bb0:	d826      	bhi.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003bb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bb6:	d02b      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003bb8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bbc:	d820      	bhi.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003bbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bc2:	d012      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bc8:	d81a      	bhi.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d022      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003bce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bd2:	d115      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bd8:	3308      	adds	r3, #8
 8003bda:	2100      	movs	r1, #0
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 fea1 	bl	8004924 <RCCEx_PLL2_Config>
 8003be2:	4603      	mov	r3, r0
 8003be4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003be8:	e015      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bee:	3328      	adds	r3, #40	@ 0x28
 8003bf0:	2102      	movs	r1, #2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 ff48 	bl	8004a88 <RCCEx_PLL3_Config>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003bfe:	e00a      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c06:	e006      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c08:	bf00      	nop
 8003c0a:	e004      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c0c:	bf00      	nop
 8003c0e:	e002      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c10:	bf00      	nop
 8003c12:	e000      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10b      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c1e:	4b39      	ldr	r3, [pc, #228]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c22:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c2e:	4a35      	ldr	r2, [pc, #212]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c30:	430b      	orrs	r3, r1
 8003c32:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c34:	e003      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c46:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003c4a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c54:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	d058      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c66:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003c6a:	d033      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003c6c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003c70:	d82c      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c76:	d02f      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c7c:	d826      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c82:	d02b      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003c84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c88:	d820      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c8e:	d012      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003c90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c94:	d81a      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d022      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c9e:	d115      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ca4:	3308      	adds	r3, #8
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fe3b 	bl	8004924 <RCCEx_PLL2_Config>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003cb4:	e015      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cba:	3328      	adds	r3, #40	@ 0x28
 8003cbc:	2102      	movs	r1, #2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fee2 	bl	8004a88 <RCCEx_PLL3_Config>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003cca:	e00a      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003cd2:	e006      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003cd4:	bf00      	nop
 8003cd6:	e004      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003cd8:	bf00      	nop
 8003cda:	e002      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003cdc:	bf00      	nop
 8003cde:	e000      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10e      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cea:	4b06      	ldr	r3, [pc, #24]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cfa:	4a02      	ldr	r2, [pc, #8]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d00:	e006      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003d02:	bf00      	nop
 8003d04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d18:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003d1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d20:	2300      	movs	r3, #0
 8003d22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d26:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	d055      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d38:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003d3c:	d033      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003d3e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003d42:	d82c      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003d44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d48:	d02f      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003d4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d4e:	d826      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003d50:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003d54:	d02b      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003d56:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003d5a:	d820      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003d5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d60:	d012      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003d62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d66:	d81a      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d022      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003d6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d70:	d115      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d76:	3308      	adds	r3, #8
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 fdd2 	bl	8004924 <RCCEx_PLL2_Config>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003d86:	e015      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d8c:	3328      	adds	r3, #40	@ 0x28
 8003d8e:	2102      	movs	r1, #2
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fe79 	bl	8004a88 <RCCEx_PLL3_Config>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003d9c:	e00a      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003da4:	e006      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003da6:	bf00      	nop
 8003da8:	e004      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003daa:	bf00      	nop
 8003dac:	e002      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003dae:	bf00      	nop
 8003db0:	e000      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10b      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003dbc:	4ba0      	ldr	r3, [pc, #640]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003dcc:	4a9c      	ldr	r2, [pc, #624]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dd2:	e003      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f002 0308 	and.w	r3, r2, #8
 8003de8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003dec:	2300      	movs	r3, #0
 8003dee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003df2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003df6:	460b      	mov	r3, r1
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	d01e      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e08:	d10c      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e0e:	3328      	adds	r3, #40	@ 0x28
 8003e10:	2102      	movs	r1, #2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fe38 	bl	8004a88 <RCCEx_PLL3_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d002      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003e24:	4b86      	ldr	r3, [pc, #536]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e28:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e34:	4a82      	ldr	r2, [pc, #520]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e36:	430b      	orrs	r3, r1
 8003e38:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e42:	f002 0310 	and.w	r3, r2, #16
 8003e46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e50:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003e54:	460b      	mov	r3, r1
 8003e56:	4313      	orrs	r3, r2
 8003e58:	d01e      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e66:	d10c      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e6c:	3328      	adds	r3, #40	@ 0x28
 8003e6e:	2102      	movs	r1, #2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fe09 	bl	8004a88 <RCCEx_PLL3_Config>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e82:	4b6f      	ldr	r3, [pc, #444]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e86:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e92:	4a6b      	ldr	r2, [pc, #428]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e94:	430b      	orrs	r3, r1
 8003e96:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003ea4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003eaa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	d03e      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003ebc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ec0:	d022      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003ec2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ec6:	d81b      	bhi.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ed0:	d00b      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003ed2:	e015      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ed8:	3308      	adds	r3, #8
 8003eda:	2100      	movs	r1, #0
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 fd21 	bl	8004924 <RCCEx_PLL2_Config>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003ee8:	e00f      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eee:	3328      	adds	r3, #40	@ 0x28
 8003ef0:	2102      	movs	r1, #2
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fdc8 	bl	8004a88 <RCCEx_PLL3_Config>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003efe:	e004      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f06:	e000      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10b      	bne.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f12:	4b4b      	ldr	r3, [pc, #300]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f16:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f22:	4a47      	ldr	r2, [pc, #284]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f24:	430b      	orrs	r3, r1
 8003f26:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f28:	e003      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003f3e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f40:	2300      	movs	r3, #0
 8003f42:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f44:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	d03b      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f5a:	d01f      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003f5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f60:	d818      	bhi.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003f62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f66:	d003      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003f68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f6c:	d007      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003f6e:	e011      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f70:	4b33      	ldr	r3, [pc, #204]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f74:	4a32      	ldr	r2, [pc, #200]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003f7c:	e00f      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f82:	3328      	adds	r3, #40	@ 0x28
 8003f84:	2101      	movs	r1, #1
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fd7e 	bl	8004a88 <RCCEx_PLL3_Config>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003f92:	e004      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f9a:	e000      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10b      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fa6:	4b26      	ldr	r3, [pc, #152]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003faa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fb6:	4a22      	ldr	r2, [pc, #136]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fbc:	e003      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fc2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fce:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003fd2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fd8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	d034      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ff0:	d007      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003ff2:	e011      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ff4:	4b12      	ldr	r3, [pc, #72]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff8:	4a11      	ldr	r2, [pc, #68]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ffa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004000:	e00e      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004006:	3308      	adds	r3, #8
 8004008:	2102      	movs	r1, #2
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fc8a 	bl	8004924 <RCCEx_PLL2_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004016:	e003      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800401e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004020:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10d      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004028:	4b05      	ldr	r3, [pc, #20]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800402a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800402c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004036:	4a02      	ldr	r2, [pc, #8]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004038:	430b      	orrs	r3, r1
 800403a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800403c:	e006      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800403e:	bf00      	nop
 8004040:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004044:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004048:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800404c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004054:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004058:	663b      	str	r3, [r7, #96]	@ 0x60
 800405a:	2300      	movs	r3, #0
 800405c:	667b      	str	r3, [r7, #100]	@ 0x64
 800405e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004062:	460b      	mov	r3, r1
 8004064:	4313      	orrs	r3, r2
 8004066:	d00c      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800406c:	3328      	adds	r3, #40	@ 0x28
 800406e:	2102      	movs	r1, #2
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fd09 	bl	8004a88 <RCCEx_PLL3_Config>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800408e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004090:	2300      	movs	r3, #0
 8004092:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004094:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004098:	460b      	mov	r3, r1
 800409a:	4313      	orrs	r3, r2
 800409c:	d036      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800409e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040a8:	d018      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80040aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040ae:	d811      	bhi.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80040b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040b4:	d014      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80040b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040ba:	d80b      	bhi.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d011      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80040c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040c4:	d106      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040c6:	4bb7      	ldr	r3, [pc, #732]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ca:	4ab6      	ldr	r2, [pc, #728]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80040d2:	e008      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040da:	e004      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80040dc:	bf00      	nop
 80040de:	e002      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80040e0:	bf00      	nop
 80040e2:	e000      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80040e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10a      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040ee:	4bad      	ldr	r3, [pc, #692]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040fc:	4aa9      	ldr	r2, [pc, #676]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040fe:	430b      	orrs	r3, r1
 8004100:	6553      	str	r3, [r2, #84]	@ 0x54
 8004102:	e003      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004104:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004108:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800410c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004114:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004118:	653b      	str	r3, [r7, #80]	@ 0x50
 800411a:	2300      	movs	r3, #0
 800411c:	657b      	str	r3, [r7, #84]	@ 0x54
 800411e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004122:	460b      	mov	r3, r1
 8004124:	4313      	orrs	r3, r2
 8004126:	d009      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004128:	4b9e      	ldr	r3, [pc, #632]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800412a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800412c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004136:	4a9b      	ldr	r2, [pc, #620]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004138:	430b      	orrs	r3, r1
 800413a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800413c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004144:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004148:	64bb      	str	r3, [r7, #72]	@ 0x48
 800414a:	2300      	movs	r3, #0
 800414c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800414e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004152:	460b      	mov	r3, r1
 8004154:	4313      	orrs	r3, r2
 8004156:	d009      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004158:	4b92      	ldr	r3, [pc, #584]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800415a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800415c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004164:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004166:	4a8f      	ldr	r2, [pc, #572]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004168:	430b      	orrs	r3, r1
 800416a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800416c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004174:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004178:	643b      	str	r3, [r7, #64]	@ 0x40
 800417a:	2300      	movs	r3, #0
 800417c:	647b      	str	r3, [r7, #68]	@ 0x44
 800417e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004182:	460b      	mov	r3, r1
 8004184:	4313      	orrs	r3, r2
 8004186:	d00e      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004188:	4b86      	ldr	r3, [pc, #536]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	4a85      	ldr	r2, [pc, #532]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800418e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004192:	6113      	str	r3, [r2, #16]
 8004194:	4b83      	ldr	r3, [pc, #524]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004196:	6919      	ldr	r1, [r3, #16]
 8004198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800419c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041a0:	4a80      	ldr	r2, [pc, #512]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041a2:	430b      	orrs	r3, r1
 80041a4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80041a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ae:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80041b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041b4:	2300      	movs	r3, #0
 80041b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041b8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80041bc:	460b      	mov	r3, r1
 80041be:	4313      	orrs	r3, r2
 80041c0:	d009      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80041c2:	4b78      	ldr	r3, [pc, #480]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041c6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80041ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d0:	4a74      	ldr	r2, [pc, #464]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041d2:	430b      	orrs	r3, r1
 80041d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041de:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80041e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80041e4:	2300      	movs	r3, #0
 80041e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80041e8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80041ec:	460b      	mov	r3, r1
 80041ee:	4313      	orrs	r3, r2
 80041f0:	d00a      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041f2:	4b6c      	ldr	r3, [pc, #432]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80041fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004202:	4a68      	ldr	r2, [pc, #416]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004204:	430b      	orrs	r3, r1
 8004206:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800420c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004210:	2100      	movs	r1, #0
 8004212:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800421a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800421e:	460b      	mov	r3, r1
 8004220:	4313      	orrs	r3, r2
 8004222:	d011      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004228:	3308      	adds	r3, #8
 800422a:	2100      	movs	r1, #0
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fb79 	bl	8004924 <RCCEx_PLL2_Config>
 8004232:	4603      	mov	r3, r0
 8004234:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004238:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004240:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004244:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004250:	2100      	movs	r1, #0
 8004252:	6239      	str	r1, [r7, #32]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	627b      	str	r3, [r7, #36]	@ 0x24
 800425a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800425e:	460b      	mov	r3, r1
 8004260:	4313      	orrs	r3, r2
 8004262:	d011      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004268:	3308      	adds	r3, #8
 800426a:	2101      	movs	r1, #1
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fb59 	bl	8004924 <RCCEx_PLL2_Config>
 8004272:	4603      	mov	r3, r0
 8004274:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004278:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004280:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004284:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	2100      	movs	r1, #0
 8004292:	61b9      	str	r1, [r7, #24]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800429e:	460b      	mov	r3, r1
 80042a0:	4313      	orrs	r3, r2
 80042a2:	d011      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042a8:	3308      	adds	r3, #8
 80042aa:	2102      	movs	r1, #2
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 fb39 	bl	8004924 <RCCEx_PLL2_Config>
 80042b2:	4603      	mov	r3, r0
 80042b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80042b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80042c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d0:	2100      	movs	r1, #0
 80042d2:	6139      	str	r1, [r7, #16]
 80042d4:	f003 0308 	and.w	r3, r3, #8
 80042d8:	617b      	str	r3, [r7, #20]
 80042da:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80042de:	460b      	mov	r3, r1
 80042e0:	4313      	orrs	r3, r2
 80042e2:	d011      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042e8:	3328      	adds	r3, #40	@ 0x28
 80042ea:	2100      	movs	r1, #0
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fbcb 	bl	8004a88 <RCCEx_PLL3_Config>
 80042f2:	4603      	mov	r3, r0
 80042f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80042f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004300:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004304:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004310:	2100      	movs	r1, #0
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	f003 0310 	and.w	r3, r3, #16
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800431e:	460b      	mov	r3, r1
 8004320:	4313      	orrs	r3, r2
 8004322:	d011      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004328:	3328      	adds	r3, #40	@ 0x28
 800432a:	2101      	movs	r1, #1
 800432c:	4618      	mov	r0, r3
 800432e:	f000 fbab 	bl	8004a88 <RCCEx_PLL3_Config>
 8004332:	4603      	mov	r3, r0
 8004334:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004338:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004340:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004344:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800434c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004350:	2100      	movs	r1, #0
 8004352:	6039      	str	r1, [r7, #0]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	607b      	str	r3, [r7, #4]
 800435a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800435e:	460b      	mov	r3, r1
 8004360:	4313      	orrs	r3, r2
 8004362:	d011      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004368:	3328      	adds	r3, #40	@ 0x28
 800436a:	2102      	movs	r1, #2
 800436c:	4618      	mov	r0, r3
 800436e:	f000 fb8b 	bl	8004a88 <RCCEx_PLL3_Config>
 8004372:	4603      	mov	r3, r0
 8004374:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004378:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004380:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004384:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004388:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	e000      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
}
 8004396:	4618      	mov	r0, r3
 8004398:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800439c:	46bd      	mov	sp, r7
 800439e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043a2:	bf00      	nop
 80043a4:	58024400 	.word	0x58024400

080043a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80043ac:	f7fe fe00 	bl	8002fb0 <HAL_RCC_GetHCLKFreq>
 80043b0:	4602      	mov	r2, r0
 80043b2:	4b06      	ldr	r3, [pc, #24]	@ (80043cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	091b      	lsrs	r3, r3, #4
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	4904      	ldr	r1, [pc, #16]	@ (80043d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80043be:	5ccb      	ldrb	r3, [r1, r3]
 80043c0:	f003 031f 	and.w	r3, r3, #31
 80043c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	58024400 	.word	0x58024400
 80043d0:	08006148 	.word	0x08006148

080043d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b089      	sub	sp, #36	@ 0x24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043dc:	4ba1      	ldr	r3, [pc, #644]	@ (8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e0:	f003 0303 	and.w	r3, r3, #3
 80043e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80043e6:	4b9f      	ldr	r3, [pc, #636]	@ (8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ea:	0b1b      	lsrs	r3, r3, #12
 80043ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80043f2:	4b9c      	ldr	r3, [pc, #624]	@ (8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f6:	091b      	lsrs	r3, r3, #4
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80043fe:	4b99      	ldr	r3, [pc, #612]	@ (8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004402:	08db      	lsrs	r3, r3, #3
 8004404:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	fb02 f303 	mul.w	r3, r2, r3
 800440e:	ee07 3a90 	vmov	s15, r3
 8004412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004416:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 8111 	beq.w	8004644 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	2b02      	cmp	r3, #2
 8004426:	f000 8083 	beq.w	8004530 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	2b02      	cmp	r3, #2
 800442e:	f200 80a1 	bhi.w	8004574 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d056      	beq.n	80044ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800443e:	e099      	b.n	8004574 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004440:	4b88      	ldr	r3, [pc, #544]	@ (8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b00      	cmp	r3, #0
 800444a:	d02d      	beq.n	80044a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800444c:	4b85      	ldr	r3, [pc, #532]	@ (8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	08db      	lsrs	r3, r3, #3
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	4a84      	ldr	r2, [pc, #528]	@ (8004668 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004458:	fa22 f303 	lsr.w	r3, r2, r3
 800445c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	ee07 3a90 	vmov	s15, r3
 8004464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004476:	4b7b      	ldr	r3, [pc, #492]	@ (8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447e:	ee07 3a90 	vmov	s15, r3
 8004482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004486:	ed97 6a03 	vldr	s12, [r7, #12]
 800448a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800466c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800448e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800449a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800449e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80044a6:	e087      	b.n	80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	ee07 3a90 	vmov	s15, r3
 80044ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004670 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80044b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ba:	4b6a      	ldr	r3, [pc, #424]	@ (8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c2:	ee07 3a90 	vmov	s15, r3
 80044c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800466c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044ea:	e065      	b.n	80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	ee07 3a90 	vmov	s15, r3
 80044f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004674 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044fe:	4b59      	ldr	r3, [pc, #356]	@ (8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004506:	ee07 3a90 	vmov	s15, r3
 800450a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800450e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004512:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800466c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800451a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800451e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800452a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800452e:	e043      	b.n	80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	ee07 3a90 	vmov	s15, r3
 8004536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004678 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800453e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004542:	4b48      	ldr	r3, [pc, #288]	@ (8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800454a:	ee07 3a90 	vmov	s15, r3
 800454e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004552:	ed97 6a03 	vldr	s12, [r7, #12]
 8004556:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800466c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800455a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800455e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004562:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800456a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800456e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004572:	e021      	b.n	80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	ee07 3a90 	vmov	s15, r3
 800457a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004674 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004586:	4b37      	ldr	r3, [pc, #220]	@ (8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800458e:	ee07 3a90 	vmov	s15, r3
 8004592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004596:	ed97 6a03 	vldr	s12, [r7, #12]
 800459a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800466c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800459e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80045b8:	4b2a      	ldr	r3, [pc, #168]	@ (8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045bc:	0a5b      	lsrs	r3, r3, #9
 80045be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045c2:	ee07 3a90 	vmov	s15, r3
 80045c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80045d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045de:	ee17 2a90 	vmov	r2, s15
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80045e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ea:	0c1b      	lsrs	r3, r3, #16
 80045ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045f0:	ee07 3a90 	vmov	s15, r3
 80045f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004600:	edd7 6a07 	vldr	s13, [r7, #28]
 8004604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800460c:	ee17 2a90 	vmov	r2, s15
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004614:	4b13      	ldr	r3, [pc, #76]	@ (8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004618:	0e1b      	lsrs	r3, r3, #24
 800461a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800461e:	ee07 3a90 	vmov	s15, r3
 8004622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004626:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800462a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800462e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800463a:	ee17 2a90 	vmov	r2, s15
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004642:	e008      	b.n	8004656 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	609a      	str	r2, [r3, #8]
}
 8004656:	bf00      	nop
 8004658:	3724      	adds	r7, #36	@ 0x24
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	58024400 	.word	0x58024400
 8004668:	03d09000 	.word	0x03d09000
 800466c:	46000000 	.word	0x46000000
 8004670:	4c742400 	.word	0x4c742400
 8004674:	4a742400 	.word	0x4a742400
 8004678:	4af42400 	.word	0x4af42400

0800467c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800467c:	b480      	push	{r7}
 800467e:	b089      	sub	sp, #36	@ 0x24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004684:	4ba1      	ldr	r3, [pc, #644]	@ (800490c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800468e:	4b9f      	ldr	r3, [pc, #636]	@ (800490c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004692:	0d1b      	lsrs	r3, r3, #20
 8004694:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004698:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800469a:	4b9c      	ldr	r3, [pc, #624]	@ (800490c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800469c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469e:	0a1b      	lsrs	r3, r3, #8
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80046a6:	4b99      	ldr	r3, [pc, #612]	@ (800490c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046aa:	08db      	lsrs	r3, r3, #3
 80046ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 8111 	beq.w	80048ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	f000 8083 	beq.w	80047d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	f200 80a1 	bhi.w	800481c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d056      	beq.n	8004794 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80046e6:	e099      	b.n	800481c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046e8:	4b88      	ldr	r3, [pc, #544]	@ (800490c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0320 	and.w	r3, r3, #32
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d02d      	beq.n	8004750 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046f4:	4b85      	ldr	r3, [pc, #532]	@ (800490c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	08db      	lsrs	r3, r3, #3
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	4a84      	ldr	r2, [pc, #528]	@ (8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004700:	fa22 f303 	lsr.w	r3, r2, r3
 8004704:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	ee07 3a90 	vmov	s15, r3
 800470c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800471e:	4b7b      	ldr	r3, [pc, #492]	@ (800490c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800472e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004732:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800473a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800473e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800474a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800474e:	e087      	b.n	8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004918 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800475e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004762:	4b6a      	ldr	r3, [pc, #424]	@ (800490c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476a:	ee07 3a90 	vmov	s15, r3
 800476e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004772:	ed97 6a03 	vldr	s12, [r7, #12]
 8004776:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800477a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800477e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800478a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004792:	e065      	b.n	8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800491c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80047a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a6:	4b59      	ldr	r3, [pc, #356]	@ (800490c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047d6:	e043      	b.n	8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004920 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80047e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ea:	4b48      	ldr	r3, [pc, #288]	@ (800490c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80047fe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800480a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800480e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004816:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800481a:	e021      	b.n	8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004826:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800491c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800482a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482e:	4b37      	ldr	r3, [pc, #220]	@ (800490c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004842:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800484a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800485e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004860:	4b2a      	ldr	r3, [pc, #168]	@ (800490c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004864:	0a5b      	lsrs	r3, r3, #9
 8004866:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004872:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004876:	ee37 7a87 	vadd.f32	s14, s15, s14
 800487a:	edd7 6a07 	vldr	s13, [r7, #28]
 800487e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004886:	ee17 2a90 	vmov	r2, s15
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800488e:	4b1f      	ldr	r3, [pc, #124]	@ (800490c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004892:	0c1b      	lsrs	r3, r3, #16
 8004894:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004898:	ee07 3a90 	vmov	s15, r3
 800489c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80048ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048b4:	ee17 2a90 	vmov	r2, s15
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80048bc:	4b13      	ldr	r3, [pc, #76]	@ (800490c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c0:	0e1b      	lsrs	r3, r3, #24
 80048c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80048da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048e2:	ee17 2a90 	vmov	r2, s15
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80048ea:	e008      	b.n	80048fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	609a      	str	r2, [r3, #8]
}
 80048fe:	bf00      	nop
 8004900:	3724      	adds	r7, #36	@ 0x24
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	58024400 	.word	0x58024400
 8004910:	03d09000 	.word	0x03d09000
 8004914:	46000000 	.word	0x46000000
 8004918:	4c742400 	.word	0x4c742400
 800491c:	4a742400 	.word	0x4a742400
 8004920:	4af42400 	.word	0x4af42400

08004924 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004932:	4b53      	ldr	r3, [pc, #332]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	2b03      	cmp	r3, #3
 800493c:	d101      	bne.n	8004942 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e099      	b.n	8004a76 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004942:	4b4f      	ldr	r3, [pc, #316]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a4e      	ldr	r2, [pc, #312]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004948:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800494c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494e:	f7fc fccd 	bl	80012ec <HAL_GetTick>
 8004952:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004954:	e008      	b.n	8004968 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004956:	f7fc fcc9 	bl	80012ec <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e086      	b.n	8004a76 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004968:	4b45      	ldr	r3, [pc, #276]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1f0      	bne.n	8004956 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004974:	4b42      	ldr	r3, [pc, #264]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004978:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	031b      	lsls	r3, r3, #12
 8004982:	493f      	ldr	r1, [pc, #252]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004984:	4313      	orrs	r3, r2
 8004986:	628b      	str	r3, [r1, #40]	@ 0x28
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	3b01      	subs	r3, #1
 800498e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	3b01      	subs	r3, #1
 8004998:	025b      	lsls	r3, r3, #9
 800499a:	b29b      	uxth	r3, r3
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	041b      	lsls	r3, r3, #16
 80049a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	3b01      	subs	r3, #1
 80049b2:	061b      	lsls	r3, r3, #24
 80049b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80049b8:	4931      	ldr	r1, [pc, #196]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80049be:	4b30      	ldr	r3, [pc, #192]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 80049c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	492d      	ldr	r1, [pc, #180]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80049d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 80049d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d4:	f023 0220 	bic.w	r2, r3, #32
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	4928      	ldr	r1, [pc, #160]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80049e2:	4b27      	ldr	r3, [pc, #156]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 80049e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e6:	4a26      	ldr	r2, [pc, #152]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 80049e8:	f023 0310 	bic.w	r3, r3, #16
 80049ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80049ee:	4b24      	ldr	r3, [pc, #144]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 80049f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049f2:	4b24      	ldr	r3, [pc, #144]	@ (8004a84 <RCCEx_PLL2_Config+0x160>)
 80049f4:	4013      	ands	r3, r2
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	69d2      	ldr	r2, [r2, #28]
 80049fa:	00d2      	lsls	r2, r2, #3
 80049fc:	4920      	ldr	r1, [pc, #128]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004a02:	4b1f      	ldr	r3, [pc, #124]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a06:	4a1e      	ldr	r2, [pc, #120]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004a08:	f043 0310 	orr.w	r3, r3, #16
 8004a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d106      	bne.n	8004a22 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a14:	4b1a      	ldr	r3, [pc, #104]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a18:	4a19      	ldr	r2, [pc, #100]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004a1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004a20:	e00f      	b.n	8004a42 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d106      	bne.n	8004a36 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004a28:	4b15      	ldr	r3, [pc, #84]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2c:	4a14      	ldr	r2, [pc, #80]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004a2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004a34:	e005      	b.n	8004a42 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004a36:	4b12      	ldr	r3, [pc, #72]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3a:	4a11      	ldr	r2, [pc, #68]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004a3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004a40:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004a42:	4b0f      	ldr	r3, [pc, #60]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a0e      	ldr	r2, [pc, #56]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004a48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a4e:	f7fc fc4d 	bl	80012ec <HAL_GetTick>
 8004a52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a54:	e008      	b.n	8004a68 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a56:	f7fc fc49 	bl	80012ec <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e006      	b.n	8004a76 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a68:	4b05      	ldr	r3, [pc, #20]	@ (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0f0      	beq.n	8004a56 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	58024400 	.word	0x58024400
 8004a84:	ffff0007 	.word	0xffff0007

08004a88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a96:	4b53      	ldr	r3, [pc, #332]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	2b03      	cmp	r3, #3
 8004aa0:	d101      	bne.n	8004aa6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e099      	b.n	8004bda <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004aa6:	4b4f      	ldr	r3, [pc, #316]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a4e      	ldr	r2, [pc, #312]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004aac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ab0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab2:	f7fc fc1b 	bl	80012ec <HAL_GetTick>
 8004ab6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ab8:	e008      	b.n	8004acc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004aba:	f7fc fc17 	bl	80012ec <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e086      	b.n	8004bda <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004acc:	4b45      	ldr	r3, [pc, #276]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1f0      	bne.n	8004aba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ad8:	4b42      	ldr	r3, [pc, #264]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004adc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	051b      	lsls	r3, r3, #20
 8004ae6:	493f      	ldr	r1, [pc, #252]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	628b      	str	r3, [r1, #40]	@ 0x28
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	3b01      	subs	r3, #1
 8004af2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	025b      	lsls	r3, r3, #9
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	041b      	lsls	r3, r3, #16
 8004b0a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	3b01      	subs	r3, #1
 8004b16:	061b      	lsls	r3, r3, #24
 8004b18:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004b1c:	4931      	ldr	r1, [pc, #196]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004b22:	4b30      	ldr	r3, [pc, #192]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b26:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	492d      	ldr	r1, [pc, #180]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004b34:	4b2b      	ldr	r3, [pc, #172]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b38:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	4928      	ldr	r1, [pc, #160]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004b46:	4b27      	ldr	r3, [pc, #156]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4a:	4a26      	ldr	r2, [pc, #152]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004b52:	4b24      	ldr	r3, [pc, #144]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b56:	4b24      	ldr	r3, [pc, #144]	@ (8004be8 <RCCEx_PLL3_Config+0x160>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	69d2      	ldr	r2, [r2, #28]
 8004b5e:	00d2      	lsls	r2, r2, #3
 8004b60:	4920      	ldr	r1, [pc, #128]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004b66:	4b1f      	ldr	r3, [pc, #124]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6a:	4a1e      	ldr	r2, [pc, #120]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d106      	bne.n	8004b86 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004b78:	4b1a      	ldr	r3, [pc, #104]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7c:	4a19      	ldr	r2, [pc, #100]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b7e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004b84:	e00f      	b.n	8004ba6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d106      	bne.n	8004b9a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004b8c:	4b15      	ldr	r3, [pc, #84]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b90:	4a14      	ldr	r2, [pc, #80]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004b98:	e005      	b.n	8004ba6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004b9a:	4b12      	ldr	r3, [pc, #72]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9e:	4a11      	ldr	r2, [pc, #68]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004ba0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a0e      	ldr	r2, [pc, #56]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb2:	f7fc fb9b 	bl	80012ec <HAL_GetTick>
 8004bb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004bb8:	e008      	b.n	8004bcc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004bba:	f7fc fb97 	bl	80012ec <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d901      	bls.n	8004bcc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e006      	b.n	8004bda <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004bcc:	4b05      	ldr	r3, [pc, #20]	@ (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0f0      	beq.n	8004bba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	58024400 	.word	0x58024400
 8004be8:	ffff0007 	.word	0xffff0007

08004bec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e042      	b.n	8004c84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d106      	bne.n	8004c16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7fc f8bd 	bl	8000d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2224      	movs	r2, #36	@ 0x24
 8004c1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0201 	bic.w	r2, r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 ff22 	bl	8005a80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f8b3 	bl	8004da8 <UART_SetConfig>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e01b      	b.n	8004c84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689a      	ldr	r2, [r3, #8]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0201 	orr.w	r2, r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 ffa1 	bl	8005bc4 <UART_CheckIdleState>
 8004c82:	4603      	mov	r3, r0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08a      	sub	sp, #40	@ 0x28
 8004c90:	af02      	add	r7, sp, #8
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	603b      	str	r3, [r7, #0]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca2:	2b20      	cmp	r3, #32
 8004ca4:	d17b      	bne.n	8004d9e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <HAL_UART_Transmit+0x26>
 8004cac:	88fb      	ldrh	r3, [r7, #6]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e074      	b.n	8004da0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2221      	movs	r2, #33	@ 0x21
 8004cc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cc6:	f7fc fb11 	bl	80012ec <HAL_GetTick>
 8004cca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	88fa      	ldrh	r2, [r7, #6]
 8004cd0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	88fa      	ldrh	r2, [r7, #6]
 8004cd8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ce4:	d108      	bne.n	8004cf8 <HAL_UART_Transmit+0x6c>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d104      	bne.n	8004cf8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	61bb      	str	r3, [r7, #24]
 8004cf6:	e003      	b.n	8004d00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d00:	e030      	b.n	8004d64 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2180      	movs	r1, #128	@ 0x80
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f001 f803 	bl	8005d18 <UART_WaitOnFlagUntilTimeout>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d005      	beq.n	8004d24 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e03d      	b.n	8004da0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10b      	bne.n	8004d42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d38:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	3302      	adds	r3, #2
 8004d3e:	61bb      	str	r3, [r7, #24]
 8004d40:	e007      	b.n	8004d52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	781a      	ldrb	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1c8      	bne.n	8004d02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2200      	movs	r2, #0
 8004d78:	2140      	movs	r1, #64	@ 0x40
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 ffcc 	bl	8005d18 <UART_WaitOnFlagUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d005      	beq.n	8004d92 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e006      	b.n	8004da0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	e000      	b.n	8004da0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004d9e:	2302      	movs	r3, #2
  }
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3720      	adds	r7, #32
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dac:	b092      	sub	sp, #72	@ 0x48
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	4bbe      	ldr	r3, [pc, #760]	@ (80050d0 <UART_SetConfig+0x328>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	6812      	ldr	r2, [r2, #0]
 8004dde:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004de0:	430b      	orrs	r3, r1
 8004de2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4ab3      	ldr	r2, [pc, #716]	@ (80050d4 <UART_SetConfig+0x32c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d004      	beq.n	8004e14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e10:	4313      	orrs	r3, r2
 8004e12:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	4baf      	ldr	r3, [pc, #700]	@ (80050d8 <UART_SetConfig+0x330>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e24:	430b      	orrs	r3, r1
 8004e26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2e:	f023 010f 	bic.w	r1, r3, #15
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4aa6      	ldr	r2, [pc, #664]	@ (80050dc <UART_SetConfig+0x334>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d177      	bne.n	8004f38 <UART_SetConfig+0x190>
 8004e48:	4ba5      	ldr	r3, [pc, #660]	@ (80050e0 <UART_SetConfig+0x338>)
 8004e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e50:	2b28      	cmp	r3, #40	@ 0x28
 8004e52:	d86d      	bhi.n	8004f30 <UART_SetConfig+0x188>
 8004e54:	a201      	add	r2, pc, #4	@ (adr r2, 8004e5c <UART_SetConfig+0xb4>)
 8004e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5a:	bf00      	nop
 8004e5c:	08004f01 	.word	0x08004f01
 8004e60:	08004f31 	.word	0x08004f31
 8004e64:	08004f31 	.word	0x08004f31
 8004e68:	08004f31 	.word	0x08004f31
 8004e6c:	08004f31 	.word	0x08004f31
 8004e70:	08004f31 	.word	0x08004f31
 8004e74:	08004f31 	.word	0x08004f31
 8004e78:	08004f31 	.word	0x08004f31
 8004e7c:	08004f09 	.word	0x08004f09
 8004e80:	08004f31 	.word	0x08004f31
 8004e84:	08004f31 	.word	0x08004f31
 8004e88:	08004f31 	.word	0x08004f31
 8004e8c:	08004f31 	.word	0x08004f31
 8004e90:	08004f31 	.word	0x08004f31
 8004e94:	08004f31 	.word	0x08004f31
 8004e98:	08004f31 	.word	0x08004f31
 8004e9c:	08004f11 	.word	0x08004f11
 8004ea0:	08004f31 	.word	0x08004f31
 8004ea4:	08004f31 	.word	0x08004f31
 8004ea8:	08004f31 	.word	0x08004f31
 8004eac:	08004f31 	.word	0x08004f31
 8004eb0:	08004f31 	.word	0x08004f31
 8004eb4:	08004f31 	.word	0x08004f31
 8004eb8:	08004f31 	.word	0x08004f31
 8004ebc:	08004f19 	.word	0x08004f19
 8004ec0:	08004f31 	.word	0x08004f31
 8004ec4:	08004f31 	.word	0x08004f31
 8004ec8:	08004f31 	.word	0x08004f31
 8004ecc:	08004f31 	.word	0x08004f31
 8004ed0:	08004f31 	.word	0x08004f31
 8004ed4:	08004f31 	.word	0x08004f31
 8004ed8:	08004f31 	.word	0x08004f31
 8004edc:	08004f21 	.word	0x08004f21
 8004ee0:	08004f31 	.word	0x08004f31
 8004ee4:	08004f31 	.word	0x08004f31
 8004ee8:	08004f31 	.word	0x08004f31
 8004eec:	08004f31 	.word	0x08004f31
 8004ef0:	08004f31 	.word	0x08004f31
 8004ef4:	08004f31 	.word	0x08004f31
 8004ef8:	08004f31 	.word	0x08004f31
 8004efc:	08004f29 	.word	0x08004f29
 8004f00:	2301      	movs	r3, #1
 8004f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f06:	e326      	b.n	8005556 <UART_SetConfig+0x7ae>
 8004f08:	2304      	movs	r3, #4
 8004f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f0e:	e322      	b.n	8005556 <UART_SetConfig+0x7ae>
 8004f10:	2308      	movs	r3, #8
 8004f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f16:	e31e      	b.n	8005556 <UART_SetConfig+0x7ae>
 8004f18:	2310      	movs	r3, #16
 8004f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f1e:	e31a      	b.n	8005556 <UART_SetConfig+0x7ae>
 8004f20:	2320      	movs	r3, #32
 8004f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f26:	e316      	b.n	8005556 <UART_SetConfig+0x7ae>
 8004f28:	2340      	movs	r3, #64	@ 0x40
 8004f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f2e:	e312      	b.n	8005556 <UART_SetConfig+0x7ae>
 8004f30:	2380      	movs	r3, #128	@ 0x80
 8004f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f36:	e30e      	b.n	8005556 <UART_SetConfig+0x7ae>
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a69      	ldr	r2, [pc, #420]	@ (80050e4 <UART_SetConfig+0x33c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d130      	bne.n	8004fa4 <UART_SetConfig+0x1fc>
 8004f42:	4b67      	ldr	r3, [pc, #412]	@ (80050e0 <UART_SetConfig+0x338>)
 8004f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	2b05      	cmp	r3, #5
 8004f4c:	d826      	bhi.n	8004f9c <UART_SetConfig+0x1f4>
 8004f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f54 <UART_SetConfig+0x1ac>)
 8004f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f54:	08004f6d 	.word	0x08004f6d
 8004f58:	08004f75 	.word	0x08004f75
 8004f5c:	08004f7d 	.word	0x08004f7d
 8004f60:	08004f85 	.word	0x08004f85
 8004f64:	08004f8d 	.word	0x08004f8d
 8004f68:	08004f95 	.word	0x08004f95
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f72:	e2f0      	b.n	8005556 <UART_SetConfig+0x7ae>
 8004f74:	2304      	movs	r3, #4
 8004f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f7a:	e2ec      	b.n	8005556 <UART_SetConfig+0x7ae>
 8004f7c:	2308      	movs	r3, #8
 8004f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f82:	e2e8      	b.n	8005556 <UART_SetConfig+0x7ae>
 8004f84:	2310      	movs	r3, #16
 8004f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f8a:	e2e4      	b.n	8005556 <UART_SetConfig+0x7ae>
 8004f8c:	2320      	movs	r3, #32
 8004f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f92:	e2e0      	b.n	8005556 <UART_SetConfig+0x7ae>
 8004f94:	2340      	movs	r3, #64	@ 0x40
 8004f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f9a:	e2dc      	b.n	8005556 <UART_SetConfig+0x7ae>
 8004f9c:	2380      	movs	r3, #128	@ 0x80
 8004f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fa2:	e2d8      	b.n	8005556 <UART_SetConfig+0x7ae>
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a4f      	ldr	r2, [pc, #316]	@ (80050e8 <UART_SetConfig+0x340>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d130      	bne.n	8005010 <UART_SetConfig+0x268>
 8004fae:	4b4c      	ldr	r3, [pc, #304]	@ (80050e0 <UART_SetConfig+0x338>)
 8004fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	2b05      	cmp	r3, #5
 8004fb8:	d826      	bhi.n	8005008 <UART_SetConfig+0x260>
 8004fba:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc0 <UART_SetConfig+0x218>)
 8004fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc0:	08004fd9 	.word	0x08004fd9
 8004fc4:	08004fe1 	.word	0x08004fe1
 8004fc8:	08004fe9 	.word	0x08004fe9
 8004fcc:	08004ff1 	.word	0x08004ff1
 8004fd0:	08004ff9 	.word	0x08004ff9
 8004fd4:	08005001 	.word	0x08005001
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fde:	e2ba      	b.n	8005556 <UART_SetConfig+0x7ae>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fe6:	e2b6      	b.n	8005556 <UART_SetConfig+0x7ae>
 8004fe8:	2308      	movs	r3, #8
 8004fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fee:	e2b2      	b.n	8005556 <UART_SetConfig+0x7ae>
 8004ff0:	2310      	movs	r3, #16
 8004ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ff6:	e2ae      	b.n	8005556 <UART_SetConfig+0x7ae>
 8004ff8:	2320      	movs	r3, #32
 8004ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ffe:	e2aa      	b.n	8005556 <UART_SetConfig+0x7ae>
 8005000:	2340      	movs	r3, #64	@ 0x40
 8005002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005006:	e2a6      	b.n	8005556 <UART_SetConfig+0x7ae>
 8005008:	2380      	movs	r3, #128	@ 0x80
 800500a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800500e:	e2a2      	b.n	8005556 <UART_SetConfig+0x7ae>
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a35      	ldr	r2, [pc, #212]	@ (80050ec <UART_SetConfig+0x344>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d130      	bne.n	800507c <UART_SetConfig+0x2d4>
 800501a:	4b31      	ldr	r3, [pc, #196]	@ (80050e0 <UART_SetConfig+0x338>)
 800501c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	2b05      	cmp	r3, #5
 8005024:	d826      	bhi.n	8005074 <UART_SetConfig+0x2cc>
 8005026:	a201      	add	r2, pc, #4	@ (adr r2, 800502c <UART_SetConfig+0x284>)
 8005028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502c:	08005045 	.word	0x08005045
 8005030:	0800504d 	.word	0x0800504d
 8005034:	08005055 	.word	0x08005055
 8005038:	0800505d 	.word	0x0800505d
 800503c:	08005065 	.word	0x08005065
 8005040:	0800506d 	.word	0x0800506d
 8005044:	2300      	movs	r3, #0
 8005046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800504a:	e284      	b.n	8005556 <UART_SetConfig+0x7ae>
 800504c:	2304      	movs	r3, #4
 800504e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005052:	e280      	b.n	8005556 <UART_SetConfig+0x7ae>
 8005054:	2308      	movs	r3, #8
 8005056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800505a:	e27c      	b.n	8005556 <UART_SetConfig+0x7ae>
 800505c:	2310      	movs	r3, #16
 800505e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005062:	e278      	b.n	8005556 <UART_SetConfig+0x7ae>
 8005064:	2320      	movs	r3, #32
 8005066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800506a:	e274      	b.n	8005556 <UART_SetConfig+0x7ae>
 800506c:	2340      	movs	r3, #64	@ 0x40
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005072:	e270      	b.n	8005556 <UART_SetConfig+0x7ae>
 8005074:	2380      	movs	r3, #128	@ 0x80
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800507a:	e26c      	b.n	8005556 <UART_SetConfig+0x7ae>
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a1b      	ldr	r2, [pc, #108]	@ (80050f0 <UART_SetConfig+0x348>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d142      	bne.n	800510c <UART_SetConfig+0x364>
 8005086:	4b16      	ldr	r3, [pc, #88]	@ (80050e0 <UART_SetConfig+0x338>)
 8005088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	2b05      	cmp	r3, #5
 8005090:	d838      	bhi.n	8005104 <UART_SetConfig+0x35c>
 8005092:	a201      	add	r2, pc, #4	@ (adr r2, 8005098 <UART_SetConfig+0x2f0>)
 8005094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005098:	080050b1 	.word	0x080050b1
 800509c:	080050b9 	.word	0x080050b9
 80050a0:	080050c1 	.word	0x080050c1
 80050a4:	080050c9 	.word	0x080050c9
 80050a8:	080050f5 	.word	0x080050f5
 80050ac:	080050fd 	.word	0x080050fd
 80050b0:	2300      	movs	r3, #0
 80050b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050b6:	e24e      	b.n	8005556 <UART_SetConfig+0x7ae>
 80050b8:	2304      	movs	r3, #4
 80050ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050be:	e24a      	b.n	8005556 <UART_SetConfig+0x7ae>
 80050c0:	2308      	movs	r3, #8
 80050c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050c6:	e246      	b.n	8005556 <UART_SetConfig+0x7ae>
 80050c8:	2310      	movs	r3, #16
 80050ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ce:	e242      	b.n	8005556 <UART_SetConfig+0x7ae>
 80050d0:	cfff69f3 	.word	0xcfff69f3
 80050d4:	58000c00 	.word	0x58000c00
 80050d8:	11fff4ff 	.word	0x11fff4ff
 80050dc:	40011000 	.word	0x40011000
 80050e0:	58024400 	.word	0x58024400
 80050e4:	40004400 	.word	0x40004400
 80050e8:	40004800 	.word	0x40004800
 80050ec:	40004c00 	.word	0x40004c00
 80050f0:	40005000 	.word	0x40005000
 80050f4:	2320      	movs	r3, #32
 80050f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050fa:	e22c      	b.n	8005556 <UART_SetConfig+0x7ae>
 80050fc:	2340      	movs	r3, #64	@ 0x40
 80050fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005102:	e228      	b.n	8005556 <UART_SetConfig+0x7ae>
 8005104:	2380      	movs	r3, #128	@ 0x80
 8005106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800510a:	e224      	b.n	8005556 <UART_SetConfig+0x7ae>
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4ab1      	ldr	r2, [pc, #708]	@ (80053d8 <UART_SetConfig+0x630>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d176      	bne.n	8005204 <UART_SetConfig+0x45c>
 8005116:	4bb1      	ldr	r3, [pc, #708]	@ (80053dc <UART_SetConfig+0x634>)
 8005118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800511a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800511e:	2b28      	cmp	r3, #40	@ 0x28
 8005120:	d86c      	bhi.n	80051fc <UART_SetConfig+0x454>
 8005122:	a201      	add	r2, pc, #4	@ (adr r2, 8005128 <UART_SetConfig+0x380>)
 8005124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005128:	080051cd 	.word	0x080051cd
 800512c:	080051fd 	.word	0x080051fd
 8005130:	080051fd 	.word	0x080051fd
 8005134:	080051fd 	.word	0x080051fd
 8005138:	080051fd 	.word	0x080051fd
 800513c:	080051fd 	.word	0x080051fd
 8005140:	080051fd 	.word	0x080051fd
 8005144:	080051fd 	.word	0x080051fd
 8005148:	080051d5 	.word	0x080051d5
 800514c:	080051fd 	.word	0x080051fd
 8005150:	080051fd 	.word	0x080051fd
 8005154:	080051fd 	.word	0x080051fd
 8005158:	080051fd 	.word	0x080051fd
 800515c:	080051fd 	.word	0x080051fd
 8005160:	080051fd 	.word	0x080051fd
 8005164:	080051fd 	.word	0x080051fd
 8005168:	080051dd 	.word	0x080051dd
 800516c:	080051fd 	.word	0x080051fd
 8005170:	080051fd 	.word	0x080051fd
 8005174:	080051fd 	.word	0x080051fd
 8005178:	080051fd 	.word	0x080051fd
 800517c:	080051fd 	.word	0x080051fd
 8005180:	080051fd 	.word	0x080051fd
 8005184:	080051fd 	.word	0x080051fd
 8005188:	080051e5 	.word	0x080051e5
 800518c:	080051fd 	.word	0x080051fd
 8005190:	080051fd 	.word	0x080051fd
 8005194:	080051fd 	.word	0x080051fd
 8005198:	080051fd 	.word	0x080051fd
 800519c:	080051fd 	.word	0x080051fd
 80051a0:	080051fd 	.word	0x080051fd
 80051a4:	080051fd 	.word	0x080051fd
 80051a8:	080051ed 	.word	0x080051ed
 80051ac:	080051fd 	.word	0x080051fd
 80051b0:	080051fd 	.word	0x080051fd
 80051b4:	080051fd 	.word	0x080051fd
 80051b8:	080051fd 	.word	0x080051fd
 80051bc:	080051fd 	.word	0x080051fd
 80051c0:	080051fd 	.word	0x080051fd
 80051c4:	080051fd 	.word	0x080051fd
 80051c8:	080051f5 	.word	0x080051f5
 80051cc:	2301      	movs	r3, #1
 80051ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051d2:	e1c0      	b.n	8005556 <UART_SetConfig+0x7ae>
 80051d4:	2304      	movs	r3, #4
 80051d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051da:	e1bc      	b.n	8005556 <UART_SetConfig+0x7ae>
 80051dc:	2308      	movs	r3, #8
 80051de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051e2:	e1b8      	b.n	8005556 <UART_SetConfig+0x7ae>
 80051e4:	2310      	movs	r3, #16
 80051e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ea:	e1b4      	b.n	8005556 <UART_SetConfig+0x7ae>
 80051ec:	2320      	movs	r3, #32
 80051ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051f2:	e1b0      	b.n	8005556 <UART_SetConfig+0x7ae>
 80051f4:	2340      	movs	r3, #64	@ 0x40
 80051f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051fa:	e1ac      	b.n	8005556 <UART_SetConfig+0x7ae>
 80051fc:	2380      	movs	r3, #128	@ 0x80
 80051fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005202:	e1a8      	b.n	8005556 <UART_SetConfig+0x7ae>
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a75      	ldr	r2, [pc, #468]	@ (80053e0 <UART_SetConfig+0x638>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d130      	bne.n	8005270 <UART_SetConfig+0x4c8>
 800520e:	4b73      	ldr	r3, [pc, #460]	@ (80053dc <UART_SetConfig+0x634>)
 8005210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	2b05      	cmp	r3, #5
 8005218:	d826      	bhi.n	8005268 <UART_SetConfig+0x4c0>
 800521a:	a201      	add	r2, pc, #4	@ (adr r2, 8005220 <UART_SetConfig+0x478>)
 800521c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005220:	08005239 	.word	0x08005239
 8005224:	08005241 	.word	0x08005241
 8005228:	08005249 	.word	0x08005249
 800522c:	08005251 	.word	0x08005251
 8005230:	08005259 	.word	0x08005259
 8005234:	08005261 	.word	0x08005261
 8005238:	2300      	movs	r3, #0
 800523a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800523e:	e18a      	b.n	8005556 <UART_SetConfig+0x7ae>
 8005240:	2304      	movs	r3, #4
 8005242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005246:	e186      	b.n	8005556 <UART_SetConfig+0x7ae>
 8005248:	2308      	movs	r3, #8
 800524a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800524e:	e182      	b.n	8005556 <UART_SetConfig+0x7ae>
 8005250:	2310      	movs	r3, #16
 8005252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005256:	e17e      	b.n	8005556 <UART_SetConfig+0x7ae>
 8005258:	2320      	movs	r3, #32
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800525e:	e17a      	b.n	8005556 <UART_SetConfig+0x7ae>
 8005260:	2340      	movs	r3, #64	@ 0x40
 8005262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005266:	e176      	b.n	8005556 <UART_SetConfig+0x7ae>
 8005268:	2380      	movs	r3, #128	@ 0x80
 800526a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800526e:	e172      	b.n	8005556 <UART_SetConfig+0x7ae>
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a5b      	ldr	r2, [pc, #364]	@ (80053e4 <UART_SetConfig+0x63c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d130      	bne.n	80052dc <UART_SetConfig+0x534>
 800527a:	4b58      	ldr	r3, [pc, #352]	@ (80053dc <UART_SetConfig+0x634>)
 800527c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	2b05      	cmp	r3, #5
 8005284:	d826      	bhi.n	80052d4 <UART_SetConfig+0x52c>
 8005286:	a201      	add	r2, pc, #4	@ (adr r2, 800528c <UART_SetConfig+0x4e4>)
 8005288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528c:	080052a5 	.word	0x080052a5
 8005290:	080052ad 	.word	0x080052ad
 8005294:	080052b5 	.word	0x080052b5
 8005298:	080052bd 	.word	0x080052bd
 800529c:	080052c5 	.word	0x080052c5
 80052a0:	080052cd 	.word	0x080052cd
 80052a4:	2300      	movs	r3, #0
 80052a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052aa:	e154      	b.n	8005556 <UART_SetConfig+0x7ae>
 80052ac:	2304      	movs	r3, #4
 80052ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052b2:	e150      	b.n	8005556 <UART_SetConfig+0x7ae>
 80052b4:	2308      	movs	r3, #8
 80052b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ba:	e14c      	b.n	8005556 <UART_SetConfig+0x7ae>
 80052bc:	2310      	movs	r3, #16
 80052be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052c2:	e148      	b.n	8005556 <UART_SetConfig+0x7ae>
 80052c4:	2320      	movs	r3, #32
 80052c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ca:	e144      	b.n	8005556 <UART_SetConfig+0x7ae>
 80052cc:	2340      	movs	r3, #64	@ 0x40
 80052ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052d2:	e140      	b.n	8005556 <UART_SetConfig+0x7ae>
 80052d4:	2380      	movs	r3, #128	@ 0x80
 80052d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052da:	e13c      	b.n	8005556 <UART_SetConfig+0x7ae>
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a41      	ldr	r2, [pc, #260]	@ (80053e8 <UART_SetConfig+0x640>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	f040 8082 	bne.w	80053ec <UART_SetConfig+0x644>
 80052e8:	4b3c      	ldr	r3, [pc, #240]	@ (80053dc <UART_SetConfig+0x634>)
 80052ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052f0:	2b28      	cmp	r3, #40	@ 0x28
 80052f2:	d86d      	bhi.n	80053d0 <UART_SetConfig+0x628>
 80052f4:	a201      	add	r2, pc, #4	@ (adr r2, 80052fc <UART_SetConfig+0x554>)
 80052f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fa:	bf00      	nop
 80052fc:	080053a1 	.word	0x080053a1
 8005300:	080053d1 	.word	0x080053d1
 8005304:	080053d1 	.word	0x080053d1
 8005308:	080053d1 	.word	0x080053d1
 800530c:	080053d1 	.word	0x080053d1
 8005310:	080053d1 	.word	0x080053d1
 8005314:	080053d1 	.word	0x080053d1
 8005318:	080053d1 	.word	0x080053d1
 800531c:	080053a9 	.word	0x080053a9
 8005320:	080053d1 	.word	0x080053d1
 8005324:	080053d1 	.word	0x080053d1
 8005328:	080053d1 	.word	0x080053d1
 800532c:	080053d1 	.word	0x080053d1
 8005330:	080053d1 	.word	0x080053d1
 8005334:	080053d1 	.word	0x080053d1
 8005338:	080053d1 	.word	0x080053d1
 800533c:	080053b1 	.word	0x080053b1
 8005340:	080053d1 	.word	0x080053d1
 8005344:	080053d1 	.word	0x080053d1
 8005348:	080053d1 	.word	0x080053d1
 800534c:	080053d1 	.word	0x080053d1
 8005350:	080053d1 	.word	0x080053d1
 8005354:	080053d1 	.word	0x080053d1
 8005358:	080053d1 	.word	0x080053d1
 800535c:	080053b9 	.word	0x080053b9
 8005360:	080053d1 	.word	0x080053d1
 8005364:	080053d1 	.word	0x080053d1
 8005368:	080053d1 	.word	0x080053d1
 800536c:	080053d1 	.word	0x080053d1
 8005370:	080053d1 	.word	0x080053d1
 8005374:	080053d1 	.word	0x080053d1
 8005378:	080053d1 	.word	0x080053d1
 800537c:	080053c1 	.word	0x080053c1
 8005380:	080053d1 	.word	0x080053d1
 8005384:	080053d1 	.word	0x080053d1
 8005388:	080053d1 	.word	0x080053d1
 800538c:	080053d1 	.word	0x080053d1
 8005390:	080053d1 	.word	0x080053d1
 8005394:	080053d1 	.word	0x080053d1
 8005398:	080053d1 	.word	0x080053d1
 800539c:	080053c9 	.word	0x080053c9
 80053a0:	2301      	movs	r3, #1
 80053a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a6:	e0d6      	b.n	8005556 <UART_SetConfig+0x7ae>
 80053a8:	2304      	movs	r3, #4
 80053aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ae:	e0d2      	b.n	8005556 <UART_SetConfig+0x7ae>
 80053b0:	2308      	movs	r3, #8
 80053b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b6:	e0ce      	b.n	8005556 <UART_SetConfig+0x7ae>
 80053b8:	2310      	movs	r3, #16
 80053ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053be:	e0ca      	b.n	8005556 <UART_SetConfig+0x7ae>
 80053c0:	2320      	movs	r3, #32
 80053c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053c6:	e0c6      	b.n	8005556 <UART_SetConfig+0x7ae>
 80053c8:	2340      	movs	r3, #64	@ 0x40
 80053ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ce:	e0c2      	b.n	8005556 <UART_SetConfig+0x7ae>
 80053d0:	2380      	movs	r3, #128	@ 0x80
 80053d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053d6:	e0be      	b.n	8005556 <UART_SetConfig+0x7ae>
 80053d8:	40011400 	.word	0x40011400
 80053dc:	58024400 	.word	0x58024400
 80053e0:	40007800 	.word	0x40007800
 80053e4:	40007c00 	.word	0x40007c00
 80053e8:	40011800 	.word	0x40011800
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4aad      	ldr	r2, [pc, #692]	@ (80056a8 <UART_SetConfig+0x900>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d176      	bne.n	80054e4 <UART_SetConfig+0x73c>
 80053f6:	4bad      	ldr	r3, [pc, #692]	@ (80056ac <UART_SetConfig+0x904>)
 80053f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053fe:	2b28      	cmp	r3, #40	@ 0x28
 8005400:	d86c      	bhi.n	80054dc <UART_SetConfig+0x734>
 8005402:	a201      	add	r2, pc, #4	@ (adr r2, 8005408 <UART_SetConfig+0x660>)
 8005404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005408:	080054ad 	.word	0x080054ad
 800540c:	080054dd 	.word	0x080054dd
 8005410:	080054dd 	.word	0x080054dd
 8005414:	080054dd 	.word	0x080054dd
 8005418:	080054dd 	.word	0x080054dd
 800541c:	080054dd 	.word	0x080054dd
 8005420:	080054dd 	.word	0x080054dd
 8005424:	080054dd 	.word	0x080054dd
 8005428:	080054b5 	.word	0x080054b5
 800542c:	080054dd 	.word	0x080054dd
 8005430:	080054dd 	.word	0x080054dd
 8005434:	080054dd 	.word	0x080054dd
 8005438:	080054dd 	.word	0x080054dd
 800543c:	080054dd 	.word	0x080054dd
 8005440:	080054dd 	.word	0x080054dd
 8005444:	080054dd 	.word	0x080054dd
 8005448:	080054bd 	.word	0x080054bd
 800544c:	080054dd 	.word	0x080054dd
 8005450:	080054dd 	.word	0x080054dd
 8005454:	080054dd 	.word	0x080054dd
 8005458:	080054dd 	.word	0x080054dd
 800545c:	080054dd 	.word	0x080054dd
 8005460:	080054dd 	.word	0x080054dd
 8005464:	080054dd 	.word	0x080054dd
 8005468:	080054c5 	.word	0x080054c5
 800546c:	080054dd 	.word	0x080054dd
 8005470:	080054dd 	.word	0x080054dd
 8005474:	080054dd 	.word	0x080054dd
 8005478:	080054dd 	.word	0x080054dd
 800547c:	080054dd 	.word	0x080054dd
 8005480:	080054dd 	.word	0x080054dd
 8005484:	080054dd 	.word	0x080054dd
 8005488:	080054cd 	.word	0x080054cd
 800548c:	080054dd 	.word	0x080054dd
 8005490:	080054dd 	.word	0x080054dd
 8005494:	080054dd 	.word	0x080054dd
 8005498:	080054dd 	.word	0x080054dd
 800549c:	080054dd 	.word	0x080054dd
 80054a0:	080054dd 	.word	0x080054dd
 80054a4:	080054dd 	.word	0x080054dd
 80054a8:	080054d5 	.word	0x080054d5
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054b2:	e050      	b.n	8005556 <UART_SetConfig+0x7ae>
 80054b4:	2304      	movs	r3, #4
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ba:	e04c      	b.n	8005556 <UART_SetConfig+0x7ae>
 80054bc:	2308      	movs	r3, #8
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054c2:	e048      	b.n	8005556 <UART_SetConfig+0x7ae>
 80054c4:	2310      	movs	r3, #16
 80054c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ca:	e044      	b.n	8005556 <UART_SetConfig+0x7ae>
 80054cc:	2320      	movs	r3, #32
 80054ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054d2:	e040      	b.n	8005556 <UART_SetConfig+0x7ae>
 80054d4:	2340      	movs	r3, #64	@ 0x40
 80054d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054da:	e03c      	b.n	8005556 <UART_SetConfig+0x7ae>
 80054dc:	2380      	movs	r3, #128	@ 0x80
 80054de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054e2:	e038      	b.n	8005556 <UART_SetConfig+0x7ae>
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a71      	ldr	r2, [pc, #452]	@ (80056b0 <UART_SetConfig+0x908>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d130      	bne.n	8005550 <UART_SetConfig+0x7a8>
 80054ee:	4b6f      	ldr	r3, [pc, #444]	@ (80056ac <UART_SetConfig+0x904>)
 80054f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f2:	f003 0307 	and.w	r3, r3, #7
 80054f6:	2b05      	cmp	r3, #5
 80054f8:	d826      	bhi.n	8005548 <UART_SetConfig+0x7a0>
 80054fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005500 <UART_SetConfig+0x758>)
 80054fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005500:	08005519 	.word	0x08005519
 8005504:	08005521 	.word	0x08005521
 8005508:	08005529 	.word	0x08005529
 800550c:	08005531 	.word	0x08005531
 8005510:	08005539 	.word	0x08005539
 8005514:	08005541 	.word	0x08005541
 8005518:	2302      	movs	r3, #2
 800551a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800551e:	e01a      	b.n	8005556 <UART_SetConfig+0x7ae>
 8005520:	2304      	movs	r3, #4
 8005522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005526:	e016      	b.n	8005556 <UART_SetConfig+0x7ae>
 8005528:	2308      	movs	r3, #8
 800552a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800552e:	e012      	b.n	8005556 <UART_SetConfig+0x7ae>
 8005530:	2310      	movs	r3, #16
 8005532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005536:	e00e      	b.n	8005556 <UART_SetConfig+0x7ae>
 8005538:	2320      	movs	r3, #32
 800553a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800553e:	e00a      	b.n	8005556 <UART_SetConfig+0x7ae>
 8005540:	2340      	movs	r3, #64	@ 0x40
 8005542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005546:	e006      	b.n	8005556 <UART_SetConfig+0x7ae>
 8005548:	2380      	movs	r3, #128	@ 0x80
 800554a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800554e:	e002      	b.n	8005556 <UART_SetConfig+0x7ae>
 8005550:	2380      	movs	r3, #128	@ 0x80
 8005552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a55      	ldr	r2, [pc, #340]	@ (80056b0 <UART_SetConfig+0x908>)
 800555c:	4293      	cmp	r3, r2
 800555e:	f040 80f8 	bne.w	8005752 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005562:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005566:	2b20      	cmp	r3, #32
 8005568:	dc46      	bgt.n	80055f8 <UART_SetConfig+0x850>
 800556a:	2b02      	cmp	r3, #2
 800556c:	db75      	blt.n	800565a <UART_SetConfig+0x8b2>
 800556e:	3b02      	subs	r3, #2
 8005570:	2b1e      	cmp	r3, #30
 8005572:	d872      	bhi.n	800565a <UART_SetConfig+0x8b2>
 8005574:	a201      	add	r2, pc, #4	@ (adr r2, 800557c <UART_SetConfig+0x7d4>)
 8005576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557a:	bf00      	nop
 800557c:	080055ff 	.word	0x080055ff
 8005580:	0800565b 	.word	0x0800565b
 8005584:	08005607 	.word	0x08005607
 8005588:	0800565b 	.word	0x0800565b
 800558c:	0800565b 	.word	0x0800565b
 8005590:	0800565b 	.word	0x0800565b
 8005594:	08005617 	.word	0x08005617
 8005598:	0800565b 	.word	0x0800565b
 800559c:	0800565b 	.word	0x0800565b
 80055a0:	0800565b 	.word	0x0800565b
 80055a4:	0800565b 	.word	0x0800565b
 80055a8:	0800565b 	.word	0x0800565b
 80055ac:	0800565b 	.word	0x0800565b
 80055b0:	0800565b 	.word	0x0800565b
 80055b4:	08005627 	.word	0x08005627
 80055b8:	0800565b 	.word	0x0800565b
 80055bc:	0800565b 	.word	0x0800565b
 80055c0:	0800565b 	.word	0x0800565b
 80055c4:	0800565b 	.word	0x0800565b
 80055c8:	0800565b 	.word	0x0800565b
 80055cc:	0800565b 	.word	0x0800565b
 80055d0:	0800565b 	.word	0x0800565b
 80055d4:	0800565b 	.word	0x0800565b
 80055d8:	0800565b 	.word	0x0800565b
 80055dc:	0800565b 	.word	0x0800565b
 80055e0:	0800565b 	.word	0x0800565b
 80055e4:	0800565b 	.word	0x0800565b
 80055e8:	0800565b 	.word	0x0800565b
 80055ec:	0800565b 	.word	0x0800565b
 80055f0:	0800565b 	.word	0x0800565b
 80055f4:	0800564d 	.word	0x0800564d
 80055f8:	2b40      	cmp	r3, #64	@ 0x40
 80055fa:	d02a      	beq.n	8005652 <UART_SetConfig+0x8aa>
 80055fc:	e02d      	b.n	800565a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80055fe:	f7fe fed3 	bl	80043a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005602:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005604:	e02f      	b.n	8005666 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005606:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800560a:	4618      	mov	r0, r3
 800560c:	f7fe fee2 	bl	80043d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005614:	e027      	b.n	8005666 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005616:	f107 0318 	add.w	r3, r7, #24
 800561a:	4618      	mov	r0, r3
 800561c:	f7ff f82e 	bl	800467c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005624:	e01f      	b.n	8005666 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005626:	4b21      	ldr	r3, [pc, #132]	@ (80056ac <UART_SetConfig+0x904>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b00      	cmp	r3, #0
 8005630:	d009      	beq.n	8005646 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005632:	4b1e      	ldr	r3, [pc, #120]	@ (80056ac <UART_SetConfig+0x904>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	08db      	lsrs	r3, r3, #3
 8005638:	f003 0303 	and.w	r3, r3, #3
 800563c:	4a1d      	ldr	r2, [pc, #116]	@ (80056b4 <UART_SetConfig+0x90c>)
 800563e:	fa22 f303 	lsr.w	r3, r2, r3
 8005642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005644:	e00f      	b.n	8005666 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005646:	4b1b      	ldr	r3, [pc, #108]	@ (80056b4 <UART_SetConfig+0x90c>)
 8005648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800564a:	e00c      	b.n	8005666 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800564c:	4b1a      	ldr	r3, [pc, #104]	@ (80056b8 <UART_SetConfig+0x910>)
 800564e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005650:	e009      	b.n	8005666 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005658:	e005      	b.n	8005666 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005664:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 81ee 	beq.w	8005a4a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005672:	4a12      	ldr	r2, [pc, #72]	@ (80056bc <UART_SetConfig+0x914>)
 8005674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005678:	461a      	mov	r2, r3
 800567a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800567c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005680:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	4613      	mov	r3, r2
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	4413      	add	r3, r2
 800568c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800568e:	429a      	cmp	r2, r3
 8005690:	d305      	bcc.n	800569e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005698:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800569a:	429a      	cmp	r2, r3
 800569c:	d910      	bls.n	80056c0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80056a4:	e1d1      	b.n	8005a4a <UART_SetConfig+0xca2>
 80056a6:	bf00      	nop
 80056a8:	40011c00 	.word	0x40011c00
 80056ac:	58024400 	.word	0x58024400
 80056b0:	58000c00 	.word	0x58000c00
 80056b4:	03d09000 	.word	0x03d09000
 80056b8:	003d0900 	.word	0x003d0900
 80056bc:	08006158 	.word	0x08006158
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056c2:	2200      	movs	r2, #0
 80056c4:	60bb      	str	r3, [r7, #8]
 80056c6:	60fa      	str	r2, [r7, #12]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056cc:	4ac0      	ldr	r2, [pc, #768]	@ (80059d0 <UART_SetConfig+0xc28>)
 80056ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	2200      	movs	r2, #0
 80056d6:	603b      	str	r3, [r7, #0]
 80056d8:	607a      	str	r2, [r7, #4]
 80056da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056e2:	f7fa fe1b 	bl	800031c <__aeabi_uldivmod>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4610      	mov	r0, r2
 80056ec:	4619      	mov	r1, r3
 80056ee:	f04f 0200 	mov.w	r2, #0
 80056f2:	f04f 0300 	mov.w	r3, #0
 80056f6:	020b      	lsls	r3, r1, #8
 80056f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80056fc:	0202      	lsls	r2, r0, #8
 80056fe:	6979      	ldr	r1, [r7, #20]
 8005700:	6849      	ldr	r1, [r1, #4]
 8005702:	0849      	lsrs	r1, r1, #1
 8005704:	2000      	movs	r0, #0
 8005706:	460c      	mov	r4, r1
 8005708:	4605      	mov	r5, r0
 800570a:	eb12 0804 	adds.w	r8, r2, r4
 800570e:	eb43 0905 	adc.w	r9, r3, r5
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	469a      	mov	sl, r3
 800571a:	4693      	mov	fp, r2
 800571c:	4652      	mov	r2, sl
 800571e:	465b      	mov	r3, fp
 8005720:	4640      	mov	r0, r8
 8005722:	4649      	mov	r1, r9
 8005724:	f7fa fdfa 	bl	800031c <__aeabi_uldivmod>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4613      	mov	r3, r2
 800572e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005732:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005736:	d308      	bcc.n	800574a <UART_SetConfig+0x9a2>
 8005738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800573e:	d204      	bcs.n	800574a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005746:	60da      	str	r2, [r3, #12]
 8005748:	e17f      	b.n	8005a4a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005750:	e17b      	b.n	8005a4a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800575a:	f040 80bd 	bne.w	80058d8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800575e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005762:	2b20      	cmp	r3, #32
 8005764:	dc48      	bgt.n	80057f8 <UART_SetConfig+0xa50>
 8005766:	2b00      	cmp	r3, #0
 8005768:	db7b      	blt.n	8005862 <UART_SetConfig+0xaba>
 800576a:	2b20      	cmp	r3, #32
 800576c:	d879      	bhi.n	8005862 <UART_SetConfig+0xaba>
 800576e:	a201      	add	r2, pc, #4	@ (adr r2, 8005774 <UART_SetConfig+0x9cc>)
 8005770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005774:	080057ff 	.word	0x080057ff
 8005778:	08005807 	.word	0x08005807
 800577c:	08005863 	.word	0x08005863
 8005780:	08005863 	.word	0x08005863
 8005784:	0800580f 	.word	0x0800580f
 8005788:	08005863 	.word	0x08005863
 800578c:	08005863 	.word	0x08005863
 8005790:	08005863 	.word	0x08005863
 8005794:	0800581f 	.word	0x0800581f
 8005798:	08005863 	.word	0x08005863
 800579c:	08005863 	.word	0x08005863
 80057a0:	08005863 	.word	0x08005863
 80057a4:	08005863 	.word	0x08005863
 80057a8:	08005863 	.word	0x08005863
 80057ac:	08005863 	.word	0x08005863
 80057b0:	08005863 	.word	0x08005863
 80057b4:	0800582f 	.word	0x0800582f
 80057b8:	08005863 	.word	0x08005863
 80057bc:	08005863 	.word	0x08005863
 80057c0:	08005863 	.word	0x08005863
 80057c4:	08005863 	.word	0x08005863
 80057c8:	08005863 	.word	0x08005863
 80057cc:	08005863 	.word	0x08005863
 80057d0:	08005863 	.word	0x08005863
 80057d4:	08005863 	.word	0x08005863
 80057d8:	08005863 	.word	0x08005863
 80057dc:	08005863 	.word	0x08005863
 80057e0:	08005863 	.word	0x08005863
 80057e4:	08005863 	.word	0x08005863
 80057e8:	08005863 	.word	0x08005863
 80057ec:	08005863 	.word	0x08005863
 80057f0:	08005863 	.word	0x08005863
 80057f4:	08005855 	.word	0x08005855
 80057f8:	2b40      	cmp	r3, #64	@ 0x40
 80057fa:	d02e      	beq.n	800585a <UART_SetConfig+0xab2>
 80057fc:	e031      	b.n	8005862 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057fe:	f7fd fc07 	bl	8003010 <HAL_RCC_GetPCLK1Freq>
 8005802:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005804:	e033      	b.n	800586e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005806:	f7fd fc19 	bl	800303c <HAL_RCC_GetPCLK2Freq>
 800580a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800580c:	e02f      	b.n	800586e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800580e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005812:	4618      	mov	r0, r3
 8005814:	f7fe fdde 	bl	80043d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800581a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800581c:	e027      	b.n	800586e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800581e:	f107 0318 	add.w	r3, r7, #24
 8005822:	4618      	mov	r0, r3
 8005824:	f7fe ff2a 	bl	800467c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800582c:	e01f      	b.n	800586e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800582e:	4b69      	ldr	r3, [pc, #420]	@ (80059d4 <UART_SetConfig+0xc2c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0320 	and.w	r3, r3, #32
 8005836:	2b00      	cmp	r3, #0
 8005838:	d009      	beq.n	800584e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800583a:	4b66      	ldr	r3, [pc, #408]	@ (80059d4 <UART_SetConfig+0xc2c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	08db      	lsrs	r3, r3, #3
 8005840:	f003 0303 	and.w	r3, r3, #3
 8005844:	4a64      	ldr	r2, [pc, #400]	@ (80059d8 <UART_SetConfig+0xc30>)
 8005846:	fa22 f303 	lsr.w	r3, r2, r3
 800584a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800584c:	e00f      	b.n	800586e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800584e:	4b62      	ldr	r3, [pc, #392]	@ (80059d8 <UART_SetConfig+0xc30>)
 8005850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005852:	e00c      	b.n	800586e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005854:	4b61      	ldr	r3, [pc, #388]	@ (80059dc <UART_SetConfig+0xc34>)
 8005856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005858:	e009      	b.n	800586e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800585a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800585e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005860:	e005      	b.n	800586e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005862:	2300      	movs	r3, #0
 8005864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800586c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800586e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 80ea 	beq.w	8005a4a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587a:	4a55      	ldr	r2, [pc, #340]	@ (80059d0 <UART_SetConfig+0xc28>)
 800587c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005880:	461a      	mov	r2, r3
 8005882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005884:	fbb3 f3f2 	udiv	r3, r3, r2
 8005888:	005a      	lsls	r2, r3, #1
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	085b      	lsrs	r3, r3, #1
 8005890:	441a      	add	r2, r3
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	fbb2 f3f3 	udiv	r3, r2, r3
 800589a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800589c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589e:	2b0f      	cmp	r3, #15
 80058a0:	d916      	bls.n	80058d0 <UART_SetConfig+0xb28>
 80058a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058a8:	d212      	bcs.n	80058d0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f023 030f 	bic.w	r3, r3, #15
 80058b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b6:	085b      	lsrs	r3, r3, #1
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	b29a      	uxth	r2, r3
 80058c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80058c2:	4313      	orrs	r3, r2
 80058c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80058cc:	60da      	str	r2, [r3, #12]
 80058ce:	e0bc      	b.n	8005a4a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80058d6:	e0b8      	b.n	8005a4a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058d8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80058dc:	2b20      	cmp	r3, #32
 80058de:	dc4b      	bgt.n	8005978 <UART_SetConfig+0xbd0>
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f2c0 8087 	blt.w	80059f4 <UART_SetConfig+0xc4c>
 80058e6:	2b20      	cmp	r3, #32
 80058e8:	f200 8084 	bhi.w	80059f4 <UART_SetConfig+0xc4c>
 80058ec:	a201      	add	r2, pc, #4	@ (adr r2, 80058f4 <UART_SetConfig+0xb4c>)
 80058ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f2:	bf00      	nop
 80058f4:	0800597f 	.word	0x0800597f
 80058f8:	08005987 	.word	0x08005987
 80058fc:	080059f5 	.word	0x080059f5
 8005900:	080059f5 	.word	0x080059f5
 8005904:	0800598f 	.word	0x0800598f
 8005908:	080059f5 	.word	0x080059f5
 800590c:	080059f5 	.word	0x080059f5
 8005910:	080059f5 	.word	0x080059f5
 8005914:	0800599f 	.word	0x0800599f
 8005918:	080059f5 	.word	0x080059f5
 800591c:	080059f5 	.word	0x080059f5
 8005920:	080059f5 	.word	0x080059f5
 8005924:	080059f5 	.word	0x080059f5
 8005928:	080059f5 	.word	0x080059f5
 800592c:	080059f5 	.word	0x080059f5
 8005930:	080059f5 	.word	0x080059f5
 8005934:	080059af 	.word	0x080059af
 8005938:	080059f5 	.word	0x080059f5
 800593c:	080059f5 	.word	0x080059f5
 8005940:	080059f5 	.word	0x080059f5
 8005944:	080059f5 	.word	0x080059f5
 8005948:	080059f5 	.word	0x080059f5
 800594c:	080059f5 	.word	0x080059f5
 8005950:	080059f5 	.word	0x080059f5
 8005954:	080059f5 	.word	0x080059f5
 8005958:	080059f5 	.word	0x080059f5
 800595c:	080059f5 	.word	0x080059f5
 8005960:	080059f5 	.word	0x080059f5
 8005964:	080059f5 	.word	0x080059f5
 8005968:	080059f5 	.word	0x080059f5
 800596c:	080059f5 	.word	0x080059f5
 8005970:	080059f5 	.word	0x080059f5
 8005974:	080059e7 	.word	0x080059e7
 8005978:	2b40      	cmp	r3, #64	@ 0x40
 800597a:	d037      	beq.n	80059ec <UART_SetConfig+0xc44>
 800597c:	e03a      	b.n	80059f4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800597e:	f7fd fb47 	bl	8003010 <HAL_RCC_GetPCLK1Freq>
 8005982:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005984:	e03c      	b.n	8005a00 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005986:	f7fd fb59 	bl	800303c <HAL_RCC_GetPCLK2Freq>
 800598a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800598c:	e038      	b.n	8005a00 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800598e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005992:	4618      	mov	r0, r3
 8005994:	f7fe fd1e 	bl	80043d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800599c:	e030      	b.n	8005a00 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800599e:	f107 0318 	add.w	r3, r7, #24
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fe fe6a 	bl	800467c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059ac:	e028      	b.n	8005a00 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059ae:	4b09      	ldr	r3, [pc, #36]	@ (80059d4 <UART_SetConfig+0xc2c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0320 	and.w	r3, r3, #32
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d012      	beq.n	80059e0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059ba:	4b06      	ldr	r3, [pc, #24]	@ (80059d4 <UART_SetConfig+0xc2c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	08db      	lsrs	r3, r3, #3
 80059c0:	f003 0303 	and.w	r3, r3, #3
 80059c4:	4a04      	ldr	r2, [pc, #16]	@ (80059d8 <UART_SetConfig+0xc30>)
 80059c6:	fa22 f303 	lsr.w	r3, r2, r3
 80059ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059cc:	e018      	b.n	8005a00 <UART_SetConfig+0xc58>
 80059ce:	bf00      	nop
 80059d0:	08006158 	.word	0x08006158
 80059d4:	58024400 	.word	0x58024400
 80059d8:	03d09000 	.word	0x03d09000
 80059dc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80059e0:	4b24      	ldr	r3, [pc, #144]	@ (8005a74 <UART_SetConfig+0xccc>)
 80059e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059e4:	e00c      	b.n	8005a00 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059e6:	4b24      	ldr	r3, [pc, #144]	@ (8005a78 <UART_SetConfig+0xcd0>)
 80059e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059ea:	e009      	b.n	8005a00 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059f2:	e005      	b.n	8005a00 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80059fe:	bf00      	nop
    }

    if (pclk != 0U)
 8005a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d021      	beq.n	8005a4a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8005a7c <UART_SetConfig+0xcd4>)
 8005a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a10:	461a      	mov	r2, r3
 8005a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a14:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	085b      	lsrs	r3, r3, #1
 8005a1e:	441a      	add	r2, r3
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a28:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2c:	2b0f      	cmp	r3, #15
 8005a2e:	d909      	bls.n	8005a44 <UART_SetConfig+0xc9c>
 8005a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a36:	d205      	bcs.n	8005a44 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	60da      	str	r2, [r3, #12]
 8005a42:	e002      	b.n	8005a4a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	2200      	movs	r2, #0
 8005a64:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005a66:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3748      	adds	r7, #72	@ 0x48
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a74:	03d09000 	.word	0x03d09000
 8005a78:	003d0900 	.word	0x003d0900
 8005a7c:	08006158 	.word	0x08006158

08005a80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8c:	f003 0308 	and.w	r3, r3, #8
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00a      	beq.n	8005aaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00a      	beq.n	8005aee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b14:	f003 0310 	and.w	r3, r3, #16
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00a      	beq.n	8005b32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b36:	f003 0320 	and.w	r3, r3, #32
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d01a      	beq.n	8005b96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b7e:	d10a      	bne.n	8005b96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	605a      	str	r2, [r3, #4]
  }
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b098      	sub	sp, #96	@ 0x60
 8005bc8:	af02      	add	r7, sp, #8
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bd4:	f7fb fb8a 	bl	80012ec <HAL_GetTick>
 8005bd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0308 	and.w	r3, r3, #8
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d12f      	bne.n	8005c48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005be8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f88e 	bl	8005d18 <UART_WaitOnFlagUntilTimeout>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d022      	beq.n	8005c48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0a:	e853 3f00 	ldrex	r3, [r3]
 8005c0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c16:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c20:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c22:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c28:	e841 2300 	strex	r3, r2, [r1]
 8005c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1e6      	bne.n	8005c02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e063      	b.n	8005d10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0304 	and.w	r3, r3, #4
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d149      	bne.n	8005cea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c56:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f857 	bl	8005d18 <UART_WaitOnFlagUntilTimeout>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d03c      	beq.n	8005cea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c78:	e853 3f00 	ldrex	r3, [r3]
 8005c7c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c90:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c96:	e841 2300 	strex	r3, r2, [r1]
 8005c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1e6      	bne.n	8005c70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3308      	adds	r3, #8
 8005ca8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	e853 3f00 	ldrex	r3, [r3]
 8005cb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f023 0301 	bic.w	r3, r3, #1
 8005cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cc2:	61fa      	str	r2, [r7, #28]
 8005cc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc6:	69b9      	ldr	r1, [r7, #24]
 8005cc8:	69fa      	ldr	r2, [r7, #28]
 8005cca:	e841 2300 	strex	r3, r2, [r1]
 8005cce:	617b      	str	r3, [r7, #20]
   return(result);
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1e5      	bne.n	8005ca2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e012      	b.n	8005d10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3758      	adds	r7, #88	@ 0x58
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	603b      	str	r3, [r7, #0]
 8005d24:	4613      	mov	r3, r2
 8005d26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d28:	e04f      	b.n	8005dca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d30:	d04b      	beq.n	8005dca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d32:	f7fb fadb 	bl	80012ec <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d302      	bcc.n	8005d48 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e04e      	b.n	8005dea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0304 	and.w	r3, r3, #4
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d037      	beq.n	8005dca <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b80      	cmp	r3, #128	@ 0x80
 8005d5e:	d034      	beq.n	8005dca <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b40      	cmp	r3, #64	@ 0x40
 8005d64:	d031      	beq.n	8005dca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	f003 0308 	and.w	r3, r3, #8
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d110      	bne.n	8005d96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2208      	movs	r2, #8
 8005d7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f839 	bl	8005df4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2208      	movs	r2, #8
 8005d86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e029      	b.n	8005dea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005da0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005da4:	d111      	bne.n	8005dca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005dae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 f81f 	bl	8005df4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2220      	movs	r2, #32
 8005dba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e00f      	b.n	8005dea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	69da      	ldr	r2, [r3, #28]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	bf0c      	ite	eq
 8005dda:	2301      	moveq	r3, #1
 8005ddc:	2300      	movne	r3, #0
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	461a      	mov	r2, r3
 8005de2:	79fb      	ldrb	r3, [r7, #7]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d0a0      	beq.n	8005d2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b095      	sub	sp, #84	@ 0x54
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	461a      	mov	r2, r3
 8005e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e22:	e841 2300 	strex	r3, r2, [r1]
 8005e26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1e6      	bne.n	8005dfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3308      	adds	r3, #8
 8005e34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	4b1e      	ldr	r3, [pc, #120]	@ (8005ebc <UART_EndRxTransfer+0xc8>)
 8005e42:	4013      	ands	r3, r2
 8005e44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3308      	adds	r3, #8
 8005e4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e5      	bne.n	8005e2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d118      	bne.n	8005e9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	e853 3f00 	ldrex	r3, [r3]
 8005e76:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f023 0310 	bic.w	r3, r3, #16
 8005e7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	461a      	mov	r2, r3
 8005e86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e88:	61bb      	str	r3, [r7, #24]
 8005e8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8c:	6979      	ldr	r1, [r7, #20]
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	e841 2300 	strex	r3, r2, [r1]
 8005e94:	613b      	str	r3, [r7, #16]
   return(result);
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1e6      	bne.n	8005e6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005eb0:	bf00      	nop
 8005eb2:	3754      	adds	r7, #84	@ 0x54
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	effffffe 	.word	0xeffffffe

08005ec0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d101      	bne.n	8005ed6 <HAL_UARTEx_DisableFifoMode+0x16>
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	e027      	b.n	8005f26 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2224      	movs	r2, #36	@ 0x24
 8005ee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0201 	bic.w	r2, r2, #1
 8005efc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005f04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b084      	sub	sp, #16
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d101      	bne.n	8005f4a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f46:	2302      	movs	r3, #2
 8005f48:	e02d      	b.n	8005fa6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2224      	movs	r2, #36	@ 0x24
 8005f56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 0201 	bic.w	r2, r2, #1
 8005f70:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f850 	bl	800602c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e02d      	b.n	8006022 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2224      	movs	r2, #36	@ 0x24
 8005fd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0201 	bic.w	r2, r2, #1
 8005fec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f812 	bl	800602c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2220      	movs	r2, #32
 8006014:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
	...

0800602c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006038:	2b00      	cmp	r3, #0
 800603a:	d108      	bne.n	800604e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800604c:	e031      	b.n	80060b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800604e:	2310      	movs	r3, #16
 8006050:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006052:	2310      	movs	r3, #16
 8006054:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	0e5b      	lsrs	r3, r3, #25
 800605e:	b2db      	uxtb	r3, r3
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	0f5b      	lsrs	r3, r3, #29
 800606e:	b2db      	uxtb	r3, r3
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006076:	7bbb      	ldrb	r3, [r7, #14]
 8006078:	7b3a      	ldrb	r2, [r7, #12]
 800607a:	4911      	ldr	r1, [pc, #68]	@ (80060c0 <UARTEx_SetNbDataToProcess+0x94>)
 800607c:	5c8a      	ldrb	r2, [r1, r2]
 800607e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006082:	7b3a      	ldrb	r2, [r7, #12]
 8006084:	490f      	ldr	r1, [pc, #60]	@ (80060c4 <UARTEx_SetNbDataToProcess+0x98>)
 8006086:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006088:	fb93 f3f2 	sdiv	r3, r3, r2
 800608c:	b29a      	uxth	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	7b7a      	ldrb	r2, [r7, #13]
 8006098:	4909      	ldr	r1, [pc, #36]	@ (80060c0 <UARTEx_SetNbDataToProcess+0x94>)
 800609a:	5c8a      	ldrb	r2, [r1, r2]
 800609c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80060a0:	7b7a      	ldrb	r2, [r7, #13]
 80060a2:	4908      	ldr	r1, [pc, #32]	@ (80060c4 <UARTEx_SetNbDataToProcess+0x98>)
 80060a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80060b2:	bf00      	nop
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	08006170 	.word	0x08006170
 80060c4:	08006178 	.word	0x08006178

080060c8 <memset>:
 80060c8:	4402      	add	r2, r0
 80060ca:	4603      	mov	r3, r0
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d100      	bne.n	80060d2 <memset+0xa>
 80060d0:	4770      	bx	lr
 80060d2:	f803 1b01 	strb.w	r1, [r3], #1
 80060d6:	e7f9      	b.n	80060cc <memset+0x4>

080060d8 <__libc_init_array>:
 80060d8:	b570      	push	{r4, r5, r6, lr}
 80060da:	4d0d      	ldr	r5, [pc, #52]	@ (8006110 <__libc_init_array+0x38>)
 80060dc:	4c0d      	ldr	r4, [pc, #52]	@ (8006114 <__libc_init_array+0x3c>)
 80060de:	1b64      	subs	r4, r4, r5
 80060e0:	10a4      	asrs	r4, r4, #2
 80060e2:	2600      	movs	r6, #0
 80060e4:	42a6      	cmp	r6, r4
 80060e6:	d109      	bne.n	80060fc <__libc_init_array+0x24>
 80060e8:	4d0b      	ldr	r5, [pc, #44]	@ (8006118 <__libc_init_array+0x40>)
 80060ea:	4c0c      	ldr	r4, [pc, #48]	@ (800611c <__libc_init_array+0x44>)
 80060ec:	f000 f818 	bl	8006120 <_init>
 80060f0:	1b64      	subs	r4, r4, r5
 80060f2:	10a4      	asrs	r4, r4, #2
 80060f4:	2600      	movs	r6, #0
 80060f6:	42a6      	cmp	r6, r4
 80060f8:	d105      	bne.n	8006106 <__libc_init_array+0x2e>
 80060fa:	bd70      	pop	{r4, r5, r6, pc}
 80060fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006100:	4798      	blx	r3
 8006102:	3601      	adds	r6, #1
 8006104:	e7ee      	b.n	80060e4 <__libc_init_array+0xc>
 8006106:	f855 3b04 	ldr.w	r3, [r5], #4
 800610a:	4798      	blx	r3
 800610c:	3601      	adds	r6, #1
 800610e:	e7f2      	b.n	80060f6 <__libc_init_array+0x1e>
 8006110:	08006188 	.word	0x08006188
 8006114:	08006188 	.word	0x08006188
 8006118:	08006188 	.word	0x08006188
 800611c:	0800618c 	.word	0x0800618c

08006120 <_init>:
 8006120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006122:	bf00      	nop
 8006124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006126:	bc08      	pop	{r3}
 8006128:	469e      	mov	lr, r3
 800612a:	4770      	bx	lr

0800612c <_fini>:
 800612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612e:	bf00      	nop
 8006130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006132:	bc08      	pop	{r3}
 8006134:	469e      	mov	lr, r3
 8006136:	4770      	bx	lr
