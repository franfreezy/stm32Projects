
FinalYearSatComms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f50  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800621c  0800621c  0000721c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006254  08006254  00007254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800625c  0800625c  0000725c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006260  08006260  00007260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08006264  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08006274  00008010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  080062d4  00008070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  240000d0  08006334  000080d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240003ac  08006334  000083ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134bd  00000000  00000000  000080fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002015  00000000  00000000  0001b5bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  0001d5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000975  00000000  00000000  0001e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032174  00000000  00000000  0001eb7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001004f  00000000  00000000  00050cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00145393  00000000  00000000  00060d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a60d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003300  00000000  00000000  001a6118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001a9418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08006204 	.word	0x08006204

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	08006204 	.word	0x08006204

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 fdbc 	bl	800117c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f828 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 f9ce 	bl	80009a8 <MX_GPIO_Init>
  MX_ETH_Init();
 800060c:	f000 f894 	bl	8000738 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000610:	f000 f92a 	bl	8000868 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000614:	f000 f9c0 	bl	8000998 <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 8000618:	f000 f8da 	bl	80007d0 <MX_UART4_Init>
  MX_USART6_UART_Init();
 800061c:	f000 f970 	bl	8000900 <MX_USART6_UART_Init>


  while (1)
  {
	  if (HAL_UART_Receive(&huart3, &Data, 1, HAL_MAX_DELAY) == HAL_OK)
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	2201      	movs	r2, #1
 8000626:	4909      	ldr	r1, [pc, #36]	@ (800064c <main+0x50>)
 8000628:	4809      	ldr	r0, [pc, #36]	@ (8000650 <main+0x54>)
 800062a:	f004 fb67 	bl	8004cfc <HAL_UART_Receive>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d1f5      	bne.n	8000620 <main+0x24>
	          {
	              // Store received byte into the buffer
	              rx_data[0] = Data;
 8000634:	4b05      	ldr	r3, [pc, #20]	@ (800064c <main+0x50>)
 8000636:	781a      	ldrb	r2, [r3, #0]
 8000638:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <main+0x58>)
 800063a:	701a      	strb	r2, [r3, #0]

	              // You can print the received data via transmission or handle it
	              HAL_UART_Transmit(&huart3, &Data, 1, HAL_MAX_DELAY);
 800063c:	f04f 33ff 	mov.w	r3, #4294967295
 8000640:	2201      	movs	r2, #1
 8000642:	4902      	ldr	r1, [pc, #8]	@ (800064c <main+0x50>)
 8000644:	4802      	ldr	r0, [pc, #8]	@ (8000650 <main+0x54>)
 8000646:	f004 facb 	bl	8004be0 <HAL_UART_Transmit>
	  if (HAL_UART_Receive(&huart3, &Data, 1, HAL_MAX_DELAY) == HAL_OK)
 800064a:	e7e9      	b.n	8000620 <main+0x24>
 800064c:	240000ec 	.word	0x240000ec
 8000650:	24000278 	.word	0x24000278
 8000654:	240000f0 	.word	0x240000f0

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b09c      	sub	sp, #112	@ 0x70
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000662:	224c      	movs	r2, #76	@ 0x4c
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f005 fda0 	bl	80061ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2220      	movs	r2, #32
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f005 fd9a 	bl	80061ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000678:	2002      	movs	r0, #2
 800067a:	f001 fcff 	bl	800207c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800067e:	2300      	movs	r3, #0
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	4b2c      	ldr	r3, [pc, #176]	@ (8000734 <SystemClock_Config+0xdc>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	4a2b      	ldr	r2, [pc, #172]	@ (8000734 <SystemClock_Config+0xdc>)
 8000688:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800068c:	6193      	str	r3, [r2, #24]
 800068e:	4b29      	ldr	r3, [pc, #164]	@ (8000734 <SystemClock_Config+0xdc>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800069a:	bf00      	nop
 800069c:	4b25      	ldr	r3, [pc, #148]	@ (8000734 <SystemClock_Config+0xdc>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006a8:	d1f8      	bne.n	800069c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006aa:	2321      	movs	r3, #33	@ 0x21
 80006ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006ae:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006bc:	2302      	movs	r3, #2
 80006be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80006c4:	f240 1313 	movw	r3, #275	@ 0x113
 80006c8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80006d6:	2304      	movs	r3, #4
 80006d8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006da:	2300      	movs	r3, #0
 80006dc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 fd02 	bl	80020f0 <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006f2:	f000 fa55 	bl	8000ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	233f      	movs	r3, #63	@ 0x3f
 80006f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2303      	movs	r3, #3
 80006fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000702:	2308      	movs	r3, #8
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000706:	2340      	movs	r3, #64	@ 0x40
 8000708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800070a:	2340      	movs	r3, #64	@ 0x40
 800070c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800070e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000714:	2340      	movs	r3, #64	@ 0x40
 8000716:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2103      	movs	r1, #3
 800071c:	4618      	mov	r0, r3
 800071e:	f002 f8c1 	bl	80028a4 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000728:	f000 fa3a 	bl	8000ba0 <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3770      	adds	r7, #112	@ 0x70
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	58024800 	.word	0x58024800

08000738 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800073c:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <MX_ETH_Init+0x80>)
 800073e:	4a1f      	ldr	r2, [pc, #124]	@ (80007bc <MX_ETH_Init+0x84>)
 8000740:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000742:	4b1f      	ldr	r3, [pc, #124]	@ (80007c0 <MX_ETH_Init+0x88>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000748:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <MX_ETH_Init+0x88>)
 800074a:	2280      	movs	r2, #128	@ 0x80
 800074c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800074e:	4b1c      	ldr	r3, [pc, #112]	@ (80007c0 <MX_ETH_Init+0x88>)
 8000750:	22e1      	movs	r2, #225	@ 0xe1
 8000752:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000754:	4b1a      	ldr	r3, [pc, #104]	@ (80007c0 <MX_ETH_Init+0x88>)
 8000756:	2200      	movs	r2, #0
 8000758:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800075a:	4b19      	ldr	r3, [pc, #100]	@ (80007c0 <MX_ETH_Init+0x88>)
 800075c:	2200      	movs	r2, #0
 800075e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000760:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <MX_ETH_Init+0x88>)
 8000762:	2200      	movs	r2, #0
 8000764:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000766:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <MX_ETH_Init+0x80>)
 8000768:	4a15      	ldr	r2, [pc, #84]	@ (80007c0 <MX_ETH_Init+0x88>)
 800076a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <MX_ETH_Init+0x80>)
 800076e:	2201      	movs	r2, #1
 8000770:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <MX_ETH_Init+0x80>)
 8000774:	4a13      	ldr	r2, [pc, #76]	@ (80007c4 <MX_ETH_Init+0x8c>)
 8000776:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000778:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <MX_ETH_Init+0x80>)
 800077a:	4a13      	ldr	r2, [pc, #76]	@ (80007c8 <MX_ETH_Init+0x90>)
 800077c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800077e:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_ETH_Init+0x80>)
 8000780:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000784:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000786:	480c      	ldr	r0, [pc, #48]	@ (80007b8 <MX_ETH_Init+0x80>)
 8000788:	f000 fe82 	bl	8001490 <HAL_ETH_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000792:	f000 fa05 	bl	8000ba0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000796:	2238      	movs	r2, #56	@ 0x38
 8000798:	2100      	movs	r1, #0
 800079a:	480c      	ldr	r0, [pc, #48]	@ (80007cc <MX_ETH_Init+0x94>)
 800079c:	f005 fd06 	bl	80061ac <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <MX_ETH_Init+0x94>)
 80007a2:	2221      	movs	r2, #33	@ 0x21
 80007a4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_ETH_Init+0x94>)
 80007a8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007ac:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007ae:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <MX_ETH_Init+0x94>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	24000134 	.word	0x24000134
 80007bc:	40028000 	.word	0x40028000
 80007c0:	240003a0 	.word	0x240003a0
 80007c4:	24000070 	.word	0x24000070
 80007c8:	24000010 	.word	0x24000010
 80007cc:	240000fc 	.word	0x240000fc

080007d0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80007d4:	4b22      	ldr	r3, [pc, #136]	@ (8000860 <MX_UART4_Init+0x90>)
 80007d6:	4a23      	ldr	r2, [pc, #140]	@ (8000864 <MX_UART4_Init+0x94>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80007da:	4b21      	ldr	r3, [pc, #132]	@ (8000860 <MX_UART4_Init+0x90>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000860 <MX_UART4_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000860 <MX_UART4_Init+0x90>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000860 <MX_UART4_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <MX_UART4_Init+0x90>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b19      	ldr	r3, [pc, #100]	@ (8000860 <MX_UART4_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <MX_UART4_Init+0x90>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000806:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <MX_UART4_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800080c:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_UART4_Init+0x90>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000812:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <MX_UART4_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000818:	4811      	ldr	r0, [pc, #68]	@ (8000860 <MX_UART4_Init+0x90>)
 800081a:	f004 f991 	bl	8004b40 <HAL_UART_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000824:	f000 f9bc 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000828:	2100      	movs	r1, #0
 800082a:	480d      	ldr	r0, [pc, #52]	@ (8000860 <MX_UART4_Init+0x90>)
 800082c:	f005 fbf3 	bl	8006016 <HAL_UARTEx_SetTxFifoThreshold>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000836:	f000 f9b3 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800083a:	2100      	movs	r1, #0
 800083c:	4808      	ldr	r0, [pc, #32]	@ (8000860 <MX_UART4_Init+0x90>)
 800083e:	f005 fc28 	bl	8006092 <HAL_UARTEx_SetRxFifoThreshold>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000848:	f000 f9aa 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	@ (8000860 <MX_UART4_Init+0x90>)
 800084e:	f005 fba9 	bl	8005fa4 <HAL_UARTEx_DisableFifoMode>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000858:	f000 f9a2 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	240001e4 	.word	0x240001e4
 8000864:	40004c00 	.word	0x40004c00

08000868 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800086c:	4b22      	ldr	r3, [pc, #136]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 800086e:	4a23      	ldr	r2, [pc, #140]	@ (80008fc <MX_USART3_UART_Init+0x94>)
 8000870:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000872:	4b21      	ldr	r3, [pc, #132]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b1f      	ldr	r3, [pc, #124]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b1d      	ldr	r3, [pc, #116]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000886:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b1a      	ldr	r3, [pc, #104]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089e:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008a4:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008aa:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008b0:	4811      	ldr	r0, [pc, #68]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 80008b2:	f004 f945 	bl	8004b40 <HAL_UART_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008bc:	f000 f970 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c0:	2100      	movs	r1, #0
 80008c2:	480d      	ldr	r0, [pc, #52]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 80008c4:	f005 fba7 	bl	8006016 <HAL_UARTEx_SetTxFifoThreshold>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008ce:	f000 f967 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d2:	2100      	movs	r1, #0
 80008d4:	4808      	ldr	r0, [pc, #32]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 80008d6:	f005 fbdc 	bl	8006092 <HAL_UARTEx_SetRxFifoThreshold>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008e0:	f000 f95e 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 80008e6:	f005 fb5d 	bl	8005fa4 <HAL_UARTEx_DisableFifoMode>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008f0:	f000 f956 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	24000278 	.word	0x24000278
 80008fc:	40004800 	.word	0x40004800

08000900 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000904:	4b22      	ldr	r3, [pc, #136]	@ (8000990 <MX_USART6_UART_Init+0x90>)
 8000906:	4a23      	ldr	r2, [pc, #140]	@ (8000994 <MX_USART6_UART_Init+0x94>)
 8000908:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800090a:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <MX_USART6_UART_Init+0x90>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b1f      	ldr	r3, [pc, #124]	@ (8000990 <MX_USART6_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b1d      	ldr	r3, [pc, #116]	@ (8000990 <MX_USART6_UART_Init+0x90>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800091e:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <MX_USART6_UART_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <MX_USART6_UART_Init+0x90>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <MX_USART6_UART_Init+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <MX_USART6_UART_Init+0x90>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000936:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <MX_USART6_UART_Init+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_USART6_UART_Init+0x90>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000942:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <MX_USART6_UART_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000948:	4811      	ldr	r0, [pc, #68]	@ (8000990 <MX_USART6_UART_Init+0x90>)
 800094a:	f004 f8f9 	bl	8004b40 <HAL_UART_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8000954:	f000 f924 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000958:	2100      	movs	r1, #0
 800095a:	480d      	ldr	r0, [pc, #52]	@ (8000990 <MX_USART6_UART_Init+0x90>)
 800095c:	f005 fb5b 	bl	8006016 <HAL_UARTEx_SetTxFifoThreshold>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8000966:	f000 f91b 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800096a:	2100      	movs	r1, #0
 800096c:	4808      	ldr	r0, [pc, #32]	@ (8000990 <MX_USART6_UART_Init+0x90>)
 800096e:	f005 fb90 	bl	8006092 <HAL_UARTEx_SetRxFifoThreshold>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8000978:	f000 f912 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	@ (8000990 <MX_USART6_UART_Init+0x90>)
 800097e:	f005 fb11 	bl	8005fa4 <HAL_UARTEx_DisableFifoMode>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8000988:	f000 f90a 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2400030c 	.word	0x2400030c
 8000994:	40011400 	.word	0x40011400

08000998 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
	...

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08c      	sub	sp, #48	@ 0x30
 80009ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	4b71      	ldr	r3, [pc, #452]	@ (8000b84 <MX_GPIO_Init+0x1dc>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c4:	4a6f      	ldr	r2, [pc, #444]	@ (8000b84 <MX_GPIO_Init+0x1dc>)
 80009c6:	f043 0304 	orr.w	r3, r3, #4
 80009ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ce:	4b6d      	ldr	r3, [pc, #436]	@ (8000b84 <MX_GPIO_Init+0x1dc>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d4:	f003 0304 	and.w	r3, r3, #4
 80009d8:	61bb      	str	r3, [r7, #24]
 80009da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009dc:	4b69      	ldr	r3, [pc, #420]	@ (8000b84 <MX_GPIO_Init+0x1dc>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e2:	4a68      	ldr	r2, [pc, #416]	@ (8000b84 <MX_GPIO_Init+0x1dc>)
 80009e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ec:	4b65      	ldr	r3, [pc, #404]	@ (8000b84 <MX_GPIO_Init+0x1dc>)
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b62      	ldr	r3, [pc, #392]	@ (8000b84 <MX_GPIO_Init+0x1dc>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a00:	4a60      	ldr	r2, [pc, #384]	@ (8000b84 <MX_GPIO_Init+0x1dc>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a0a:	4b5e      	ldr	r3, [pc, #376]	@ (8000b84 <MX_GPIO_Init+0x1dc>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a18:	4b5a      	ldr	r3, [pc, #360]	@ (8000b84 <MX_GPIO_Init+0x1dc>)
 8000a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a1e:	4a59      	ldr	r2, [pc, #356]	@ (8000b84 <MX_GPIO_Init+0x1dc>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a28:	4b56      	ldr	r3, [pc, #344]	@ (8000b84 <MX_GPIO_Init+0x1dc>)
 8000a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a36:	4b53      	ldr	r3, [pc, #332]	@ (8000b84 <MX_GPIO_Init+0x1dc>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a3c:	4a51      	ldr	r2, [pc, #324]	@ (8000b84 <MX_GPIO_Init+0x1dc>)
 8000a3e:	f043 0308 	orr.w	r3, r3, #8
 8000a42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a46:	4b4f      	ldr	r3, [pc, #316]	@ (8000b84 <MX_GPIO_Init+0x1dc>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a4c:	f003 0308 	and.w	r3, r3, #8
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a54:	4b4b      	ldr	r3, [pc, #300]	@ (8000b84 <MX_GPIO_Init+0x1dc>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5a:	4a4a      	ldr	r2, [pc, #296]	@ (8000b84 <MX_GPIO_Init+0x1dc>)
 8000a5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a64:	4b47      	ldr	r3, [pc, #284]	@ (8000b84 <MX_GPIO_Init+0x1dc>)
 8000a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a72:	4b44      	ldr	r3, [pc, #272]	@ (8000b84 <MX_GPIO_Init+0x1dc>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a78:	4a42      	ldr	r2, [pc, #264]	@ (8000b84 <MX_GPIO_Init+0x1dc>)
 8000a7a:	f043 0310 	orr.w	r3, r3, #16
 8000a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a82:	4b40      	ldr	r3, [pc, #256]	@ (8000b84 <MX_GPIO_Init+0x1dc>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a88:	f003 0310 	and.w	r3, r3, #16
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a96:	483c      	ldr	r0, [pc, #240]	@ (8000b88 <MX_GPIO_Init+0x1e0>)
 8000a98:	f001 fad6 	bl	8002048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000aa2:	483a      	ldr	r0, [pc, #232]	@ (8000b8c <MX_GPIO_Init+0x1e4>)
 8000aa4:	f001 fad0 	bl	8002048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2102      	movs	r1, #2
 8000aac:	4838      	ldr	r0, [pc, #224]	@ (8000b90 <MX_GPIO_Init+0x1e8>)
 8000aae:	f001 facb 	bl	8002048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ab2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4833      	ldr	r0, [pc, #204]	@ (8000b94 <MX_GPIO_Init+0x1ec>)
 8000ac8:	f001 f916 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000acc:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4828      	ldr	r0, [pc, #160]	@ (8000b88 <MX_GPIO_Init+0x1e0>)
 8000ae6:	f001 f907 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000aea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	4822      	ldr	r0, [pc, #136]	@ (8000b8c <MX_GPIO_Init+0x1e4>)
 8000b04:	f001 f8f8 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000b08:	2380      	movs	r3, #128	@ 0x80
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	481e      	ldr	r0, [pc, #120]	@ (8000b98 <MX_GPIO_Init+0x1f0>)
 8000b1e:	f001 f8eb 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000b22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	4819      	ldr	r0, [pc, #100]	@ (8000b9c <MX_GPIO_Init+0x1f4>)
 8000b38:	f001 f8de 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000b3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000b4e:	230a      	movs	r3, #10
 8000b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	4810      	ldr	r0, [pc, #64]	@ (8000b9c <MX_GPIO_Init+0x1f4>)
 8000b5a:	f001 f8cd 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	4806      	ldr	r0, [pc, #24]	@ (8000b90 <MX_GPIO_Init+0x1e8>)
 8000b76:	f001 f8bf 	bl	8001cf8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b7a:	bf00      	nop
 8000b7c:	3730      	adds	r7, #48	@ 0x30
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	58024400 	.word	0x58024400
 8000b88:	58020400 	.word	0x58020400
 8000b8c:	58020c00 	.word	0x58020c00
 8000b90:	58021000 	.word	0x58021000
 8000b94:	58020800 	.word	0x58020800
 8000b98:	58021800 	.word	0x58021800
 8000b9c:	58020000 	.word	0x58020000

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <Error_Handler+0x8>

08000bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bdc <HAL_MspInit+0x30>)
 8000bb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bb8:	4a08      	ldr	r2, [pc, #32]	@ (8000bdc <HAL_MspInit+0x30>)
 8000bba:	f043 0302 	orr.w	r3, r3, #2
 8000bbe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000bc2:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <HAL_MspInit+0x30>)
 8000bc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bc8:	f003 0302 	and.w	r3, r3, #2
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	58024400 	.word	0x58024400

08000be0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08e      	sub	sp, #56	@ 0x38
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a59      	ldr	r2, [pc, #356]	@ (8000d64 <HAL_ETH_MspInit+0x184>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	f040 80ab 	bne.w	8000d5a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c04:	4b58      	ldr	r3, [pc, #352]	@ (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c0a:	4a57      	ldr	r2, [pc, #348]	@ (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c10:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c14:	4b54      	ldr	r3, [pc, #336]	@ (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c1e:	623b      	str	r3, [r7, #32]
 8000c20:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c22:	4b51      	ldr	r3, [pc, #324]	@ (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c28:	4a4f      	ldr	r2, [pc, #316]	@ (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c2e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c32:	4b4d      	ldr	r3, [pc, #308]	@ (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c3c:	61fb      	str	r3, [r7, #28]
 8000c3e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c40:	4b49      	ldr	r3, [pc, #292]	@ (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c46:	4a48      	ldr	r2, [pc, #288]	@ (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c4c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c50:	4b45      	ldr	r3, [pc, #276]	@ (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	4b42      	ldr	r3, [pc, #264]	@ (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c64:	4a40      	ldr	r2, [pc, #256]	@ (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c74:	f003 0304 	and.w	r3, r3, #4
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c82:	4a39      	ldr	r2, [pc, #228]	@ (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c8c:	4b36      	ldr	r3, [pc, #216]	@ (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	4b33      	ldr	r3, [pc, #204]	@ (8000d68 <HAL_ETH_MspInit+0x188>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca0:	4a31      	ldr	r2, [pc, #196]	@ (8000d68 <HAL_ETH_MspInit+0x188>)
 8000ca2:	f043 0302 	orr.w	r3, r3, #2
 8000ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000caa:	4b2f      	ldr	r3, [pc, #188]	@ (8000d68 <HAL_ETH_MspInit+0x188>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb0:	f003 0302 	and.w	r3, r3, #2
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d68 <HAL_ETH_MspInit+0x188>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8000d68 <HAL_ETH_MspInit+0x188>)
 8000cc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cc8:	4b27      	ldr	r3, [pc, #156]	@ (8000d68 <HAL_ETH_MspInit+0x188>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cd6:	2332      	movs	r3, #50	@ 0x32
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce6:	230b      	movs	r3, #11
 8000ce8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cee:	4619      	mov	r1, r3
 8000cf0:	481e      	ldr	r0, [pc, #120]	@ (8000d6c <HAL_ETH_MspInit+0x18c>)
 8000cf2:	f001 f801 	bl	8001cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cf6:	2386      	movs	r3, #134	@ 0x86
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d06:	230b      	movs	r3, #11
 8000d08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4817      	ldr	r0, [pc, #92]	@ (8000d70 <HAL_ETH_MspInit+0x190>)
 8000d12:	f000 fff1 	bl	8001cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d28:	230b      	movs	r3, #11
 8000d2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	4810      	ldr	r0, [pc, #64]	@ (8000d74 <HAL_ETH_MspInit+0x194>)
 8000d34:	f000 ffe0 	bl	8001cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d38:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d4a:	230b      	movs	r3, #11
 8000d4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d52:	4619      	mov	r1, r3
 8000d54:	4808      	ldr	r0, [pc, #32]	@ (8000d78 <HAL_ETH_MspInit+0x198>)
 8000d56:	f000 ffcf 	bl	8001cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d5a:	bf00      	nop
 8000d5c:	3738      	adds	r7, #56	@ 0x38
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40028000 	.word	0x40028000
 8000d68:	58024400 	.word	0x58024400
 8000d6c:	58020800 	.word	0x58020800
 8000d70:	58020000 	.word	0x58020000
 8000d74:	58020400 	.word	0x58020400
 8000d78:	58021800 	.word	0x58021800

08000d7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b0be      	sub	sp, #248	@ 0xf8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d94:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d98:	22b8      	movs	r2, #184	@ 0xb8
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f005 fa05 	bl	80061ac <memset>
  if(huart->Instance==UART4)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a85      	ldr	r2, [pc, #532]	@ (8000fbc <HAL_UART_MspInit+0x240>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d16b      	bne.n	8000e84 <HAL_UART_MspInit+0x108>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000dac:	f04f 0202 	mov.w	r2, #2
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dbe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 f8fa 	bl	8002fbc <HAL_RCCEx_PeriphCLKConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000dce:	f7ff fee7 	bl	8000ba0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000dd2:	4b7b      	ldr	r3, [pc, #492]	@ (8000fc0 <HAL_UART_MspInit+0x244>)
 8000dd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dd8:	4a79      	ldr	r2, [pc, #484]	@ (8000fc0 <HAL_UART_MspInit+0x244>)
 8000dda:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000dde:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000de2:	4b77      	ldr	r3, [pc, #476]	@ (8000fc0 <HAL_UART_MspInit+0x244>)
 8000de4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000de8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b73      	ldr	r3, [pc, #460]	@ (8000fc0 <HAL_UART_MspInit+0x244>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df6:	4a72      	ldr	r2, [pc, #456]	@ (8000fc0 <HAL_UART_MspInit+0x244>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e00:	4b6f      	ldr	r3, [pc, #444]	@ (8000fc0 <HAL_UART_MspInit+0x244>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	623b      	str	r3, [r7, #32]
 8000e0c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	4b6c      	ldr	r3, [pc, #432]	@ (8000fc0 <HAL_UART_MspInit+0x244>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e14:	4a6a      	ldr	r2, [pc, #424]	@ (8000fc0 <HAL_UART_MspInit+0x244>)
 8000e16:	f043 0304 	orr.w	r3, r3, #4
 8000e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e1e:	4b68      	ldr	r3, [pc, #416]	@ (8000fc0 <HAL_UART_MspInit+0x244>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e24:	f003 0304 	and.w	r3, r3, #4
 8000e28:	61fb      	str	r3, [r7, #28]
 8000e2a:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e44:	2308      	movs	r3, #8
 8000e46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000e4e:	4619      	mov	r1, r3
 8000e50:	485c      	ldr	r0, [pc, #368]	@ (8000fc4 <HAL_UART_MspInit+0x248>)
 8000e52:	f000 ff51 	bl	8001cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e56:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e70:	2308      	movs	r3, #8
 8000e72:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e76:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4852      	ldr	r0, [pc, #328]	@ (8000fc8 <HAL_UART_MspInit+0x24c>)
 8000e7e:	f000 ff3b 	bl	8001cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000e82:	e097      	b.n	8000fb4 <HAL_UART_MspInit+0x238>
  else if(huart->Instance==USART3)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a50      	ldr	r2, [pc, #320]	@ (8000fcc <HAL_UART_MspInit+0x250>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d147      	bne.n	8000f1e <HAL_UART_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e8e:	f04f 0202 	mov.w	r2, #2
 8000e92:	f04f 0300 	mov.w	r3, #0
 8000e96:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f002 f889 	bl	8002fbc <HAL_RCCEx_PeriphCLKConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8000eb0:	f7ff fe76 	bl	8000ba0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eb4:	4b42      	ldr	r3, [pc, #264]	@ (8000fc0 <HAL_UART_MspInit+0x244>)
 8000eb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000eba:	4a41      	ldr	r2, [pc, #260]	@ (8000fc0 <HAL_UART_MspInit+0x244>)
 8000ebc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ec0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ec4:	4b3e      	ldr	r3, [pc, #248]	@ (8000fc0 <HAL_UART_MspInit+0x244>)
 8000ec6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000eca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ece:	61bb      	str	r3, [r7, #24]
 8000ed0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8000fc0 <HAL_UART_MspInit+0x244>)
 8000ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed8:	4a39      	ldr	r2, [pc, #228]	@ (8000fc0 <HAL_UART_MspInit+0x244>)
 8000eda:	f043 0308 	orr.w	r3, r3, #8
 8000ede:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee2:	4b37      	ldr	r3, [pc, #220]	@ (8000fc0 <HAL_UART_MspInit+0x244>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee8:	f003 0308 	and.w	r3, r3, #8
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000ef0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ef4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f10:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f14:	4619      	mov	r1, r3
 8000f16:	482e      	ldr	r0, [pc, #184]	@ (8000fd0 <HAL_UART_MspInit+0x254>)
 8000f18:	f000 feee 	bl	8001cf8 <HAL_GPIO_Init>
}
 8000f1c:	e04a      	b.n	8000fb4 <HAL_UART_MspInit+0x238>
  else if(huart->Instance==USART6)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a2c      	ldr	r2, [pc, #176]	@ (8000fd4 <HAL_UART_MspInit+0x258>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d145      	bne.n	8000fb4 <HAL_UART_MspInit+0x238>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000f28:	f04f 0201 	mov.w	r2, #1
 8000f2c:	f04f 0300 	mov.w	r3, #0
 8000f30:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 f83c 	bl	8002fbc <HAL_RCCEx_PeriphCLKConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 8000f4a:	f7ff fe29 	bl	8000ba0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc0 <HAL_UART_MspInit+0x244>)
 8000f50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f54:	4a1a      	ldr	r2, [pc, #104]	@ (8000fc0 <HAL_UART_MspInit+0x244>)
 8000f56:	f043 0320 	orr.w	r3, r3, #32
 8000f5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f5e:	4b18      	ldr	r3, [pc, #96]	@ (8000fc0 <HAL_UART_MspInit+0x244>)
 8000f60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f64:	f003 0320 	and.w	r3, r3, #32
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6c:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <HAL_UART_MspInit+0x244>)
 8000f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f72:	4a13      	ldr	r2, [pc, #76]	@ (8000fc0 <HAL_UART_MspInit+0x244>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f7c:	4b10      	ldr	r3, [pc, #64]	@ (8000fc0 <HAL_UART_MspInit+0x244>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f8a:	23c0      	movs	r3, #192	@ 0xc0
 8000f8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000fac:	4619      	mov	r1, r3
 8000fae:	4806      	ldr	r0, [pc, #24]	@ (8000fc8 <HAL_UART_MspInit+0x24c>)
 8000fb0:	f000 fea2 	bl	8001cf8 <HAL_GPIO_Init>
}
 8000fb4:	bf00      	nop
 8000fb6:	37f8      	adds	r7, #248	@ 0xf8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40004c00 	.word	0x40004c00
 8000fc0:	58024400 	.word	0x58024400
 8000fc4:	58020000 	.word	0x58020000
 8000fc8:	58020800 	.word	0x58020800
 8000fcc:	40004800 	.word	0x40004800
 8000fd0:	58020c00 	.word	0x58020c00
 8000fd4:	40011400 	.word	0x40011400

08000fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <NMI_Handler+0x4>

08000fe0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <HardFault_Handler+0x4>

08000fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <MemManage_Handler+0x4>

08000ff0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <BusFault_Handler+0x4>

08000ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <UsageFault_Handler+0x4>

08001000 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800102e:	f000 f917 	bl	8001260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800103c:	4b32      	ldr	r3, [pc, #200]	@ (8001108 <SystemInit+0xd0>)
 800103e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001042:	4a31      	ldr	r2, [pc, #196]	@ (8001108 <SystemInit+0xd0>)
 8001044:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001048:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800104c:	4b2f      	ldr	r3, [pc, #188]	@ (800110c <SystemInit+0xd4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 030f 	and.w	r3, r3, #15
 8001054:	2b06      	cmp	r3, #6
 8001056:	d807      	bhi.n	8001068 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001058:	4b2c      	ldr	r3, [pc, #176]	@ (800110c <SystemInit+0xd4>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f023 030f 	bic.w	r3, r3, #15
 8001060:	4a2a      	ldr	r2, [pc, #168]	@ (800110c <SystemInit+0xd4>)
 8001062:	f043 0307 	orr.w	r3, r3, #7
 8001066:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001068:	4b29      	ldr	r3, [pc, #164]	@ (8001110 <SystemInit+0xd8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a28      	ldr	r2, [pc, #160]	@ (8001110 <SystemInit+0xd8>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001074:	4b26      	ldr	r3, [pc, #152]	@ (8001110 <SystemInit+0xd8>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800107a:	4b25      	ldr	r3, [pc, #148]	@ (8001110 <SystemInit+0xd8>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	4924      	ldr	r1, [pc, #144]	@ (8001110 <SystemInit+0xd8>)
 8001080:	4b24      	ldr	r3, [pc, #144]	@ (8001114 <SystemInit+0xdc>)
 8001082:	4013      	ands	r3, r2
 8001084:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001086:	4b21      	ldr	r3, [pc, #132]	@ (800110c <SystemInit+0xd4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0308 	and.w	r3, r3, #8
 800108e:	2b00      	cmp	r3, #0
 8001090:	d007      	beq.n	80010a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001092:	4b1e      	ldr	r3, [pc, #120]	@ (800110c <SystemInit+0xd4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f023 030f 	bic.w	r3, r3, #15
 800109a:	4a1c      	ldr	r2, [pc, #112]	@ (800110c <SystemInit+0xd4>)
 800109c:	f043 0307 	orr.w	r3, r3, #7
 80010a0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001110 <SystemInit+0xd8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010a8:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <SystemInit+0xd8>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010ae:	4b18      	ldr	r3, [pc, #96]	@ (8001110 <SystemInit+0xd8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010b4:	4b16      	ldr	r3, [pc, #88]	@ (8001110 <SystemInit+0xd8>)
 80010b6:	4a18      	ldr	r2, [pc, #96]	@ (8001118 <SystemInit+0xe0>)
 80010b8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <SystemInit+0xd8>)
 80010bc:	4a17      	ldr	r2, [pc, #92]	@ (800111c <SystemInit+0xe4>)
 80010be:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010c0:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <SystemInit+0xd8>)
 80010c2:	4a17      	ldr	r2, [pc, #92]	@ (8001120 <SystemInit+0xe8>)
 80010c4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010c6:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <SystemInit+0xd8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010cc:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <SystemInit+0xd8>)
 80010ce:	4a14      	ldr	r2, [pc, #80]	@ (8001120 <SystemInit+0xe8>)
 80010d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <SystemInit+0xd8>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001110 <SystemInit+0xd8>)
 80010da:	4a11      	ldr	r2, [pc, #68]	@ (8001120 <SystemInit+0xe8>)
 80010dc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010de:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <SystemInit+0xd8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <SystemInit+0xd8>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a09      	ldr	r2, [pc, #36]	@ (8001110 <SystemInit+0xd8>)
 80010ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010f0:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <SystemInit+0xd8>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <SystemInit+0xec>)
 80010f8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80010fc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00
 800110c:	52002000 	.word	0x52002000
 8001110:	58024400 	.word	0x58024400
 8001114:	eaf6ed7f 	.word	0xeaf6ed7f
 8001118:	02020200 	.word	0x02020200
 800111c:	01ff0000 	.word	0x01ff0000
 8001120:	01010280 	.word	0x01010280
 8001124:	52004000 	.word	0x52004000

08001128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001128:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001160 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800112c:	f7ff ff84 	bl	8001038 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001130:	480c      	ldr	r0, [pc, #48]	@ (8001164 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001132:	490d      	ldr	r1, [pc, #52]	@ (8001168 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001134:	4a0d      	ldr	r2, [pc, #52]	@ (800116c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001138:	e002      	b.n	8001140 <LoopCopyDataInit>

0800113a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800113c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113e:	3304      	adds	r3, #4

08001140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001144:	d3f9      	bcc.n	800113a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001146:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001148:	4c0a      	ldr	r4, [pc, #40]	@ (8001174 <LoopFillZerobss+0x22>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800114c:	e001      	b.n	8001152 <LoopFillZerobss>

0800114e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001150:	3204      	adds	r2, #4

08001152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001154:	d3fb      	bcc.n	800114e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001156:	f005 f831 	bl	80061bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115a:	f7ff fa4f 	bl	80005fc <main>
  bx  lr
 800115e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001160:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001164:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001168:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800116c:	08006264 	.word	0x08006264
  ldr r2, =_sbss
 8001170:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001174:	240003ac 	.word	0x240003ac

08001178 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001178:	e7fe      	b.n	8001178 <ADC3_IRQHandler>
	...

0800117c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001182:	2003      	movs	r0, #3
 8001184:	f000 f952 	bl	800142c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001188:	f001 fd42 	bl	8002c10 <HAL_RCC_GetSysClockFreq>
 800118c:	4602      	mov	r2, r0
 800118e:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <HAL_Init+0x68>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	0a1b      	lsrs	r3, r3, #8
 8001194:	f003 030f 	and.w	r3, r3, #15
 8001198:	4913      	ldr	r1, [pc, #76]	@ (80011e8 <HAL_Init+0x6c>)
 800119a:	5ccb      	ldrb	r3, [r1, r3]
 800119c:	f003 031f 	and.w	r3, r3, #31
 80011a0:	fa22 f303 	lsr.w	r3, r2, r3
 80011a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <HAL_Init+0x68>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	4a0e      	ldr	r2, [pc, #56]	@ (80011e8 <HAL_Init+0x6c>)
 80011b0:	5cd3      	ldrb	r3, [r2, r3]
 80011b2:	f003 031f 	and.w	r3, r3, #31
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	fa22 f303 	lsr.w	r3, r2, r3
 80011bc:	4a0b      	ldr	r2, [pc, #44]	@ (80011ec <HAL_Init+0x70>)
 80011be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011c0:	4a0b      	ldr	r2, [pc, #44]	@ (80011f0 <HAL_Init+0x74>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011c6:	2000      	movs	r0, #0
 80011c8:	f000 f814 	bl	80011f4 <HAL_InitTick>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e002      	b.n	80011dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011d6:	f7ff fce9 	bl	8000bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	58024400 	.word	0x58024400
 80011e8:	0800621c 	.word	0x0800621c
 80011ec:	24000004 	.word	0x24000004
 80011f0:	24000000 	.word	0x24000000

080011f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011fc:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <HAL_InitTick+0x60>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e021      	b.n	800124c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001208:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <HAL_InitTick+0x64>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <HAL_InitTick+0x60>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001216:	fbb3 f3f1 	udiv	r3, r3, r1
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f929 	bl	8001476 <HAL_SYSTICK_Config>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e00e      	b.n	800124c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b0f      	cmp	r3, #15
 8001232:	d80a      	bhi.n	800124a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001234:	2200      	movs	r2, #0
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f000 f901 	bl	8001442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001240:	4a06      	ldr	r2, [pc, #24]	@ (800125c <HAL_InitTick+0x68>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e000      	b.n	800124c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	2400000c 	.word	0x2400000c
 8001258:	24000000 	.word	0x24000000
 800125c:	24000008 	.word	0x24000008

08001260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_IncTick+0x20>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_IncTick+0x24>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a04      	ldr	r2, [pc, #16]	@ (8001284 <HAL_IncTick+0x24>)
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	2400000c 	.word	0x2400000c
 8001284:	240003a8 	.word	0x240003a8

08001288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return uwTick;
 800128c:	4b03      	ldr	r3, [pc, #12]	@ (800129c <HAL_GetTick+0x14>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	240003a8 	.word	0x240003a8

080012a0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80012b0:	4904      	ldr	r1, [pc, #16]	@ (80012c4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	58000400 	.word	0x58000400

080012c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001308 <__NVIC_SetPriorityGrouping+0x40>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012e4:	4013      	ands	r3, r2
 80012e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012f0:	4b06      	ldr	r3, [pc, #24]	@ (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f6:	4a04      	ldr	r2, [pc, #16]	@ (8001308 <__NVIC_SetPriorityGrouping+0x40>)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	60d3      	str	r3, [r2, #12]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00
 800130c:	05fa0000 	.word	0x05fa0000

08001310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001314:	4b04      	ldr	r3, [pc, #16]	@ (8001328 <__NVIC_GetPriorityGrouping+0x18>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	0a1b      	lsrs	r3, r3, #8
 800131a:	f003 0307 	and.w	r3, r3, #7
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001338:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800133c:	2b00      	cmp	r3, #0
 800133e:	db0a      	blt.n	8001356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	b2da      	uxtb	r2, r3
 8001344:	490c      	ldr	r1, [pc, #48]	@ (8001378 <__NVIC_SetPriority+0x4c>)
 8001346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800134a:	0112      	lsls	r2, r2, #4
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	440b      	add	r3, r1
 8001350:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001354:	e00a      	b.n	800136c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4908      	ldr	r1, [pc, #32]	@ (800137c <__NVIC_SetPriority+0x50>)
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	3b04      	subs	r3, #4
 8001364:	0112      	lsls	r2, r2, #4
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	440b      	add	r3, r1
 800136a:	761a      	strb	r2, [r3, #24]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000e100 	.word	0xe000e100
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001380:	b480      	push	{r7}
 8001382:	b089      	sub	sp, #36	@ 0x24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f1c3 0307 	rsb	r3, r3, #7
 800139a:	2b04      	cmp	r3, #4
 800139c:	bf28      	it	cs
 800139e:	2304      	movcs	r3, #4
 80013a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3304      	adds	r3, #4
 80013a6:	2b06      	cmp	r3, #6
 80013a8:	d902      	bls.n	80013b0 <NVIC_EncodePriority+0x30>
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3b03      	subs	r3, #3
 80013ae:	e000      	b.n	80013b2 <NVIC_EncodePriority+0x32>
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	f04f 32ff 	mov.w	r2, #4294967295
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43da      	mvns	r2, r3
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	401a      	ands	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c8:	f04f 31ff 	mov.w	r1, #4294967295
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	43d9      	mvns	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	4313      	orrs	r3, r2
         );
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3724      	adds	r7, #36	@ 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013f8:	d301      	bcc.n	80013fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00f      	b.n	800141e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001428 <SysTick_Config+0x40>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001406:	210f      	movs	r1, #15
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	f7ff ff8e 	bl	800132c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001410:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <SysTick_Config+0x40>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001416:	4b04      	ldr	r3, [pc, #16]	@ (8001428 <SysTick_Config+0x40>)
 8001418:	2207      	movs	r2, #7
 800141a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	e000e010 	.word	0xe000e010

0800142c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff47 	bl	80012c8 <__NVIC_SetPriorityGrouping>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001450:	f7ff ff5e 	bl	8001310 <__NVIC_GetPriorityGrouping>
 8001454:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	6978      	ldr	r0, [r7, #20]
 800145c:	f7ff ff90 	bl	8001380 <NVIC_EncodePriority>
 8001460:	4602      	mov	r2, r0
 8001462:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff5f 	bl	800132c <__NVIC_SetPriority>
}
 800146e:	bf00      	nop
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ffb2 	bl	80013e8 <SysTick_Config>
 8001484:	4603      	mov	r3, r0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e0e3      	b.n	800166a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d106      	bne.n	80014ba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2223      	movs	r2, #35	@ 0x23
 80014b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff fb93 	bl	8000be0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ba:	4b6e      	ldr	r3, [pc, #440]	@ (8001674 <HAL_ETH_Init+0x1e4>)
 80014bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014c0:	4a6c      	ldr	r2, [pc, #432]	@ (8001674 <HAL_ETH_Init+0x1e4>)
 80014c2:	f043 0302 	orr.w	r3, r3, #2
 80014c6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80014ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001674 <HAL_ETH_Init+0x1e4>)
 80014cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7a1b      	ldrb	r3, [r3, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d103      	bne.n	80014e8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80014e0:	2000      	movs	r0, #0
 80014e2:	f7ff fedd 	bl	80012a0 <HAL_SYSCFG_ETHInterfaceSelect>
 80014e6:	e003      	b.n	80014f0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80014e8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80014ec:	f7ff fed8 	bl	80012a0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80014f0:	4b61      	ldr	r3, [pc, #388]	@ (8001678 <HAL_ETH_Init+0x1e8>)
 80014f2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	6812      	ldr	r2, [r2, #0]
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800150a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800150c:	f7ff febc 	bl	8001288 <HAL_GetTick>
 8001510:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001512:	e011      	b.n	8001538 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001514:	f7ff feb8 	bl	8001288 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001522:	d909      	bls.n	8001538 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2204      	movs	r2, #4
 8001528:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	22e0      	movs	r2, #224	@ 0xe0
 8001530:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e098      	b.n	800166a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1e4      	bne.n	8001514 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f89e 	bl	800168c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001550:	f001 fcd8 	bl	8002f04 <HAL_RCC_GetHCLKFreq>
 8001554:	4603      	mov	r3, r0
 8001556:	4a49      	ldr	r2, [pc, #292]	@ (800167c <HAL_ETH_Init+0x1ec>)
 8001558:	fba2 2303 	umull	r2, r3, r2, r3
 800155c:	0c9a      	lsrs	r2, r3, #18
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	3a01      	subs	r2, #1
 8001564:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 fa81 	bl	8001a70 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001576:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800157a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	6812      	ldr	r2, [r2, #0]
 8001582:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001586:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800158a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d009      	beq.n	80015ae <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	22e0      	movs	r2, #224	@ 0xe0
 80015a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e05d      	b.n	800166a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015b6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80015ba:	4b31      	ldr	r3, [pc, #196]	@ (8001680 <HAL_ETH_Init+0x1f0>)
 80015bc:	4013      	ands	r3, r2
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6952      	ldr	r2, [r2, #20]
 80015c2:	0051      	lsls	r1, r2, #1
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	430b      	orrs	r3, r1
 80015ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015ce:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 fae9 	bl	8001baa <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 fb2f 	bl	8001c3c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	3305      	adds	r3, #5
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	021a      	lsls	r2, r3, #8
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	3304      	adds	r3, #4
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	3303      	adds	r3, #3
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	061a      	lsls	r2, r3, #24
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	3302      	adds	r3, #2
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	041b      	lsls	r3, r3, #16
 8001610:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	3301      	adds	r3, #1
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800161c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800162a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800162c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <HAL_ETH_Init+0x1f4>)
 800163e:	430b      	orrs	r3, r1
 8001640:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <HAL_ETH_Init+0x1f8>)
 8001652:	430b      	orrs	r3, r1
 8001654:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2210      	movs	r2, #16
 8001664:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	58024400 	.word	0x58024400
 8001678:	58000400 	.word	0x58000400
 800167c:	431bde83 	.word	0x431bde83
 8001680:	ffff8001 	.word	0xffff8001
 8001684:	0c020060 	.word	0x0c020060
 8001688:	0c20c000 	.word	0x0c20c000

0800168c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800169c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80016a6:	f001 fc2d 	bl	8002f04 <HAL_RCC_GetHCLKFreq>
 80016aa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4a1a      	ldr	r2, [pc, #104]	@ (8001718 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d804      	bhi.n	80016be <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	e022      	b.n	8001704 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	4a16      	ldr	r2, [pc, #88]	@ (800171c <HAL_ETH_SetMDIOClockRange+0x90>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d204      	bcs.n	80016d0 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	e019      	b.n	8001704 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	4a13      	ldr	r2, [pc, #76]	@ (8001720 <HAL_ETH_SetMDIOClockRange+0x94>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d915      	bls.n	8001704 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	4a12      	ldr	r2, [pc, #72]	@ (8001724 <HAL_ETH_SetMDIOClockRange+0x98>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d804      	bhi.n	80016ea <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	e00c      	b.n	8001704 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001728 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d804      	bhi.n	80016fc <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	e003      	b.n	8001704 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001702:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	02160ebf 	.word	0x02160ebf
 800171c:	03938700 	.word	0x03938700
 8001720:	05f5e0ff 	.word	0x05f5e0ff
 8001724:	08f0d17f 	.word	0x08f0d17f
 8001728:	0ee6b27f 	.word	0x0ee6b27f

0800172c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800173e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	791b      	ldrb	r3, [r3, #4]
 8001744:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001746:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	7b1b      	ldrb	r3, [r3, #12]
 800174c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800174e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	7b5b      	ldrb	r3, [r3, #13]
 8001754:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001756:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	7b9b      	ldrb	r3, [r3, #14]
 800175c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800175e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	7bdb      	ldrb	r3, [r3, #15]
 8001764:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001766:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	7c12      	ldrb	r2, [r2, #16]
 800176c:	2a00      	cmp	r2, #0
 800176e:	d102      	bne.n	8001776 <ETH_SetMACConfig+0x4a>
 8001770:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001774:	e000      	b.n	8001778 <ETH_SetMACConfig+0x4c>
 8001776:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001778:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	7c52      	ldrb	r2, [r2, #17]
 800177e:	2a00      	cmp	r2, #0
 8001780:	d102      	bne.n	8001788 <ETH_SetMACConfig+0x5c>
 8001782:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001786:	e000      	b.n	800178a <ETH_SetMACConfig+0x5e>
 8001788:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800178a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	7c9b      	ldrb	r3, [r3, #18]
 8001790:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001792:	431a      	orrs	r2, r3
               macconf->Speed |
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001798:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800179e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	7f1b      	ldrb	r3, [r3, #28]
 80017a4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80017a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	7f5b      	ldrb	r3, [r3, #29]
 80017ac:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80017ae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	7f92      	ldrb	r2, [r2, #30]
 80017b4:	2a00      	cmp	r2, #0
 80017b6:	d102      	bne.n	80017be <ETH_SetMACConfig+0x92>
 80017b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017bc:	e000      	b.n	80017c0 <ETH_SetMACConfig+0x94>
 80017be:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80017c0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	7fdb      	ldrb	r3, [r3, #31]
 80017c6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80017c8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	f892 2020 	ldrb.w	r2, [r2, #32]
 80017d0:	2a00      	cmp	r2, #0
 80017d2:	d102      	bne.n	80017da <ETH_SetMACConfig+0xae>
 80017d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017d8:	e000      	b.n	80017dc <ETH_SetMACConfig+0xb0>
 80017da:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80017dc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80017e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80017ea:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80017ec:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80017f2:	4313      	orrs	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b56      	ldr	r3, [pc, #344]	@ (8001958 <ETH_SetMACConfig+0x22c>)
 80017fe:	4013      	ands	r3, r2
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6812      	ldr	r2, [r2, #0]
 8001804:	68f9      	ldr	r1, [r7, #12]
 8001806:	430b      	orrs	r3, r1
 8001808:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800180e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001816:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001818:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001820:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001822:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800182a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800182c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001834:	2a00      	cmp	r2, #0
 8001836:	d102      	bne.n	800183e <ETH_SetMACConfig+0x112>
 8001838:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800183c:	e000      	b.n	8001840 <ETH_SetMACConfig+0x114>
 800183e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001840:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001846:	4313      	orrs	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	4b42      	ldr	r3, [pc, #264]	@ (800195c <ETH_SetMACConfig+0x230>)
 8001852:	4013      	ands	r3, r2
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	68f9      	ldr	r1, [r7, #12]
 800185a:	430b      	orrs	r3, r1
 800185c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001864:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800186a:	4313      	orrs	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	4b3a      	ldr	r3, [pc, #232]	@ (8001960 <ETH_SetMACConfig+0x234>)
 8001876:	4013      	ands	r3, r2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	68f9      	ldr	r1, [r7, #12]
 800187e:	430b      	orrs	r3, r1
 8001880:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001888:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800188e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001896:	2a00      	cmp	r2, #0
 8001898:	d101      	bne.n	800189e <ETH_SetMACConfig+0x172>
 800189a:	2280      	movs	r2, #128	@ 0x80
 800189c:	e000      	b.n	80018a0 <ETH_SetMACConfig+0x174>
 800189e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80018a0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018a6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018a8:	4313      	orrs	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80018b2:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80018b6:	4013      	ands	r3, r2
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	68f9      	ldr	r1, [r7, #12]
 80018be:	430b      	orrs	r3, r1
 80018c0:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80018c8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80018d0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80018d2:	4313      	orrs	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018de:	f023 0103 	bic.w	r1, r3, #3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80018f6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001912:	2a00      	cmp	r2, #0
 8001914:	d101      	bne.n	800191a <ETH_SetMACConfig+0x1ee>
 8001916:	2240      	movs	r2, #64	@ 0x40
 8001918:	e000      	b.n	800191c <ETH_SetMACConfig+0x1f0>
 800191a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800191c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001924:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001926:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800192e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001930:	4313      	orrs	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800193c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	430a      	orrs	r2, r1
 8001948:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	00048083 	.word	0x00048083
 800195c:	c0f88000 	.word	0xc0f88000
 8001960:	fffffef0 	.word	0xfffffef0

08001964 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b38      	ldr	r3, [pc, #224]	@ (8001a5c <ETH_SetDMAConfig+0xf8>)
 800197a:	4013      	ands	r3, r2
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	6811      	ldr	r1, [r2, #0]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	430b      	orrs	r3, r1
 8001986:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800198a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	791b      	ldrb	r3, [r3, #4]
 8001990:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001996:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	7b1b      	ldrb	r3, [r3, #12]
 800199c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800199e:	4313      	orrs	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001a60 <ETH_SetDMAConfig+0xfc>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	68f9      	ldr	r1, [r7, #12]
 80019b6:	430b      	orrs	r3, r1
 80019b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019bc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	7b5b      	ldrb	r3, [r3, #13]
 80019c2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80019c8:	4313      	orrs	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019d4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80019d8:	4b22      	ldr	r3, [pc, #136]	@ (8001a64 <ETH_SetDMAConfig+0x100>)
 80019da:	4013      	ands	r3, r2
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	68f9      	ldr	r1, [r7, #12]
 80019e2:	430b      	orrs	r3, r1
 80019e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019e8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	7d1b      	ldrb	r3, [r3, #20]
 80019f4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80019f6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	7f5b      	ldrb	r3, [r3, #29]
 80019fc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80019fe:	4313      	orrs	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a0a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001a0e:	4b16      	ldr	r3, [pc, #88]	@ (8001a68 <ETH_SetDMAConfig+0x104>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	68f9      	ldr	r1, [r7, #12]
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a1e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	7f1b      	ldrb	r3, [r3, #28]
 8001a26:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a38:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <ETH_SetDMAConfig+0x108>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	68f9      	ldr	r1, [r7, #12]
 8001a46:	430b      	orrs	r3, r1
 8001a48:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a4c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	ffff87fd 	.word	0xffff87fd
 8001a60:	ffff2ffe 	.word	0xffff2ffe
 8001a64:	fffec000 	.word	0xfffec000
 8001a68:	ffc0efef 	.word	0xffc0efef
 8001a6c:	7fc0ffff 	.word	0x7fc0ffff

08001a70 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b0a4      	sub	sp, #144	@ 0x90
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001a94:	2301      	movs	r3, #1
 8001a96:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001aac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ab0:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001ac8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001acc:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001aea:	2300      	movs	r3, #0
 8001aec:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001af2:	2300      	movs	r3, #0
 8001af4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001b02:	2301      	movs	r3, #1
 8001b04:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001b08:	2320      	movs	r3, #32
 8001b0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001b1a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001b20:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b24:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001b44:	2301      	movs	r3, #1
 8001b46:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001b54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b58:	4619      	mov	r1, r3
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff fde6 	bl	800172c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001b60:	2301      	movs	r3, #1
 8001b62:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001b64:	2301      	movs	r3, #1
 8001b66:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b7a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001b7e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b84:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001b88:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001b90:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001b94:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001b96:	f107 0308 	add.w	r3, r7, #8
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff fee1 	bl	8001964 <ETH_SetDMAConfig>
}
 8001ba2:	bf00      	nop
 8001ba4:	3790      	adds	r7, #144	@ 0x90
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b085      	sub	sp, #20
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	e01d      	b.n	8001bf4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68d9      	ldr	r1, [r3, #12]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4413      	add	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	440b      	add	r3, r1
 8001bc8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001be2:	68b9      	ldr	r1, [r7, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	3206      	adds	r2, #6
 8001bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d9de      	bls.n	8001bb8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c08:	461a      	mov	r2, r3
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c1c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c2c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	e023      	b.n	8001c92 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6919      	ldr	r1, [r3, #16]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	4613      	mov	r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4413      	add	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	440b      	add	r3, r1
 8001c5a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	2200      	movs	r2, #0
 8001c66:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	2200      	movs	r2, #0
 8001c72:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c80:	68b9      	ldr	r1, [r7, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	3212      	adds	r2, #18
 8001c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d9d8      	bls.n	8001c4a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cd2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ce6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	@ 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d06:	4b86      	ldr	r3, [pc, #536]	@ (8001f20 <HAL_GPIO_Init+0x228>)
 8001d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d0a:	e18c      	b.n	8002026 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	2101      	movs	r1, #1
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 817e 	beq.w	8002020 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d005      	beq.n	8001d3c <HAL_GPIO_Init+0x44>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d130      	bne.n	8001d9e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d72:	2201      	movs	r2, #1
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	091b      	lsrs	r3, r3, #4
 8001d88:	f003 0201 	and.w	r2, r3, #1
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d017      	beq.n	8001dda <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	2203      	movs	r2, #3
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d123      	bne.n	8001e2e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	08da      	lsrs	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3208      	adds	r2, #8
 8001dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	220f      	movs	r2, #15
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	691a      	ldr	r2, [r3, #16]
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	08da      	lsrs	r2, r3, #3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3208      	adds	r2, #8
 8001e28:	69b9      	ldr	r1, [r7, #24]
 8001e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	2203      	movs	r2, #3
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 0203 	and.w	r2, r3, #3
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 80d8 	beq.w	8002020 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e70:	4b2c      	ldr	r3, [pc, #176]	@ (8001f24 <HAL_GPIO_Init+0x22c>)
 8001e72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e76:	4a2b      	ldr	r2, [pc, #172]	@ (8001f24 <HAL_GPIO_Init+0x22c>)
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e80:	4b28      	ldr	r3, [pc, #160]	@ (8001f24 <HAL_GPIO_Init+0x22c>)
 8001e82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e8e:	4a26      	ldr	r2, [pc, #152]	@ (8001f28 <HAL_GPIO_Init+0x230>)
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8001f2c <HAL_GPIO_Init+0x234>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d04a      	beq.n	8001f50 <HAL_GPIO_Init+0x258>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a1c      	ldr	r2, [pc, #112]	@ (8001f30 <HAL_GPIO_Init+0x238>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d02b      	beq.n	8001f1a <HAL_GPIO_Init+0x222>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f34 <HAL_GPIO_Init+0x23c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d025      	beq.n	8001f16 <HAL_GPIO_Init+0x21e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a1a      	ldr	r2, [pc, #104]	@ (8001f38 <HAL_GPIO_Init+0x240>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d01f      	beq.n	8001f12 <HAL_GPIO_Init+0x21a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a19      	ldr	r2, [pc, #100]	@ (8001f3c <HAL_GPIO_Init+0x244>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d019      	beq.n	8001f0e <HAL_GPIO_Init+0x216>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a18      	ldr	r2, [pc, #96]	@ (8001f40 <HAL_GPIO_Init+0x248>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d013      	beq.n	8001f0a <HAL_GPIO_Init+0x212>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a17      	ldr	r2, [pc, #92]	@ (8001f44 <HAL_GPIO_Init+0x24c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d00d      	beq.n	8001f06 <HAL_GPIO_Init+0x20e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a16      	ldr	r2, [pc, #88]	@ (8001f48 <HAL_GPIO_Init+0x250>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d007      	beq.n	8001f02 <HAL_GPIO_Init+0x20a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a15      	ldr	r2, [pc, #84]	@ (8001f4c <HAL_GPIO_Init+0x254>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d101      	bne.n	8001efe <HAL_GPIO_Init+0x206>
 8001efa:	2309      	movs	r3, #9
 8001efc:	e029      	b.n	8001f52 <HAL_GPIO_Init+0x25a>
 8001efe:	230a      	movs	r3, #10
 8001f00:	e027      	b.n	8001f52 <HAL_GPIO_Init+0x25a>
 8001f02:	2307      	movs	r3, #7
 8001f04:	e025      	b.n	8001f52 <HAL_GPIO_Init+0x25a>
 8001f06:	2306      	movs	r3, #6
 8001f08:	e023      	b.n	8001f52 <HAL_GPIO_Init+0x25a>
 8001f0a:	2305      	movs	r3, #5
 8001f0c:	e021      	b.n	8001f52 <HAL_GPIO_Init+0x25a>
 8001f0e:	2304      	movs	r3, #4
 8001f10:	e01f      	b.n	8001f52 <HAL_GPIO_Init+0x25a>
 8001f12:	2303      	movs	r3, #3
 8001f14:	e01d      	b.n	8001f52 <HAL_GPIO_Init+0x25a>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e01b      	b.n	8001f52 <HAL_GPIO_Init+0x25a>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e019      	b.n	8001f52 <HAL_GPIO_Init+0x25a>
 8001f1e:	bf00      	nop
 8001f20:	58000080 	.word	0x58000080
 8001f24:	58024400 	.word	0x58024400
 8001f28:	58000400 	.word	0x58000400
 8001f2c:	58020000 	.word	0x58020000
 8001f30:	58020400 	.word	0x58020400
 8001f34:	58020800 	.word	0x58020800
 8001f38:	58020c00 	.word	0x58020c00
 8001f3c:	58021000 	.word	0x58021000
 8001f40:	58021400 	.word	0x58021400
 8001f44:	58021800 	.word	0x58021800
 8001f48:	58021c00 	.word	0x58021c00
 8001f4c:	58022400 	.word	0x58022400
 8001f50:	2300      	movs	r3, #0
 8001f52:	69fa      	ldr	r2, [r7, #28]
 8001f54:	f002 0203 	and.w	r2, r2, #3
 8001f58:	0092      	lsls	r2, r2, #2
 8001f5a:	4093      	lsls	r3, r2
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f62:	4938      	ldr	r1, [pc, #224]	@ (8002044 <HAL_GPIO_Init+0x34c>)
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	3302      	adds	r3, #2
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001fc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	3301      	adds	r3, #1
 8002024:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	fa22 f303 	lsr.w	r3, r2, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	f47f ae6b 	bne.w	8001d0c <HAL_GPIO_Init+0x14>
  }
}
 8002036:	bf00      	nop
 8002038:	bf00      	nop
 800203a:	3724      	adds	r7, #36	@ 0x24
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	58000400 	.word	0x58000400

08002048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	807b      	strh	r3, [r7, #2]
 8002054:	4613      	mov	r3, r2
 8002056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002058:	787b      	ldrb	r3, [r7, #1]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800205e:	887a      	ldrh	r2, [r7, #2]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002064:	e003      	b.n	800206e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002066:	887b      	ldrh	r3, [r7, #2]
 8002068:	041a      	lsls	r2, r3, #16
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	619a      	str	r2, [r3, #24]
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002084:	4b19      	ldr	r3, [pc, #100]	@ (80020ec <HAL_PWREx_ConfigSupply+0x70>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b04      	cmp	r3, #4
 800208e:	d00a      	beq.n	80020a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002090:	4b16      	ldr	r3, [pc, #88]	@ (80020ec <HAL_PWREx_ConfigSupply+0x70>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	429a      	cmp	r2, r3
 800209c:	d001      	beq.n	80020a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e01f      	b.n	80020e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e01d      	b.n	80020e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80020a6:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <HAL_PWREx_ConfigSupply+0x70>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f023 0207 	bic.w	r2, r3, #7
 80020ae:	490f      	ldr	r1, [pc, #60]	@ (80020ec <HAL_PWREx_ConfigSupply+0x70>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80020b6:	f7ff f8e7 	bl	8001288 <HAL_GetTick>
 80020ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020bc:	e009      	b.n	80020d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80020be:	f7ff f8e3 	bl	8001288 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020cc:	d901      	bls.n	80020d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e007      	b.n	80020e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020d2:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <HAL_PWREx_ConfigSupply+0x70>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020de:	d1ee      	bne.n	80020be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	58024800 	.word	0x58024800

080020f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08c      	sub	sp, #48	@ 0x30
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e3c8      	b.n	8002894 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 8087 	beq.w	800221e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002110:	4b88      	ldr	r3, [pc, #544]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002118:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800211a:	4b86      	ldr	r3, [pc, #536]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 800211c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002122:	2b10      	cmp	r3, #16
 8002124:	d007      	beq.n	8002136 <HAL_RCC_OscConfig+0x46>
 8002126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002128:	2b18      	cmp	r3, #24
 800212a:	d110      	bne.n	800214e <HAL_RCC_OscConfig+0x5e>
 800212c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d10b      	bne.n	800214e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002136:	4b7f      	ldr	r3, [pc, #508]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d06c      	beq.n	800221c <HAL_RCC_OscConfig+0x12c>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d168      	bne.n	800221c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e3a2      	b.n	8002894 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002156:	d106      	bne.n	8002166 <HAL_RCC_OscConfig+0x76>
 8002158:	4b76      	ldr	r3, [pc, #472]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a75      	ldr	r2, [pc, #468]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 800215e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	e02e      	b.n	80021c4 <HAL_RCC_OscConfig+0xd4>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10c      	bne.n	8002188 <HAL_RCC_OscConfig+0x98>
 800216e:	4b71      	ldr	r3, [pc, #452]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a70      	ldr	r2, [pc, #448]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 8002174:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	4b6e      	ldr	r3, [pc, #440]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a6d      	ldr	r2, [pc, #436]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 8002180:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e01d      	b.n	80021c4 <HAL_RCC_OscConfig+0xd4>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0xbc>
 8002192:	4b68      	ldr	r3, [pc, #416]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a67      	ldr	r2, [pc, #412]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 8002198:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	4b65      	ldr	r3, [pc, #404]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a64      	ldr	r2, [pc, #400]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 80021a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e00b      	b.n	80021c4 <HAL_RCC_OscConfig+0xd4>
 80021ac:	4b61      	ldr	r3, [pc, #388]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a60      	ldr	r2, [pc, #384]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 80021b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	4b5e      	ldr	r3, [pc, #376]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a5d      	ldr	r2, [pc, #372]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 80021be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d013      	beq.n	80021f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021cc:	f7ff f85c 	bl	8001288 <HAL_GetTick>
 80021d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d4:	f7ff f858 	bl	8001288 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b64      	cmp	r3, #100	@ 0x64
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e356      	b.n	8002894 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021e6:	4b53      	ldr	r3, [pc, #332]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0xe4>
 80021f2:	e014      	b.n	800221e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7ff f848 	bl	8001288 <HAL_GetTick>
 80021f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021fc:	f7ff f844 	bl	8001288 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	@ 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e342      	b.n	8002894 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800220e:	4b49      	ldr	r3, [pc, #292]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x10c>
 800221a:	e000      	b.n	800221e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 808c 	beq.w	8002344 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800222c:	4b41      	ldr	r3, [pc, #260]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002234:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002236:	4b3f      	ldr	r3, [pc, #252]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 8002238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800223a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d007      	beq.n	8002252 <HAL_RCC_OscConfig+0x162>
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	2b18      	cmp	r3, #24
 8002246:	d137      	bne.n	80022b8 <HAL_RCC_OscConfig+0x1c8>
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d132      	bne.n	80022b8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002252:	4b38      	ldr	r3, [pc, #224]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <HAL_RCC_OscConfig+0x17a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e314      	b.n	8002894 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800226a:	4b32      	ldr	r3, [pc, #200]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 0219 	bic.w	r2, r3, #25
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	492f      	ldr	r1, [pc, #188]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 8002278:	4313      	orrs	r3, r2
 800227a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7ff f804 	bl	8001288 <HAL_GetTick>
 8002280:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002284:	f7ff f800 	bl	8001288 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e2fe      	b.n	8002894 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002296:	4b27      	ldr	r3, [pc, #156]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a2:	4b24      	ldr	r3, [pc, #144]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	061b      	lsls	r3, r3, #24
 80022b0:	4920      	ldr	r1, [pc, #128]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022b6:	e045      	b.n	8002344 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d026      	beq.n	800230e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80022c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f023 0219 	bic.w	r2, r3, #25
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4919      	ldr	r1, [pc, #100]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d2:	f7fe ffd9 	bl	8001288 <HAL_GetTick>
 80022d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022da:	f7fe ffd5 	bl	8001288 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e2d3      	b.n	8002894 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022ec:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f0      	beq.n	80022da <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	061b      	lsls	r3, r3, #24
 8002306:	490b      	ldr	r1, [pc, #44]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]
 800230c:	e01a      	b.n	8002344 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800230e:	4b09      	ldr	r3, [pc, #36]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a08      	ldr	r2, [pc, #32]	@ (8002334 <HAL_RCC_OscConfig+0x244>)
 8002314:	f023 0301 	bic.w	r3, r3, #1
 8002318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231a:	f7fe ffb5 	bl	8001288 <HAL_GetTick>
 800231e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002320:	e00a      	b.n	8002338 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002322:	f7fe ffb1 	bl	8001288 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d903      	bls.n	8002338 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e2af      	b.n	8002894 <HAL_RCC_OscConfig+0x7a4>
 8002334:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002338:	4b96      	ldr	r3, [pc, #600]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1ee      	bne.n	8002322 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0310 	and.w	r3, r3, #16
 800234c:	2b00      	cmp	r3, #0
 800234e:	d06a      	beq.n	8002426 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002350:	4b90      	ldr	r3, [pc, #576]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002358:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800235a:	4b8e      	ldr	r3, [pc, #568]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 800235c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800235e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2b08      	cmp	r3, #8
 8002364:	d007      	beq.n	8002376 <HAL_RCC_OscConfig+0x286>
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	2b18      	cmp	r3, #24
 800236a:	d11b      	bne.n	80023a4 <HAL_RCC_OscConfig+0x2b4>
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	2b01      	cmp	r3, #1
 8002374:	d116      	bne.n	80023a4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002376:	4b87      	ldr	r3, [pc, #540]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d005      	beq.n	800238e <HAL_RCC_OscConfig+0x29e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	2b80      	cmp	r3, #128	@ 0x80
 8002388:	d001      	beq.n	800238e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e282      	b.n	8002894 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800238e:	4b81      	ldr	r3, [pc, #516]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	061b      	lsls	r3, r3, #24
 800239c:	497d      	ldr	r1, [pc, #500]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023a2:	e040      	b.n	8002426 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d023      	beq.n	80023f4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80023ac:	4b79      	ldr	r3, [pc, #484]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a78      	ldr	r2, [pc, #480]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 80023b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe ff66 	bl	8001288 <HAL_GetTick>
 80023bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80023c0:	f7fe ff62 	bl	8001288 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e260      	b.n	8002894 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023d2:	4b70      	ldr	r3, [pc, #448]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023de:	4b6d      	ldr	r3, [pc, #436]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	061b      	lsls	r3, r3, #24
 80023ec:	4969      	ldr	r1, [pc, #420]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	60cb      	str	r3, [r1, #12]
 80023f2:	e018      	b.n	8002426 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80023f4:	4b67      	ldr	r3, [pc, #412]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a66      	ldr	r2, [pc, #408]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 80023fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002400:	f7fe ff42 	bl	8001288 <HAL_GetTick>
 8002404:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002408:	f7fe ff3e 	bl	8001288 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e23c      	b.n	8002894 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800241a:	4b5e      	ldr	r3, [pc, #376]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d036      	beq.n	80024a0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d019      	beq.n	800246e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800243a:	4b56      	ldr	r3, [pc, #344]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 800243c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800243e:	4a55      	ldr	r2, [pc, #340]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002446:	f7fe ff1f 	bl	8001288 <HAL_GetTick>
 800244a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244e:	f7fe ff1b 	bl	8001288 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e219      	b.n	8002894 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002460:	4b4c      	ldr	r3, [pc, #304]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 8002462:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0x35e>
 800246c:	e018      	b.n	80024a0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800246e:	4b49      	ldr	r3, [pc, #292]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 8002470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002472:	4a48      	ldr	r2, [pc, #288]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247a:	f7fe ff05 	bl	8001288 <HAL_GetTick>
 800247e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002482:	f7fe ff01 	bl	8001288 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e1ff      	b.n	8002894 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002494:	4b3f      	ldr	r3, [pc, #252]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 8002496:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f0      	bne.n	8002482 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0320 	and.w	r3, r3, #32
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d036      	beq.n	800251a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d019      	beq.n	80024e8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024b4:	4b37      	ldr	r3, [pc, #220]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a36      	ldr	r2, [pc, #216]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 80024ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80024c0:	f7fe fee2 	bl	8001288 <HAL_GetTick>
 80024c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024c8:	f7fe fede 	bl	8001288 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e1dc      	b.n	8002894 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024da:	4b2e      	ldr	r3, [pc, #184]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x3d8>
 80024e6:	e018      	b.n	800251a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a29      	ldr	r2, [pc, #164]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 80024ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80024f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80024f4:	f7fe fec8 	bl	8001288 <HAL_GetTick>
 80024f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024fc:	f7fe fec4 	bl	8001288 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e1c2      	b.n	8002894 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800250e:	4b21      	ldr	r3, [pc, #132]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 8086 	beq.w	8002634 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002528:	4b1b      	ldr	r3, [pc, #108]	@ (8002598 <HAL_RCC_OscConfig+0x4a8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a1a      	ldr	r2, [pc, #104]	@ (8002598 <HAL_RCC_OscConfig+0x4a8>)
 800252e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002532:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002534:	f7fe fea8 	bl	8001288 <HAL_GetTick>
 8002538:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253c:	f7fe fea4 	bl	8001288 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	@ 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e1a2      	b.n	8002894 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800254e:	4b12      	ldr	r3, [pc, #72]	@ (8002598 <HAL_RCC_OscConfig+0x4a8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d106      	bne.n	8002570 <HAL_RCC_OscConfig+0x480>
 8002562:	4b0c      	ldr	r3, [pc, #48]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 8002564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002566:	4a0b      	ldr	r2, [pc, #44]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6713      	str	r3, [r2, #112]	@ 0x70
 800256e:	e032      	b.n	80025d6 <HAL_RCC_OscConfig+0x4e6>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d111      	bne.n	800259c <HAL_RCC_OscConfig+0x4ac>
 8002578:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 800257a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800257c:	4a05      	ldr	r2, [pc, #20]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 800257e:	f023 0301 	bic.w	r3, r3, #1
 8002582:	6713      	str	r3, [r2, #112]	@ 0x70
 8002584:	4b03      	ldr	r3, [pc, #12]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 8002586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002588:	4a02      	ldr	r2, [pc, #8]	@ (8002594 <HAL_RCC_OscConfig+0x4a4>)
 800258a:	f023 0304 	bic.w	r3, r3, #4
 800258e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002590:	e021      	b.n	80025d6 <HAL_RCC_OscConfig+0x4e6>
 8002592:	bf00      	nop
 8002594:	58024400 	.word	0x58024400
 8002598:	58024800 	.word	0x58024800
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b05      	cmp	r3, #5
 80025a2:	d10c      	bne.n	80025be <HAL_RCC_OscConfig+0x4ce>
 80025a4:	4b83      	ldr	r3, [pc, #524]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a8:	4a82      	ldr	r2, [pc, #520]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 80025aa:	f043 0304 	orr.w	r3, r3, #4
 80025ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80025b0:	4b80      	ldr	r3, [pc, #512]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b4:	4a7f      	ldr	r2, [pc, #508]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80025bc:	e00b      	b.n	80025d6 <HAL_RCC_OscConfig+0x4e6>
 80025be:	4b7d      	ldr	r3, [pc, #500]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 80025c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c2:	4a7c      	ldr	r2, [pc, #496]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 80025c4:	f023 0301 	bic.w	r3, r3, #1
 80025c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ca:	4b7a      	ldr	r3, [pc, #488]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ce:	4a79      	ldr	r2, [pc, #484]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 80025d0:	f023 0304 	bic.w	r3, r3, #4
 80025d4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d015      	beq.n	800260a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025de:	f7fe fe53 	bl	8001288 <HAL_GetTick>
 80025e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025e4:	e00a      	b.n	80025fc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e6:	f7fe fe4f 	bl	8001288 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e14b      	b.n	8002894 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025fc:	4b6d      	ldr	r3, [pc, #436]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0ee      	beq.n	80025e6 <HAL_RCC_OscConfig+0x4f6>
 8002608:	e014      	b.n	8002634 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260a:	f7fe fe3d 	bl	8001288 <HAL_GetTick>
 800260e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002610:	e00a      	b.n	8002628 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002612:	f7fe fe39 	bl	8001288 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002620:	4293      	cmp	r3, r2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e135      	b.n	8002894 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002628:	4b62      	ldr	r3, [pc, #392]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 800262a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1ee      	bne.n	8002612 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 812a 	beq.w	8002892 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800263e:	4b5d      	ldr	r3, [pc, #372]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002646:	2b18      	cmp	r3, #24
 8002648:	f000 80ba 	beq.w	80027c0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	2b02      	cmp	r3, #2
 8002652:	f040 8095 	bne.w	8002780 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002656:	4b57      	ldr	r3, [pc, #348]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a56      	ldr	r2, [pc, #344]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 800265c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002662:	f7fe fe11 	bl	8001288 <HAL_GetTick>
 8002666:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266a:	f7fe fe0d 	bl	8001288 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e10b      	b.n	8002894 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800267c:	4b4d      	ldr	r3, [pc, #308]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1f0      	bne.n	800266a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002688:	4b4a      	ldr	r3, [pc, #296]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 800268a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800268c:	4b4a      	ldr	r3, [pc, #296]	@ (80027b8 <HAL_RCC_OscConfig+0x6c8>)
 800268e:	4013      	ands	r3, r2
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002698:	0112      	lsls	r2, r2, #4
 800269a:	430a      	orrs	r2, r1
 800269c:	4945      	ldr	r1, [pc, #276]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	628b      	str	r3, [r1, #40]	@ 0x28
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	3b01      	subs	r3, #1
 80026a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026b0:	3b01      	subs	r3, #1
 80026b2:	025b      	lsls	r3, r3, #9
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026bc:	3b01      	subs	r3, #1
 80026be:	041b      	lsls	r3, r3, #16
 80026c0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ca:	3b01      	subs	r3, #1
 80026cc:	061b      	lsls	r3, r3, #24
 80026ce:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80026d2:	4938      	ldr	r1, [pc, #224]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80026d8:	4b36      	ldr	r3, [pc, #216]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 80026da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026dc:	4a35      	ldr	r2, [pc, #212]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80026e4:	4b33      	ldr	r3, [pc, #204]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 80026e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026e8:	4b34      	ldr	r3, [pc, #208]	@ (80027bc <HAL_RCC_OscConfig+0x6cc>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80026f0:	00d2      	lsls	r2, r2, #3
 80026f2:	4930      	ldr	r1, [pc, #192]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80026f8:	4b2e      	ldr	r3, [pc, #184]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 80026fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fc:	f023 020c 	bic.w	r2, r3, #12
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	492b      	ldr	r1, [pc, #172]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 8002706:	4313      	orrs	r3, r2
 8002708:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800270a:	4b2a      	ldr	r3, [pc, #168]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 800270c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270e:	f023 0202 	bic.w	r2, r3, #2
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002716:	4927      	ldr	r1, [pc, #156]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 8002718:	4313      	orrs	r3, r2
 800271a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800271c:	4b25      	ldr	r3, [pc, #148]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 800271e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002720:	4a24      	ldr	r2, [pc, #144]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 8002722:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002726:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002728:	4b22      	ldr	r3, [pc, #136]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 800272a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272c:	4a21      	ldr	r2, [pc, #132]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 800272e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002732:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002734:	4b1f      	ldr	r3, [pc, #124]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 8002736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002738:	4a1e      	ldr	r2, [pc, #120]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 800273a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800273e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002740:	4b1c      	ldr	r3, [pc, #112]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 8002742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002744:	4a1b      	ldr	r2, [pc, #108]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800274c:	4b19      	ldr	r3, [pc, #100]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a18      	ldr	r2, [pc, #96]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 8002752:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002758:	f7fe fd96 	bl	8001288 <HAL_GetTick>
 800275c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002760:	f7fe fd92 	bl	8001288 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e090      	b.n	8002894 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002772:	4b10      	ldr	r3, [pc, #64]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x670>
 800277e:	e088      	b.n	8002892 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002780:	4b0c      	ldr	r3, [pc, #48]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0b      	ldr	r2, [pc, #44]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 8002786:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800278a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278c:	f7fe fd7c 	bl	8001288 <HAL_GetTick>
 8002790:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002794:	f7fe fd78 	bl	8001288 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e076      	b.n	8002894 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027a6:	4b03      	ldr	r3, [pc, #12]	@ (80027b4 <HAL_RCC_OscConfig+0x6c4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0x6a4>
 80027b2:	e06e      	b.n	8002892 <HAL_RCC_OscConfig+0x7a2>
 80027b4:	58024400 	.word	0x58024400
 80027b8:	fffffc0c 	.word	0xfffffc0c
 80027bc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80027c0:	4b36      	ldr	r3, [pc, #216]	@ (800289c <HAL_RCC_OscConfig+0x7ac>)
 80027c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80027c6:	4b35      	ldr	r3, [pc, #212]	@ (800289c <HAL_RCC_OscConfig+0x7ac>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ca:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d031      	beq.n	8002838 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	f003 0203 	and.w	r2, r3, #3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027de:	429a      	cmp	r2, r3
 80027e0:	d12a      	bne.n	8002838 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d122      	bne.n	8002838 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80027fe:	429a      	cmp	r2, r3
 8002800:	d11a      	bne.n	8002838 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	0a5b      	lsrs	r3, r3, #9
 8002806:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800280e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002810:	429a      	cmp	r2, r3
 8002812:	d111      	bne.n	8002838 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	0c1b      	lsrs	r3, r3, #16
 8002818:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002820:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002822:	429a      	cmp	r2, r3
 8002824:	d108      	bne.n	8002838 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	0e1b      	lsrs	r3, r3, #24
 800282a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002832:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e02b      	b.n	8002894 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800283c:	4b17      	ldr	r3, [pc, #92]	@ (800289c <HAL_RCC_OscConfig+0x7ac>)
 800283e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002840:	08db      	lsrs	r3, r3, #3
 8002842:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002846:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	429a      	cmp	r2, r3
 8002850:	d01f      	beq.n	8002892 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002852:	4b12      	ldr	r3, [pc, #72]	@ (800289c <HAL_RCC_OscConfig+0x7ac>)
 8002854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002856:	4a11      	ldr	r2, [pc, #68]	@ (800289c <HAL_RCC_OscConfig+0x7ac>)
 8002858:	f023 0301 	bic.w	r3, r3, #1
 800285c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800285e:	f7fe fd13 	bl	8001288 <HAL_GetTick>
 8002862:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002864:	bf00      	nop
 8002866:	f7fe fd0f 	bl	8001288 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286e:	4293      	cmp	r3, r2
 8002870:	d0f9      	beq.n	8002866 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002872:	4b0a      	ldr	r3, [pc, #40]	@ (800289c <HAL_RCC_OscConfig+0x7ac>)
 8002874:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002876:	4b0a      	ldr	r3, [pc, #40]	@ (80028a0 <HAL_RCC_OscConfig+0x7b0>)
 8002878:	4013      	ands	r3, r2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800287e:	00d2      	lsls	r2, r2, #3
 8002880:	4906      	ldr	r1, [pc, #24]	@ (800289c <HAL_RCC_OscConfig+0x7ac>)
 8002882:	4313      	orrs	r3, r2
 8002884:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002886:	4b05      	ldr	r3, [pc, #20]	@ (800289c <HAL_RCC_OscConfig+0x7ac>)
 8002888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288a:	4a04      	ldr	r2, [pc, #16]	@ (800289c <HAL_RCC_OscConfig+0x7ac>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3730      	adds	r7, #48	@ 0x30
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	58024400 	.word	0x58024400
 80028a0:	ffff0007 	.word	0xffff0007

080028a4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e19c      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028b8:	4b8a      	ldr	r3, [pc, #552]	@ (8002ae4 <HAL_RCC_ClockConfig+0x240>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 030f 	and.w	r3, r3, #15
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d910      	bls.n	80028e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c6:	4b87      	ldr	r3, [pc, #540]	@ (8002ae4 <HAL_RCC_ClockConfig+0x240>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 020f 	bic.w	r2, r3, #15
 80028ce:	4985      	ldr	r1, [pc, #532]	@ (8002ae4 <HAL_RCC_ClockConfig+0x240>)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d6:	4b83      	ldr	r3, [pc, #524]	@ (8002ae4 <HAL_RCC_ClockConfig+0x240>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e184      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d010      	beq.n	8002916 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	4b7b      	ldr	r3, [pc, #492]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002900:	429a      	cmp	r2, r3
 8002902:	d908      	bls.n	8002916 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002904:	4b78      	ldr	r3, [pc, #480]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	4975      	ldr	r1, [pc, #468]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 8002912:	4313      	orrs	r3, r2
 8002914:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b00      	cmp	r3, #0
 8002920:	d010      	beq.n	8002944 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	4b70      	ldr	r3, [pc, #448]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800292e:	429a      	cmp	r2, r3
 8002930:	d908      	bls.n	8002944 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002932:	4b6d      	ldr	r3, [pc, #436]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	496a      	ldr	r1, [pc, #424]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 8002940:	4313      	orrs	r3, r2
 8002942:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0310 	and.w	r3, r3, #16
 800294c:	2b00      	cmp	r3, #0
 800294e:	d010      	beq.n	8002972 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	699a      	ldr	r2, [r3, #24]
 8002954:	4b64      	ldr	r3, [pc, #400]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800295c:	429a      	cmp	r2, r3
 800295e:	d908      	bls.n	8002972 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002960:	4b61      	ldr	r3, [pc, #388]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	495e      	ldr	r1, [pc, #376]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 800296e:	4313      	orrs	r3, r2
 8002970:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0320 	and.w	r3, r3, #32
 800297a:	2b00      	cmp	r3, #0
 800297c:	d010      	beq.n	80029a0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69da      	ldr	r2, [r3, #28]
 8002982:	4b59      	ldr	r3, [pc, #356]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800298a:	429a      	cmp	r2, r3
 800298c:	d908      	bls.n	80029a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800298e:	4b56      	ldr	r3, [pc, #344]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	4953      	ldr	r1, [pc, #332]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 800299c:	4313      	orrs	r3, r2
 800299e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d010      	beq.n	80029ce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	4b4d      	ldr	r3, [pc, #308]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	f003 030f 	and.w	r3, r3, #15
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d908      	bls.n	80029ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029bc:	4b4a      	ldr	r3, [pc, #296]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	f023 020f 	bic.w	r2, r3, #15
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4947      	ldr	r1, [pc, #284]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d055      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80029da:	4b43      	ldr	r3, [pc, #268]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	4940      	ldr	r1, [pc, #256]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d107      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029f4:	4b3c      	ldr	r3, [pc, #240]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d121      	bne.n	8002a44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0f6      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d107      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a0c:	4b36      	ldr	r3, [pc, #216]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d115      	bne.n	8002a44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0ea      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d107      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a24:	4b30      	ldr	r3, [pc, #192]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d109      	bne.n	8002a44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0de      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a34:	4b2c      	ldr	r3, [pc, #176]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0d6      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a44:	4b28      	ldr	r3, [pc, #160]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f023 0207 	bic.w	r2, r3, #7
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4925      	ldr	r1, [pc, #148]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a56:	f7fe fc17 	bl	8001288 <HAL_GetTick>
 8002a5a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5c:	e00a      	b.n	8002a74 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a5e:	f7fe fc13 	bl	8001288 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e0be      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a74:	4b1c      	ldr	r3, [pc, #112]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d1eb      	bne.n	8002a5e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d010      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	4b14      	ldr	r3, [pc, #80]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d208      	bcs.n	8002ab4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa2:	4b11      	ldr	r3, [pc, #68]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	f023 020f 	bic.w	r2, r3, #15
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	490e      	ldr	r1, [pc, #56]	@ (8002ae8 <HAL_RCC_ClockConfig+0x244>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <HAL_RCC_ClockConfig+0x240>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d214      	bcs.n	8002aec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b08      	ldr	r3, [pc, #32]	@ (8002ae4 <HAL_RCC_ClockConfig+0x240>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 020f 	bic.w	r2, r3, #15
 8002aca:	4906      	ldr	r1, [pc, #24]	@ (8002ae4 <HAL_RCC_ClockConfig+0x240>)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad2:	4b04      	ldr	r3, [pc, #16]	@ (8002ae4 <HAL_RCC_ClockConfig+0x240>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e086      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x34e>
 8002ae4:	52002000 	.word	0x52002000
 8002ae8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d010      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	4b3f      	ldr	r3, [pc, #252]	@ (8002bfc <HAL_RCC_ClockConfig+0x358>)
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d208      	bcs.n	8002b1a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b08:	4b3c      	ldr	r3, [pc, #240]	@ (8002bfc <HAL_RCC_ClockConfig+0x358>)
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	4939      	ldr	r1, [pc, #228]	@ (8002bfc <HAL_RCC_ClockConfig+0x358>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d010      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695a      	ldr	r2, [r3, #20]
 8002b2a:	4b34      	ldr	r3, [pc, #208]	@ (8002bfc <HAL_RCC_ClockConfig+0x358>)
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d208      	bcs.n	8002b48 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b36:	4b31      	ldr	r3, [pc, #196]	@ (8002bfc <HAL_RCC_ClockConfig+0x358>)
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	492e      	ldr	r1, [pc, #184]	@ (8002bfc <HAL_RCC_ClockConfig+0x358>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d010      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699a      	ldr	r2, [r3, #24]
 8002b58:	4b28      	ldr	r3, [pc, #160]	@ (8002bfc <HAL_RCC_ClockConfig+0x358>)
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d208      	bcs.n	8002b76 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b64:	4b25      	ldr	r3, [pc, #148]	@ (8002bfc <HAL_RCC_ClockConfig+0x358>)
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	4922      	ldr	r1, [pc, #136]	@ (8002bfc <HAL_RCC_ClockConfig+0x358>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d010      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69da      	ldr	r2, [r3, #28]
 8002b86:	4b1d      	ldr	r3, [pc, #116]	@ (8002bfc <HAL_RCC_ClockConfig+0x358>)
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d208      	bcs.n	8002ba4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b92:	4b1a      	ldr	r3, [pc, #104]	@ (8002bfc <HAL_RCC_ClockConfig+0x358>)
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	4917      	ldr	r1, [pc, #92]	@ (8002bfc <HAL_RCC_ClockConfig+0x358>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ba4:	f000 f834 	bl	8002c10 <HAL_RCC_GetSysClockFreq>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	4b14      	ldr	r3, [pc, #80]	@ (8002bfc <HAL_RCC_ClockConfig+0x358>)
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	0a1b      	lsrs	r3, r3, #8
 8002bb0:	f003 030f 	and.w	r3, r3, #15
 8002bb4:	4912      	ldr	r1, [pc, #72]	@ (8002c00 <HAL_RCC_ClockConfig+0x35c>)
 8002bb6:	5ccb      	ldrb	r3, [r1, r3]
 8002bb8:	f003 031f 	and.w	r3, r3, #31
 8002bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002bfc <HAL_RCC_ClockConfig+0x358>)
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	4a0d      	ldr	r2, [pc, #52]	@ (8002c00 <HAL_RCC_ClockConfig+0x35c>)
 8002bcc:	5cd3      	ldrb	r3, [r2, r3]
 8002bce:	f003 031f 	and.w	r3, r3, #31
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd8:	4a0a      	ldr	r2, [pc, #40]	@ (8002c04 <HAL_RCC_ClockConfig+0x360>)
 8002bda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8002c08 <HAL_RCC_ClockConfig+0x364>)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002be2:	4b0a      	ldr	r3, [pc, #40]	@ (8002c0c <HAL_RCC_ClockConfig+0x368>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe fb04 	bl	80011f4 <HAL_InitTick>
 8002bec:	4603      	mov	r3, r0
 8002bee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	58024400 	.word	0x58024400
 8002c00:	0800621c 	.word	0x0800621c
 8002c04:	24000004 	.word	0x24000004
 8002c08:	24000000 	.word	0x24000000
 8002c0c:	24000008 	.word	0x24000008

08002c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b089      	sub	sp, #36	@ 0x24
 8002c14:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c16:	4bb3      	ldr	r3, [pc, #716]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c1e:	2b18      	cmp	r3, #24
 8002c20:	f200 8155 	bhi.w	8002ece <HAL_RCC_GetSysClockFreq+0x2be>
 8002c24:	a201      	add	r2, pc, #4	@ (adr r2, 8002c2c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2a:	bf00      	nop
 8002c2c:	08002c91 	.word	0x08002c91
 8002c30:	08002ecf 	.word	0x08002ecf
 8002c34:	08002ecf 	.word	0x08002ecf
 8002c38:	08002ecf 	.word	0x08002ecf
 8002c3c:	08002ecf 	.word	0x08002ecf
 8002c40:	08002ecf 	.word	0x08002ecf
 8002c44:	08002ecf 	.word	0x08002ecf
 8002c48:	08002ecf 	.word	0x08002ecf
 8002c4c:	08002cb7 	.word	0x08002cb7
 8002c50:	08002ecf 	.word	0x08002ecf
 8002c54:	08002ecf 	.word	0x08002ecf
 8002c58:	08002ecf 	.word	0x08002ecf
 8002c5c:	08002ecf 	.word	0x08002ecf
 8002c60:	08002ecf 	.word	0x08002ecf
 8002c64:	08002ecf 	.word	0x08002ecf
 8002c68:	08002ecf 	.word	0x08002ecf
 8002c6c:	08002cbd 	.word	0x08002cbd
 8002c70:	08002ecf 	.word	0x08002ecf
 8002c74:	08002ecf 	.word	0x08002ecf
 8002c78:	08002ecf 	.word	0x08002ecf
 8002c7c:	08002ecf 	.word	0x08002ecf
 8002c80:	08002ecf 	.word	0x08002ecf
 8002c84:	08002ecf 	.word	0x08002ecf
 8002c88:	08002ecf 	.word	0x08002ecf
 8002c8c:	08002cc3 	.word	0x08002cc3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c90:	4b94      	ldr	r3, [pc, #592]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d009      	beq.n	8002cb0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c9c:	4b91      	ldr	r3, [pc, #580]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	08db      	lsrs	r3, r3, #3
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	4a90      	ldr	r2, [pc, #576]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002cae:	e111      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002cb0:	4b8d      	ldr	r3, [pc, #564]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002cb2:	61bb      	str	r3, [r7, #24]
      break;
 8002cb4:	e10e      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002cb6:	4b8d      	ldr	r3, [pc, #564]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002cb8:	61bb      	str	r3, [r7, #24]
      break;
 8002cba:	e10b      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002cbc:	4b8c      	ldr	r3, [pc, #560]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002cbe:	61bb      	str	r3, [r7, #24]
      break;
 8002cc0:	e108      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002cc2:	4b88      	ldr	r3, [pc, #544]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002ccc:	4b85      	ldr	r3, [pc, #532]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd0:	091b      	lsrs	r3, r3, #4
 8002cd2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cd6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002cd8:	4b82      	ldr	r3, [pc, #520]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002ce2:	4b80      	ldr	r3, [pc, #512]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ce6:	08db      	lsrs	r3, r3, #3
 8002ce8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	fb02 f303 	mul.w	r3, r2, r3
 8002cf2:	ee07 3a90 	vmov	s15, r3
 8002cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cfa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80e1 	beq.w	8002ec8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	f000 8083 	beq.w	8002e14 <HAL_RCC_GetSysClockFreq+0x204>
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	f200 80a1 	bhi.w	8002e58 <HAL_RCC_GetSysClockFreq+0x248>
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_RCC_GetSysClockFreq+0x114>
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d056      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002d22:	e099      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d24:	4b6f      	ldr	r3, [pc, #444]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0320 	and.w	r3, r3, #32
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d02d      	beq.n	8002d8c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d30:	4b6c      	ldr	r3, [pc, #432]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	08db      	lsrs	r3, r3, #3
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	4a6b      	ldr	r2, [pc, #428]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d40:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	ee07 3a90 	vmov	s15, r3
 8002d48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	ee07 3a90 	vmov	s15, r3
 8002d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d5a:	4b62      	ldr	r3, [pc, #392]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d62:	ee07 3a90 	vmov	s15, r3
 8002d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d6e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d86:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002d8a:	e087      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	ee07 3a90 	vmov	s15, r3
 8002d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d96:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002ef8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d9e:	4b51      	ldr	r3, [pc, #324]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da6:	ee07 3a90 	vmov	s15, r3
 8002daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dae:	ed97 6a02 	vldr	s12, [r7, #8]
 8002db2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002dce:	e065      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	ee07 3a90 	vmov	s15, r3
 8002dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dda:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002efc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002de2:	4b40      	ldr	r3, [pc, #256]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dea:	ee07 3a90 	vmov	s15, r3
 8002dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002df2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002df6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e12:	e043      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	ee07 3a90 	vmov	s15, r3
 8002e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e1e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002f00 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e26:	4b2f      	ldr	r3, [pc, #188]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e2e:	ee07 3a90 	vmov	s15, r3
 8002e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e36:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e3a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e56:	e021      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	ee07 3a90 	vmov	s15, r3
 8002e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e62:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002efc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e72:	ee07 3a90 	vmov	s15, r3
 8002e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e7e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e9a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002e9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea0:	0a5b      	lsrs	r3, r3, #9
 8002ea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	ee07 3a90 	vmov	s15, r3
 8002eb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002eb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8002eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ec0:	ee17 3a90 	vmov	r3, s15
 8002ec4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002ec6:	e005      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61bb      	str	r3, [r7, #24]
      break;
 8002ecc:	e002      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002ece:	4b07      	ldr	r3, [pc, #28]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ed0:	61bb      	str	r3, [r7, #24]
      break;
 8002ed2:	bf00      	nop
  }

  return sysclockfreq;
 8002ed4:	69bb      	ldr	r3, [r7, #24]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3724      	adds	r7, #36	@ 0x24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	58024400 	.word	0x58024400
 8002ee8:	03d09000 	.word	0x03d09000
 8002eec:	003d0900 	.word	0x003d0900
 8002ef0:	007a1200 	.word	0x007a1200
 8002ef4:	46000000 	.word	0x46000000
 8002ef8:	4c742400 	.word	0x4c742400
 8002efc:	4a742400 	.word	0x4a742400
 8002f00:	4af42400 	.word	0x4af42400

08002f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002f0a:	f7ff fe81 	bl	8002c10 <HAL_RCC_GetSysClockFreq>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	4b10      	ldr	r3, [pc, #64]	@ (8002f54 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	0a1b      	lsrs	r3, r3, #8
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	490f      	ldr	r1, [pc, #60]	@ (8002f58 <HAL_RCC_GetHCLKFreq+0x54>)
 8002f1c:	5ccb      	ldrb	r3, [r1, r3]
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	fa22 f303 	lsr.w	r3, r2, r3
 8002f26:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f28:	4b0a      	ldr	r3, [pc, #40]	@ (8002f54 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	4a09      	ldr	r2, [pc, #36]	@ (8002f58 <HAL_RCC_GetHCLKFreq+0x54>)
 8002f32:	5cd3      	ldrb	r3, [r2, r3]
 8002f34:	f003 031f 	and.w	r3, r3, #31
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3e:	4a07      	ldr	r2, [pc, #28]	@ (8002f5c <HAL_RCC_GetHCLKFreq+0x58>)
 8002f40:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f42:	4a07      	ldr	r2, [pc, #28]	@ (8002f60 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002f48:	4b04      	ldr	r3, [pc, #16]	@ (8002f5c <HAL_RCC_GetHCLKFreq+0x58>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	58024400 	.word	0x58024400
 8002f58:	0800621c 	.word	0x0800621c
 8002f5c:	24000004 	.word	0x24000004
 8002f60:	24000000 	.word	0x24000000

08002f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002f68:	f7ff ffcc 	bl	8002f04 <HAL_RCC_GetHCLKFreq>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	4b06      	ldr	r3, [pc, #24]	@ (8002f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	091b      	lsrs	r3, r3, #4
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	4904      	ldr	r1, [pc, #16]	@ (8002f8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f7a:	5ccb      	ldrb	r3, [r1, r3]
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	58024400 	.word	0x58024400
 8002f8c:	0800621c 	.word	0x0800621c

08002f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002f94:	f7ff ffb6 	bl	8002f04 <HAL_RCC_GetHCLKFreq>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	4b06      	ldr	r3, [pc, #24]	@ (8002fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	0a1b      	lsrs	r3, r3, #8
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	4904      	ldr	r1, [pc, #16]	@ (8002fb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fa6:	5ccb      	ldrb	r3, [r1, r3]
 8002fa8:	f003 031f 	and.w	r3, r3, #31
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	58024400 	.word	0x58024400
 8002fb8:	0800621c 	.word	0x0800621c

08002fbc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fc0:	b0c6      	sub	sp, #280	@ 0x118
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fdc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002fe0:	2500      	movs	r5, #0
 8002fe2:	ea54 0305 	orrs.w	r3, r4, r5
 8002fe6:	d049      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002ff2:	d02f      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002ff4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002ff8:	d828      	bhi.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002ffa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ffe:	d01a      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003000:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003004:	d822      	bhi.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800300a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800300e:	d007      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003010:	e01c      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003012:	4bab      	ldr	r3, [pc, #684]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003016:	4aaa      	ldr	r2, [pc, #680]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003018:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800301c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800301e:	e01a      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003024:	3308      	adds	r3, #8
 8003026:	2102      	movs	r1, #2
 8003028:	4618      	mov	r0, r3
 800302a:	f001 fc25 	bl	8004878 <RCCEx_PLL2_Config>
 800302e:	4603      	mov	r3, r0
 8003030:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003034:	e00f      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800303a:	3328      	adds	r3, #40	@ 0x28
 800303c:	2102      	movs	r1, #2
 800303e:	4618      	mov	r0, r3
 8003040:	f001 fccc 	bl	80049dc <RCCEx_PLL3_Config>
 8003044:	4603      	mov	r3, r0
 8003046:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800304a:	e004      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003052:	e000      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003054:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003056:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10a      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800305e:	4b98      	ldr	r3, [pc, #608]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003062:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800306a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800306c:	4a94      	ldr	r2, [pc, #592]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800306e:	430b      	orrs	r3, r1
 8003070:	6513      	str	r3, [r2, #80]	@ 0x50
 8003072:	e003      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003074:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003078:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800307c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003084:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003088:	f04f 0900 	mov.w	r9, #0
 800308c:	ea58 0309 	orrs.w	r3, r8, r9
 8003090:	d047      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003098:	2b04      	cmp	r3, #4
 800309a:	d82a      	bhi.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800309c:	a201      	add	r2, pc, #4	@ (adr r2, 80030a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800309e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a2:	bf00      	nop
 80030a4:	080030b9 	.word	0x080030b9
 80030a8:	080030c7 	.word	0x080030c7
 80030ac:	080030dd 	.word	0x080030dd
 80030b0:	080030fb 	.word	0x080030fb
 80030b4:	080030fb 	.word	0x080030fb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030b8:	4b81      	ldr	r3, [pc, #516]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030bc:	4a80      	ldr	r2, [pc, #512]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030c4:	e01a      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030ca:	3308      	adds	r3, #8
 80030cc:	2100      	movs	r1, #0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f001 fbd2 	bl	8004878 <RCCEx_PLL2_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030da:	e00f      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030e0:	3328      	adds	r3, #40	@ 0x28
 80030e2:	2100      	movs	r1, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f001 fc79 	bl	80049dc <RCCEx_PLL3_Config>
 80030ea:	4603      	mov	r3, r0
 80030ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030f0:	e004      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80030f8:	e000      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80030fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10a      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003104:	4b6e      	ldr	r3, [pc, #440]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003108:	f023 0107 	bic.w	r1, r3, #7
 800310c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003112:	4a6b      	ldr	r2, [pc, #428]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003114:	430b      	orrs	r3, r1
 8003116:	6513      	str	r3, [r2, #80]	@ 0x50
 8003118:	e003      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800311a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800311e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800312e:	f04f 0b00 	mov.w	fp, #0
 8003132:	ea5a 030b 	orrs.w	r3, sl, fp
 8003136:	d05b      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800313c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003140:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003144:	d03b      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003146:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800314a:	d834      	bhi.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800314c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003150:	d037      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003152:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003156:	d82e      	bhi.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003158:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800315c:	d033      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800315e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003162:	d828      	bhi.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003164:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003168:	d01a      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800316a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800316e:	d822      	bhi.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003174:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003178:	d007      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800317a:	e01c      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800317c:	4b50      	ldr	r3, [pc, #320]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800317e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003180:	4a4f      	ldr	r2, [pc, #316]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003182:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003186:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003188:	e01e      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800318a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800318e:	3308      	adds	r3, #8
 8003190:	2100      	movs	r1, #0
 8003192:	4618      	mov	r0, r3
 8003194:	f001 fb70 	bl	8004878 <RCCEx_PLL2_Config>
 8003198:	4603      	mov	r3, r0
 800319a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800319e:	e013      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031a4:	3328      	adds	r3, #40	@ 0x28
 80031a6:	2100      	movs	r1, #0
 80031a8:	4618      	mov	r0, r3
 80031aa:	f001 fc17 	bl	80049dc <RCCEx_PLL3_Config>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031b4:	e008      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80031bc:	e004      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80031be:	bf00      	nop
 80031c0:	e002      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80031c2:	bf00      	nop
 80031c4:	e000      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80031c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10b      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80031d0:	4b3b      	ldr	r3, [pc, #236]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80031d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80031e0:	4a37      	ldr	r2, [pc, #220]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031e2:	430b      	orrs	r3, r1
 80031e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80031e6:	e003      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80031f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80031fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003200:	2300      	movs	r3, #0
 8003202:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003206:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800320a:	460b      	mov	r3, r1
 800320c:	4313      	orrs	r3, r2
 800320e:	d05d      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003214:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003218:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800321c:	d03b      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800321e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003222:	d834      	bhi.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003224:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003228:	d037      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800322a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800322e:	d82e      	bhi.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003230:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003234:	d033      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003236:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800323a:	d828      	bhi.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800323c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003240:	d01a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003242:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003246:	d822      	bhi.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800324c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003250:	d007      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003252:	e01c      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003254:	4b1a      	ldr	r3, [pc, #104]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003258:	4a19      	ldr	r2, [pc, #100]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800325a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800325e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003260:	e01e      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003266:	3308      	adds	r3, #8
 8003268:	2100      	movs	r1, #0
 800326a:	4618      	mov	r0, r3
 800326c:	f001 fb04 	bl	8004878 <RCCEx_PLL2_Config>
 8003270:	4603      	mov	r3, r0
 8003272:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003276:	e013      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800327c:	3328      	adds	r3, #40	@ 0x28
 800327e:	2100      	movs	r1, #0
 8003280:	4618      	mov	r0, r3
 8003282:	f001 fbab 	bl	80049dc <RCCEx_PLL3_Config>
 8003286:	4603      	mov	r3, r0
 8003288:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800328c:	e008      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003294:	e004      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003296:	bf00      	nop
 8003298:	e002      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800329a:	bf00      	nop
 800329c:	e000      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800329e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10d      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80032a8:	4b05      	ldr	r3, [pc, #20]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ac:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80032b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80032b8:	4a01      	ldr	r2, [pc, #4]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032ba:	430b      	orrs	r3, r1
 80032bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80032be:	e005      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80032c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80032cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80032d8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80032dc:	2300      	movs	r3, #0
 80032de:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80032e2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4313      	orrs	r3, r2
 80032ea:	d03a      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80032ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f2:	2b30      	cmp	r3, #48	@ 0x30
 80032f4:	d01f      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80032f6:	2b30      	cmp	r3, #48	@ 0x30
 80032f8:	d819      	bhi.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80032fa:	2b20      	cmp	r3, #32
 80032fc:	d00c      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80032fe:	2b20      	cmp	r3, #32
 8003300:	d815      	bhi.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003302:	2b00      	cmp	r3, #0
 8003304:	d019      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003306:	2b10      	cmp	r3, #16
 8003308:	d111      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800330a:	4baa      	ldr	r3, [pc, #680]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800330c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330e:	4aa9      	ldr	r2, [pc, #676]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003314:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003316:	e011      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800331c:	3308      	adds	r3, #8
 800331e:	2102      	movs	r1, #2
 8003320:	4618      	mov	r0, r3
 8003322:	f001 faa9 	bl	8004878 <RCCEx_PLL2_Config>
 8003326:	4603      	mov	r3, r0
 8003328:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800332c:	e006      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003334:	e002      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003336:	bf00      	nop
 8003338:	e000      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800333a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800333c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10a      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003344:	4b9b      	ldr	r3, [pc, #620]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003348:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800334c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003352:	4a98      	ldr	r2, [pc, #608]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003354:	430b      	orrs	r3, r1
 8003356:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003358:	e003      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800335e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800336e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003372:	2300      	movs	r3, #0
 8003374:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003378:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800337c:	460b      	mov	r3, r1
 800337e:	4313      	orrs	r3, r2
 8003380:	d051      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003388:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800338c:	d035      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800338e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003392:	d82e      	bhi.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003394:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003398:	d031      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x442>
 800339a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800339e:	d828      	bhi.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80033a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033a4:	d01a      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x420>
 80033a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033aa:	d822      	bhi.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80033b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033b4:	d007      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80033b6:	e01c      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033b8:	4b7e      	ldr	r3, [pc, #504]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033bc:	4a7d      	ldr	r2, [pc, #500]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80033c4:	e01c      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033ca:	3308      	adds	r3, #8
 80033cc:	2100      	movs	r1, #0
 80033ce:	4618      	mov	r0, r3
 80033d0:	f001 fa52 	bl	8004878 <RCCEx_PLL2_Config>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80033da:	e011      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033e0:	3328      	adds	r3, #40	@ 0x28
 80033e2:	2100      	movs	r1, #0
 80033e4:	4618      	mov	r0, r3
 80033e6:	f001 faf9 	bl	80049dc <RCCEx_PLL3_Config>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80033f0:	e006      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80033f8:	e002      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80033fa:	bf00      	nop
 80033fc:	e000      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80033fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003400:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10a      	bne.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003408:	4b6a      	ldr	r3, [pc, #424]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800340a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800340c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003416:	4a67      	ldr	r2, [pc, #412]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003418:	430b      	orrs	r3, r1
 800341a:	6513      	str	r3, [r2, #80]	@ 0x50
 800341c:	e003      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003422:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800342a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003432:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003436:	2300      	movs	r3, #0
 8003438:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800343c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003440:	460b      	mov	r3, r1
 8003442:	4313      	orrs	r3, r2
 8003444:	d053      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800344a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800344c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003450:	d033      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003452:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003456:	d82c      	bhi.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003458:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800345c:	d02f      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x502>
 800345e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003462:	d826      	bhi.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003464:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003468:	d02b      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800346a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800346e:	d820      	bhi.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003470:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003474:	d012      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003476:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800347a:	d81a      	bhi.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800347c:	2b00      	cmp	r3, #0
 800347e:	d022      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003484:	d115      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800348a:	3308      	adds	r3, #8
 800348c:	2101      	movs	r1, #1
 800348e:	4618      	mov	r0, r3
 8003490:	f001 f9f2 	bl	8004878 <RCCEx_PLL2_Config>
 8003494:	4603      	mov	r3, r0
 8003496:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800349a:	e015      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800349c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034a0:	3328      	adds	r3, #40	@ 0x28
 80034a2:	2101      	movs	r1, #1
 80034a4:	4618      	mov	r0, r3
 80034a6:	f001 fa99 	bl	80049dc <RCCEx_PLL3_Config>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80034b0:	e00a      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034b8:	e006      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80034ba:	bf00      	nop
 80034bc:	e004      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80034be:	bf00      	nop
 80034c0:	e002      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80034c2:	bf00      	nop
 80034c4:	e000      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80034c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10a      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80034d0:	4b38      	ldr	r3, [pc, #224]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80034d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034de:	4a35      	ldr	r2, [pc, #212]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034e0:	430b      	orrs	r3, r1
 80034e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80034e4:	e003      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80034ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80034fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80034fe:	2300      	movs	r3, #0
 8003500:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003504:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003508:	460b      	mov	r3, r1
 800350a:	4313      	orrs	r3, r2
 800350c:	d058      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800350e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003512:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003516:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800351a:	d033      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800351c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003520:	d82c      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003526:	d02f      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800352c:	d826      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800352e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003532:	d02b      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003534:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003538:	d820      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800353a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800353e:	d012      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003540:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003544:	d81a      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003546:	2b00      	cmp	r3, #0
 8003548:	d022      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800354a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800354e:	d115      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003554:	3308      	adds	r3, #8
 8003556:	2101      	movs	r1, #1
 8003558:	4618      	mov	r0, r3
 800355a:	f001 f98d 	bl	8004878 <RCCEx_PLL2_Config>
 800355e:	4603      	mov	r3, r0
 8003560:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003564:	e015      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800356a:	3328      	adds	r3, #40	@ 0x28
 800356c:	2101      	movs	r1, #1
 800356e:	4618      	mov	r0, r3
 8003570:	f001 fa34 	bl	80049dc <RCCEx_PLL3_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800357a:	e00a      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003582:	e006      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003584:	bf00      	nop
 8003586:	e004      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003588:	bf00      	nop
 800358a:	e002      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800358c:	bf00      	nop
 800358e:	e000      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003592:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10e      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800359a:	4b06      	ldr	r3, [pc, #24]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800359c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80035a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035aa:	4a02      	ldr	r2, [pc, #8]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035ac:	430b      	orrs	r3, r1
 80035ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80035b0:	e006      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80035b2:	bf00      	nop
 80035b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80035c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80035cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035d0:	2300      	movs	r3, #0
 80035d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80035d6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80035da:	460b      	mov	r3, r1
 80035dc:	4313      	orrs	r3, r2
 80035de:	d037      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80035e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035ea:	d00e      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80035ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035f0:	d816      	bhi.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d018      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80035f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035fa:	d111      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035fc:	4bc4      	ldr	r3, [pc, #784]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003600:	4ac3      	ldr	r2, [pc, #780]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003602:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003606:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003608:	e00f      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800360a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800360e:	3308      	adds	r3, #8
 8003610:	2101      	movs	r1, #1
 8003612:	4618      	mov	r0, r3
 8003614:	f001 f930 	bl	8004878 <RCCEx_PLL2_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800361e:	e004      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003626:	e000      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800362a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10a      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003632:	4bb7      	ldr	r3, [pc, #732]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003636:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800363a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800363e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003640:	4ab3      	ldr	r2, [pc, #716]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003642:	430b      	orrs	r3, r1
 8003644:	6513      	str	r3, [r2, #80]	@ 0x50
 8003646:	e003      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003648:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800364c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003658:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800365c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003660:	2300      	movs	r3, #0
 8003662:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003666:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800366a:	460b      	mov	r3, r1
 800366c:	4313      	orrs	r3, r2
 800366e:	d039      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003676:	2b03      	cmp	r3, #3
 8003678:	d81c      	bhi.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800367a:	a201      	add	r2, pc, #4	@ (adr r2, 8003680 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800367c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003680:	080036bd 	.word	0x080036bd
 8003684:	08003691 	.word	0x08003691
 8003688:	0800369f 	.word	0x0800369f
 800368c:	080036bd 	.word	0x080036bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003690:	4b9f      	ldr	r3, [pc, #636]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003694:	4a9e      	ldr	r2, [pc, #632]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003696:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800369a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800369c:	e00f      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800369e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036a2:	3308      	adds	r3, #8
 80036a4:	2102      	movs	r1, #2
 80036a6:	4618      	mov	r0, r3
 80036a8:	f001 f8e6 	bl	8004878 <RCCEx_PLL2_Config>
 80036ac:	4603      	mov	r3, r0
 80036ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80036b2:	e004      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036ba:	e000      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80036bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10a      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80036c6:	4b92      	ldr	r3, [pc, #584]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ca:	f023 0103 	bic.w	r1, r3, #3
 80036ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036d4:	4a8e      	ldr	r2, [pc, #568]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036d6:	430b      	orrs	r3, r1
 80036d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036da:	e003      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80036f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036f4:	2300      	movs	r3, #0
 80036f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80036fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80036fe:	460b      	mov	r3, r1
 8003700:	4313      	orrs	r3, r2
 8003702:	f000 8099 	beq.w	8003838 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003706:	4b83      	ldr	r3, [pc, #524]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a82      	ldr	r2, [pc, #520]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800370c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003710:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003712:	f7fd fdb9 	bl	8001288 <HAL_GetTick>
 8003716:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800371a:	e00b      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371c:	f7fd fdb4 	bl	8001288 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b64      	cmp	r3, #100	@ 0x64
 800372a:	d903      	bls.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003732:	e005      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003734:	4b77      	ldr	r3, [pc, #476]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0ed      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003740:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003744:	2b00      	cmp	r3, #0
 8003746:	d173      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003748:	4b71      	ldr	r3, [pc, #452]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800374a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800374c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003750:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003754:	4053      	eors	r3, r2
 8003756:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800375a:	2b00      	cmp	r3, #0
 800375c:	d015      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800375e:	4b6c      	ldr	r3, [pc, #432]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003762:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003766:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800376a:	4b69      	ldr	r3, [pc, #420]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800376c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376e:	4a68      	ldr	r2, [pc, #416]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003774:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003776:	4b66      	ldr	r3, [pc, #408]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377a:	4a65      	ldr	r2, [pc, #404]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800377c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003780:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003782:	4a63      	ldr	r2, [pc, #396]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003784:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003788:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800378a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800378e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003796:	d118      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7fd fd76 	bl	8001288 <HAL_GetTick>
 800379c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037a0:	e00d      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a2:	f7fd fd71 	bl	8001288 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80037ac:	1ad2      	subs	r2, r2, r3
 80037ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d903      	bls.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80037bc:	e005      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037be:	4b54      	ldr	r3, [pc, #336]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0eb      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80037ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d129      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037e2:	d10e      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80037e4:	4b4a      	ldr	r3, [pc, #296]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80037ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037f4:	091a      	lsrs	r2, r3, #4
 80037f6:	4b48      	ldr	r3, [pc, #288]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	4a45      	ldr	r2, [pc, #276]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037fc:	430b      	orrs	r3, r1
 80037fe:	6113      	str	r3, [r2, #16]
 8003800:	e005      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003802:	4b43      	ldr	r3, [pc, #268]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	4a42      	ldr	r2, [pc, #264]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003808:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800380c:	6113      	str	r3, [r2, #16]
 800380e:	4b40      	ldr	r3, [pc, #256]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003810:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003816:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800381a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381e:	4a3c      	ldr	r2, [pc, #240]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003820:	430b      	orrs	r3, r1
 8003822:	6713      	str	r3, [r2, #112]	@ 0x70
 8003824:	e008      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003826:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800382a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800382e:	e003      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003830:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003834:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003840:	f002 0301 	and.w	r3, r2, #1
 8003844:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003848:	2300      	movs	r3, #0
 800384a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800384e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003852:	460b      	mov	r3, r1
 8003854:	4313      	orrs	r3, r2
 8003856:	f000 808f 	beq.w	8003978 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800385a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800385e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003860:	2b28      	cmp	r3, #40	@ 0x28
 8003862:	d871      	bhi.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003864:	a201      	add	r2, pc, #4	@ (adr r2, 800386c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386a:	bf00      	nop
 800386c:	08003951 	.word	0x08003951
 8003870:	08003949 	.word	0x08003949
 8003874:	08003949 	.word	0x08003949
 8003878:	08003949 	.word	0x08003949
 800387c:	08003949 	.word	0x08003949
 8003880:	08003949 	.word	0x08003949
 8003884:	08003949 	.word	0x08003949
 8003888:	08003949 	.word	0x08003949
 800388c:	0800391d 	.word	0x0800391d
 8003890:	08003949 	.word	0x08003949
 8003894:	08003949 	.word	0x08003949
 8003898:	08003949 	.word	0x08003949
 800389c:	08003949 	.word	0x08003949
 80038a0:	08003949 	.word	0x08003949
 80038a4:	08003949 	.word	0x08003949
 80038a8:	08003949 	.word	0x08003949
 80038ac:	08003933 	.word	0x08003933
 80038b0:	08003949 	.word	0x08003949
 80038b4:	08003949 	.word	0x08003949
 80038b8:	08003949 	.word	0x08003949
 80038bc:	08003949 	.word	0x08003949
 80038c0:	08003949 	.word	0x08003949
 80038c4:	08003949 	.word	0x08003949
 80038c8:	08003949 	.word	0x08003949
 80038cc:	08003951 	.word	0x08003951
 80038d0:	08003949 	.word	0x08003949
 80038d4:	08003949 	.word	0x08003949
 80038d8:	08003949 	.word	0x08003949
 80038dc:	08003949 	.word	0x08003949
 80038e0:	08003949 	.word	0x08003949
 80038e4:	08003949 	.word	0x08003949
 80038e8:	08003949 	.word	0x08003949
 80038ec:	08003951 	.word	0x08003951
 80038f0:	08003949 	.word	0x08003949
 80038f4:	08003949 	.word	0x08003949
 80038f8:	08003949 	.word	0x08003949
 80038fc:	08003949 	.word	0x08003949
 8003900:	08003949 	.word	0x08003949
 8003904:	08003949 	.word	0x08003949
 8003908:	08003949 	.word	0x08003949
 800390c:	08003951 	.word	0x08003951
 8003910:	58024400 	.word	0x58024400
 8003914:	58024800 	.word	0x58024800
 8003918:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800391c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003920:	3308      	adds	r3, #8
 8003922:	2101      	movs	r1, #1
 8003924:	4618      	mov	r0, r3
 8003926:	f000 ffa7 	bl	8004878 <RCCEx_PLL2_Config>
 800392a:	4603      	mov	r3, r0
 800392c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003930:	e00f      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003936:	3328      	adds	r3, #40	@ 0x28
 8003938:	2101      	movs	r1, #1
 800393a:	4618      	mov	r0, r3
 800393c:	f001 f84e 	bl	80049dc <RCCEx_PLL3_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003946:	e004      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800394e:	e000      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003950:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003952:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10a      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800395a:	4bbf      	ldr	r3, [pc, #764]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800395c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800395e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003966:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003968:	4abb      	ldr	r2, [pc, #748]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800396a:	430b      	orrs	r3, r1
 800396c:	6553      	str	r3, [r2, #84]	@ 0x54
 800396e:	e003      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003970:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003974:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800397c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003980:	f002 0302 	and.w	r3, r2, #2
 8003984:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003988:	2300      	movs	r3, #0
 800398a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800398e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003992:	460b      	mov	r3, r1
 8003994:	4313      	orrs	r3, r2
 8003996:	d041      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800399c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800399e:	2b05      	cmp	r3, #5
 80039a0:	d824      	bhi.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80039a2:	a201      	add	r2, pc, #4	@ (adr r2, 80039a8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80039a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a8:	080039f5 	.word	0x080039f5
 80039ac:	080039c1 	.word	0x080039c1
 80039b0:	080039d7 	.word	0x080039d7
 80039b4:	080039f5 	.word	0x080039f5
 80039b8:	080039f5 	.word	0x080039f5
 80039bc:	080039f5 	.word	0x080039f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039c4:	3308      	adds	r3, #8
 80039c6:	2101      	movs	r1, #1
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 ff55 	bl	8004878 <RCCEx_PLL2_Config>
 80039ce:	4603      	mov	r3, r0
 80039d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80039d4:	e00f      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039da:	3328      	adds	r3, #40	@ 0x28
 80039dc:	2101      	movs	r1, #1
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fffc 	bl	80049dc <RCCEx_PLL3_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80039ea:	e004      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039f2:	e000      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80039f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10a      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80039fe:	4b96      	ldr	r3, [pc, #600]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a02:	f023 0107 	bic.w	r1, r3, #7
 8003a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a0c:	4a92      	ldr	r2, [pc, #584]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a12:	e003      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a24:	f002 0304 	and.w	r3, r2, #4
 8003a28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a32:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a36:	460b      	mov	r3, r1
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	d044      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a44:	2b05      	cmp	r3, #5
 8003a46:	d825      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003a48:	a201      	add	r2, pc, #4	@ (adr r2, 8003a50 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4e:	bf00      	nop
 8003a50:	08003a9d 	.word	0x08003a9d
 8003a54:	08003a69 	.word	0x08003a69
 8003a58:	08003a7f 	.word	0x08003a7f
 8003a5c:	08003a9d 	.word	0x08003a9d
 8003a60:	08003a9d 	.word	0x08003a9d
 8003a64:	08003a9d 	.word	0x08003a9d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a6c:	3308      	adds	r3, #8
 8003a6e:	2101      	movs	r1, #1
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 ff01 	bl	8004878 <RCCEx_PLL2_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a7c:	e00f      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a82:	3328      	adds	r3, #40	@ 0x28
 8003a84:	2101      	movs	r1, #1
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 ffa8 	bl	80049dc <RCCEx_PLL3_Config>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a92:	e004      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a9a:	e000      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10b      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003aa6:	4b6c      	ldr	r3, [pc, #432]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aaa:	f023 0107 	bic.w	r1, r3, #7
 8003aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab6:	4a68      	ldr	r2, [pc, #416]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	6593      	str	r3, [r2, #88]	@ 0x58
 8003abc:	e003      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003abe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ac2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ace:	f002 0320 	and.w	r3, r2, #32
 8003ad2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003adc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	d055      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003aee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003af2:	d033      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003af8:	d82c      	bhi.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003afe:	d02f      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b04:	d826      	bhi.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003b06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b0a:	d02b      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003b0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b10:	d820      	bhi.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003b12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b16:	d012      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003b18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b1c:	d81a      	bhi.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d022      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003b22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b26:	d115      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b2c:	3308      	adds	r3, #8
 8003b2e:	2100      	movs	r1, #0
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 fea1 	bl	8004878 <RCCEx_PLL2_Config>
 8003b36:	4603      	mov	r3, r0
 8003b38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b3c:	e015      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b42:	3328      	adds	r3, #40	@ 0x28
 8003b44:	2102      	movs	r1, #2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 ff48 	bl	80049dc <RCCEx_PLL3_Config>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b52:	e00a      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b5a:	e006      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003b5c:	bf00      	nop
 8003b5e:	e004      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003b60:	bf00      	nop
 8003b62:	e002      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003b64:	bf00      	nop
 8003b66:	e000      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10b      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b72:	4b39      	ldr	r3, [pc, #228]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b76:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b82:	4a35      	ldr	r2, [pc, #212]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b84:	430b      	orrs	r3, r1
 8003b86:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b88:	e003      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003b9e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ba8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003bac:	460b      	mov	r3, r1
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	d058      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003bbe:	d033      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003bc0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003bc4:	d82c      	bhi.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003bc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bca:	d02f      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003bcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bd0:	d826      	bhi.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003bd2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bd6:	d02b      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003bd8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bdc:	d820      	bhi.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003bde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003be2:	d012      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003be4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003be8:	d81a      	bhi.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d022      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bf2:	d115      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 fe3b 	bl	8004878 <RCCEx_PLL2_Config>
 8003c02:	4603      	mov	r3, r0
 8003c04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003c08:	e015      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c0e:	3328      	adds	r3, #40	@ 0x28
 8003c10:	2102      	movs	r1, #2
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 fee2 	bl	80049dc <RCCEx_PLL3_Config>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003c1e:	e00a      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c26:	e006      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c28:	bf00      	nop
 8003c2a:	e004      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c2c:	bf00      	nop
 8003c2e:	e002      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c30:	bf00      	nop
 8003c32:	e000      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10e      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c3e:	4b06      	ldr	r3, [pc, #24]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c42:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c4e:	4a02      	ldr	r2, [pc, #8]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c50:	430b      	orrs	r3, r1
 8003c52:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c54:	e006      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003c56:	bf00      	nop
 8003c58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003c70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c74:	2300      	movs	r3, #0
 8003c76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c7a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4313      	orrs	r3, r2
 8003c82:	d055      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c8c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003c90:	d033      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003c92:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003c96:	d82c      	bhi.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003c98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c9c:	d02f      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003c9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ca2:	d826      	bhi.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003ca4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003ca8:	d02b      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003caa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003cae:	d820      	bhi.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003cb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cb4:	d012      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003cb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cba:	d81a      	bhi.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d022      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003cc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cc4:	d115      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cca:	3308      	adds	r3, #8
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fdd2 	bl	8004878 <RCCEx_PLL2_Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003cda:	e015      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ce0:	3328      	adds	r3, #40	@ 0x28
 8003ce2:	2102      	movs	r1, #2
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fe79 	bl	80049dc <RCCEx_PLL3_Config>
 8003cea:	4603      	mov	r3, r0
 8003cec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003cf0:	e00a      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003cf8:	e006      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003cfa:	bf00      	nop
 8003cfc:	e004      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003cfe:	bf00      	nop
 8003d00:	e002      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003d02:	bf00      	nop
 8003d04:	e000      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003d06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10b      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003d10:	4ba0      	ldr	r3, [pc, #640]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d14:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d20:	4a9c      	ldr	r2, [pc, #624]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d22:	430b      	orrs	r3, r1
 8003d24:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d26:	e003      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d38:	f002 0308 	and.w	r3, r2, #8
 8003d3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d40:	2300      	movs	r3, #0
 8003d42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003d46:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	d01e      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d5c:	d10c      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d62:	3328      	adds	r3, #40	@ 0x28
 8003d64:	2102      	movs	r1, #2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fe38 	bl	80049dc <RCCEx_PLL3_Config>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003d78:	4b86      	ldr	r3, [pc, #536]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d88:	4a82      	ldr	r2, [pc, #520]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	f002 0310 	and.w	r3, r2, #16
 8003d9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003da4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003da8:	460b      	mov	r3, r1
 8003daa:	4313      	orrs	r3, r2
 8003dac:	d01e      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dba:	d10c      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dc0:	3328      	adds	r3, #40	@ 0x28
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fe09 	bl	80049dc <RCCEx_PLL3_Config>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dd6:	4b6f      	ldr	r3, [pc, #444]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dda:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003de6:	4a6b      	ldr	r2, [pc, #428]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003de8:	430b      	orrs	r3, r1
 8003dea:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003df8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003dfe:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003e02:	460b      	mov	r3, r1
 8003e04:	4313      	orrs	r3, r2
 8003e06:	d03e      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003e10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e14:	d022      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003e16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e1a:	d81b      	bhi.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003e20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e24:	d00b      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003e26:	e015      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e2c:	3308      	adds	r3, #8
 8003e2e:	2100      	movs	r1, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 fd21 	bl	8004878 <RCCEx_PLL2_Config>
 8003e36:	4603      	mov	r3, r0
 8003e38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e3c:	e00f      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e42:	3328      	adds	r3, #40	@ 0x28
 8003e44:	2102      	movs	r1, #2
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fdc8 	bl	80049dc <RCCEx_PLL3_Config>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e52:	e004      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e5a:	e000      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003e5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10b      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e66:	4b4b      	ldr	r3, [pc, #300]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003e76:	4a47      	ldr	r2, [pc, #284]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e78:	430b      	orrs	r3, r1
 8003e7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e7c:	e003      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e82:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003e92:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e94:	2300      	movs	r3, #0
 8003e96:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e98:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	d03b      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eaa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003eae:	d01f      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003eb0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003eb4:	d818      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003eb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eba:	d003      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003ebc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ec0:	d007      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003ec2:	e011      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec4:	4b33      	ldr	r3, [pc, #204]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec8:	4a32      	ldr	r2, [pc, #200]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003eca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ece:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ed0:	e00f      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ed6:	3328      	adds	r3, #40	@ 0x28
 8003ed8:	2101      	movs	r1, #1
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fd7e 	bl	80049dc <RCCEx_PLL3_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ee6:	e004      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003eee:	e000      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ef2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10b      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003efa:	4b26      	ldr	r3, [pc, #152]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003efe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f0a:	4a22      	ldr	r2, [pc, #136]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f10:	e003      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f16:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f22:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003f26:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f28:	2300      	movs	r3, #0
 8003f2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f2c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003f30:	460b      	mov	r3, r1
 8003f32:	4313      	orrs	r3, r2
 8003f34:	d034      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f44:	d007      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003f46:	e011      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f48:	4b12      	ldr	r3, [pc, #72]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4c:	4a11      	ldr	r2, [pc, #68]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f54:	e00e      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f5a:	3308      	adds	r3, #8
 8003f5c:	2102      	movs	r1, #2
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fc8a 	bl	8004878 <RCCEx_PLL2_Config>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f6a:	e003      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10d      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003f7c:	4b05      	ldr	r3, [pc, #20]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f80:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f8a:	4a02      	ldr	r2, [pc, #8]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f90:	e006      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003f92:	bf00      	nop
 8003f94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003fac:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fae:	2300      	movs	r3, #0
 8003fb0:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fb2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	d00c      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fc0:	3328      	adds	r3, #40	@ 0x28
 8003fc2:	2102      	movs	r1, #2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 fd09 	bl	80049dc <RCCEx_PLL3_Config>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fde:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003fe2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fe8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003fec:	460b      	mov	r3, r1
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	d036      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ff6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ff8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ffc:	d018      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003ffe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004002:	d811      	bhi.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004008:	d014      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800400a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800400e:	d80b      	bhi.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004010:	2b00      	cmp	r3, #0
 8004012:	d011      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004018:	d106      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800401a:	4bb7      	ldr	r3, [pc, #732]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800401c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401e:	4ab6      	ldr	r2, [pc, #728]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004024:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004026:	e008      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800402e:	e004      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004030:	bf00      	nop
 8004032:	e002      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004034:	bf00      	nop
 8004036:	e000      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800403a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10a      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004042:	4bad      	ldr	r3, [pc, #692]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004046:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800404a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800404e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004050:	4aa9      	ldr	r2, [pc, #676]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004052:	430b      	orrs	r3, r1
 8004054:	6553      	str	r3, [r2, #84]	@ 0x54
 8004056:	e003      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004058:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800405c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004068:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800406c:	653b      	str	r3, [r7, #80]	@ 0x50
 800406e:	2300      	movs	r3, #0
 8004070:	657b      	str	r3, [r7, #84]	@ 0x54
 8004072:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004076:	460b      	mov	r3, r1
 8004078:	4313      	orrs	r3, r2
 800407a:	d009      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800407c:	4b9e      	ldr	r3, [pc, #632]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800407e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004080:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408a:	4a9b      	ldr	r2, [pc, #620]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800408c:	430b      	orrs	r3, r1
 800408e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004098:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800409c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800409e:	2300      	movs	r3, #0
 80040a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040a2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80040a6:	460b      	mov	r3, r1
 80040a8:	4313      	orrs	r3, r2
 80040aa:	d009      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040ac:	4b92      	ldr	r3, [pc, #584]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040b0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80040b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040ba:	4a8f      	ldr	r2, [pc, #572]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040bc:	430b      	orrs	r3, r1
 80040be:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80040c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80040cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80040ce:	2300      	movs	r3, #0
 80040d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80040d2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80040d6:	460b      	mov	r3, r1
 80040d8:	4313      	orrs	r3, r2
 80040da:	d00e      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040dc:	4b86      	ldr	r3, [pc, #536]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	4a85      	ldr	r2, [pc, #532]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80040e6:	6113      	str	r3, [r2, #16]
 80040e8:	4b83      	ldr	r3, [pc, #524]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040ea:	6919      	ldr	r1, [r3, #16]
 80040ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040f4:	4a80      	ldr	r2, [pc, #512]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040f6:	430b      	orrs	r3, r1
 80040f8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80040fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004102:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004106:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004108:	2300      	movs	r3, #0
 800410a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800410c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004110:	460b      	mov	r3, r1
 8004112:	4313      	orrs	r3, r2
 8004114:	d009      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004116:	4b78      	ldr	r3, [pc, #480]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800411a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800411e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004124:	4a74      	ldr	r2, [pc, #464]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004126:	430b      	orrs	r3, r1
 8004128:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800412a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004136:	633b      	str	r3, [r7, #48]	@ 0x30
 8004138:	2300      	movs	r3, #0
 800413a:	637b      	str	r3, [r7, #52]	@ 0x34
 800413c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004140:	460b      	mov	r3, r1
 8004142:	4313      	orrs	r3, r2
 8004144:	d00a      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004146:	4b6c      	ldr	r3, [pc, #432]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800414e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004156:	4a68      	ldr	r2, [pc, #416]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004158:	430b      	orrs	r3, r1
 800415a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800415c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004164:	2100      	movs	r1, #0
 8004166:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800416e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004172:	460b      	mov	r3, r1
 8004174:	4313      	orrs	r3, r2
 8004176:	d011      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800417c:	3308      	adds	r3, #8
 800417e:	2100      	movs	r1, #0
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fb79 	bl	8004878 <RCCEx_PLL2_Config>
 8004186:	4603      	mov	r3, r0
 8004188:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800418c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004194:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004198:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800419c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a4:	2100      	movs	r1, #0
 80041a6:	6239      	str	r1, [r7, #32]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80041b2:	460b      	mov	r3, r1
 80041b4:	4313      	orrs	r3, r2
 80041b6:	d011      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041bc:	3308      	adds	r3, #8
 80041be:	2101      	movs	r1, #1
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fb59 	bl	8004878 <RCCEx_PLL2_Config>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80041cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80041dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	2100      	movs	r1, #0
 80041e6:	61b9      	str	r1, [r7, #24]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	61fb      	str	r3, [r7, #28]
 80041ee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80041f2:	460b      	mov	r3, r1
 80041f4:	4313      	orrs	r3, r2
 80041f6:	d011      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041fc:	3308      	adds	r3, #8
 80041fe:	2102      	movs	r1, #2
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fb39 	bl	8004878 <RCCEx_PLL2_Config>
 8004206:	4603      	mov	r3, r0
 8004208:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800420c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004214:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004218:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800421c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004224:	2100      	movs	r1, #0
 8004226:	6139      	str	r1, [r7, #16]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004232:	460b      	mov	r3, r1
 8004234:	4313      	orrs	r3, r2
 8004236:	d011      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800423c:	3328      	adds	r3, #40	@ 0x28
 800423e:	2100      	movs	r1, #0
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fbcb 	bl	80049dc <RCCEx_PLL3_Config>
 8004246:	4603      	mov	r3, r0
 8004248:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800424c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004254:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004258:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800425c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	2100      	movs	r1, #0
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004272:	460b      	mov	r3, r1
 8004274:	4313      	orrs	r3, r2
 8004276:	d011      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800427c:	3328      	adds	r3, #40	@ 0x28
 800427e:	2101      	movs	r1, #1
 8004280:	4618      	mov	r0, r3
 8004282:	f000 fbab 	bl	80049dc <RCCEx_PLL3_Config>
 8004286:	4603      	mov	r3, r0
 8004288:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800428c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004294:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004298:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800429c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	2100      	movs	r1, #0
 80042a6:	6039      	str	r1, [r7, #0]
 80042a8:	f003 0320 	and.w	r3, r3, #32
 80042ac:	607b      	str	r3, [r7, #4]
 80042ae:	e9d7 1200 	ldrd	r1, r2, [r7]
 80042b2:	460b      	mov	r3, r1
 80042b4:	4313      	orrs	r3, r2
 80042b6:	d011      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042bc:	3328      	adds	r3, #40	@ 0x28
 80042be:	2102      	movs	r1, #2
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 fb8b 	bl	80049dc <RCCEx_PLL3_Config>
 80042c6:	4603      	mov	r3, r0
 80042c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80042cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80042dc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	e000      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80042f0:	46bd      	mov	sp, r7
 80042f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042f6:	bf00      	nop
 80042f8:	58024400 	.word	0x58024400

080042fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004300:	f7fe fe00 	bl	8002f04 <HAL_RCC_GetHCLKFreq>
 8004304:	4602      	mov	r2, r0
 8004306:	4b06      	ldr	r3, [pc, #24]	@ (8004320 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	091b      	lsrs	r3, r3, #4
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	4904      	ldr	r1, [pc, #16]	@ (8004324 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004312:	5ccb      	ldrb	r3, [r1, r3]
 8004314:	f003 031f 	and.w	r3, r3, #31
 8004318:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800431c:	4618      	mov	r0, r3
 800431e:	bd80      	pop	{r7, pc}
 8004320:	58024400 	.word	0x58024400
 8004324:	0800621c 	.word	0x0800621c

08004328 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004328:	b480      	push	{r7}
 800432a:	b089      	sub	sp, #36	@ 0x24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004330:	4ba1      	ldr	r3, [pc, #644]	@ (80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800433a:	4b9f      	ldr	r3, [pc, #636]	@ (80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800433c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433e:	0b1b      	lsrs	r3, r3, #12
 8004340:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004344:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004346:	4b9c      	ldr	r3, [pc, #624]	@ (80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434a:	091b      	lsrs	r3, r3, #4
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004352:	4b99      	ldr	r3, [pc, #612]	@ (80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004356:	08db      	lsrs	r3, r3, #3
 8004358:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	fb02 f303 	mul.w	r3, r2, r3
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 8111 	beq.w	8004598 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	2b02      	cmp	r3, #2
 800437a:	f000 8083 	beq.w	8004484 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b02      	cmp	r3, #2
 8004382:	f200 80a1 	bhi.w	80044c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d056      	beq.n	8004440 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004392:	e099      	b.n	80044c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004394:	4b88      	ldr	r3, [pc, #544]	@ (80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d02d      	beq.n	80043fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043a0:	4b85      	ldr	r3, [pc, #532]	@ (80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	08db      	lsrs	r3, r3, #3
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	4a84      	ldr	r2, [pc, #528]	@ (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80043ac:	fa22 f303 	lsr.w	r3, r2, r3
 80043b0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	ee07 3a90 	vmov	s15, r3
 80043b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ca:	4b7b      	ldr	r3, [pc, #492]	@ (80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043da:	ed97 6a03 	vldr	s12, [r7, #12]
 80043de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80045c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80043fa:	e087      	b.n	800450c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004406:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80045c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800440a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800440e:	4b6a      	ldr	r3, [pc, #424]	@ (80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800441e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004422:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80045c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800442a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800442e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800443e:	e065      	b.n	800450c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	ee07 3a90 	vmov	s15, r3
 8004446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80045c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800444e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004452:	4b59      	ldr	r3, [pc, #356]	@ (80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445a:	ee07 3a90 	vmov	s15, r3
 800445e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004462:	ed97 6a03 	vldr	s12, [r7, #12]
 8004466:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80045c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800446a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800446e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800447a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004482:	e043      	b.n	800450c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	ee07 3a90 	vmov	s15, r3
 800448a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80045cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004496:	4b48      	ldr	r3, [pc, #288]	@ (80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80045c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044c6:	e021      	b.n	800450c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	ee07 3a90 	vmov	s15, r3
 80044ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80045c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044da:	4b37      	ldr	r3, [pc, #220]	@ (80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e2:	ee07 3a90 	vmov	s15, r3
 80044e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80045c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800450a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800450c:	4b2a      	ldr	r3, [pc, #168]	@ (80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800450e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004510:	0a5b      	lsrs	r3, r3, #9
 8004512:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800451e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004522:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004526:	edd7 6a07 	vldr	s13, [r7, #28]
 800452a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800452e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004532:	ee17 2a90 	vmov	r2, s15
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800453a:	4b1f      	ldr	r3, [pc, #124]	@ (80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800453c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453e:	0c1b      	lsrs	r3, r3, #16
 8004540:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004544:	ee07 3a90 	vmov	s15, r3
 8004548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004550:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004554:	edd7 6a07 	vldr	s13, [r7, #28]
 8004558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800455c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004560:	ee17 2a90 	vmov	r2, s15
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004568:	4b13      	ldr	r3, [pc, #76]	@ (80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800456a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456c:	0e1b      	lsrs	r3, r3, #24
 800456e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004572:	ee07 3a90 	vmov	s15, r3
 8004576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800457e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004582:	edd7 6a07 	vldr	s13, [r7, #28]
 8004586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800458a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800458e:	ee17 2a90 	vmov	r2, s15
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004596:	e008      	b.n	80045aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	609a      	str	r2, [r3, #8]
}
 80045aa:	bf00      	nop
 80045ac:	3724      	adds	r7, #36	@ 0x24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	58024400 	.word	0x58024400
 80045bc:	03d09000 	.word	0x03d09000
 80045c0:	46000000 	.word	0x46000000
 80045c4:	4c742400 	.word	0x4c742400
 80045c8:	4a742400 	.word	0x4a742400
 80045cc:	4af42400 	.word	0x4af42400

080045d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b089      	sub	sp, #36	@ 0x24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045d8:	4ba1      	ldr	r3, [pc, #644]	@ (8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045dc:	f003 0303 	and.w	r3, r3, #3
 80045e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80045e2:	4b9f      	ldr	r3, [pc, #636]	@ (8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e6:	0d1b      	lsrs	r3, r3, #20
 80045e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80045ee:	4b9c      	ldr	r3, [pc, #624]	@ (8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f2:	0a1b      	lsrs	r3, r3, #8
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80045fa:	4b99      	ldr	r3, [pc, #612]	@ (8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fe:	08db      	lsrs	r3, r3, #3
 8004600:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	fb02 f303 	mul.w	r3, r2, r3
 800460a:	ee07 3a90 	vmov	s15, r3
 800460e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004612:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 8111 	beq.w	8004840 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	2b02      	cmp	r3, #2
 8004622:	f000 8083 	beq.w	800472c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	2b02      	cmp	r3, #2
 800462a:	f200 80a1 	bhi.w	8004770 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d056      	beq.n	80046e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800463a:	e099      	b.n	8004770 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800463c:	4b88      	ldr	r3, [pc, #544]	@ (8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0320 	and.w	r3, r3, #32
 8004644:	2b00      	cmp	r3, #0
 8004646:	d02d      	beq.n	80046a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004648:	4b85      	ldr	r3, [pc, #532]	@ (8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	08db      	lsrs	r3, r3, #3
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	4a84      	ldr	r2, [pc, #528]	@ (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004654:	fa22 f303 	lsr.w	r3, r2, r3
 8004658:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	ee07 3a90 	vmov	s15, r3
 8004660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800466e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004672:	4b7b      	ldr	r3, [pc, #492]	@ (8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004682:	ed97 6a03 	vldr	s12, [r7, #12]
 8004686:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800468a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800468e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800469a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800469e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80046a2:	e087      	b.n	80047b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	ee07 3a90 	vmov	s15, r3
 80046aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800486c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80046b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046b6:	4b6a      	ldr	r3, [pc, #424]	@ (8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046be:	ee07 3a90 	vmov	s15, r3
 80046c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046e6:	e065      	b.n	80047b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	ee07 3a90 	vmov	s15, r3
 80046ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004870 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80046f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046fa:	4b59      	ldr	r3, [pc, #356]	@ (8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800470a:	ed97 6a03 	vldr	s12, [r7, #12]
 800470e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800471a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800471e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800472a:	e043      	b.n	80047b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	ee07 3a90 	vmov	s15, r3
 8004732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004736:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004874 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800473a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800473e:	4b48      	ldr	r3, [pc, #288]	@ (8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004746:	ee07 3a90 	vmov	s15, r3
 800474a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800474e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004752:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800475a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800475e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800476a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800476e:	e021      	b.n	80047b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	ee07 3a90 	vmov	s15, r3
 8004776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004870 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800477e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004782:	4b37      	ldr	r3, [pc, #220]	@ (8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800478a:	ee07 3a90 	vmov	s15, r3
 800478e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004792:	ed97 6a03 	vldr	s12, [r7, #12]
 8004796:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800479a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800479e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80047b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b8:	0a5b      	lsrs	r3, r3, #9
 80047ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80047ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80047d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047da:	ee17 2a90 	vmov	r2, s15
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80047e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e6:	0c1b      	lsrs	r3, r3, #16
 80047e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047ec:	ee07 3a90 	vmov	s15, r3
 80047f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80047f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004808:	ee17 2a90 	vmov	r2, s15
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004810:	4b13      	ldr	r3, [pc, #76]	@ (8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004814:	0e1b      	lsrs	r3, r3, #24
 8004816:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004822:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004826:	ee37 7a87 	vadd.f32	s14, s15, s14
 800482a:	edd7 6a07 	vldr	s13, [r7, #28]
 800482e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004836:	ee17 2a90 	vmov	r2, s15
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800483e:	e008      	b.n	8004852 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	609a      	str	r2, [r3, #8]
}
 8004852:	bf00      	nop
 8004854:	3724      	adds	r7, #36	@ 0x24
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	58024400 	.word	0x58024400
 8004864:	03d09000 	.word	0x03d09000
 8004868:	46000000 	.word	0x46000000
 800486c:	4c742400 	.word	0x4c742400
 8004870:	4a742400 	.word	0x4a742400
 8004874:	4af42400 	.word	0x4af42400

08004878 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004886:	4b53      	ldr	r3, [pc, #332]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 8004888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	2b03      	cmp	r3, #3
 8004890:	d101      	bne.n	8004896 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e099      	b.n	80049ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004896:	4b4f      	ldr	r3, [pc, #316]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a4e      	ldr	r2, [pc, #312]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 800489c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a2:	f7fc fcf1 	bl	8001288 <HAL_GetTick>
 80048a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048a8:	e008      	b.n	80048bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80048aa:	f7fc fced 	bl	8001288 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e086      	b.n	80049ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048bc:	4b45      	ldr	r3, [pc, #276]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1f0      	bne.n	80048aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80048c8:	4b42      	ldr	r3, [pc, #264]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 80048ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048cc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	031b      	lsls	r3, r3, #12
 80048d6:	493f      	ldr	r1, [pc, #252]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	628b      	str	r3, [r1, #40]	@ 0x28
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	3b01      	subs	r3, #1
 80048e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	025b      	lsls	r3, r3, #9
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	041b      	lsls	r3, r3, #16
 80048fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	3b01      	subs	r3, #1
 8004906:	061b      	lsls	r3, r3, #24
 8004908:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800490c:	4931      	ldr	r1, [pc, #196]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 800490e:	4313      	orrs	r3, r2
 8004910:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004912:	4b30      	ldr	r3, [pc, #192]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 8004914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004916:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	492d      	ldr	r1, [pc, #180]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 8004920:	4313      	orrs	r3, r2
 8004922:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004924:	4b2b      	ldr	r3, [pc, #172]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 8004926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004928:	f023 0220 	bic.w	r2, r3, #32
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	4928      	ldr	r1, [pc, #160]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 8004932:	4313      	orrs	r3, r2
 8004934:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004936:	4b27      	ldr	r3, [pc, #156]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 8004938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493a:	4a26      	ldr	r2, [pc, #152]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 800493c:	f023 0310 	bic.w	r3, r3, #16
 8004940:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004942:	4b24      	ldr	r3, [pc, #144]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 8004944:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004946:	4b24      	ldr	r3, [pc, #144]	@ (80049d8 <RCCEx_PLL2_Config+0x160>)
 8004948:	4013      	ands	r3, r2
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	69d2      	ldr	r2, [r2, #28]
 800494e:	00d2      	lsls	r2, r2, #3
 8004950:	4920      	ldr	r1, [pc, #128]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 8004952:	4313      	orrs	r3, r2
 8004954:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004956:	4b1f      	ldr	r3, [pc, #124]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 8004958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495a:	4a1e      	ldr	r2, [pc, #120]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 800495c:	f043 0310 	orr.w	r3, r3, #16
 8004960:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d106      	bne.n	8004976 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004968:	4b1a      	ldr	r3, [pc, #104]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 800496a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496c:	4a19      	ldr	r2, [pc, #100]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 800496e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004972:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004974:	e00f      	b.n	8004996 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d106      	bne.n	800498a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800497c:	4b15      	ldr	r3, [pc, #84]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 800497e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004980:	4a14      	ldr	r2, [pc, #80]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 8004982:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004986:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004988:	e005      	b.n	8004996 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800498a:	4b12      	ldr	r3, [pc, #72]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 800498c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498e:	4a11      	ldr	r2, [pc, #68]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 8004990:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004994:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004996:	4b0f      	ldr	r3, [pc, #60]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a0e      	ldr	r2, [pc, #56]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 800499c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a2:	f7fc fc71 	bl	8001288 <HAL_GetTick>
 80049a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049a8:	e008      	b.n	80049bc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80049aa:	f7fc fc6d 	bl	8001288 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d901      	bls.n	80049bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e006      	b.n	80049ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049bc:	4b05      	ldr	r3, [pc, #20]	@ (80049d4 <RCCEx_PLL2_Config+0x15c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0f0      	beq.n	80049aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	58024400 	.word	0x58024400
 80049d8:	ffff0007 	.word	0xffff0007

080049dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049ea:	4b53      	ldr	r3, [pc, #332]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 80049ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d101      	bne.n	80049fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e099      	b.n	8004b2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80049fa:	4b4f      	ldr	r3, [pc, #316]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a4e      	ldr	r2, [pc, #312]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 8004a00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a06:	f7fc fc3f 	bl	8001288 <HAL_GetTick>
 8004a0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a0c:	e008      	b.n	8004a20 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004a0e:	f7fc fc3b 	bl	8001288 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e086      	b.n	8004b2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a20:	4b45      	ldr	r3, [pc, #276]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f0      	bne.n	8004a0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004a2c:	4b42      	ldr	r3, [pc, #264]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a30:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	051b      	lsls	r3, r3, #20
 8004a3a:	493f      	ldr	r1, [pc, #252]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	3b01      	subs	r3, #1
 8004a46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	025b      	lsls	r3, r3, #9
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	431a      	orrs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	041b      	lsls	r3, r3, #16
 8004a5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	061b      	lsls	r3, r3, #24
 8004a6c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004a70:	4931      	ldr	r1, [pc, #196]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004a76:	4b30      	ldr	r3, [pc, #192]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 8004a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	492d      	ldr	r1, [pc, #180]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004a88:	4b2b      	ldr	r3, [pc, #172]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 8004a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	4928      	ldr	r1, [pc, #160]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004a9a:	4b27      	ldr	r3, [pc, #156]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 8004a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9e:	4a26      	ldr	r2, [pc, #152]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 8004aa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004aa6:	4b24      	ldr	r3, [pc, #144]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 8004aa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004aaa:	4b24      	ldr	r3, [pc, #144]	@ (8004b3c <RCCEx_PLL3_Config+0x160>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	69d2      	ldr	r2, [r2, #28]
 8004ab2:	00d2      	lsls	r2, r2, #3
 8004ab4:	4920      	ldr	r1, [pc, #128]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004aba:	4b1f      	ldr	r3, [pc, #124]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 8004abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abe:	4a1e      	ldr	r2, [pc, #120]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 8004ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d106      	bne.n	8004ada <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004acc:	4b1a      	ldr	r3, [pc, #104]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 8004ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad0:	4a19      	ldr	r2, [pc, #100]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 8004ad2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ad6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ad8:	e00f      	b.n	8004afa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d106      	bne.n	8004aee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ae0:	4b15      	ldr	r3, [pc, #84]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 8004ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae4:	4a14      	ldr	r2, [pc, #80]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 8004ae6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004aea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004aec:	e005      	b.n	8004afa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004aee:	4b12      	ldr	r3, [pc, #72]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 8004af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af2:	4a11      	ldr	r2, [pc, #68]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 8004af4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004af8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004afa:	4b0f      	ldr	r3, [pc, #60]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a0e      	ldr	r2, [pc, #56]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 8004b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b06:	f7fc fbbf 	bl	8001288 <HAL_GetTick>
 8004b0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b0c:	e008      	b.n	8004b20 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b0e:	f7fc fbbb 	bl	8001288 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d901      	bls.n	8004b20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e006      	b.n	8004b2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b20:	4b05      	ldr	r3, [pc, #20]	@ (8004b38 <RCCEx_PLL3_Config+0x15c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0f0      	beq.n	8004b0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	58024400 	.word	0x58024400
 8004b3c:	ffff0007 	.word	0xffff0007

08004b40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e042      	b.n	8004bd8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d106      	bne.n	8004b6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7fc f909 	bl	8000d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2224      	movs	r2, #36	@ 0x24
 8004b6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0201 	bic.w	r2, r2, #1
 8004b80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 ffea 	bl	8005b64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f97b 	bl	8004e8c <UART_SetConfig>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e01b      	b.n	8004bd8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f001 f869 	bl	8005ca8 <UART_CheckIdleState>
 8004bd6:	4603      	mov	r3, r0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b08a      	sub	sp, #40	@ 0x28
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	4613      	mov	r3, r2
 8004bee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	d17b      	bne.n	8004cf2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <HAL_UART_Transmit+0x26>
 8004c00:	88fb      	ldrh	r3, [r7, #6]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e074      	b.n	8004cf4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2221      	movs	r2, #33	@ 0x21
 8004c16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c1a:	f7fc fb35 	bl	8001288 <HAL_GetTick>
 8004c1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	88fa      	ldrh	r2, [r7, #6]
 8004c24:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	88fa      	ldrh	r2, [r7, #6]
 8004c2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c38:	d108      	bne.n	8004c4c <HAL_UART_Transmit+0x6c>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d104      	bne.n	8004c4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	e003      	b.n	8004c54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c54:	e030      	b.n	8004cb8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2180      	movs	r1, #128	@ 0x80
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f001 f8cb 	bl	8005dfc <UART_WaitOnFlagUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e03d      	b.n	8004cf4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10b      	bne.n	8004c96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c8c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	3302      	adds	r3, #2
 8004c92:	61bb      	str	r3, [r7, #24]
 8004c94:	e007      	b.n	8004ca6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	781a      	ldrb	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1c8      	bne.n	8004c56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	2140      	movs	r1, #64	@ 0x40
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f001 f894 	bl	8005dfc <UART_WaitOnFlagUntilTimeout>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d005      	beq.n	8004ce6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e006      	b.n	8004cf4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	e000      	b.n	8004cf4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004cf2:	2302      	movs	r3, #2
  }
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3720      	adds	r7, #32
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08a      	sub	sp, #40	@ 0x28
 8004d00:	af02      	add	r7, sp, #8
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d12:	2b20      	cmp	r3, #32
 8004d14:	f040 80b5 	bne.w	8004e82 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <HAL_UART_Receive+0x28>
 8004d1e:	88fb      	ldrh	r3, [r7, #6]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e0ad      	b.n	8004e84 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2222      	movs	r2, #34	@ 0x22
 8004d34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d3e:	f7fc faa3 	bl	8001288 <HAL_GetTick>
 8004d42:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	88fa      	ldrh	r2, [r7, #6]
 8004d48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	88fa      	ldrh	r2, [r7, #6]
 8004d50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d5c:	d10e      	bne.n	8004d7c <HAL_UART_Receive+0x80>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d105      	bne.n	8004d72 <HAL_UART_Receive+0x76>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004d6c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004d70:	e02d      	b.n	8004dce <HAL_UART_Receive+0xd2>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	22ff      	movs	r2, #255	@ 0xff
 8004d76:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004d7a:	e028      	b.n	8004dce <HAL_UART_Receive+0xd2>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10d      	bne.n	8004da0 <HAL_UART_Receive+0xa4>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d104      	bne.n	8004d96 <HAL_UART_Receive+0x9a>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	22ff      	movs	r2, #255	@ 0xff
 8004d90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004d94:	e01b      	b.n	8004dce <HAL_UART_Receive+0xd2>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	227f      	movs	r2, #127	@ 0x7f
 8004d9a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004d9e:	e016      	b.n	8004dce <HAL_UART_Receive+0xd2>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004da8:	d10d      	bne.n	8004dc6 <HAL_UART_Receive+0xca>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d104      	bne.n	8004dbc <HAL_UART_Receive+0xc0>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	227f      	movs	r2, #127	@ 0x7f
 8004db6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004dba:	e008      	b.n	8004dce <HAL_UART_Receive+0xd2>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	223f      	movs	r2, #63	@ 0x3f
 8004dc0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004dc4:	e003      	b.n	8004dce <HAL_UART_Receive+0xd2>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004dd4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dde:	d108      	bne.n	8004df2 <HAL_UART_Receive+0xf6>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d104      	bne.n	8004df2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004de8:	2300      	movs	r3, #0
 8004dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	61bb      	str	r3, [r7, #24]
 8004df0:	e003      	b.n	8004dfa <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004dfa:	e036      	b.n	8004e6a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2200      	movs	r2, #0
 8004e04:	2120      	movs	r1, #32
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 fff8 	bl	8005dfc <UART_WaitOnFlagUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d005      	beq.n	8004e1e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e032      	b.n	8004e84 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10c      	bne.n	8004e3e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	8a7b      	ldrh	r3, [r7, #18]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	3302      	adds	r3, #2
 8004e3a:	61bb      	str	r3, [r7, #24]
 8004e3c:	e00c      	b.n	8004e58 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	8a7b      	ldrh	r3, [r7, #18]
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	3301      	adds	r3, #1
 8004e56:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1c2      	bne.n	8004dfc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	e000      	b.n	8004e84 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004e82:	2302      	movs	r3, #2
  }
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3720      	adds	r7, #32
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e90:	b092      	sub	sp, #72	@ 0x48
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	4bbe      	ldr	r3, [pc, #760]	@ (80051b4 <UART_SetConfig+0x328>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	6812      	ldr	r2, [r2, #0]
 8004ec2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4ab3      	ldr	r2, [pc, #716]	@ (80051b8 <UART_SetConfig+0x32c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d004      	beq.n	8004ef8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689a      	ldr	r2, [r3, #8]
 8004efe:	4baf      	ldr	r3, [pc, #700]	@ (80051bc <UART_SetConfig+0x330>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	6812      	ldr	r2, [r2, #0]
 8004f06:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f12:	f023 010f 	bic.w	r1, r3, #15
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4aa6      	ldr	r2, [pc, #664]	@ (80051c0 <UART_SetConfig+0x334>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d177      	bne.n	800501c <UART_SetConfig+0x190>
 8004f2c:	4ba5      	ldr	r3, [pc, #660]	@ (80051c4 <UART_SetConfig+0x338>)
 8004f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f34:	2b28      	cmp	r3, #40	@ 0x28
 8004f36:	d86d      	bhi.n	8005014 <UART_SetConfig+0x188>
 8004f38:	a201      	add	r2, pc, #4	@ (adr r2, 8004f40 <UART_SetConfig+0xb4>)
 8004f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3e:	bf00      	nop
 8004f40:	08004fe5 	.word	0x08004fe5
 8004f44:	08005015 	.word	0x08005015
 8004f48:	08005015 	.word	0x08005015
 8004f4c:	08005015 	.word	0x08005015
 8004f50:	08005015 	.word	0x08005015
 8004f54:	08005015 	.word	0x08005015
 8004f58:	08005015 	.word	0x08005015
 8004f5c:	08005015 	.word	0x08005015
 8004f60:	08004fed 	.word	0x08004fed
 8004f64:	08005015 	.word	0x08005015
 8004f68:	08005015 	.word	0x08005015
 8004f6c:	08005015 	.word	0x08005015
 8004f70:	08005015 	.word	0x08005015
 8004f74:	08005015 	.word	0x08005015
 8004f78:	08005015 	.word	0x08005015
 8004f7c:	08005015 	.word	0x08005015
 8004f80:	08004ff5 	.word	0x08004ff5
 8004f84:	08005015 	.word	0x08005015
 8004f88:	08005015 	.word	0x08005015
 8004f8c:	08005015 	.word	0x08005015
 8004f90:	08005015 	.word	0x08005015
 8004f94:	08005015 	.word	0x08005015
 8004f98:	08005015 	.word	0x08005015
 8004f9c:	08005015 	.word	0x08005015
 8004fa0:	08004ffd 	.word	0x08004ffd
 8004fa4:	08005015 	.word	0x08005015
 8004fa8:	08005015 	.word	0x08005015
 8004fac:	08005015 	.word	0x08005015
 8004fb0:	08005015 	.word	0x08005015
 8004fb4:	08005015 	.word	0x08005015
 8004fb8:	08005015 	.word	0x08005015
 8004fbc:	08005015 	.word	0x08005015
 8004fc0:	08005005 	.word	0x08005005
 8004fc4:	08005015 	.word	0x08005015
 8004fc8:	08005015 	.word	0x08005015
 8004fcc:	08005015 	.word	0x08005015
 8004fd0:	08005015 	.word	0x08005015
 8004fd4:	08005015 	.word	0x08005015
 8004fd8:	08005015 	.word	0x08005015
 8004fdc:	08005015 	.word	0x08005015
 8004fe0:	0800500d 	.word	0x0800500d
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fea:	e326      	b.n	800563a <UART_SetConfig+0x7ae>
 8004fec:	2304      	movs	r3, #4
 8004fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ff2:	e322      	b.n	800563a <UART_SetConfig+0x7ae>
 8004ff4:	2308      	movs	r3, #8
 8004ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ffa:	e31e      	b.n	800563a <UART_SetConfig+0x7ae>
 8004ffc:	2310      	movs	r3, #16
 8004ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005002:	e31a      	b.n	800563a <UART_SetConfig+0x7ae>
 8005004:	2320      	movs	r3, #32
 8005006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800500a:	e316      	b.n	800563a <UART_SetConfig+0x7ae>
 800500c:	2340      	movs	r3, #64	@ 0x40
 800500e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005012:	e312      	b.n	800563a <UART_SetConfig+0x7ae>
 8005014:	2380      	movs	r3, #128	@ 0x80
 8005016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800501a:	e30e      	b.n	800563a <UART_SetConfig+0x7ae>
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a69      	ldr	r2, [pc, #420]	@ (80051c8 <UART_SetConfig+0x33c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d130      	bne.n	8005088 <UART_SetConfig+0x1fc>
 8005026:	4b67      	ldr	r3, [pc, #412]	@ (80051c4 <UART_SetConfig+0x338>)
 8005028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	2b05      	cmp	r3, #5
 8005030:	d826      	bhi.n	8005080 <UART_SetConfig+0x1f4>
 8005032:	a201      	add	r2, pc, #4	@ (adr r2, 8005038 <UART_SetConfig+0x1ac>)
 8005034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005038:	08005051 	.word	0x08005051
 800503c:	08005059 	.word	0x08005059
 8005040:	08005061 	.word	0x08005061
 8005044:	08005069 	.word	0x08005069
 8005048:	08005071 	.word	0x08005071
 800504c:	08005079 	.word	0x08005079
 8005050:	2300      	movs	r3, #0
 8005052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005056:	e2f0      	b.n	800563a <UART_SetConfig+0x7ae>
 8005058:	2304      	movs	r3, #4
 800505a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800505e:	e2ec      	b.n	800563a <UART_SetConfig+0x7ae>
 8005060:	2308      	movs	r3, #8
 8005062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005066:	e2e8      	b.n	800563a <UART_SetConfig+0x7ae>
 8005068:	2310      	movs	r3, #16
 800506a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800506e:	e2e4      	b.n	800563a <UART_SetConfig+0x7ae>
 8005070:	2320      	movs	r3, #32
 8005072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005076:	e2e0      	b.n	800563a <UART_SetConfig+0x7ae>
 8005078:	2340      	movs	r3, #64	@ 0x40
 800507a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800507e:	e2dc      	b.n	800563a <UART_SetConfig+0x7ae>
 8005080:	2380      	movs	r3, #128	@ 0x80
 8005082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005086:	e2d8      	b.n	800563a <UART_SetConfig+0x7ae>
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a4f      	ldr	r2, [pc, #316]	@ (80051cc <UART_SetConfig+0x340>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d130      	bne.n	80050f4 <UART_SetConfig+0x268>
 8005092:	4b4c      	ldr	r3, [pc, #304]	@ (80051c4 <UART_SetConfig+0x338>)
 8005094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	2b05      	cmp	r3, #5
 800509c:	d826      	bhi.n	80050ec <UART_SetConfig+0x260>
 800509e:	a201      	add	r2, pc, #4	@ (adr r2, 80050a4 <UART_SetConfig+0x218>)
 80050a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a4:	080050bd 	.word	0x080050bd
 80050a8:	080050c5 	.word	0x080050c5
 80050ac:	080050cd 	.word	0x080050cd
 80050b0:	080050d5 	.word	0x080050d5
 80050b4:	080050dd 	.word	0x080050dd
 80050b8:	080050e5 	.word	0x080050e5
 80050bc:	2300      	movs	r3, #0
 80050be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050c2:	e2ba      	b.n	800563a <UART_SetConfig+0x7ae>
 80050c4:	2304      	movs	r3, #4
 80050c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ca:	e2b6      	b.n	800563a <UART_SetConfig+0x7ae>
 80050cc:	2308      	movs	r3, #8
 80050ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050d2:	e2b2      	b.n	800563a <UART_SetConfig+0x7ae>
 80050d4:	2310      	movs	r3, #16
 80050d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050da:	e2ae      	b.n	800563a <UART_SetConfig+0x7ae>
 80050dc:	2320      	movs	r3, #32
 80050de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050e2:	e2aa      	b.n	800563a <UART_SetConfig+0x7ae>
 80050e4:	2340      	movs	r3, #64	@ 0x40
 80050e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ea:	e2a6      	b.n	800563a <UART_SetConfig+0x7ae>
 80050ec:	2380      	movs	r3, #128	@ 0x80
 80050ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050f2:	e2a2      	b.n	800563a <UART_SetConfig+0x7ae>
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a35      	ldr	r2, [pc, #212]	@ (80051d0 <UART_SetConfig+0x344>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d130      	bne.n	8005160 <UART_SetConfig+0x2d4>
 80050fe:	4b31      	ldr	r3, [pc, #196]	@ (80051c4 <UART_SetConfig+0x338>)
 8005100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	2b05      	cmp	r3, #5
 8005108:	d826      	bhi.n	8005158 <UART_SetConfig+0x2cc>
 800510a:	a201      	add	r2, pc, #4	@ (adr r2, 8005110 <UART_SetConfig+0x284>)
 800510c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005110:	08005129 	.word	0x08005129
 8005114:	08005131 	.word	0x08005131
 8005118:	08005139 	.word	0x08005139
 800511c:	08005141 	.word	0x08005141
 8005120:	08005149 	.word	0x08005149
 8005124:	08005151 	.word	0x08005151
 8005128:	2300      	movs	r3, #0
 800512a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800512e:	e284      	b.n	800563a <UART_SetConfig+0x7ae>
 8005130:	2304      	movs	r3, #4
 8005132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005136:	e280      	b.n	800563a <UART_SetConfig+0x7ae>
 8005138:	2308      	movs	r3, #8
 800513a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800513e:	e27c      	b.n	800563a <UART_SetConfig+0x7ae>
 8005140:	2310      	movs	r3, #16
 8005142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005146:	e278      	b.n	800563a <UART_SetConfig+0x7ae>
 8005148:	2320      	movs	r3, #32
 800514a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800514e:	e274      	b.n	800563a <UART_SetConfig+0x7ae>
 8005150:	2340      	movs	r3, #64	@ 0x40
 8005152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005156:	e270      	b.n	800563a <UART_SetConfig+0x7ae>
 8005158:	2380      	movs	r3, #128	@ 0x80
 800515a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800515e:	e26c      	b.n	800563a <UART_SetConfig+0x7ae>
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a1b      	ldr	r2, [pc, #108]	@ (80051d4 <UART_SetConfig+0x348>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d142      	bne.n	80051f0 <UART_SetConfig+0x364>
 800516a:	4b16      	ldr	r3, [pc, #88]	@ (80051c4 <UART_SetConfig+0x338>)
 800516c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800516e:	f003 0307 	and.w	r3, r3, #7
 8005172:	2b05      	cmp	r3, #5
 8005174:	d838      	bhi.n	80051e8 <UART_SetConfig+0x35c>
 8005176:	a201      	add	r2, pc, #4	@ (adr r2, 800517c <UART_SetConfig+0x2f0>)
 8005178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517c:	08005195 	.word	0x08005195
 8005180:	0800519d 	.word	0x0800519d
 8005184:	080051a5 	.word	0x080051a5
 8005188:	080051ad 	.word	0x080051ad
 800518c:	080051d9 	.word	0x080051d9
 8005190:	080051e1 	.word	0x080051e1
 8005194:	2300      	movs	r3, #0
 8005196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800519a:	e24e      	b.n	800563a <UART_SetConfig+0x7ae>
 800519c:	2304      	movs	r3, #4
 800519e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051a2:	e24a      	b.n	800563a <UART_SetConfig+0x7ae>
 80051a4:	2308      	movs	r3, #8
 80051a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051aa:	e246      	b.n	800563a <UART_SetConfig+0x7ae>
 80051ac:	2310      	movs	r3, #16
 80051ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051b2:	e242      	b.n	800563a <UART_SetConfig+0x7ae>
 80051b4:	cfff69f3 	.word	0xcfff69f3
 80051b8:	58000c00 	.word	0x58000c00
 80051bc:	11fff4ff 	.word	0x11fff4ff
 80051c0:	40011000 	.word	0x40011000
 80051c4:	58024400 	.word	0x58024400
 80051c8:	40004400 	.word	0x40004400
 80051cc:	40004800 	.word	0x40004800
 80051d0:	40004c00 	.word	0x40004c00
 80051d4:	40005000 	.word	0x40005000
 80051d8:	2320      	movs	r3, #32
 80051da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051de:	e22c      	b.n	800563a <UART_SetConfig+0x7ae>
 80051e0:	2340      	movs	r3, #64	@ 0x40
 80051e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051e6:	e228      	b.n	800563a <UART_SetConfig+0x7ae>
 80051e8:	2380      	movs	r3, #128	@ 0x80
 80051ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ee:	e224      	b.n	800563a <UART_SetConfig+0x7ae>
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4ab1      	ldr	r2, [pc, #708]	@ (80054bc <UART_SetConfig+0x630>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d176      	bne.n	80052e8 <UART_SetConfig+0x45c>
 80051fa:	4bb1      	ldr	r3, [pc, #708]	@ (80054c0 <UART_SetConfig+0x634>)
 80051fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005202:	2b28      	cmp	r3, #40	@ 0x28
 8005204:	d86c      	bhi.n	80052e0 <UART_SetConfig+0x454>
 8005206:	a201      	add	r2, pc, #4	@ (adr r2, 800520c <UART_SetConfig+0x380>)
 8005208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520c:	080052b1 	.word	0x080052b1
 8005210:	080052e1 	.word	0x080052e1
 8005214:	080052e1 	.word	0x080052e1
 8005218:	080052e1 	.word	0x080052e1
 800521c:	080052e1 	.word	0x080052e1
 8005220:	080052e1 	.word	0x080052e1
 8005224:	080052e1 	.word	0x080052e1
 8005228:	080052e1 	.word	0x080052e1
 800522c:	080052b9 	.word	0x080052b9
 8005230:	080052e1 	.word	0x080052e1
 8005234:	080052e1 	.word	0x080052e1
 8005238:	080052e1 	.word	0x080052e1
 800523c:	080052e1 	.word	0x080052e1
 8005240:	080052e1 	.word	0x080052e1
 8005244:	080052e1 	.word	0x080052e1
 8005248:	080052e1 	.word	0x080052e1
 800524c:	080052c1 	.word	0x080052c1
 8005250:	080052e1 	.word	0x080052e1
 8005254:	080052e1 	.word	0x080052e1
 8005258:	080052e1 	.word	0x080052e1
 800525c:	080052e1 	.word	0x080052e1
 8005260:	080052e1 	.word	0x080052e1
 8005264:	080052e1 	.word	0x080052e1
 8005268:	080052e1 	.word	0x080052e1
 800526c:	080052c9 	.word	0x080052c9
 8005270:	080052e1 	.word	0x080052e1
 8005274:	080052e1 	.word	0x080052e1
 8005278:	080052e1 	.word	0x080052e1
 800527c:	080052e1 	.word	0x080052e1
 8005280:	080052e1 	.word	0x080052e1
 8005284:	080052e1 	.word	0x080052e1
 8005288:	080052e1 	.word	0x080052e1
 800528c:	080052d1 	.word	0x080052d1
 8005290:	080052e1 	.word	0x080052e1
 8005294:	080052e1 	.word	0x080052e1
 8005298:	080052e1 	.word	0x080052e1
 800529c:	080052e1 	.word	0x080052e1
 80052a0:	080052e1 	.word	0x080052e1
 80052a4:	080052e1 	.word	0x080052e1
 80052a8:	080052e1 	.word	0x080052e1
 80052ac:	080052d9 	.word	0x080052d9
 80052b0:	2301      	movs	r3, #1
 80052b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052b6:	e1c0      	b.n	800563a <UART_SetConfig+0x7ae>
 80052b8:	2304      	movs	r3, #4
 80052ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052be:	e1bc      	b.n	800563a <UART_SetConfig+0x7ae>
 80052c0:	2308      	movs	r3, #8
 80052c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052c6:	e1b8      	b.n	800563a <UART_SetConfig+0x7ae>
 80052c8:	2310      	movs	r3, #16
 80052ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ce:	e1b4      	b.n	800563a <UART_SetConfig+0x7ae>
 80052d0:	2320      	movs	r3, #32
 80052d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052d6:	e1b0      	b.n	800563a <UART_SetConfig+0x7ae>
 80052d8:	2340      	movs	r3, #64	@ 0x40
 80052da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052de:	e1ac      	b.n	800563a <UART_SetConfig+0x7ae>
 80052e0:	2380      	movs	r3, #128	@ 0x80
 80052e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052e6:	e1a8      	b.n	800563a <UART_SetConfig+0x7ae>
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a75      	ldr	r2, [pc, #468]	@ (80054c4 <UART_SetConfig+0x638>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d130      	bne.n	8005354 <UART_SetConfig+0x4c8>
 80052f2:	4b73      	ldr	r3, [pc, #460]	@ (80054c0 <UART_SetConfig+0x634>)
 80052f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	2b05      	cmp	r3, #5
 80052fc:	d826      	bhi.n	800534c <UART_SetConfig+0x4c0>
 80052fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005304 <UART_SetConfig+0x478>)
 8005300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005304:	0800531d 	.word	0x0800531d
 8005308:	08005325 	.word	0x08005325
 800530c:	0800532d 	.word	0x0800532d
 8005310:	08005335 	.word	0x08005335
 8005314:	0800533d 	.word	0x0800533d
 8005318:	08005345 	.word	0x08005345
 800531c:	2300      	movs	r3, #0
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005322:	e18a      	b.n	800563a <UART_SetConfig+0x7ae>
 8005324:	2304      	movs	r3, #4
 8005326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532a:	e186      	b.n	800563a <UART_SetConfig+0x7ae>
 800532c:	2308      	movs	r3, #8
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005332:	e182      	b.n	800563a <UART_SetConfig+0x7ae>
 8005334:	2310      	movs	r3, #16
 8005336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533a:	e17e      	b.n	800563a <UART_SetConfig+0x7ae>
 800533c:	2320      	movs	r3, #32
 800533e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005342:	e17a      	b.n	800563a <UART_SetConfig+0x7ae>
 8005344:	2340      	movs	r3, #64	@ 0x40
 8005346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800534a:	e176      	b.n	800563a <UART_SetConfig+0x7ae>
 800534c:	2380      	movs	r3, #128	@ 0x80
 800534e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005352:	e172      	b.n	800563a <UART_SetConfig+0x7ae>
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a5b      	ldr	r2, [pc, #364]	@ (80054c8 <UART_SetConfig+0x63c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d130      	bne.n	80053c0 <UART_SetConfig+0x534>
 800535e:	4b58      	ldr	r3, [pc, #352]	@ (80054c0 <UART_SetConfig+0x634>)
 8005360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	2b05      	cmp	r3, #5
 8005368:	d826      	bhi.n	80053b8 <UART_SetConfig+0x52c>
 800536a:	a201      	add	r2, pc, #4	@ (adr r2, 8005370 <UART_SetConfig+0x4e4>)
 800536c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005370:	08005389 	.word	0x08005389
 8005374:	08005391 	.word	0x08005391
 8005378:	08005399 	.word	0x08005399
 800537c:	080053a1 	.word	0x080053a1
 8005380:	080053a9 	.word	0x080053a9
 8005384:	080053b1 	.word	0x080053b1
 8005388:	2300      	movs	r3, #0
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800538e:	e154      	b.n	800563a <UART_SetConfig+0x7ae>
 8005390:	2304      	movs	r3, #4
 8005392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005396:	e150      	b.n	800563a <UART_SetConfig+0x7ae>
 8005398:	2308      	movs	r3, #8
 800539a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539e:	e14c      	b.n	800563a <UART_SetConfig+0x7ae>
 80053a0:	2310      	movs	r3, #16
 80053a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a6:	e148      	b.n	800563a <UART_SetConfig+0x7ae>
 80053a8:	2320      	movs	r3, #32
 80053aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ae:	e144      	b.n	800563a <UART_SetConfig+0x7ae>
 80053b0:	2340      	movs	r3, #64	@ 0x40
 80053b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b6:	e140      	b.n	800563a <UART_SetConfig+0x7ae>
 80053b8:	2380      	movs	r3, #128	@ 0x80
 80053ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053be:	e13c      	b.n	800563a <UART_SetConfig+0x7ae>
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a41      	ldr	r2, [pc, #260]	@ (80054cc <UART_SetConfig+0x640>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	f040 8082 	bne.w	80054d0 <UART_SetConfig+0x644>
 80053cc:	4b3c      	ldr	r3, [pc, #240]	@ (80054c0 <UART_SetConfig+0x634>)
 80053ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053d4:	2b28      	cmp	r3, #40	@ 0x28
 80053d6:	d86d      	bhi.n	80054b4 <UART_SetConfig+0x628>
 80053d8:	a201      	add	r2, pc, #4	@ (adr r2, 80053e0 <UART_SetConfig+0x554>)
 80053da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053de:	bf00      	nop
 80053e0:	08005485 	.word	0x08005485
 80053e4:	080054b5 	.word	0x080054b5
 80053e8:	080054b5 	.word	0x080054b5
 80053ec:	080054b5 	.word	0x080054b5
 80053f0:	080054b5 	.word	0x080054b5
 80053f4:	080054b5 	.word	0x080054b5
 80053f8:	080054b5 	.word	0x080054b5
 80053fc:	080054b5 	.word	0x080054b5
 8005400:	0800548d 	.word	0x0800548d
 8005404:	080054b5 	.word	0x080054b5
 8005408:	080054b5 	.word	0x080054b5
 800540c:	080054b5 	.word	0x080054b5
 8005410:	080054b5 	.word	0x080054b5
 8005414:	080054b5 	.word	0x080054b5
 8005418:	080054b5 	.word	0x080054b5
 800541c:	080054b5 	.word	0x080054b5
 8005420:	08005495 	.word	0x08005495
 8005424:	080054b5 	.word	0x080054b5
 8005428:	080054b5 	.word	0x080054b5
 800542c:	080054b5 	.word	0x080054b5
 8005430:	080054b5 	.word	0x080054b5
 8005434:	080054b5 	.word	0x080054b5
 8005438:	080054b5 	.word	0x080054b5
 800543c:	080054b5 	.word	0x080054b5
 8005440:	0800549d 	.word	0x0800549d
 8005444:	080054b5 	.word	0x080054b5
 8005448:	080054b5 	.word	0x080054b5
 800544c:	080054b5 	.word	0x080054b5
 8005450:	080054b5 	.word	0x080054b5
 8005454:	080054b5 	.word	0x080054b5
 8005458:	080054b5 	.word	0x080054b5
 800545c:	080054b5 	.word	0x080054b5
 8005460:	080054a5 	.word	0x080054a5
 8005464:	080054b5 	.word	0x080054b5
 8005468:	080054b5 	.word	0x080054b5
 800546c:	080054b5 	.word	0x080054b5
 8005470:	080054b5 	.word	0x080054b5
 8005474:	080054b5 	.word	0x080054b5
 8005478:	080054b5 	.word	0x080054b5
 800547c:	080054b5 	.word	0x080054b5
 8005480:	080054ad 	.word	0x080054ad
 8005484:	2301      	movs	r3, #1
 8005486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800548a:	e0d6      	b.n	800563a <UART_SetConfig+0x7ae>
 800548c:	2304      	movs	r3, #4
 800548e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005492:	e0d2      	b.n	800563a <UART_SetConfig+0x7ae>
 8005494:	2308      	movs	r3, #8
 8005496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800549a:	e0ce      	b.n	800563a <UART_SetConfig+0x7ae>
 800549c:	2310      	movs	r3, #16
 800549e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054a2:	e0ca      	b.n	800563a <UART_SetConfig+0x7ae>
 80054a4:	2320      	movs	r3, #32
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054aa:	e0c6      	b.n	800563a <UART_SetConfig+0x7ae>
 80054ac:	2340      	movs	r3, #64	@ 0x40
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054b2:	e0c2      	b.n	800563a <UART_SetConfig+0x7ae>
 80054b4:	2380      	movs	r3, #128	@ 0x80
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ba:	e0be      	b.n	800563a <UART_SetConfig+0x7ae>
 80054bc:	40011400 	.word	0x40011400
 80054c0:	58024400 	.word	0x58024400
 80054c4:	40007800 	.word	0x40007800
 80054c8:	40007c00 	.word	0x40007c00
 80054cc:	40011800 	.word	0x40011800
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4aad      	ldr	r2, [pc, #692]	@ (800578c <UART_SetConfig+0x900>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d176      	bne.n	80055c8 <UART_SetConfig+0x73c>
 80054da:	4bad      	ldr	r3, [pc, #692]	@ (8005790 <UART_SetConfig+0x904>)
 80054dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054e2:	2b28      	cmp	r3, #40	@ 0x28
 80054e4:	d86c      	bhi.n	80055c0 <UART_SetConfig+0x734>
 80054e6:	a201      	add	r2, pc, #4	@ (adr r2, 80054ec <UART_SetConfig+0x660>)
 80054e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ec:	08005591 	.word	0x08005591
 80054f0:	080055c1 	.word	0x080055c1
 80054f4:	080055c1 	.word	0x080055c1
 80054f8:	080055c1 	.word	0x080055c1
 80054fc:	080055c1 	.word	0x080055c1
 8005500:	080055c1 	.word	0x080055c1
 8005504:	080055c1 	.word	0x080055c1
 8005508:	080055c1 	.word	0x080055c1
 800550c:	08005599 	.word	0x08005599
 8005510:	080055c1 	.word	0x080055c1
 8005514:	080055c1 	.word	0x080055c1
 8005518:	080055c1 	.word	0x080055c1
 800551c:	080055c1 	.word	0x080055c1
 8005520:	080055c1 	.word	0x080055c1
 8005524:	080055c1 	.word	0x080055c1
 8005528:	080055c1 	.word	0x080055c1
 800552c:	080055a1 	.word	0x080055a1
 8005530:	080055c1 	.word	0x080055c1
 8005534:	080055c1 	.word	0x080055c1
 8005538:	080055c1 	.word	0x080055c1
 800553c:	080055c1 	.word	0x080055c1
 8005540:	080055c1 	.word	0x080055c1
 8005544:	080055c1 	.word	0x080055c1
 8005548:	080055c1 	.word	0x080055c1
 800554c:	080055a9 	.word	0x080055a9
 8005550:	080055c1 	.word	0x080055c1
 8005554:	080055c1 	.word	0x080055c1
 8005558:	080055c1 	.word	0x080055c1
 800555c:	080055c1 	.word	0x080055c1
 8005560:	080055c1 	.word	0x080055c1
 8005564:	080055c1 	.word	0x080055c1
 8005568:	080055c1 	.word	0x080055c1
 800556c:	080055b1 	.word	0x080055b1
 8005570:	080055c1 	.word	0x080055c1
 8005574:	080055c1 	.word	0x080055c1
 8005578:	080055c1 	.word	0x080055c1
 800557c:	080055c1 	.word	0x080055c1
 8005580:	080055c1 	.word	0x080055c1
 8005584:	080055c1 	.word	0x080055c1
 8005588:	080055c1 	.word	0x080055c1
 800558c:	080055b9 	.word	0x080055b9
 8005590:	2301      	movs	r3, #1
 8005592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005596:	e050      	b.n	800563a <UART_SetConfig+0x7ae>
 8005598:	2304      	movs	r3, #4
 800559a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800559e:	e04c      	b.n	800563a <UART_SetConfig+0x7ae>
 80055a0:	2308      	movs	r3, #8
 80055a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055a6:	e048      	b.n	800563a <UART_SetConfig+0x7ae>
 80055a8:	2310      	movs	r3, #16
 80055aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ae:	e044      	b.n	800563a <UART_SetConfig+0x7ae>
 80055b0:	2320      	movs	r3, #32
 80055b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055b6:	e040      	b.n	800563a <UART_SetConfig+0x7ae>
 80055b8:	2340      	movs	r3, #64	@ 0x40
 80055ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055be:	e03c      	b.n	800563a <UART_SetConfig+0x7ae>
 80055c0:	2380      	movs	r3, #128	@ 0x80
 80055c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055c6:	e038      	b.n	800563a <UART_SetConfig+0x7ae>
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a71      	ldr	r2, [pc, #452]	@ (8005794 <UART_SetConfig+0x908>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d130      	bne.n	8005634 <UART_SetConfig+0x7a8>
 80055d2:	4b6f      	ldr	r3, [pc, #444]	@ (8005790 <UART_SetConfig+0x904>)
 80055d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	2b05      	cmp	r3, #5
 80055dc:	d826      	bhi.n	800562c <UART_SetConfig+0x7a0>
 80055de:	a201      	add	r2, pc, #4	@ (adr r2, 80055e4 <UART_SetConfig+0x758>)
 80055e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e4:	080055fd 	.word	0x080055fd
 80055e8:	08005605 	.word	0x08005605
 80055ec:	0800560d 	.word	0x0800560d
 80055f0:	08005615 	.word	0x08005615
 80055f4:	0800561d 	.word	0x0800561d
 80055f8:	08005625 	.word	0x08005625
 80055fc:	2302      	movs	r3, #2
 80055fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005602:	e01a      	b.n	800563a <UART_SetConfig+0x7ae>
 8005604:	2304      	movs	r3, #4
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800560a:	e016      	b.n	800563a <UART_SetConfig+0x7ae>
 800560c:	2308      	movs	r3, #8
 800560e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005612:	e012      	b.n	800563a <UART_SetConfig+0x7ae>
 8005614:	2310      	movs	r3, #16
 8005616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800561a:	e00e      	b.n	800563a <UART_SetConfig+0x7ae>
 800561c:	2320      	movs	r3, #32
 800561e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005622:	e00a      	b.n	800563a <UART_SetConfig+0x7ae>
 8005624:	2340      	movs	r3, #64	@ 0x40
 8005626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800562a:	e006      	b.n	800563a <UART_SetConfig+0x7ae>
 800562c:	2380      	movs	r3, #128	@ 0x80
 800562e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005632:	e002      	b.n	800563a <UART_SetConfig+0x7ae>
 8005634:	2380      	movs	r3, #128	@ 0x80
 8005636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a55      	ldr	r2, [pc, #340]	@ (8005794 <UART_SetConfig+0x908>)
 8005640:	4293      	cmp	r3, r2
 8005642:	f040 80f8 	bne.w	8005836 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005646:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800564a:	2b20      	cmp	r3, #32
 800564c:	dc46      	bgt.n	80056dc <UART_SetConfig+0x850>
 800564e:	2b02      	cmp	r3, #2
 8005650:	db75      	blt.n	800573e <UART_SetConfig+0x8b2>
 8005652:	3b02      	subs	r3, #2
 8005654:	2b1e      	cmp	r3, #30
 8005656:	d872      	bhi.n	800573e <UART_SetConfig+0x8b2>
 8005658:	a201      	add	r2, pc, #4	@ (adr r2, 8005660 <UART_SetConfig+0x7d4>)
 800565a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565e:	bf00      	nop
 8005660:	080056e3 	.word	0x080056e3
 8005664:	0800573f 	.word	0x0800573f
 8005668:	080056eb 	.word	0x080056eb
 800566c:	0800573f 	.word	0x0800573f
 8005670:	0800573f 	.word	0x0800573f
 8005674:	0800573f 	.word	0x0800573f
 8005678:	080056fb 	.word	0x080056fb
 800567c:	0800573f 	.word	0x0800573f
 8005680:	0800573f 	.word	0x0800573f
 8005684:	0800573f 	.word	0x0800573f
 8005688:	0800573f 	.word	0x0800573f
 800568c:	0800573f 	.word	0x0800573f
 8005690:	0800573f 	.word	0x0800573f
 8005694:	0800573f 	.word	0x0800573f
 8005698:	0800570b 	.word	0x0800570b
 800569c:	0800573f 	.word	0x0800573f
 80056a0:	0800573f 	.word	0x0800573f
 80056a4:	0800573f 	.word	0x0800573f
 80056a8:	0800573f 	.word	0x0800573f
 80056ac:	0800573f 	.word	0x0800573f
 80056b0:	0800573f 	.word	0x0800573f
 80056b4:	0800573f 	.word	0x0800573f
 80056b8:	0800573f 	.word	0x0800573f
 80056bc:	0800573f 	.word	0x0800573f
 80056c0:	0800573f 	.word	0x0800573f
 80056c4:	0800573f 	.word	0x0800573f
 80056c8:	0800573f 	.word	0x0800573f
 80056cc:	0800573f 	.word	0x0800573f
 80056d0:	0800573f 	.word	0x0800573f
 80056d4:	0800573f 	.word	0x0800573f
 80056d8:	08005731 	.word	0x08005731
 80056dc:	2b40      	cmp	r3, #64	@ 0x40
 80056de:	d02a      	beq.n	8005736 <UART_SetConfig+0x8aa>
 80056e0:	e02d      	b.n	800573e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80056e2:	f7fe fe0b 	bl	80042fc <HAL_RCCEx_GetD3PCLK1Freq>
 80056e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80056e8:	e02f      	b.n	800574a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fe fe1a 	bl	8004328 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80056f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056f8:	e027      	b.n	800574a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056fa:	f107 0318 	add.w	r3, r7, #24
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fe ff66 	bl	80045d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005708:	e01f      	b.n	800574a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800570a:	4b21      	ldr	r3, [pc, #132]	@ (8005790 <UART_SetConfig+0x904>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0320 	and.w	r3, r3, #32
 8005712:	2b00      	cmp	r3, #0
 8005714:	d009      	beq.n	800572a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005716:	4b1e      	ldr	r3, [pc, #120]	@ (8005790 <UART_SetConfig+0x904>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	08db      	lsrs	r3, r3, #3
 800571c:	f003 0303 	and.w	r3, r3, #3
 8005720:	4a1d      	ldr	r2, [pc, #116]	@ (8005798 <UART_SetConfig+0x90c>)
 8005722:	fa22 f303 	lsr.w	r3, r2, r3
 8005726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005728:	e00f      	b.n	800574a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800572a:	4b1b      	ldr	r3, [pc, #108]	@ (8005798 <UART_SetConfig+0x90c>)
 800572c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800572e:	e00c      	b.n	800574a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005730:	4b1a      	ldr	r3, [pc, #104]	@ (800579c <UART_SetConfig+0x910>)
 8005732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005734:	e009      	b.n	800574a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005736:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800573a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800573c:	e005      	b.n	800574a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005748:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800574a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 81ee 	beq.w	8005b2e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005756:	4a12      	ldr	r2, [pc, #72]	@ (80057a0 <UART_SetConfig+0x914>)
 8005758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800575c:	461a      	mov	r2, r3
 800575e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005760:	fbb3 f3f2 	udiv	r3, r3, r2
 8005764:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	4613      	mov	r3, r2
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	4413      	add	r3, r2
 8005770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005772:	429a      	cmp	r2, r3
 8005774:	d305      	bcc.n	8005782 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800577c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800577e:	429a      	cmp	r2, r3
 8005780:	d910      	bls.n	80057a4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005788:	e1d1      	b.n	8005b2e <UART_SetConfig+0xca2>
 800578a:	bf00      	nop
 800578c:	40011c00 	.word	0x40011c00
 8005790:	58024400 	.word	0x58024400
 8005794:	58000c00 	.word	0x58000c00
 8005798:	03d09000 	.word	0x03d09000
 800579c:	003d0900 	.word	0x003d0900
 80057a0:	0800622c 	.word	0x0800622c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057a6:	2200      	movs	r2, #0
 80057a8:	60bb      	str	r3, [r7, #8]
 80057aa:	60fa      	str	r2, [r7, #12]
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b0:	4ac0      	ldr	r2, [pc, #768]	@ (8005ab4 <UART_SetConfig+0xc28>)
 80057b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2200      	movs	r2, #0
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	607a      	str	r2, [r7, #4]
 80057be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057c6:	f7fa fda1 	bl	800030c <__aeabi_uldivmod>
 80057ca:	4602      	mov	r2, r0
 80057cc:	460b      	mov	r3, r1
 80057ce:	4610      	mov	r0, r2
 80057d0:	4619      	mov	r1, r3
 80057d2:	f04f 0200 	mov.w	r2, #0
 80057d6:	f04f 0300 	mov.w	r3, #0
 80057da:	020b      	lsls	r3, r1, #8
 80057dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057e0:	0202      	lsls	r2, r0, #8
 80057e2:	6979      	ldr	r1, [r7, #20]
 80057e4:	6849      	ldr	r1, [r1, #4]
 80057e6:	0849      	lsrs	r1, r1, #1
 80057e8:	2000      	movs	r0, #0
 80057ea:	460c      	mov	r4, r1
 80057ec:	4605      	mov	r5, r0
 80057ee:	eb12 0804 	adds.w	r8, r2, r4
 80057f2:	eb43 0905 	adc.w	r9, r3, r5
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	469a      	mov	sl, r3
 80057fe:	4693      	mov	fp, r2
 8005800:	4652      	mov	r2, sl
 8005802:	465b      	mov	r3, fp
 8005804:	4640      	mov	r0, r8
 8005806:	4649      	mov	r1, r9
 8005808:	f7fa fd80 	bl	800030c <__aeabi_uldivmod>
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	4613      	mov	r3, r2
 8005812:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005816:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800581a:	d308      	bcc.n	800582e <UART_SetConfig+0x9a2>
 800581c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800581e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005822:	d204      	bcs.n	800582e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800582a:	60da      	str	r2, [r3, #12]
 800582c:	e17f      	b.n	8005b2e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005834:	e17b      	b.n	8005b2e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800583e:	f040 80bd 	bne.w	80059bc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005842:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005846:	2b20      	cmp	r3, #32
 8005848:	dc48      	bgt.n	80058dc <UART_SetConfig+0xa50>
 800584a:	2b00      	cmp	r3, #0
 800584c:	db7b      	blt.n	8005946 <UART_SetConfig+0xaba>
 800584e:	2b20      	cmp	r3, #32
 8005850:	d879      	bhi.n	8005946 <UART_SetConfig+0xaba>
 8005852:	a201      	add	r2, pc, #4	@ (adr r2, 8005858 <UART_SetConfig+0x9cc>)
 8005854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005858:	080058e3 	.word	0x080058e3
 800585c:	080058eb 	.word	0x080058eb
 8005860:	08005947 	.word	0x08005947
 8005864:	08005947 	.word	0x08005947
 8005868:	080058f3 	.word	0x080058f3
 800586c:	08005947 	.word	0x08005947
 8005870:	08005947 	.word	0x08005947
 8005874:	08005947 	.word	0x08005947
 8005878:	08005903 	.word	0x08005903
 800587c:	08005947 	.word	0x08005947
 8005880:	08005947 	.word	0x08005947
 8005884:	08005947 	.word	0x08005947
 8005888:	08005947 	.word	0x08005947
 800588c:	08005947 	.word	0x08005947
 8005890:	08005947 	.word	0x08005947
 8005894:	08005947 	.word	0x08005947
 8005898:	08005913 	.word	0x08005913
 800589c:	08005947 	.word	0x08005947
 80058a0:	08005947 	.word	0x08005947
 80058a4:	08005947 	.word	0x08005947
 80058a8:	08005947 	.word	0x08005947
 80058ac:	08005947 	.word	0x08005947
 80058b0:	08005947 	.word	0x08005947
 80058b4:	08005947 	.word	0x08005947
 80058b8:	08005947 	.word	0x08005947
 80058bc:	08005947 	.word	0x08005947
 80058c0:	08005947 	.word	0x08005947
 80058c4:	08005947 	.word	0x08005947
 80058c8:	08005947 	.word	0x08005947
 80058cc:	08005947 	.word	0x08005947
 80058d0:	08005947 	.word	0x08005947
 80058d4:	08005947 	.word	0x08005947
 80058d8:	08005939 	.word	0x08005939
 80058dc:	2b40      	cmp	r3, #64	@ 0x40
 80058de:	d02e      	beq.n	800593e <UART_SetConfig+0xab2>
 80058e0:	e031      	b.n	8005946 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e2:	f7fd fb3f 	bl	8002f64 <HAL_RCC_GetPCLK1Freq>
 80058e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80058e8:	e033      	b.n	8005952 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058ea:	f7fd fb51 	bl	8002f90 <HAL_RCC_GetPCLK2Freq>
 80058ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80058f0:	e02f      	b.n	8005952 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fe fd16 	bl	8004328 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005900:	e027      	b.n	8005952 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005902:	f107 0318 	add.w	r3, r7, #24
 8005906:	4618      	mov	r0, r3
 8005908:	f7fe fe62 	bl	80045d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005910:	e01f      	b.n	8005952 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005912:	4b69      	ldr	r3, [pc, #420]	@ (8005ab8 <UART_SetConfig+0xc2c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0320 	and.w	r3, r3, #32
 800591a:	2b00      	cmp	r3, #0
 800591c:	d009      	beq.n	8005932 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800591e:	4b66      	ldr	r3, [pc, #408]	@ (8005ab8 <UART_SetConfig+0xc2c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	08db      	lsrs	r3, r3, #3
 8005924:	f003 0303 	and.w	r3, r3, #3
 8005928:	4a64      	ldr	r2, [pc, #400]	@ (8005abc <UART_SetConfig+0xc30>)
 800592a:	fa22 f303 	lsr.w	r3, r2, r3
 800592e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005930:	e00f      	b.n	8005952 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005932:	4b62      	ldr	r3, [pc, #392]	@ (8005abc <UART_SetConfig+0xc30>)
 8005934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005936:	e00c      	b.n	8005952 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005938:	4b61      	ldr	r3, [pc, #388]	@ (8005ac0 <UART_SetConfig+0xc34>)
 800593a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800593c:	e009      	b.n	8005952 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800593e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005944:	e005      	b.n	8005952 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005950:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 80ea 	beq.w	8005b2e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595e:	4a55      	ldr	r2, [pc, #340]	@ (8005ab4 <UART_SetConfig+0xc28>)
 8005960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005964:	461a      	mov	r2, r3
 8005966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005968:	fbb3 f3f2 	udiv	r3, r3, r2
 800596c:	005a      	lsls	r2, r3, #1
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	085b      	lsrs	r3, r3, #1
 8005974:	441a      	add	r2, r3
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	fbb2 f3f3 	udiv	r3, r2, r3
 800597e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005982:	2b0f      	cmp	r3, #15
 8005984:	d916      	bls.n	80059b4 <UART_SetConfig+0xb28>
 8005986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800598c:	d212      	bcs.n	80059b4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800598e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005990:	b29b      	uxth	r3, r3
 8005992:	f023 030f 	bic.w	r3, r3, #15
 8005996:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599a:	085b      	lsrs	r3, r3, #1
 800599c:	b29b      	uxth	r3, r3
 800599e:	f003 0307 	and.w	r3, r3, #7
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80059a6:	4313      	orrs	r3, r2
 80059a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80059b0:	60da      	str	r2, [r3, #12]
 80059b2:	e0bc      	b.n	8005b2e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80059ba:	e0b8      	b.n	8005b2e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059bc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	dc4b      	bgt.n	8005a5c <UART_SetConfig+0xbd0>
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f2c0 8087 	blt.w	8005ad8 <UART_SetConfig+0xc4c>
 80059ca:	2b20      	cmp	r3, #32
 80059cc:	f200 8084 	bhi.w	8005ad8 <UART_SetConfig+0xc4c>
 80059d0:	a201      	add	r2, pc, #4	@ (adr r2, 80059d8 <UART_SetConfig+0xb4c>)
 80059d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d6:	bf00      	nop
 80059d8:	08005a63 	.word	0x08005a63
 80059dc:	08005a6b 	.word	0x08005a6b
 80059e0:	08005ad9 	.word	0x08005ad9
 80059e4:	08005ad9 	.word	0x08005ad9
 80059e8:	08005a73 	.word	0x08005a73
 80059ec:	08005ad9 	.word	0x08005ad9
 80059f0:	08005ad9 	.word	0x08005ad9
 80059f4:	08005ad9 	.word	0x08005ad9
 80059f8:	08005a83 	.word	0x08005a83
 80059fc:	08005ad9 	.word	0x08005ad9
 8005a00:	08005ad9 	.word	0x08005ad9
 8005a04:	08005ad9 	.word	0x08005ad9
 8005a08:	08005ad9 	.word	0x08005ad9
 8005a0c:	08005ad9 	.word	0x08005ad9
 8005a10:	08005ad9 	.word	0x08005ad9
 8005a14:	08005ad9 	.word	0x08005ad9
 8005a18:	08005a93 	.word	0x08005a93
 8005a1c:	08005ad9 	.word	0x08005ad9
 8005a20:	08005ad9 	.word	0x08005ad9
 8005a24:	08005ad9 	.word	0x08005ad9
 8005a28:	08005ad9 	.word	0x08005ad9
 8005a2c:	08005ad9 	.word	0x08005ad9
 8005a30:	08005ad9 	.word	0x08005ad9
 8005a34:	08005ad9 	.word	0x08005ad9
 8005a38:	08005ad9 	.word	0x08005ad9
 8005a3c:	08005ad9 	.word	0x08005ad9
 8005a40:	08005ad9 	.word	0x08005ad9
 8005a44:	08005ad9 	.word	0x08005ad9
 8005a48:	08005ad9 	.word	0x08005ad9
 8005a4c:	08005ad9 	.word	0x08005ad9
 8005a50:	08005ad9 	.word	0x08005ad9
 8005a54:	08005ad9 	.word	0x08005ad9
 8005a58:	08005acb 	.word	0x08005acb
 8005a5c:	2b40      	cmp	r3, #64	@ 0x40
 8005a5e:	d037      	beq.n	8005ad0 <UART_SetConfig+0xc44>
 8005a60:	e03a      	b.n	8005ad8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a62:	f7fd fa7f 	bl	8002f64 <HAL_RCC_GetPCLK1Freq>
 8005a66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a68:	e03c      	b.n	8005ae4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a6a:	f7fd fa91 	bl	8002f90 <HAL_RCC_GetPCLK2Freq>
 8005a6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a70:	e038      	b.n	8005ae4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fe fc56 	bl	8004328 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a80:	e030      	b.n	8005ae4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a82:	f107 0318 	add.w	r3, r7, #24
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fe fda2 	bl	80045d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a90:	e028      	b.n	8005ae4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a92:	4b09      	ldr	r3, [pc, #36]	@ (8005ab8 <UART_SetConfig+0xc2c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d012      	beq.n	8005ac4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a9e:	4b06      	ldr	r3, [pc, #24]	@ (8005ab8 <UART_SetConfig+0xc2c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	08db      	lsrs	r3, r3, #3
 8005aa4:	f003 0303 	and.w	r3, r3, #3
 8005aa8:	4a04      	ldr	r2, [pc, #16]	@ (8005abc <UART_SetConfig+0xc30>)
 8005aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8005aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ab0:	e018      	b.n	8005ae4 <UART_SetConfig+0xc58>
 8005ab2:	bf00      	nop
 8005ab4:	0800622c 	.word	0x0800622c
 8005ab8:	58024400 	.word	0x58024400
 8005abc:	03d09000 	.word	0x03d09000
 8005ac0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005ac4:	4b24      	ldr	r3, [pc, #144]	@ (8005b58 <UART_SetConfig+0xccc>)
 8005ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ac8:	e00c      	b.n	8005ae4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005aca:	4b24      	ldr	r3, [pc, #144]	@ (8005b5c <UART_SetConfig+0xcd0>)
 8005acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ace:	e009      	b.n	8005ae4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ad0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ad6:	e005      	b.n	8005ae4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005ae2:	bf00      	nop
    }

    if (pclk != 0U)
 8005ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d021      	beq.n	8005b2e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aee:	4a1c      	ldr	r2, [pc, #112]	@ (8005b60 <UART_SetConfig+0xcd4>)
 8005af0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005af4:	461a      	mov	r2, r3
 8005af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005af8:	fbb3 f2f2 	udiv	r2, r3, r2
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	085b      	lsrs	r3, r3, #1
 8005b02:	441a      	add	r2, r3
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b10:	2b0f      	cmp	r3, #15
 8005b12:	d909      	bls.n	8005b28 <UART_SetConfig+0xc9c>
 8005b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b1a:	d205      	bcs.n	8005b28 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	60da      	str	r2, [r3, #12]
 8005b26:	e002      	b.n	8005b2e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2200      	movs	r2, #0
 8005b42:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2200      	movs	r2, #0
 8005b48:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005b4a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3748      	adds	r7, #72	@ 0x48
 8005b52:	46bd      	mov	sp, r7
 8005b54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b58:	03d09000 	.word	0x03d09000
 8005b5c:	003d0900 	.word	0x003d0900
 8005b60:	0800622c 	.word	0x0800622c

08005b64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b70:	f003 0308 	and.w	r3, r3, #8
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00a      	beq.n	8005b8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00a      	beq.n	8005bd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd6:	f003 0304 	and.w	r3, r3, #4
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf8:	f003 0310 	and.w	r3, r3, #16
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00a      	beq.n	8005c16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d01a      	beq.n	8005c7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c62:	d10a      	bne.n	8005c7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	605a      	str	r2, [r3, #4]
  }
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b098      	sub	sp, #96	@ 0x60
 8005cac:	af02      	add	r7, sp, #8
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cb8:	f7fb fae6 	bl	8001288 <HAL_GetTick>
 8005cbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d12f      	bne.n	8005d2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ccc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f88e 	bl	8005dfc <UART_WaitOnFlagUntilTimeout>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d022      	beq.n	8005d2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cee:	e853 3f00 	ldrex	r3, [r3]
 8005cf2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	461a      	mov	r2, r3
 8005d02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d04:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d06:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d0c:	e841 2300 	strex	r3, r2, [r1]
 8005d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1e6      	bne.n	8005ce6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e063      	b.n	8005df4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0304 	and.w	r3, r3, #4
 8005d36:	2b04      	cmp	r3, #4
 8005d38:	d149      	bne.n	8005dce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d3a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d42:	2200      	movs	r2, #0
 8005d44:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f857 	bl	8005dfc <UART_WaitOnFlagUntilTimeout>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d03c      	beq.n	8005dce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5c:	e853 3f00 	ldrex	r3, [r3]
 8005d60:	623b      	str	r3, [r7, #32]
   return(result);
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d72:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d74:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d7a:	e841 2300 	strex	r3, r2, [r1]
 8005d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1e6      	bne.n	8005d54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3308      	adds	r3, #8
 8005d8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f023 0301 	bic.w	r3, r3, #1
 8005d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3308      	adds	r3, #8
 8005da4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005da6:	61fa      	str	r2, [r7, #28]
 8005da8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005daa:	69b9      	ldr	r1, [r7, #24]
 8005dac:	69fa      	ldr	r2, [r7, #28]
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	617b      	str	r3, [r7, #20]
   return(result);
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e5      	bne.n	8005d86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e012      	b.n	8005df4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3758      	adds	r7, #88	@ 0x58
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	603b      	str	r3, [r7, #0]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e0c:	e04f      	b.n	8005eae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e14:	d04b      	beq.n	8005eae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e16:	f7fb fa37 	bl	8001288 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d302      	bcc.n	8005e2c <UART_WaitOnFlagUntilTimeout+0x30>
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e04e      	b.n	8005ece <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0304 	and.w	r3, r3, #4
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d037      	beq.n	8005eae <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b80      	cmp	r3, #128	@ 0x80
 8005e42:	d034      	beq.n	8005eae <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2b40      	cmp	r3, #64	@ 0x40
 8005e48:	d031      	beq.n	8005eae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69db      	ldr	r3, [r3, #28]
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d110      	bne.n	8005e7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2208      	movs	r2, #8
 8005e5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 f839 	bl	8005ed8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2208      	movs	r2, #8
 8005e6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e029      	b.n	8005ece <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e88:	d111      	bne.n	8005eae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 f81f 	bl	8005ed8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e00f      	b.n	8005ece <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69da      	ldr	r2, [r3, #28]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	bf0c      	ite	eq
 8005ebe:	2301      	moveq	r3, #1
 8005ec0:	2300      	movne	r3, #0
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	79fb      	ldrb	r3, [r7, #7]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d0a0      	beq.n	8005e0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
	...

08005ed8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b095      	sub	sp, #84	@ 0x54
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ee8:	e853 3f00 	ldrex	r3, [r3]
 8005eec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ef4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	461a      	mov	r2, r3
 8005efc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005efe:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f00:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f06:	e841 2300 	strex	r3, r2, [r1]
 8005f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1e6      	bne.n	8005ee0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3308      	adds	r3, #8
 8005f18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f22:	69fa      	ldr	r2, [r7, #28]
 8005f24:	4b1e      	ldr	r3, [pc, #120]	@ (8005fa0 <UART_EndRxTransfer+0xc8>)
 8005f26:	4013      	ands	r3, r2
 8005f28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3308      	adds	r3, #8
 8005f30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f3a:	e841 2300 	strex	r3, r2, [r1]
 8005f3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1e5      	bne.n	8005f12 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d118      	bne.n	8005f80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f023 0310 	bic.w	r3, r3, #16
 8005f62:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f6c:	61bb      	str	r3, [r7, #24]
 8005f6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f70:	6979      	ldr	r1, [r7, #20]
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	e841 2300 	strex	r3, r2, [r1]
 8005f78:	613b      	str	r3, [r7, #16]
   return(result);
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1e6      	bne.n	8005f4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005f94:	bf00      	nop
 8005f96:	3754      	adds	r7, #84	@ 0x54
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	effffffe 	.word	0xeffffffe

08005fa4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d101      	bne.n	8005fba <HAL_UARTEx_DisableFifoMode+0x16>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	e027      	b.n	800600a <HAL_UARTEx_DisableFifoMode+0x66>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2224      	movs	r2, #36	@ 0x24
 8005fc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0201 	bic.w	r2, r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005fe8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b084      	sub	sp, #16
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006026:	2b01      	cmp	r3, #1
 8006028:	d101      	bne.n	800602e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800602a:	2302      	movs	r3, #2
 800602c:	e02d      	b.n	800608a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2224      	movs	r2, #36	@ 0x24
 800603a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0201 	bic.w	r2, r2, #1
 8006054:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f850 	bl	8006110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b084      	sub	sp, #16
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d101      	bne.n	80060aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060a6:	2302      	movs	r3, #2
 80060a8:	e02d      	b.n	8006106 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2224      	movs	r2, #36	@ 0x24
 80060b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 0201 	bic.w	r2, r2, #1
 80060d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f812 	bl	8006110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800611c:	2b00      	cmp	r3, #0
 800611e:	d108      	bne.n	8006132 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006130:	e031      	b.n	8006196 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006132:	2310      	movs	r3, #16
 8006134:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006136:	2310      	movs	r3, #16
 8006138:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	0e5b      	lsrs	r3, r3, #25
 8006142:	b2db      	uxtb	r3, r3
 8006144:	f003 0307 	and.w	r3, r3, #7
 8006148:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	0f5b      	lsrs	r3, r3, #29
 8006152:	b2db      	uxtb	r3, r3
 8006154:	f003 0307 	and.w	r3, r3, #7
 8006158:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800615a:	7bbb      	ldrb	r3, [r7, #14]
 800615c:	7b3a      	ldrb	r2, [r7, #12]
 800615e:	4911      	ldr	r1, [pc, #68]	@ (80061a4 <UARTEx_SetNbDataToProcess+0x94>)
 8006160:	5c8a      	ldrb	r2, [r1, r2]
 8006162:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006166:	7b3a      	ldrb	r2, [r7, #12]
 8006168:	490f      	ldr	r1, [pc, #60]	@ (80061a8 <UARTEx_SetNbDataToProcess+0x98>)
 800616a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800616c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006170:	b29a      	uxth	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	7b7a      	ldrb	r2, [r7, #13]
 800617c:	4909      	ldr	r1, [pc, #36]	@ (80061a4 <UARTEx_SetNbDataToProcess+0x94>)
 800617e:	5c8a      	ldrb	r2, [r1, r2]
 8006180:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006184:	7b7a      	ldrb	r2, [r7, #13]
 8006186:	4908      	ldr	r1, [pc, #32]	@ (80061a8 <UARTEx_SetNbDataToProcess+0x98>)
 8006188:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800618a:	fb93 f3f2 	sdiv	r3, r3, r2
 800618e:	b29a      	uxth	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006196:	bf00      	nop
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	08006244 	.word	0x08006244
 80061a8:	0800624c 	.word	0x0800624c

080061ac <memset>:
 80061ac:	4402      	add	r2, r0
 80061ae:	4603      	mov	r3, r0
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d100      	bne.n	80061b6 <memset+0xa>
 80061b4:	4770      	bx	lr
 80061b6:	f803 1b01 	strb.w	r1, [r3], #1
 80061ba:	e7f9      	b.n	80061b0 <memset+0x4>

080061bc <__libc_init_array>:
 80061bc:	b570      	push	{r4, r5, r6, lr}
 80061be:	4d0d      	ldr	r5, [pc, #52]	@ (80061f4 <__libc_init_array+0x38>)
 80061c0:	4c0d      	ldr	r4, [pc, #52]	@ (80061f8 <__libc_init_array+0x3c>)
 80061c2:	1b64      	subs	r4, r4, r5
 80061c4:	10a4      	asrs	r4, r4, #2
 80061c6:	2600      	movs	r6, #0
 80061c8:	42a6      	cmp	r6, r4
 80061ca:	d109      	bne.n	80061e0 <__libc_init_array+0x24>
 80061cc:	4d0b      	ldr	r5, [pc, #44]	@ (80061fc <__libc_init_array+0x40>)
 80061ce:	4c0c      	ldr	r4, [pc, #48]	@ (8006200 <__libc_init_array+0x44>)
 80061d0:	f000 f818 	bl	8006204 <_init>
 80061d4:	1b64      	subs	r4, r4, r5
 80061d6:	10a4      	asrs	r4, r4, #2
 80061d8:	2600      	movs	r6, #0
 80061da:	42a6      	cmp	r6, r4
 80061dc:	d105      	bne.n	80061ea <__libc_init_array+0x2e>
 80061de:	bd70      	pop	{r4, r5, r6, pc}
 80061e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061e4:	4798      	blx	r3
 80061e6:	3601      	adds	r6, #1
 80061e8:	e7ee      	b.n	80061c8 <__libc_init_array+0xc>
 80061ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ee:	4798      	blx	r3
 80061f0:	3601      	adds	r6, #1
 80061f2:	e7f2      	b.n	80061da <__libc_init_array+0x1e>
 80061f4:	0800625c 	.word	0x0800625c
 80061f8:	0800625c 	.word	0x0800625c
 80061fc:	0800625c 	.word	0x0800625c
 8006200:	08006260 	.word	0x08006260

08006204 <_init>:
 8006204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006206:	bf00      	nop
 8006208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800620a:	bc08      	pop	{r3}
 800620c:	469e      	mov	lr, r3
 800620e:	4770      	bx	lr

08006210 <_fini>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	bf00      	nop
 8006214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006216:	bc08      	pop	{r3}
 8006218:	469e      	mov	lr, r3
 800621a:	4770      	bx	lr
