
FinalYearSatComms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d24  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006ff4  08006ff4  00007ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007064  08007064  00008064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800706c  0800706c  0000806c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007070  08007070  00008070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08007074  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2400006c  080070e0  0000906c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000cc  08007140  000090cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  2400012c  080071a0  0000912c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400054c  080071a0  0000954c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f91  00000000  00000000  0000915a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002330  00000000  00000000  0001d0eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  0001f420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a07  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033321  00000000  00000000  00020b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f25  00000000  00000000  00053e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00147b18  00000000  00000000  00064d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ac88d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d90  00000000  00000000  001ac8d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001b0660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400012c 	.word	0x2400012c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08006fdc 	.word	0x08006fdc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000130 	.word	0x24000130
 800030c:	08006fdc 	.word	0x08006fdc

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006a8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006ac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d013      	beq.n	80006e0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006bc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80006c0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d00b      	beq.n	80006e0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006c8:	e000      	b.n	80006cc <ITM_SendChar+0x2c>
    {
      __NOP();
 80006ca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006cc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d0f9      	beq.n	80006ca <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006d6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	b2d2      	uxtb	r2, r2
 80006de:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006e0:	687b      	ldr	r3, [r7, #4]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr

080006ee <_write>:
static void MX_UART4_Init(void);
static void MX_USART6_UART_Init(void);


int _write(int file,char *ptr, int len)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b086      	sub	sp, #24
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	60f8      	str	r0, [r7, #12]
 80006f6:	60b9      	str	r1, [r7, #8]
 80006f8:	607a      	str	r2, [r7, #4]
	int i=0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
	for (i=0; i<len;i++)
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
 8000702:	e009      	b.n	8000718 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	1c5a      	adds	r2, r3, #1
 8000708:	60ba      	str	r2, [r7, #8]
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ffc7 	bl	80006a0 <ITM_SendChar>
	for (i=0; i<len;i++)
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	3301      	adds	r3, #1
 8000716:	617b      	str	r3, [r7, #20]
 8000718:	697a      	ldr	r2, [r7, #20]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	429a      	cmp	r2, r3
 800071e:	dbf1      	blt.n	8000704 <_write+0x16>
	return len;
 8000720:	687b      	ldr	r3, [r7, #4]
}
 8000722:	4618      	mov	r0, r3
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <main>:
uint8_t Data=0;
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0



  HAL_Init();
 8000730:	f000 fe3e 	bl	80013b0 <HAL_Init>


  SystemClock_Config();
 8000734:	f000 f822 	bl	800077c <SystemClock_Config>

  MX_GPIO_Init();
 8000738:	f000 f9ca 	bl	8000ad0 <MX_GPIO_Init>
  MX_ETH_Init();
 800073c:	f000 f890 	bl	8000860 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000740:	f000 f926 	bl	8000990 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000744:	f000 f9bc 	bl	8000ac0 <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 8000748:	f000 f8d6 	bl	80008f8 <MX_UART4_Init>
  MX_USART6_UART_Init();
 800074c:	f000 f96c 	bl	8000a28 <MX_USART6_UART_Init>

  while (1)
  {
	  printf("%d\n",Data);
 8000750:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <main+0x48>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	4619      	mov	r1, r3
 8000756:	4808      	ldr	r0, [pc, #32]	@ (8000778 <main+0x4c>)
 8000758:	f005 fdd2 	bl	8006300 <iprintf>
	  Data++;
 800075c:	4b05      	ldr	r3, [pc, #20]	@ (8000774 <main+0x48>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	3301      	adds	r3, #1
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b03      	ldr	r3, [pc, #12]	@ (8000774 <main+0x48>)
 8000766:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1000);
 8000768:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800076c:	f000 feb2 	bl	80014d4 <HAL_Delay>
	  printf("%d\n",Data);
 8000770:	bf00      	nop
 8000772:	e7ed      	b.n	8000750 <main+0x24>
 8000774:	240003ec 	.word	0x240003ec
 8000778:	08006ff4 	.word	0x08006ff4

0800077c <SystemClock_Config>:
  /* USER CODE END 3 */
}


void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b09c      	sub	sp, #112	@ 0x70
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000786:	224c      	movs	r2, #76	@ 0x4c
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f005 fe0d 	bl	80063aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2220      	movs	r2, #32
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f005 fe07 	bl	80063aa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800079c:	2002      	movs	r0, #2
 800079e:	f001 fdab 	bl	80022f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	4b2d      	ldr	r3, [pc, #180]	@ (800085c <SystemClock_Config+0xe0>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007ae:	4a2b      	ldr	r2, [pc, #172]	@ (800085c <SystemClock_Config+0xe0>)
 80007b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b4:	6193      	str	r3, [r2, #24]
 80007b6:	4b29      	ldr	r3, [pc, #164]	@ (800085c <SystemClock_Config+0xe0>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007c2:	bf00      	nop
 80007c4:	4b25      	ldr	r3, [pc, #148]	@ (800085c <SystemClock_Config+0xe0>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007d0:	d1f8      	bne.n	80007c4 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80007d2:	2322      	movs	r3, #34	@ 0x22
 80007d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007d6:	2301      	movs	r3, #1
 80007d8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80007da:	2340      	movs	r3, #64	@ 0x40
 80007dc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007de:	2301      	movs	r3, #1
 80007e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e2:	2302      	movs	r3, #2
 80007e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e6:	2300      	movs	r3, #0
 80007e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 80007ea:	2320      	movs	r3, #32
 80007ec:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 129;
 80007ee:	2381      	movs	r3, #129	@ 0x81
 80007f0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f6:	2304      	movs	r3, #4
 80007f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80007fe:	2304      	movs	r3, #4
 8000800:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000802:	2300      	movs	r3, #0
 8000804:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800080e:	4618      	mov	r0, r3
 8000810:	f001 fdac 	bl	800236c <HAL_RCC_OscConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800081a:	f000 fa55 	bl	8000cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081e:	233f      	movs	r3, #63	@ 0x3f
 8000820:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000822:	2303      	movs	r3, #3
 8000824:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = 1;
 8000826:	2301      	movs	r3, #1
 8000828:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800082a:	2308      	movs	r3, #8
 800082c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800082e:	2340      	movs	r3, #64	@ 0x40
 8000830:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000832:	2340      	movs	r3, #64	@ 0x40
 8000834:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000836:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800083a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800083c:	2340      	movs	r3, #64	@ 0x40
 800083e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f002 f96b 	bl	8002b20 <HAL_RCC_ClockConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000850:	f000 fa3a 	bl	8000cc8 <Error_Handler>
  }
}
 8000854:	bf00      	nop
 8000856:	3770      	adds	r7, #112	@ 0x70
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	58024800 	.word	0x58024800

08000860 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000864:	4b1e      	ldr	r3, [pc, #120]	@ (80008e0 <MX_ETH_Init+0x80>)
 8000866:	4a1f      	ldr	r2, [pc, #124]	@ (80008e4 <MX_ETH_Init+0x84>)
 8000868:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800086a:	4b1f      	ldr	r3, [pc, #124]	@ (80008e8 <MX_ETH_Init+0x88>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000870:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <MX_ETH_Init+0x88>)
 8000872:	2280      	movs	r2, #128	@ 0x80
 8000874:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000876:	4b1c      	ldr	r3, [pc, #112]	@ (80008e8 <MX_ETH_Init+0x88>)
 8000878:	22e1      	movs	r2, #225	@ 0xe1
 800087a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800087c:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <MX_ETH_Init+0x88>)
 800087e:	2200      	movs	r2, #0
 8000880:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000882:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <MX_ETH_Init+0x88>)
 8000884:	2200      	movs	r2, #0
 8000886:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000888:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <MX_ETH_Init+0x88>)
 800088a:	2200      	movs	r2, #0
 800088c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800088e:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <MX_ETH_Init+0x80>)
 8000890:	4a15      	ldr	r2, [pc, #84]	@ (80008e8 <MX_ETH_Init+0x88>)
 8000892:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <MX_ETH_Init+0x80>)
 8000896:	2201      	movs	r2, #1
 8000898:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800089a:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <MX_ETH_Init+0x80>)
 800089c:	4a13      	ldr	r2, [pc, #76]	@ (80008ec <MX_ETH_Init+0x8c>)
 800089e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_ETH_Init+0x80>)
 80008a2:	4a13      	ldr	r2, [pc, #76]	@ (80008f0 <MX_ETH_Init+0x90>)
 80008a4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <MX_ETH_Init+0x80>)
 80008a8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80008ac:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008ae:	480c      	ldr	r0, [pc, #48]	@ (80008e0 <MX_ETH_Init+0x80>)
 80008b0:	f000 ff2c 	bl	800170c <HAL_ETH_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008ba:	f000 fa05 	bl	8000cc8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008be:	2238      	movs	r2, #56	@ 0x38
 80008c0:	2100      	movs	r1, #0
 80008c2:	480c      	ldr	r0, [pc, #48]	@ (80008f4 <MX_ETH_Init+0x94>)
 80008c4:	f005 fd71 	bl	80063aa <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <MX_ETH_Init+0x94>)
 80008ca:	2221      	movs	r2, #33	@ 0x21
 80008cc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_ETH_Init+0x94>)
 80008d0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008d4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008d6:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <MX_ETH_Init+0x94>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	24000180 	.word	0x24000180
 80008e4:	40028000 	.word	0x40028000
 80008e8:	240003f0 	.word	0x240003f0
 80008ec:	240000cc 	.word	0x240000cc
 80008f0:	2400006c 	.word	0x2400006c
 80008f4:	24000148 	.word	0x24000148

080008f8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008fc:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <MX_UART4_Init+0x90>)
 80008fe:	4a23      	ldr	r2, [pc, #140]	@ (800098c <MX_UART4_Init+0x94>)
 8000900:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000902:	4b21      	ldr	r3, [pc, #132]	@ (8000988 <MX_UART4_Init+0x90>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b1f      	ldr	r3, [pc, #124]	@ (8000988 <MX_UART4_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b1d      	ldr	r3, [pc, #116]	@ (8000988 <MX_UART4_Init+0x90>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000916:	4b1c      	ldr	r3, [pc, #112]	@ (8000988 <MX_UART4_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b1a      	ldr	r3, [pc, #104]	@ (8000988 <MX_UART4_Init+0x90>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b19      	ldr	r3, [pc, #100]	@ (8000988 <MX_UART4_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b17      	ldr	r3, [pc, #92]	@ (8000988 <MX_UART4_Init+0x90>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092e:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <MX_UART4_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000934:	4b14      	ldr	r3, [pc, #80]	@ (8000988 <MX_UART4_Init+0x90>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093a:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <MX_UART4_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000940:	4811      	ldr	r0, [pc, #68]	@ (8000988 <MX_UART4_Init+0x90>)
 8000942:	f004 fa3b 	bl	8004dbc <HAL_UART_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800094c:	f000 f9bc 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000950:	2100      	movs	r1, #0
 8000952:	480d      	ldr	r0, [pc, #52]	@ (8000988 <MX_UART4_Init+0x90>)
 8000954:	f005 fb47 	bl	8005fe6 <HAL_UARTEx_SetTxFifoThreshold>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800095e:	f000 f9b3 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000962:	2100      	movs	r1, #0
 8000964:	4808      	ldr	r0, [pc, #32]	@ (8000988 <MX_UART4_Init+0x90>)
 8000966:	f005 fb7c 	bl	8006062 <HAL_UARTEx_SetRxFifoThreshold>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000970:	f000 f9aa 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000974:	4804      	ldr	r0, [pc, #16]	@ (8000988 <MX_UART4_Init+0x90>)
 8000976:	f005 fafd 	bl	8005f74 <HAL_UARTEx_DisableFifoMode>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000980:	f000 f9a2 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	24000230 	.word	0x24000230
 800098c:	40004c00 	.word	0x40004c00

08000990 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000994:	4b22      	ldr	r3, [pc, #136]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 8000996:	4a23      	ldr	r2, [pc, #140]	@ (8000a24 <MX_USART3_UART_Init+0x94>)
 8000998:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800099a:	4b21      	ldr	r3, [pc, #132]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 800099c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b19      	ldr	r3, [pc, #100]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c6:	4b16      	ldr	r3, [pc, #88]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009cc:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d2:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009d8:	4811      	ldr	r0, [pc, #68]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 80009da:	f004 f9ef 	bl	8004dbc <HAL_UART_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009e4:	f000 f970 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e8:	2100      	movs	r1, #0
 80009ea:	480d      	ldr	r0, [pc, #52]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 80009ec:	f005 fafb 	bl	8005fe6 <HAL_UARTEx_SetTxFifoThreshold>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009f6:	f000 f967 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fa:	2100      	movs	r1, #0
 80009fc:	4808      	ldr	r0, [pc, #32]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 80009fe:	f005 fb30 	bl	8006062 <HAL_UARTEx_SetRxFifoThreshold>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a08:	f000 f95e 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	@ (8000a20 <MX_USART3_UART_Init+0x90>)
 8000a0e:	f005 fab1 	bl	8005f74 <HAL_UARTEx_DisableFifoMode>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a18:	f000 f956 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	240002c4 	.word	0x240002c4
 8000a24:	40004800 	.word	0x40004800

08000a28 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a2c:	4b22      	ldr	r3, [pc, #136]	@ (8000ab8 <MX_USART6_UART_Init+0x90>)
 8000a2e:	4a23      	ldr	r2, [pc, #140]	@ (8000abc <MX_USART6_UART_Init+0x94>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000a32:	4b21      	ldr	r3, [pc, #132]	@ (8000ab8 <MX_USART6_UART_Init+0x90>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab8 <MX_USART6_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <MX_USART6_UART_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab8 <MX_USART6_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab8 <MX_USART6_UART_Init+0x90>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b19      	ldr	r3, [pc, #100]	@ (8000ab8 <MX_USART6_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b17      	ldr	r3, [pc, #92]	@ (8000ab8 <MX_USART6_UART_Init+0x90>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <MX_USART6_UART_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a64:	4b14      	ldr	r3, [pc, #80]	@ (8000ab8 <MX_USART6_UART_Init+0x90>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <MX_USART6_UART_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a70:	4811      	ldr	r0, [pc, #68]	@ (8000ab8 <MX_USART6_UART_Init+0x90>)
 8000a72:	f004 f9a3 	bl	8004dbc <HAL_UART_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8000a7c:	f000 f924 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a80:	2100      	movs	r1, #0
 8000a82:	480d      	ldr	r0, [pc, #52]	@ (8000ab8 <MX_USART6_UART_Init+0x90>)
 8000a84:	f005 faaf 	bl	8005fe6 <HAL_UARTEx_SetTxFifoThreshold>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8000a8e:	f000 f91b 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a92:	2100      	movs	r1, #0
 8000a94:	4808      	ldr	r0, [pc, #32]	@ (8000ab8 <MX_USART6_UART_Init+0x90>)
 8000a96:	f005 fae4 	bl	8006062 <HAL_UARTEx_SetRxFifoThreshold>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8000aa0:	f000 f912 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8000aa4:	4804      	ldr	r0, [pc, #16]	@ (8000ab8 <MX_USART6_UART_Init+0x90>)
 8000aa6:	f005 fa65 	bl	8005f74 <HAL_UARTEx_DisableFifoMode>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8000ab0:	f000 f90a 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	24000358 	.word	0x24000358
 8000abc:	40011400 	.word	0x40011400

08000ac0 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
	...

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08c      	sub	sp, #48	@ 0x30
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae6:	4b71      	ldr	r3, [pc, #452]	@ (8000cac <MX_GPIO_Init+0x1dc>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aec:	4a6f      	ldr	r2, [pc, #444]	@ (8000cac <MX_GPIO_Init+0x1dc>)
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000af6:	4b6d      	ldr	r3, [pc, #436]	@ (8000cac <MX_GPIO_Init+0x1dc>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	61bb      	str	r3, [r7, #24]
 8000b02:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b04:	4b69      	ldr	r3, [pc, #420]	@ (8000cac <MX_GPIO_Init+0x1dc>)
 8000b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0a:	4a68      	ldr	r2, [pc, #416]	@ (8000cac <MX_GPIO_Init+0x1dc>)
 8000b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b14:	4b65      	ldr	r3, [pc, #404]	@ (8000cac <MX_GPIO_Init+0x1dc>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b62      	ldr	r3, [pc, #392]	@ (8000cac <MX_GPIO_Init+0x1dc>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b28:	4a60      	ldr	r2, [pc, #384]	@ (8000cac <MX_GPIO_Init+0x1dc>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b32:	4b5e      	ldr	r3, [pc, #376]	@ (8000cac <MX_GPIO_Init+0x1dc>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b40:	4b5a      	ldr	r3, [pc, #360]	@ (8000cac <MX_GPIO_Init+0x1dc>)
 8000b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b46:	4a59      	ldr	r2, [pc, #356]	@ (8000cac <MX_GPIO_Init+0x1dc>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b50:	4b56      	ldr	r3, [pc, #344]	@ (8000cac <MX_GPIO_Init+0x1dc>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5e:	4b53      	ldr	r3, [pc, #332]	@ (8000cac <MX_GPIO_Init+0x1dc>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b64:	4a51      	ldr	r2, [pc, #324]	@ (8000cac <MX_GPIO_Init+0x1dc>)
 8000b66:	f043 0308 	orr.w	r3, r3, #8
 8000b6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b6e:	4b4f      	ldr	r3, [pc, #316]	@ (8000cac <MX_GPIO_Init+0x1dc>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b74:	f003 0308 	and.w	r3, r3, #8
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b7c:	4b4b      	ldr	r3, [pc, #300]	@ (8000cac <MX_GPIO_Init+0x1dc>)
 8000b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b82:	4a4a      	ldr	r2, [pc, #296]	@ (8000cac <MX_GPIO_Init+0x1dc>)
 8000b84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b8c:	4b47      	ldr	r3, [pc, #284]	@ (8000cac <MX_GPIO_Init+0x1dc>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b9a:	4b44      	ldr	r3, [pc, #272]	@ (8000cac <MX_GPIO_Init+0x1dc>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba0:	4a42      	ldr	r2, [pc, #264]	@ (8000cac <MX_GPIO_Init+0x1dc>)
 8000ba2:	f043 0310 	orr.w	r3, r3, #16
 8000ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000baa:	4b40      	ldr	r3, [pc, #256]	@ (8000cac <MX_GPIO_Init+0x1dc>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb0:	f003 0310 	and.w	r3, r3, #16
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000bbe:	483c      	ldr	r0, [pc, #240]	@ (8000cb0 <MX_GPIO_Init+0x1e0>)
 8000bc0:	f001 fb80 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bca:	483a      	ldr	r0, [pc, #232]	@ (8000cb4 <MX_GPIO_Init+0x1e4>)
 8000bcc:	f001 fb7a 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2102      	movs	r1, #2
 8000bd4:	4838      	ldr	r0, [pc, #224]	@ (8000cb8 <MX_GPIO_Init+0x1e8>)
 8000bd6:	f001 fb75 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	4833      	ldr	r0, [pc, #204]	@ (8000cbc <MX_GPIO_Init+0x1ec>)
 8000bf0:	f001 f9c0 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000bf4:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4828      	ldr	r0, [pc, #160]	@ (8000cb0 <MX_GPIO_Init+0x1e0>)
 8000c0e:	f001 f9b1 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4822      	ldr	r0, [pc, #136]	@ (8000cb4 <MX_GPIO_Init+0x1e4>)
 8000c2c:	f001 f9a2 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c30:	2380      	movs	r3, #128	@ 0x80
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c34:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	481e      	ldr	r0, [pc, #120]	@ (8000cc0 <MX_GPIO_Init+0x1f0>)
 8000c46:	f001 f995 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000c4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4819      	ldr	r0, [pc, #100]	@ (8000cc4 <MX_GPIO_Init+0x1f4>)
 8000c60:	f001 f988 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c76:	230a      	movs	r3, #10
 8000c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4810      	ldr	r0, [pc, #64]	@ (8000cc4 <MX_GPIO_Init+0x1f4>)
 8000c82:	f001 f977 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000c86:	2302      	movs	r3, #2
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4806      	ldr	r0, [pc, #24]	@ (8000cb8 <MX_GPIO_Init+0x1e8>)
 8000c9e:	f001 f969 	bl	8001f74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ca2:	bf00      	nop
 8000ca4:	3730      	adds	r7, #48	@ 0x30
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	58024400 	.word	0x58024400
 8000cb0:	58020400 	.word	0x58020400
 8000cb4:	58020c00 	.word	0x58020c00
 8000cb8:	58021000 	.word	0x58021000
 8000cbc:	58020800 	.word	0x58020800
 8000cc0:	58021800 	.word	0x58021800
 8000cc4:	58020000 	.word	0x58020000

08000cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <Error_Handler+0x8>

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <HAL_MspInit+0x30>)
 8000cdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ce0:	4a08      	ldr	r2, [pc, #32]	@ (8000d04 <HAL_MspInit+0x30>)
 8000ce2:	f043 0302 	orr.w	r3, r3, #2
 8000ce6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_MspInit+0x30>)
 8000cec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cf0:	f003 0302 	and.w	r3, r3, #2
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	58024400 	.word	0x58024400

08000d08 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08e      	sub	sp, #56	@ 0x38
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a59      	ldr	r2, [pc, #356]	@ (8000e8c <HAL_ETH_MspInit+0x184>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	f040 80ab 	bne.w	8000e82 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d2c:	4b58      	ldr	r3, [pc, #352]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000d2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d32:	4a57      	ldr	r2, [pc, #348]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000d34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d38:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d3c:	4b54      	ldr	r3, [pc, #336]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000d3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d46:	623b      	str	r3, [r7, #32]
 8000d48:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d4a:	4b51      	ldr	r3, [pc, #324]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000d4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d50:	4a4f      	ldr	r2, [pc, #316]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000d52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d5a:	4b4d      	ldr	r3, [pc, #308]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000d5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d64:	61fb      	str	r3, [r7, #28]
 8000d66:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d68:	4b49      	ldr	r3, [pc, #292]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000d6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d6e:	4a48      	ldr	r2, [pc, #288]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d74:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d78:	4b45      	ldr	r3, [pc, #276]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000d7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d86:	4b42      	ldr	r3, [pc, #264]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8c:	4a40      	ldr	r2, [pc, #256]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000d8e:	f043 0304 	orr.w	r3, r3, #4
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d96:	4b3e      	ldr	r3, [pc, #248]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	4b3a      	ldr	r3, [pc, #232]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000daa:	4a39      	ldr	r2, [pc, #228]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db4:	4b36      	ldr	r3, [pc, #216]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	4b33      	ldr	r3, [pc, #204]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc8:	4a31      	ldr	r2, [pc, #196]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de0:	4b2b      	ldr	r3, [pc, #172]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de6:	4a2a      	ldr	r2, [pc, #168]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000de8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df0:	4b27      	ldr	r3, [pc, #156]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dfe:	2332      	movs	r3, #50	@ 0x32
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e0e:	230b      	movs	r3, #11
 8000e10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e16:	4619      	mov	r1, r3
 8000e18:	481e      	ldr	r0, [pc, #120]	@ (8000e94 <HAL_ETH_MspInit+0x18c>)
 8000e1a:	f001 f8ab 	bl	8001f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e1e:	2386      	movs	r3, #134	@ 0x86
 8000e20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e2e:	230b      	movs	r3, #11
 8000e30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	4817      	ldr	r0, [pc, #92]	@ (8000e98 <HAL_ETH_MspInit+0x190>)
 8000e3a:	f001 f89b 	bl	8001f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e50:	230b      	movs	r3, #11
 8000e52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4810      	ldr	r0, [pc, #64]	@ (8000e9c <HAL_ETH_MspInit+0x194>)
 8000e5c:	f001 f88a 	bl	8001f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e60:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e72:	230b      	movs	r3, #11
 8000e74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4808      	ldr	r0, [pc, #32]	@ (8000ea0 <HAL_ETH_MspInit+0x198>)
 8000e7e:	f001 f879 	bl	8001f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e82:	bf00      	nop
 8000e84:	3738      	adds	r7, #56	@ 0x38
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40028000 	.word	0x40028000
 8000e90:	58024400 	.word	0x58024400
 8000e94:	58020800 	.word	0x58020800
 8000e98:	58020000 	.word	0x58020000
 8000e9c:	58020400 	.word	0x58020400
 8000ea0:	58021800 	.word	0x58021800

08000ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b0be      	sub	sp, #248	@ 0xf8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ebc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ec0:	22b8      	movs	r2, #184	@ 0xb8
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f005 fa70 	bl	80063aa <memset>
  if(huart->Instance==UART4)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a85      	ldr	r2, [pc, #532]	@ (80010e4 <HAL_UART_MspInit+0x240>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d16b      	bne.n	8000fac <HAL_UART_MspInit+0x108>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000ed4:	f04f 0202 	mov.w	r2, #2
 8000ed8:	f04f 0300 	mov.w	r3, #0
 8000edc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eea:	4618      	mov	r0, r3
 8000eec:	f002 f9a4 	bl	8003238 <HAL_RCCEx_PeriphCLKConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ef6:	f7ff fee7 	bl	8000cc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000efa:	4b7b      	ldr	r3, [pc, #492]	@ (80010e8 <HAL_UART_MspInit+0x244>)
 8000efc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f00:	4a79      	ldr	r2, [pc, #484]	@ (80010e8 <HAL_UART_MspInit+0x244>)
 8000f02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f06:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f0a:	4b77      	ldr	r3, [pc, #476]	@ (80010e8 <HAL_UART_MspInit+0x244>)
 8000f0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	4b73      	ldr	r3, [pc, #460]	@ (80010e8 <HAL_UART_MspInit+0x244>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1e:	4a72      	ldr	r2, [pc, #456]	@ (80010e8 <HAL_UART_MspInit+0x244>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f28:	4b6f      	ldr	r3, [pc, #444]	@ (80010e8 <HAL_UART_MspInit+0x244>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	623b      	str	r3, [r7, #32]
 8000f34:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f36:	4b6c      	ldr	r3, [pc, #432]	@ (80010e8 <HAL_UART_MspInit+0x244>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3c:	4a6a      	ldr	r2, [pc, #424]	@ (80010e8 <HAL_UART_MspInit+0x244>)
 8000f3e:	f043 0304 	orr.w	r3, r3, #4
 8000f42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f46:	4b68      	ldr	r3, [pc, #416]	@ (80010e8 <HAL_UART_MspInit+0x244>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f54:	2301      	movs	r3, #1
 8000f56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f6c:	2308      	movs	r3, #8
 8000f6e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f76:	4619      	mov	r1, r3
 8000f78:	485c      	ldr	r0, [pc, #368]	@ (80010ec <HAL_UART_MspInit+0x248>)
 8000f7a:	f000 fffb 	bl	8001f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f98:	2308      	movs	r3, #8
 8000f9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4852      	ldr	r0, [pc, #328]	@ (80010f0 <HAL_UART_MspInit+0x24c>)
 8000fa6:	f000 ffe5 	bl	8001f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000faa:	e097      	b.n	80010dc <HAL_UART_MspInit+0x238>
  else if(huart->Instance==USART3)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a50      	ldr	r2, [pc, #320]	@ (80010f4 <HAL_UART_MspInit+0x250>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d147      	bne.n	8001046 <HAL_UART_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fb6:	f04f 0202 	mov.w	r2, #2
 8000fba:	f04f 0300 	mov.w	r3, #0
 8000fbe:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fc8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f002 f933 	bl	8003238 <HAL_RCCEx_PeriphCLKConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <HAL_UART_MspInit+0x138>
      Error_Handler();
 8000fd8:	f7ff fe76 	bl	8000cc8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fdc:	4b42      	ldr	r3, [pc, #264]	@ (80010e8 <HAL_UART_MspInit+0x244>)
 8000fde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fe2:	4a41      	ldr	r2, [pc, #260]	@ (80010e8 <HAL_UART_MspInit+0x244>)
 8000fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fe8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fec:	4b3e      	ldr	r3, [pc, #248]	@ (80010e8 <HAL_UART_MspInit+0x244>)
 8000fee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ff2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ff6:	61bb      	str	r3, [r7, #24]
 8000ff8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80010e8 <HAL_UART_MspInit+0x244>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001000:	4a39      	ldr	r2, [pc, #228]	@ (80010e8 <HAL_UART_MspInit+0x244>)
 8001002:	f043 0308 	orr.w	r3, r3, #8
 8001006:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800100a:	4b37      	ldr	r3, [pc, #220]	@ (80010e8 <HAL_UART_MspInit+0x244>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001010:	f003 0308 	and.w	r3, r3, #8
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001018:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800101c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001032:	2307      	movs	r3, #7
 8001034:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001038:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800103c:	4619      	mov	r1, r3
 800103e:	482e      	ldr	r0, [pc, #184]	@ (80010f8 <HAL_UART_MspInit+0x254>)
 8001040:	f000 ff98 	bl	8001f74 <HAL_GPIO_Init>
}
 8001044:	e04a      	b.n	80010dc <HAL_UART_MspInit+0x238>
  else if(huart->Instance==USART6)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a2c      	ldr	r2, [pc, #176]	@ (80010fc <HAL_UART_MspInit+0x258>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d145      	bne.n	80010dc <HAL_UART_MspInit+0x238>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001050:	f04f 0201 	mov.w	r2, #1
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001062:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001066:	4618      	mov	r0, r3
 8001068:	f002 f8e6 	bl	8003238 <HAL_RCCEx_PeriphCLKConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 8001072:	f7ff fe29 	bl	8000cc8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001076:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <HAL_UART_MspInit+0x244>)
 8001078:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800107c:	4a1a      	ldr	r2, [pc, #104]	@ (80010e8 <HAL_UART_MspInit+0x244>)
 800107e:	f043 0320 	orr.w	r3, r3, #32
 8001082:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001086:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <HAL_UART_MspInit+0x244>)
 8001088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800108c:	f003 0320 	and.w	r3, r3, #32
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001094:	4b14      	ldr	r3, [pc, #80]	@ (80010e8 <HAL_UART_MspInit+0x244>)
 8001096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109a:	4a13      	ldr	r2, [pc, #76]	@ (80010e8 <HAL_UART_MspInit+0x244>)
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a4:	4b10      	ldr	r3, [pc, #64]	@ (80010e8 <HAL_UART_MspInit+0x244>)
 80010a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010b2:	23c0      	movs	r3, #192	@ 0xc0
 80010b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80010ca:	2307      	movs	r3, #7
 80010cc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80010d4:	4619      	mov	r1, r3
 80010d6:	4806      	ldr	r0, [pc, #24]	@ (80010f0 <HAL_UART_MspInit+0x24c>)
 80010d8:	f000 ff4c 	bl	8001f74 <HAL_GPIO_Init>
}
 80010dc:	bf00      	nop
 80010de:	37f8      	adds	r7, #248	@ 0xf8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40004c00 	.word	0x40004c00
 80010e8:	58024400 	.word	0x58024400
 80010ec:	58020000 	.word	0x58020000
 80010f0:	58020800 	.word	0x58020800
 80010f4:	40004800 	.word	0x40004800
 80010f8:	58020c00 	.word	0x58020c00
 80010fc:	40011400 	.word	0x40011400

08001100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <NMI_Handler+0x4>

08001108 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <HardFault_Handler+0x4>

08001110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <MemManage_Handler+0x4>

08001118 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <BusFault_Handler+0x4>

08001120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <UsageFault_Handler+0x4>

08001128 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001156:	f000 f99d 	bl	8001494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}

0800115e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b086      	sub	sp, #24
 8001162:	af00      	add	r7, sp, #0
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	e00a      	b.n	8001186 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001170:	f3af 8000 	nop.w
 8001174:	4601      	mov	r1, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	60ba      	str	r2, [r7, #8]
 800117c:	b2ca      	uxtb	r2, r1
 800117e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	3301      	adds	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	429a      	cmp	r2, r3
 800118c:	dbf0      	blt.n	8001170 <_read+0x12>
  }

  return len;
 800118e:	687b      	ldr	r3, [r7, #4]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011c0:	605a      	str	r2, [r3, #4]
  return 0;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <_isatty>:

int _isatty(int file)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011d8:	2301      	movs	r3, #1
}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b085      	sub	sp, #20
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	60f8      	str	r0, [r7, #12]
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001208:	4a14      	ldr	r2, [pc, #80]	@ (800125c <_sbrk+0x5c>)
 800120a:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <_sbrk+0x60>)
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001214:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <_sbrk+0x64>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d102      	bne.n	8001222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800121c:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <_sbrk+0x64>)
 800121e:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <_sbrk+0x68>)
 8001220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001222:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	429a      	cmp	r2, r3
 800122e:	d207      	bcs.n	8001240 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001230:	f005 f90a 	bl	8006448 <__errno>
 8001234:	4603      	mov	r3, r0
 8001236:	220c      	movs	r2, #12
 8001238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
 800123e:	e009      	b.n	8001254 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <_sbrk+0x64>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <_sbrk+0x64>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	4a05      	ldr	r2, [pc, #20]	@ (8001264 <_sbrk+0x64>)
 8001250:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001252:	68fb      	ldr	r3, [r7, #12]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	24050000 	.word	0x24050000
 8001260:	00000400 	.word	0x00000400
 8001264:	240003f8 	.word	0x240003f8
 8001268:	24000550 	.word	0x24000550

0800126c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001270:	4b32      	ldr	r3, [pc, #200]	@ (800133c <SystemInit+0xd0>)
 8001272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001276:	4a31      	ldr	r2, [pc, #196]	@ (800133c <SystemInit+0xd0>)
 8001278:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800127c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001280:	4b2f      	ldr	r3, [pc, #188]	@ (8001340 <SystemInit+0xd4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 030f 	and.w	r3, r3, #15
 8001288:	2b06      	cmp	r3, #6
 800128a:	d807      	bhi.n	800129c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800128c:	4b2c      	ldr	r3, [pc, #176]	@ (8001340 <SystemInit+0xd4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f023 030f 	bic.w	r3, r3, #15
 8001294:	4a2a      	ldr	r2, [pc, #168]	@ (8001340 <SystemInit+0xd4>)
 8001296:	f043 0307 	orr.w	r3, r3, #7
 800129a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800129c:	4b29      	ldr	r3, [pc, #164]	@ (8001344 <SystemInit+0xd8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a28      	ldr	r2, [pc, #160]	@ (8001344 <SystemInit+0xd8>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012a8:	4b26      	ldr	r3, [pc, #152]	@ (8001344 <SystemInit+0xd8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012ae:	4b25      	ldr	r3, [pc, #148]	@ (8001344 <SystemInit+0xd8>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4924      	ldr	r1, [pc, #144]	@ (8001344 <SystemInit+0xd8>)
 80012b4:	4b24      	ldr	r3, [pc, #144]	@ (8001348 <SystemInit+0xdc>)
 80012b6:	4013      	ands	r3, r2
 80012b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012ba:	4b21      	ldr	r3, [pc, #132]	@ (8001340 <SystemInit+0xd4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d007      	beq.n	80012d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001340 <SystemInit+0xd4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 030f 	bic.w	r3, r3, #15
 80012ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001340 <SystemInit+0xd4>)
 80012d0:	f043 0307 	orr.w	r3, r3, #7
 80012d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <SystemInit+0xd8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80012dc:	4b19      	ldr	r3, [pc, #100]	@ (8001344 <SystemInit+0xd8>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80012e2:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <SystemInit+0xd8>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012e8:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <SystemInit+0xd8>)
 80012ea:	4a18      	ldr	r2, [pc, #96]	@ (800134c <SystemInit+0xe0>)
 80012ec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012ee:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <SystemInit+0xd8>)
 80012f0:	4a17      	ldr	r2, [pc, #92]	@ (8001350 <SystemInit+0xe4>)
 80012f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012f4:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <SystemInit+0xd8>)
 80012f6:	4a17      	ldr	r2, [pc, #92]	@ (8001354 <SystemInit+0xe8>)
 80012f8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012fa:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <SystemInit+0xd8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001300:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <SystemInit+0xd8>)
 8001302:	4a14      	ldr	r2, [pc, #80]	@ (8001354 <SystemInit+0xe8>)
 8001304:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001306:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <SystemInit+0xd8>)
 8001308:	2200      	movs	r2, #0
 800130a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800130c:	4b0d      	ldr	r3, [pc, #52]	@ (8001344 <SystemInit+0xd8>)
 800130e:	4a11      	ldr	r2, [pc, #68]	@ (8001354 <SystemInit+0xe8>)
 8001310:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001312:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <SystemInit+0xd8>)
 8001314:	2200      	movs	r2, #0
 8001316:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001318:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <SystemInit+0xd8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a09      	ldr	r2, [pc, #36]	@ (8001344 <SystemInit+0xd8>)
 800131e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001322:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001324:	4b07      	ldr	r3, [pc, #28]	@ (8001344 <SystemInit+0xd8>)
 8001326:	2200      	movs	r2, #0
 8001328:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <SystemInit+0xec>)
 800132c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001330:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00
 8001340:	52002000 	.word	0x52002000
 8001344:	58024400 	.word	0x58024400
 8001348:	eaf6ed7f 	.word	0xeaf6ed7f
 800134c:	02020200 	.word	0x02020200
 8001350:	01ff0000 	.word	0x01ff0000
 8001354:	01010280 	.word	0x01010280
 8001358:	52004000 	.word	0x52004000

0800135c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800135c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001394 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001360:	f7ff ff84 	bl	800126c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001364:	480c      	ldr	r0, [pc, #48]	@ (8001398 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001366:	490d      	ldr	r1, [pc, #52]	@ (800139c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001368:	4a0d      	ldr	r2, [pc, #52]	@ (80013a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800136c:	e002      	b.n	8001374 <LoopCopyDataInit>

0800136e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001372:	3304      	adds	r3, #4

08001374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001378:	d3f9      	bcc.n	800136e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137a:	4a0a      	ldr	r2, [pc, #40]	@ (80013a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800137c:	4c0a      	ldr	r4, [pc, #40]	@ (80013a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001380:	e001      	b.n	8001386 <LoopFillZerobss>

08001382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001384:	3204      	adds	r2, #4

08001386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001388:	d3fb      	bcc.n	8001382 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800138a:	f005 f863 	bl	8006454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138e:	f7ff f9cd 	bl	800072c <main>
  bx  lr
 8001392:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001394:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001398:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800139c:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 80013a0:	08007074 	.word	0x08007074
  ldr r2, =_sbss
 80013a4:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 80013a8:	2400054c 	.word	0x2400054c

080013ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC3_IRQHandler>
	...

080013b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b6:	2003      	movs	r0, #3
 80013b8:	f000 f976 	bl	80016a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013bc:	f001 fd66 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <HAL_Init+0x68>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	0a1b      	lsrs	r3, r3, #8
 80013c8:	f003 030f 	and.w	r3, r3, #15
 80013cc:	4913      	ldr	r1, [pc, #76]	@ (800141c <HAL_Init+0x6c>)
 80013ce:	5ccb      	ldrb	r3, [r1, r3]
 80013d0:	f003 031f 	and.w	r3, r3, #31
 80013d4:	fa22 f303 	lsr.w	r3, r2, r3
 80013d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013da:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <HAL_Init+0x68>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	4a0e      	ldr	r2, [pc, #56]	@ (800141c <HAL_Init+0x6c>)
 80013e4:	5cd3      	ldrb	r3, [r2, r3]
 80013e6:	f003 031f 	and.w	r3, r3, #31
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	fa22 f303 	lsr.w	r3, r2, r3
 80013f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001420 <HAL_Init+0x70>)
 80013f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001424 <HAL_Init+0x74>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013fa:	2000      	movs	r0, #0
 80013fc:	f000 f814 	bl	8001428 <HAL_InitTick>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e002      	b.n	8001410 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800140a:	f7ff fc63 	bl	8000cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	58024400 	.word	0x58024400
 800141c:	08006ff8 	.word	0x08006ff8
 8001420:	24000004 	.word	0x24000004
 8001424:	24000000 	.word	0x24000000

08001428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001430:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <HAL_InitTick+0x60>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e021      	b.n	8001480 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800143c:	4b13      	ldr	r3, [pc, #76]	@ (800148c <HAL_InitTick+0x64>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <HAL_InitTick+0x60>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800144a:	fbb3 f3f1 	udiv	r3, r3, r1
 800144e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f94d 	bl	80016f2 <HAL_SYSTICK_Config>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e00e      	b.n	8001480 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b0f      	cmp	r3, #15
 8001466:	d80a      	bhi.n	800147e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001468:	2200      	movs	r2, #0
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f000 f925 	bl	80016be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001474:	4a06      	ldr	r2, [pc, #24]	@ (8001490 <HAL_InitTick+0x68>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	e000      	b.n	8001480 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	2400000c 	.word	0x2400000c
 800148c:	24000000 	.word	0x24000000
 8001490:	24000008 	.word	0x24000008

08001494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <HAL_IncTick+0x20>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_IncTick+0x24>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	4a04      	ldr	r2, [pc, #16]	@ (80014b8 <HAL_IncTick+0x24>)
 80014a6:	6013      	str	r3, [r2, #0]
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	2400000c 	.word	0x2400000c
 80014b8:	240003fc 	.word	0x240003fc

080014bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b03      	ldr	r3, [pc, #12]	@ (80014d0 <HAL_GetTick+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	240003fc 	.word	0x240003fc

080014d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff ffee 	bl	80014bc <HAL_GetTick>
 80014e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ec:	d005      	beq.n	80014fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001518 <HAL_Delay+0x44>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014fa:	bf00      	nop
 80014fc:	f7ff ffde 	bl	80014bc <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	429a      	cmp	r2, r3
 800150a:	d8f7      	bhi.n	80014fc <HAL_Delay+0x28>
  {
  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2400000c 	.word	0x2400000c

0800151c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800152c:	4904      	ldr	r1, [pc, #16]	@ (8001540 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4313      	orrs	r3, r2
 8001532:	604b      	str	r3, [r1, #4]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	58000400 	.word	0x58000400

08001544 <__NVIC_SetPriorityGrouping>:
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001554:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <__NVIC_SetPriorityGrouping+0x40>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001560:	4013      	ands	r3, r2
 8001562:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800156c:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 800156e:	4313      	orrs	r3, r2
 8001570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001572:	4a04      	ldr	r2, [pc, #16]	@ (8001584 <__NVIC_SetPriorityGrouping+0x40>)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	60d3      	str	r3, [r2, #12]
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00
 8001588:	05fa0000 	.word	0x05fa0000

0800158c <__NVIC_GetPriorityGrouping>:
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001590:	4b04      	ldr	r3, [pc, #16]	@ (80015a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	f003 0307 	and.w	r3, r3, #7
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_SetPriority>:
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	db0a      	blt.n	80015d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	490c      	ldr	r1, [pc, #48]	@ (80015f4 <__NVIC_SetPriority+0x4c>)
 80015c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015c6:	0112      	lsls	r2, r2, #4
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	440b      	add	r3, r1
 80015cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80015d0:	e00a      	b.n	80015e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4908      	ldr	r1, [pc, #32]	@ (80015f8 <__NVIC_SetPriority+0x50>)
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	3b04      	subs	r3, #4
 80015e0:	0112      	lsls	r2, r2, #4
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	440b      	add	r3, r1
 80015e6:	761a      	strb	r2, [r3, #24]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000e100 	.word	0xe000e100
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <NVIC_EncodePriority>:
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	@ 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f1c3 0307 	rsb	r3, r3, #7
 8001616:	2b04      	cmp	r3, #4
 8001618:	bf28      	it	cs
 800161a:	2304      	movcs	r3, #4
 800161c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3304      	adds	r3, #4
 8001622:	2b06      	cmp	r3, #6
 8001624:	d902      	bls.n	800162c <NVIC_EncodePriority+0x30>
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3b03      	subs	r3, #3
 800162a:	e000      	b.n	800162e <NVIC_EncodePriority+0x32>
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	f04f 32ff 	mov.w	r2, #4294967295
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	401a      	ands	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001644:	f04f 31ff 	mov.w	r1, #4294967295
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	43d9      	mvns	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	4313      	orrs	r3, r2
}
 8001656:	4618      	mov	r0, r3
 8001658:	3724      	adds	r7, #36	@ 0x24
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <SysTick_Config>:
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001674:	d301      	bcc.n	800167a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001676:	2301      	movs	r3, #1
 8001678:	e00f      	b.n	800169a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167a:	4a0a      	ldr	r2, [pc, #40]	@ (80016a4 <SysTick_Config+0x40>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001682:	210f      	movs	r1, #15
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f7ff ff8e 	bl	80015a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800168c:	4b05      	ldr	r3, [pc, #20]	@ (80016a4 <SysTick_Config+0x40>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001692:	4b04      	ldr	r3, [pc, #16]	@ (80016a4 <SysTick_Config+0x40>)
 8001694:	2207      	movs	r2, #7
 8001696:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	e000e010 	.word	0xe000e010

080016a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff47 	bl	8001544 <__NVIC_SetPriorityGrouping>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b086      	sub	sp, #24
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016cc:	f7ff ff5e 	bl	800158c <__NVIC_GetPriorityGrouping>
 80016d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	6978      	ldr	r0, [r7, #20]
 80016d8:	f7ff ff90 	bl	80015fc <NVIC_EncodePriority>
 80016dc:	4602      	mov	r2, r0
 80016de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff5f 	bl	80015a8 <__NVIC_SetPriority>
}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ffb2 	bl	8001664 <SysTick_Config>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e0e3      	b.n	80018e6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001724:	2b00      	cmp	r3, #0
 8001726:	d106      	bne.n	8001736 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2223      	movs	r2, #35	@ 0x23
 800172c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff fae9 	bl	8000d08 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	4b6e      	ldr	r3, [pc, #440]	@ (80018f0 <HAL_ETH_Init+0x1e4>)
 8001738:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800173c:	4a6c      	ldr	r2, [pc, #432]	@ (80018f0 <HAL_ETH_Init+0x1e4>)
 800173e:	f043 0302 	orr.w	r3, r3, #2
 8001742:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001746:	4b6a      	ldr	r3, [pc, #424]	@ (80018f0 <HAL_ETH_Init+0x1e4>)
 8001748:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7a1b      	ldrb	r3, [r3, #8]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d103      	bne.n	8001764 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800175c:	2000      	movs	r0, #0
 800175e:	f7ff fedd 	bl	800151c <HAL_SYSCFG_ETHInterfaceSelect>
 8001762:	e003      	b.n	800176c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001764:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001768:	f7ff fed8 	bl	800151c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800176c:	4b61      	ldr	r3, [pc, #388]	@ (80018f4 <HAL_ETH_Init+0x1e8>)
 800176e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6812      	ldr	r2, [r2, #0]
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001786:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001788:	f7ff fe98 	bl	80014bc <HAL_GetTick>
 800178c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800178e:	e011      	b.n	80017b4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001790:	f7ff fe94 	bl	80014bc <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800179e:	d909      	bls.n	80017b4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2204      	movs	r2, #4
 80017a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	22e0      	movs	r2, #224	@ 0xe0
 80017ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e098      	b.n	80018e6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1e4      	bne.n	8001790 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f89e 	bl	8001908 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80017cc:	f001 fcd8 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 80017d0:	4603      	mov	r3, r0
 80017d2:	4a49      	ldr	r2, [pc, #292]	@ (80018f8 <HAL_ETH_Init+0x1ec>)
 80017d4:	fba2 2303 	umull	r2, r3, r2, r3
 80017d8:	0c9a      	lsrs	r2, r3, #18
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3a01      	subs	r2, #1
 80017e0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 fa81 	bl	8001cec <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80017f6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6812      	ldr	r2, [r2, #0]
 80017fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001802:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001806:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d009      	beq.n	800182a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	22e0      	movs	r2, #224	@ 0xe0
 8001822:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e05d      	b.n	80018e6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001832:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001836:	4b31      	ldr	r3, [pc, #196]	@ (80018fc <HAL_ETH_Init+0x1f0>)
 8001838:	4013      	ands	r3, r2
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6952      	ldr	r2, [r2, #20]
 800183e:	0051      	lsls	r1, r2, #1
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	430b      	orrs	r3, r1
 8001846:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800184a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 fae9 	bl	8001e26 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 fb2f 	bl	8001eb8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	3305      	adds	r3, #5
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	021a      	lsls	r2, r3, #8
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	3304      	adds	r3, #4
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4619      	mov	r1, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	3303      	adds	r3, #3
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	061a      	lsls	r2, r3, #24
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	3302      	adds	r3, #2
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	041b      	lsls	r3, r3, #16
 800188c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	3301      	adds	r3, #1
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001898:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018a6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018a8:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <HAL_ETH_Init+0x1f4>)
 80018ba:	430b      	orrs	r3, r1
 80018bc:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001904 <HAL_ETH_Init+0x1f8>)
 80018ce:	430b      	orrs	r3, r1
 80018d0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2210      	movs	r2, #16
 80018e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	58024400 	.word	0x58024400
 80018f4:	58000400 	.word	0x58000400
 80018f8:	431bde83 	.word	0x431bde83
 80018fc:	ffff8001 	.word	0xffff8001
 8001900:	0c020060 	.word	0x0c020060
 8001904:	0c20c000 	.word	0x0c20c000

08001908 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001918:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001920:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001922:	f001 fc2d 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 8001926:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	4a1a      	ldr	r2, [pc, #104]	@ (8001994 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d804      	bhi.n	800193a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	e022      	b.n	8001980 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	4a16      	ldr	r2, [pc, #88]	@ (8001998 <HAL_ETH_SetMDIOClockRange+0x90>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d204      	bcs.n	800194c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	e019      	b.n	8001980 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	4a13      	ldr	r2, [pc, #76]	@ (800199c <HAL_ETH_SetMDIOClockRange+0x94>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d915      	bls.n	8001980 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	4a12      	ldr	r2, [pc, #72]	@ (80019a0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d804      	bhi.n	8001966 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	e00c      	b.n	8001980 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	4a0e      	ldr	r2, [pc, #56]	@ (80019a4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d804      	bhi.n	8001978 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	e003      	b.n	8001980 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800197e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	02160ebf 	.word	0x02160ebf
 8001998:	03938700 	.word	0x03938700
 800199c:	05f5e0ff 	.word	0x05f5e0ff
 80019a0:	08f0d17f 	.word	0x08f0d17f
 80019a4:	0ee6b27f 	.word	0x0ee6b27f

080019a8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80019ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	791b      	ldrb	r3, [r3, #4]
 80019c0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80019c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	7b1b      	ldrb	r3, [r3, #12]
 80019c8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80019ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	7b5b      	ldrb	r3, [r3, #13]
 80019d0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80019d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	7b9b      	ldrb	r3, [r3, #14]
 80019d8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80019da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	7bdb      	ldrb	r3, [r3, #15]
 80019e0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80019e2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	7c12      	ldrb	r2, [r2, #16]
 80019e8:	2a00      	cmp	r2, #0
 80019ea:	d102      	bne.n	80019f2 <ETH_SetMACConfig+0x4a>
 80019ec:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80019f0:	e000      	b.n	80019f4 <ETH_SetMACConfig+0x4c>
 80019f2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80019f4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	7c52      	ldrb	r2, [r2, #17]
 80019fa:	2a00      	cmp	r2, #0
 80019fc:	d102      	bne.n	8001a04 <ETH_SetMACConfig+0x5c>
 80019fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a02:	e000      	b.n	8001a06 <ETH_SetMACConfig+0x5e>
 8001a04:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	7c9b      	ldrb	r3, [r3, #18]
 8001a0c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a0e:	431a      	orrs	r2, r3
               macconf->Speed |
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001a14:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001a1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	7f1b      	ldrb	r3, [r3, #28]
 8001a20:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001a22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	7f5b      	ldrb	r3, [r3, #29]
 8001a28:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a2a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	7f92      	ldrb	r2, [r2, #30]
 8001a30:	2a00      	cmp	r2, #0
 8001a32:	d102      	bne.n	8001a3a <ETH_SetMACConfig+0x92>
 8001a34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a38:	e000      	b.n	8001a3c <ETH_SetMACConfig+0x94>
 8001a3a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a3c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	7fdb      	ldrb	r3, [r3, #31]
 8001a42:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a44:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001a4c:	2a00      	cmp	r2, #0
 8001a4e:	d102      	bne.n	8001a56 <ETH_SetMACConfig+0xae>
 8001a50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a54:	e000      	b.n	8001a58 <ETH_SetMACConfig+0xb0>
 8001a56:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a58:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001a66:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001a68:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b56      	ldr	r3, [pc, #344]	@ (8001bd4 <ETH_SetMACConfig+0x22c>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	68f9      	ldr	r1, [r7, #12]
 8001a82:	430b      	orrs	r3, r1
 8001a84:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a8a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a92:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a94:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a9c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001a9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001aa6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001aa8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001ab0:	2a00      	cmp	r2, #0
 8001ab2:	d102      	bne.n	8001aba <ETH_SetMACConfig+0x112>
 8001ab4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ab8:	e000      	b.n	8001abc <ETH_SetMACConfig+0x114>
 8001aba:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001abc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	4b42      	ldr	r3, [pc, #264]	@ (8001bd8 <ETH_SetMACConfig+0x230>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6812      	ldr	r2, [r2, #0]
 8001ad4:	68f9      	ldr	r1, [r7, #12]
 8001ad6:	430b      	orrs	r3, r1
 8001ad8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ae0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	4b3a      	ldr	r3, [pc, #232]	@ (8001bdc <ETH_SetMACConfig+0x234>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	68f9      	ldr	r1, [r7, #12]
 8001afa:	430b      	orrs	r3, r1
 8001afc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001b04:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b0a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001b12:	2a00      	cmp	r2, #0
 8001b14:	d101      	bne.n	8001b1a <ETH_SetMACConfig+0x172>
 8001b16:	2280      	movs	r2, #128	@ 0x80
 8001b18:	e000      	b.n	8001b1c <ETH_SetMACConfig+0x174>
 8001b1a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001b1c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b22:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b24:	4313      	orrs	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b2e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001b32:	4013      	ands	r3, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	68f9      	ldr	r1, [r7, #12]
 8001b3a:	430b      	orrs	r3, r1
 8001b3c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001b44:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001b4c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b5a:	f023 0103 	bic.w	r1, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001b72:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001b8e:	2a00      	cmp	r2, #0
 8001b90:	d101      	bne.n	8001b96 <ETH_SetMACConfig+0x1ee>
 8001b92:	2240      	movs	r2, #64	@ 0x40
 8001b94:	e000      	b.n	8001b98 <ETH_SetMACConfig+0x1f0>
 8001b96:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001b98:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001ba0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001ba2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001baa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001bac:	4313      	orrs	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001bb8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	00048083 	.word	0x00048083
 8001bd8:	c0f88000 	.word	0xc0f88000
 8001bdc:	fffffef0 	.word	0xfffffef0

08001be0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b38      	ldr	r3, [pc, #224]	@ (8001cd8 <ETH_SetDMAConfig+0xf8>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	6811      	ldr	r1, [r2, #0]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	430b      	orrs	r3, r1
 8001c02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c06:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	791b      	ldrb	r3, [r3, #4]
 8001c0c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c12:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	7b1b      	ldrb	r3, [r3, #12]
 8001c18:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	4b2c      	ldr	r3, [pc, #176]	@ (8001cdc <ETH_SetDMAConfig+0xfc>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	68f9      	ldr	r1, [r7, #12]
 8001c32:	430b      	orrs	r3, r1
 8001c34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c38:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	7b5b      	ldrb	r3, [r3, #13]
 8001c3e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c44:	4313      	orrs	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c50:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001c54:	4b22      	ldr	r3, [pc, #136]	@ (8001ce0 <ETH_SetDMAConfig+0x100>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	68f9      	ldr	r1, [r7, #12]
 8001c5e:	430b      	orrs	r3, r1
 8001c60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c64:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	7d1b      	ldrb	r3, [r3, #20]
 8001c70:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c72:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	7f5b      	ldrb	r3, [r3, #29]
 8001c78:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c86:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001c8a:	4b16      	ldr	r3, [pc, #88]	@ (8001ce4 <ETH_SetDMAConfig+0x104>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	68f9      	ldr	r1, [r7, #12]
 8001c94:	430b      	orrs	r3, r1
 8001c96:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c9a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	7f1b      	ldrb	r3, [r3, #28]
 8001ca2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cb4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <ETH_SetDMAConfig+0x108>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	68f9      	ldr	r1, [r7, #12]
 8001cc2:	430b      	orrs	r3, r1
 8001cc4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cc8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	ffff87fd 	.word	0xffff87fd
 8001cdc:	ffff2ffe 	.word	0xffff2ffe
 8001ce0:	fffec000 	.word	0xfffec000
 8001ce4:	ffc0efef 	.word	0xffc0efef
 8001ce8:	7fc0ffff 	.word	0x7fc0ffff

08001cec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b0a4      	sub	sp, #144	@ 0x90
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001d10:	2301      	movs	r3, #1
 8001d12:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001d16:	2301      	movs	r3, #1
 8001d18:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001d22:	2301      	movs	r3, #1
 8001d24:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d2c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001d44:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001d48:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001d50:	2300      	movs	r3, #0
 8001d52:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001d54:	2301      	movs	r3, #1
 8001d56:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001d66:	2300      	movs	r3, #0
 8001d68:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001d84:	2320      	movs	r3, #32
 8001d86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001d96:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d9c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001da0:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001da8:	2302      	movs	r3, #2
 8001daa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001dd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff fde6 	bl	80019a8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001de0:	2301      	movs	r3, #1
 8001de2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001df6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001dfa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e00:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001e04:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001e0c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001e10:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e12:	f107 0308 	add.w	r3, r7, #8
 8001e16:	4619      	mov	r1, r3
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff fee1 	bl	8001be0 <ETH_SetDMAConfig>
}
 8001e1e:	bf00      	nop
 8001e20:	3790      	adds	r7, #144	@ 0x90
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b085      	sub	sp, #20
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	e01d      	b.n	8001e70 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68d9      	ldr	r1, [r3, #12]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	440b      	add	r3, r1
 8001e44:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e5e:	68b9      	ldr	r1, [r7, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	3206      	adds	r2, #6
 8001e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d9de      	bls.n	8001e34 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e84:	461a      	mov	r2, r3
 8001e86:	2303      	movs	r3, #3
 8001e88:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e98:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ea8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	e023      	b.n	8001f0e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6919      	ldr	r1, [r3, #16]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	440b      	add	r3, r1
 8001ed6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2200      	movs	r2, #0
 8001eee:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	3212      	adds	r2, #18
 8001f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d9d8      	bls.n	8001ec6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691a      	ldr	r2, [r3, #16]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f4e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f62:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	@ 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f82:	4b86      	ldr	r3, [pc, #536]	@ (800219c <HAL_GPIO_Init+0x228>)
 8001f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f86:	e18c      	b.n	80022a2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 817e 	beq.w	800229c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d005      	beq.n	8001fb8 <HAL_GPIO_Init+0x44>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d130      	bne.n	800201a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fee:	2201      	movs	r2, #1
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	091b      	lsrs	r3, r3, #4
 8002004:	f003 0201 	and.w	r2, r3, #1
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	2b03      	cmp	r3, #3
 8002024:	d017      	beq.n	8002056 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	2203      	movs	r2, #3
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d123      	bne.n	80020aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	08da      	lsrs	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3208      	adds	r2, #8
 800206a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	220f      	movs	r2, #15
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	08da      	lsrs	r2, r3, #3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3208      	adds	r2, #8
 80020a4:	69b9      	ldr	r1, [r7, #24]
 80020a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	2203      	movs	r2, #3
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0203 	and.w	r2, r3, #3
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80d8 	beq.w	800229c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ec:	4b2c      	ldr	r3, [pc, #176]	@ (80021a0 <HAL_GPIO_Init+0x22c>)
 80020ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020f2:	4a2b      	ldr	r2, [pc, #172]	@ (80021a0 <HAL_GPIO_Init+0x22c>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80020fc:	4b28      	ldr	r3, [pc, #160]	@ (80021a0 <HAL_GPIO_Init+0x22c>)
 80020fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800210a:	4a26      	ldr	r2, [pc, #152]	@ (80021a4 <HAL_GPIO_Init+0x230>)
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	089b      	lsrs	r3, r3, #2
 8002110:	3302      	adds	r3, #2
 8002112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	220f      	movs	r2, #15
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a1d      	ldr	r2, [pc, #116]	@ (80021a8 <HAL_GPIO_Init+0x234>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d04a      	beq.n	80021cc <HAL_GPIO_Init+0x258>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a1c      	ldr	r2, [pc, #112]	@ (80021ac <HAL_GPIO_Init+0x238>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d02b      	beq.n	8002196 <HAL_GPIO_Init+0x222>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a1b      	ldr	r2, [pc, #108]	@ (80021b0 <HAL_GPIO_Init+0x23c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d025      	beq.n	8002192 <HAL_GPIO_Init+0x21e>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a1a      	ldr	r2, [pc, #104]	@ (80021b4 <HAL_GPIO_Init+0x240>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d01f      	beq.n	800218e <HAL_GPIO_Init+0x21a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a19      	ldr	r2, [pc, #100]	@ (80021b8 <HAL_GPIO_Init+0x244>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d019      	beq.n	800218a <HAL_GPIO_Init+0x216>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a18      	ldr	r2, [pc, #96]	@ (80021bc <HAL_GPIO_Init+0x248>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d013      	beq.n	8002186 <HAL_GPIO_Init+0x212>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a17      	ldr	r2, [pc, #92]	@ (80021c0 <HAL_GPIO_Init+0x24c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00d      	beq.n	8002182 <HAL_GPIO_Init+0x20e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a16      	ldr	r2, [pc, #88]	@ (80021c4 <HAL_GPIO_Init+0x250>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d007      	beq.n	800217e <HAL_GPIO_Init+0x20a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a15      	ldr	r2, [pc, #84]	@ (80021c8 <HAL_GPIO_Init+0x254>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d101      	bne.n	800217a <HAL_GPIO_Init+0x206>
 8002176:	2309      	movs	r3, #9
 8002178:	e029      	b.n	80021ce <HAL_GPIO_Init+0x25a>
 800217a:	230a      	movs	r3, #10
 800217c:	e027      	b.n	80021ce <HAL_GPIO_Init+0x25a>
 800217e:	2307      	movs	r3, #7
 8002180:	e025      	b.n	80021ce <HAL_GPIO_Init+0x25a>
 8002182:	2306      	movs	r3, #6
 8002184:	e023      	b.n	80021ce <HAL_GPIO_Init+0x25a>
 8002186:	2305      	movs	r3, #5
 8002188:	e021      	b.n	80021ce <HAL_GPIO_Init+0x25a>
 800218a:	2304      	movs	r3, #4
 800218c:	e01f      	b.n	80021ce <HAL_GPIO_Init+0x25a>
 800218e:	2303      	movs	r3, #3
 8002190:	e01d      	b.n	80021ce <HAL_GPIO_Init+0x25a>
 8002192:	2302      	movs	r3, #2
 8002194:	e01b      	b.n	80021ce <HAL_GPIO_Init+0x25a>
 8002196:	2301      	movs	r3, #1
 8002198:	e019      	b.n	80021ce <HAL_GPIO_Init+0x25a>
 800219a:	bf00      	nop
 800219c:	58000080 	.word	0x58000080
 80021a0:	58024400 	.word	0x58024400
 80021a4:	58000400 	.word	0x58000400
 80021a8:	58020000 	.word	0x58020000
 80021ac:	58020400 	.word	0x58020400
 80021b0:	58020800 	.word	0x58020800
 80021b4:	58020c00 	.word	0x58020c00
 80021b8:	58021000 	.word	0x58021000
 80021bc:	58021400 	.word	0x58021400
 80021c0:	58021800 	.word	0x58021800
 80021c4:	58021c00 	.word	0x58021c00
 80021c8:	58022400 	.word	0x58022400
 80021cc:	2300      	movs	r3, #0
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	f002 0203 	and.w	r2, r2, #3
 80021d4:	0092      	lsls	r2, r2, #2
 80021d6:	4093      	lsls	r3, r2
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021de:	4938      	ldr	r1, [pc, #224]	@ (80022c0 <HAL_GPIO_Init+0x34c>)
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	089b      	lsrs	r3, r3, #2
 80021e4:	3302      	adds	r3, #2
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002212:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800221a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002240:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	3301      	adds	r3, #1
 80022a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f47f ae6b 	bne.w	8001f88 <HAL_GPIO_Init+0x14>
  }
}
 80022b2:	bf00      	nop
 80022b4:	bf00      	nop
 80022b6:	3724      	adds	r7, #36	@ 0x24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	58000400 	.word	0x58000400

080022c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
 80022d0:	4613      	mov	r3, r2
 80022d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022d4:	787b      	ldrb	r3, [r7, #1]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80022e0:	e003      	b.n	80022ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80022e2:	887b      	ldrh	r3, [r7, #2]
 80022e4:	041a      	lsls	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	619a      	str	r2, [r3, #24]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002300:	4b19      	ldr	r3, [pc, #100]	@ (8002368 <HAL_PWREx_ConfigSupply+0x70>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b04      	cmp	r3, #4
 800230a:	d00a      	beq.n	8002322 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800230c:	4b16      	ldr	r3, [pc, #88]	@ (8002368 <HAL_PWREx_ConfigSupply+0x70>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	429a      	cmp	r2, r3
 8002318:	d001      	beq.n	800231e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e01f      	b.n	800235e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e01d      	b.n	800235e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002322:	4b11      	ldr	r3, [pc, #68]	@ (8002368 <HAL_PWREx_ConfigSupply+0x70>)
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f023 0207 	bic.w	r2, r3, #7
 800232a:	490f      	ldr	r1, [pc, #60]	@ (8002368 <HAL_PWREx_ConfigSupply+0x70>)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4313      	orrs	r3, r2
 8002330:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002332:	f7ff f8c3 	bl	80014bc <HAL_GetTick>
 8002336:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002338:	e009      	b.n	800234e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800233a:	f7ff f8bf 	bl	80014bc <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002348:	d901      	bls.n	800234e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e007      	b.n	800235e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800234e:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <HAL_PWREx_ConfigSupply+0x70>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002356:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800235a:	d1ee      	bne.n	800233a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	58024800 	.word	0x58024800

0800236c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08c      	sub	sp, #48	@ 0x30
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e3c8      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 8087 	beq.w	800249a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800238c:	4b88      	ldr	r3, [pc, #544]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002394:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002396:	4b86      	ldr	r3, [pc, #536]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 8002398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800239c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800239e:	2b10      	cmp	r3, #16
 80023a0:	d007      	beq.n	80023b2 <HAL_RCC_OscConfig+0x46>
 80023a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a4:	2b18      	cmp	r3, #24
 80023a6:	d110      	bne.n	80023ca <HAL_RCC_OscConfig+0x5e>
 80023a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d10b      	bne.n	80023ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b2:	4b7f      	ldr	r3, [pc, #508]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d06c      	beq.n	8002498 <HAL_RCC_OscConfig+0x12c>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d168      	bne.n	8002498 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e3a2      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023d2:	d106      	bne.n	80023e2 <HAL_RCC_OscConfig+0x76>
 80023d4:	4b76      	ldr	r3, [pc, #472]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a75      	ldr	r2, [pc, #468]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 80023da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	e02e      	b.n	8002440 <HAL_RCC_OscConfig+0xd4>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10c      	bne.n	8002404 <HAL_RCC_OscConfig+0x98>
 80023ea:	4b71      	ldr	r3, [pc, #452]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a70      	ldr	r2, [pc, #448]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 80023f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	4b6e      	ldr	r3, [pc, #440]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a6d      	ldr	r2, [pc, #436]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 80023fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	e01d      	b.n	8002440 <HAL_RCC_OscConfig+0xd4>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800240c:	d10c      	bne.n	8002428 <HAL_RCC_OscConfig+0xbc>
 800240e:	4b68      	ldr	r3, [pc, #416]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a67      	ldr	r2, [pc, #412]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 8002414:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	4b65      	ldr	r3, [pc, #404]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a64      	ldr	r2, [pc, #400]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 8002420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	e00b      	b.n	8002440 <HAL_RCC_OscConfig+0xd4>
 8002428:	4b61      	ldr	r3, [pc, #388]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a60      	ldr	r2, [pc, #384]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 800242e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	4b5e      	ldr	r3, [pc, #376]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a5d      	ldr	r2, [pc, #372]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 800243a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800243e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d013      	beq.n	8002470 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7ff f838 	bl	80014bc <HAL_GetTick>
 800244c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002450:	f7ff f834 	bl	80014bc <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	@ 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e356      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002462:	4b53      	ldr	r3, [pc, #332]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0xe4>
 800246e:	e014      	b.n	800249a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7ff f824 	bl	80014bc <HAL_GetTick>
 8002474:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002478:	f7ff f820 	bl	80014bc <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	@ 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e342      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800248a:	4b49      	ldr	r3, [pc, #292]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x10c>
 8002496:	e000      	b.n	800249a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 808c 	beq.w	80025c0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a8:	4b41      	ldr	r3, [pc, #260]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024b2:	4b3f      	ldr	r3, [pc, #252]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 80024b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d007      	beq.n	80024ce <HAL_RCC_OscConfig+0x162>
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	2b18      	cmp	r3, #24
 80024c2:	d137      	bne.n	8002534 <HAL_RCC_OscConfig+0x1c8>
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d132      	bne.n	8002534 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024ce:	4b38      	ldr	r3, [pc, #224]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <HAL_RCC_OscConfig+0x17a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e314      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024e6:	4b32      	ldr	r3, [pc, #200]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 0219 	bic.w	r2, r3, #25
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	492f      	ldr	r1, [pc, #188]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7fe ffe0 	bl	80014bc <HAL_GetTick>
 80024fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002500:	f7fe ffdc 	bl	80014bc <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e2fe      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002512:	4b27      	ldr	r3, [pc, #156]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251e:	4b24      	ldr	r3, [pc, #144]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	061b      	lsls	r3, r3, #24
 800252c:	4920      	ldr	r1, [pc, #128]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 800252e:	4313      	orrs	r3, r2
 8002530:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002532:	e045      	b.n	80025c0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d026      	beq.n	800258a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800253c:	4b1c      	ldr	r3, [pc, #112]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f023 0219 	bic.w	r2, r3, #25
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	4919      	ldr	r1, [pc, #100]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254e:	f7fe ffb5 	bl	80014bc <HAL_GetTick>
 8002552:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002556:	f7fe ffb1 	bl	80014bc <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e2d3      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002568:	4b11      	ldr	r3, [pc, #68]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002574:	4b0e      	ldr	r3, [pc, #56]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	061b      	lsls	r3, r3, #24
 8002582:	490b      	ldr	r1, [pc, #44]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]
 8002588:	e01a      	b.n	80025c0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258a:	4b09      	ldr	r3, [pc, #36]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a08      	ldr	r2, [pc, #32]	@ (80025b0 <HAL_RCC_OscConfig+0x244>)
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002596:	f7fe ff91 	bl	80014bc <HAL_GetTick>
 800259a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800259c:	e00a      	b.n	80025b4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259e:	f7fe ff8d 	bl	80014bc <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d903      	bls.n	80025b4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e2af      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a4>
 80025b0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025b4:	4b96      	ldr	r3, [pc, #600]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1ee      	bne.n	800259e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d06a      	beq.n	80026a2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025cc:	4b90      	ldr	r3, [pc, #576]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025d4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025d6:	4b8e      	ldr	r3, [pc, #568]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 80025d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025da:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d007      	beq.n	80025f2 <HAL_RCC_OscConfig+0x286>
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	2b18      	cmp	r3, #24
 80025e6:	d11b      	bne.n	8002620 <HAL_RCC_OscConfig+0x2b4>
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d116      	bne.n	8002620 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025f2:	4b87      	ldr	r3, [pc, #540]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d005      	beq.n	800260a <HAL_RCC_OscConfig+0x29e>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	2b80      	cmp	r3, #128	@ 0x80
 8002604:	d001      	beq.n	800260a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e282      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800260a:	4b81      	ldr	r3, [pc, #516]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	061b      	lsls	r3, r3, #24
 8002618:	497d      	ldr	r1, [pc, #500]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 800261a:	4313      	orrs	r3, r2
 800261c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800261e:	e040      	b.n	80026a2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d023      	beq.n	8002670 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002628:	4b79      	ldr	r3, [pc, #484]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a78      	ldr	r2, [pc, #480]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 800262e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7fe ff42 	bl	80014bc <HAL_GetTick>
 8002638:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800263c:	f7fe ff3e 	bl	80014bc <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e260      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800264e:	4b70      	ldr	r3, [pc, #448]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800265a:	4b6d      	ldr	r3, [pc, #436]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	061b      	lsls	r3, r3, #24
 8002668:	4969      	ldr	r1, [pc, #420]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 800266a:	4313      	orrs	r3, r2
 800266c:	60cb      	str	r3, [r1, #12]
 800266e:	e018      	b.n	80026a2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002670:	4b67      	ldr	r3, [pc, #412]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a66      	ldr	r2, [pc, #408]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 8002676:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800267a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7fe ff1e 	bl	80014bc <HAL_GetTick>
 8002680:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002684:	f7fe ff1a 	bl	80014bc <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e23c      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002696:	4b5e      	ldr	r3, [pc, #376]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d036      	beq.n	800271c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d019      	beq.n	80026ea <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026b6:	4b56      	ldr	r3, [pc, #344]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 80026b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ba:	4a55      	ldr	r2, [pc, #340]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c2:	f7fe fefb 	bl	80014bc <HAL_GetTick>
 80026c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ca:	f7fe fef7 	bl	80014bc <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e219      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 80026de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x35e>
 80026e8:	e018      	b.n	800271c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ea:	4b49      	ldr	r3, [pc, #292]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 80026ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ee:	4a48      	ldr	r2, [pc, #288]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 80026f0:	f023 0301 	bic.w	r3, r3, #1
 80026f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f6:	f7fe fee1 	bl	80014bc <HAL_GetTick>
 80026fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026fe:	f7fe fedd 	bl	80014bc <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e1ff      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002710:	4b3f      	ldr	r3, [pc, #252]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 8002712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f0      	bne.n	80026fe <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0320 	and.w	r3, r3, #32
 8002724:	2b00      	cmp	r3, #0
 8002726:	d036      	beq.n	8002796 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d019      	beq.n	8002764 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002730:	4b37      	ldr	r3, [pc, #220]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a36      	ldr	r2, [pc, #216]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 8002736:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800273a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800273c:	f7fe febe 	bl	80014bc <HAL_GetTick>
 8002740:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002744:	f7fe feba 	bl	80014bc <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e1dc      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002756:	4b2e      	ldr	r3, [pc, #184]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0x3d8>
 8002762:	e018      	b.n	8002796 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002764:	4b2a      	ldr	r3, [pc, #168]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a29      	ldr	r2, [pc, #164]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 800276a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800276e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002770:	f7fe fea4 	bl	80014bc <HAL_GetTick>
 8002774:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002778:	f7fe fea0 	bl	80014bc <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e1c2      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800278a:	4b21      	ldr	r3, [pc, #132]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8086 	beq.w	80028b0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002814 <HAL_RCC_OscConfig+0x4a8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a1a      	ldr	r2, [pc, #104]	@ (8002814 <HAL_RCC_OscConfig+0x4a8>)
 80027aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027b0:	f7fe fe84 	bl	80014bc <HAL_GetTick>
 80027b4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b8:	f7fe fe80 	bl	80014bc <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b64      	cmp	r3, #100	@ 0x64
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e1a2      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027ca:	4b12      	ldr	r3, [pc, #72]	@ (8002814 <HAL_RCC_OscConfig+0x4a8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d106      	bne.n	80027ec <HAL_RCC_OscConfig+0x480>
 80027de:	4b0c      	ldr	r3, [pc, #48]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ea:	e032      	b.n	8002852 <HAL_RCC_OscConfig+0x4e6>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d111      	bne.n	8002818 <HAL_RCC_OscConfig+0x4ac>
 80027f4:	4b06      	ldr	r3, [pc, #24]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 80027f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f8:	4a05      	ldr	r2, [pc, #20]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 80027fa:	f023 0301 	bic.w	r3, r3, #1
 80027fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002800:	4b03      	ldr	r3, [pc, #12]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002804:	4a02      	ldr	r2, [pc, #8]	@ (8002810 <HAL_RCC_OscConfig+0x4a4>)
 8002806:	f023 0304 	bic.w	r3, r3, #4
 800280a:	6713      	str	r3, [r2, #112]	@ 0x70
 800280c:	e021      	b.n	8002852 <HAL_RCC_OscConfig+0x4e6>
 800280e:	bf00      	nop
 8002810:	58024400 	.word	0x58024400
 8002814:	58024800 	.word	0x58024800
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b05      	cmp	r3, #5
 800281e:	d10c      	bne.n	800283a <HAL_RCC_OscConfig+0x4ce>
 8002820:	4b83      	ldr	r3, [pc, #524]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 8002822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002824:	4a82      	ldr	r2, [pc, #520]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 8002826:	f043 0304 	orr.w	r3, r3, #4
 800282a:	6713      	str	r3, [r2, #112]	@ 0x70
 800282c:	4b80      	ldr	r3, [pc, #512]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002830:	4a7f      	ldr	r2, [pc, #508]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6713      	str	r3, [r2, #112]	@ 0x70
 8002838:	e00b      	b.n	8002852 <HAL_RCC_OscConfig+0x4e6>
 800283a:	4b7d      	ldr	r3, [pc, #500]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 800283c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283e:	4a7c      	ldr	r2, [pc, #496]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 8002840:	f023 0301 	bic.w	r3, r3, #1
 8002844:	6713      	str	r3, [r2, #112]	@ 0x70
 8002846:	4b7a      	ldr	r3, [pc, #488]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284a:	4a79      	ldr	r2, [pc, #484]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 800284c:	f023 0304 	bic.w	r3, r3, #4
 8002850:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d015      	beq.n	8002886 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285a:	f7fe fe2f 	bl	80014bc <HAL_GetTick>
 800285e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002860:	e00a      	b.n	8002878 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002862:	f7fe fe2b 	bl	80014bc <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002870:	4293      	cmp	r3, r2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e14b      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002878:	4b6d      	ldr	r3, [pc, #436]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 800287a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0ee      	beq.n	8002862 <HAL_RCC_OscConfig+0x4f6>
 8002884:	e014      	b.n	80028b0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002886:	f7fe fe19 	bl	80014bc <HAL_GetTick>
 800288a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800288c:	e00a      	b.n	80028a4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288e:	f7fe fe15 	bl	80014bc <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800289c:	4293      	cmp	r3, r2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e135      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028a4:	4b62      	ldr	r3, [pc, #392]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1ee      	bne.n	800288e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 812a 	beq.w	8002b0e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80028ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028c2:	2b18      	cmp	r3, #24
 80028c4:	f000 80ba 	beq.w	8002a3c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	f040 8095 	bne.w	80029fc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d2:	4b57      	ldr	r3, [pc, #348]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a56      	ldr	r2, [pc, #344]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 80028d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028de:	f7fe fded 	bl	80014bc <HAL_GetTick>
 80028e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e6:	f7fe fde9 	bl	80014bc <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e10b      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002904:	4b4a      	ldr	r3, [pc, #296]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 8002906:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002908:	4b4a      	ldr	r3, [pc, #296]	@ (8002a34 <HAL_RCC_OscConfig+0x6c8>)
 800290a:	4013      	ands	r3, r2
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002914:	0112      	lsls	r2, r2, #4
 8002916:	430a      	orrs	r2, r1
 8002918:	4945      	ldr	r1, [pc, #276]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 800291a:	4313      	orrs	r3, r2
 800291c:	628b      	str	r3, [r1, #40]	@ 0x28
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002922:	3b01      	subs	r3, #1
 8002924:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800292c:	3b01      	subs	r3, #1
 800292e:	025b      	lsls	r3, r3, #9
 8002930:	b29b      	uxth	r3, r3
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002938:	3b01      	subs	r3, #1
 800293a:	041b      	lsls	r3, r3, #16
 800293c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002940:	431a      	orrs	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002946:	3b01      	subs	r3, #1
 8002948:	061b      	lsls	r3, r3, #24
 800294a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800294e:	4938      	ldr	r1, [pc, #224]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 8002950:	4313      	orrs	r3, r2
 8002952:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002954:	4b36      	ldr	r3, [pc, #216]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 8002956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002958:	4a35      	ldr	r2, [pc, #212]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 800295a:	f023 0301 	bic.w	r3, r3, #1
 800295e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002960:	4b33      	ldr	r3, [pc, #204]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 8002962:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002964:	4b34      	ldr	r3, [pc, #208]	@ (8002a38 <HAL_RCC_OscConfig+0x6cc>)
 8002966:	4013      	ands	r3, r2
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800296c:	00d2      	lsls	r2, r2, #3
 800296e:	4930      	ldr	r1, [pc, #192]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 8002970:	4313      	orrs	r3, r2
 8002972:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002974:	4b2e      	ldr	r3, [pc, #184]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 8002976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002978:	f023 020c 	bic.w	r2, r3, #12
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002980:	492b      	ldr	r1, [pc, #172]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 8002982:	4313      	orrs	r3, r2
 8002984:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002986:	4b2a      	ldr	r3, [pc, #168]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 8002988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298a:	f023 0202 	bic.w	r2, r3, #2
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002992:	4927      	ldr	r1, [pc, #156]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 8002994:	4313      	orrs	r3, r2
 8002996:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002998:	4b25      	ldr	r3, [pc, #148]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 800299a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299c:	4a24      	ldr	r2, [pc, #144]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 800299e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029a4:	4b22      	ldr	r3, [pc, #136]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 80029a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a8:	4a21      	ldr	r2, [pc, #132]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 80029aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80029b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 80029b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 80029b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80029bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 80029be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029c8:	4b19      	ldr	r3, [pc, #100]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a18      	ldr	r2, [pc, #96]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 80029ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe fd72 	bl	80014bc <HAL_GetTick>
 80029d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029dc:	f7fe fd6e 	bl	80014bc <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e090      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029ee:	4b10      	ldr	r3, [pc, #64]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x670>
 80029fa:	e088      	b.n	8002b0e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a0b      	ldr	r2, [pc, #44]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 8002a02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7fe fd58 	bl	80014bc <HAL_GetTick>
 8002a0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a10:	f7fe fd54 	bl	80014bc <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e076      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a22:	4b03      	ldr	r3, [pc, #12]	@ (8002a30 <HAL_RCC_OscConfig+0x6c4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x6a4>
 8002a2e:	e06e      	b.n	8002b0e <HAL_RCC_OscConfig+0x7a2>
 8002a30:	58024400 	.word	0x58024400
 8002a34:	fffffc0c 	.word	0xfffffc0c
 8002a38:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a3c:	4b36      	ldr	r3, [pc, #216]	@ (8002b18 <HAL_RCC_OscConfig+0x7ac>)
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a40:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a42:	4b35      	ldr	r3, [pc, #212]	@ (8002b18 <HAL_RCC_OscConfig+0x7ac>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a46:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d031      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	f003 0203 	and.w	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d12a      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d122      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a78:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d11a      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	0a5b      	lsrs	r3, r3, #9
 8002a82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d111      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	0c1b      	lsrs	r3, r3, #16
 8002a94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d108      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	0e1b      	lsrs	r3, r3, #24
 8002aa6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e02b      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002ab8:	4b17      	ldr	r3, [pc, #92]	@ (8002b18 <HAL_RCC_OscConfig+0x7ac>)
 8002aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002abc:	08db      	lsrs	r3, r3, #3
 8002abe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ac2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d01f      	beq.n	8002b0e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002ace:	4b12      	ldr	r3, [pc, #72]	@ (8002b18 <HAL_RCC_OscConfig+0x7ac>)
 8002ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad2:	4a11      	ldr	r2, [pc, #68]	@ (8002b18 <HAL_RCC_OscConfig+0x7ac>)
 8002ad4:	f023 0301 	bic.w	r3, r3, #1
 8002ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ada:	f7fe fcef 	bl	80014bc <HAL_GetTick>
 8002ade:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ae0:	bf00      	nop
 8002ae2:	f7fe fceb 	bl	80014bc <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d0f9      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002aee:	4b0a      	ldr	r3, [pc, #40]	@ (8002b18 <HAL_RCC_OscConfig+0x7ac>)
 8002af0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002af2:	4b0a      	ldr	r3, [pc, #40]	@ (8002b1c <HAL_RCC_OscConfig+0x7b0>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002afa:	00d2      	lsls	r2, r2, #3
 8002afc:	4906      	ldr	r1, [pc, #24]	@ (8002b18 <HAL_RCC_OscConfig+0x7ac>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002b02:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <HAL_RCC_OscConfig+0x7ac>)
 8002b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b06:	4a04      	ldr	r2, [pc, #16]	@ (8002b18 <HAL_RCC_OscConfig+0x7ac>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3730      	adds	r7, #48	@ 0x30
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	58024400 	.word	0x58024400
 8002b1c:	ffff0007 	.word	0xffff0007

08002b20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e19c      	b.n	8002e6e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b34:	4b8a      	ldr	r3, [pc, #552]	@ (8002d60 <HAL_RCC_ClockConfig+0x240>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d910      	bls.n	8002b64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b42:	4b87      	ldr	r3, [pc, #540]	@ (8002d60 <HAL_RCC_ClockConfig+0x240>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 020f 	bic.w	r2, r3, #15
 8002b4a:	4985      	ldr	r1, [pc, #532]	@ (8002d60 <HAL_RCC_ClockConfig+0x240>)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b52:	4b83      	ldr	r3, [pc, #524]	@ (8002d60 <HAL_RCC_ClockConfig+0x240>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e184      	b.n	8002e6e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d010      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	4b7b      	ldr	r3, [pc, #492]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d908      	bls.n	8002b92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b80:	4b78      	ldr	r3, [pc, #480]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	4975      	ldr	r1, [pc, #468]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d010      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	4b70      	ldr	r3, [pc, #448]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d908      	bls.n	8002bc0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bae:	4b6d      	ldr	r3, [pc, #436]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	496a      	ldr	r1, [pc, #424]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d010      	beq.n	8002bee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699a      	ldr	r2, [r3, #24]
 8002bd0:	4b64      	ldr	r3, [pc, #400]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d908      	bls.n	8002bee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bdc:	4b61      	ldr	r3, [pc, #388]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	495e      	ldr	r1, [pc, #376]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d010      	beq.n	8002c1c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69da      	ldr	r2, [r3, #28]
 8002bfe:	4b59      	ldr	r3, [pc, #356]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d908      	bls.n	8002c1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c0a:	4b56      	ldr	r3, [pc, #344]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	4953      	ldr	r1, [pc, #332]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d010      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d908      	bls.n	8002c4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c38:	4b4a      	ldr	r3, [pc, #296]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	f023 020f 	bic.w	r2, r3, #15
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4947      	ldr	r1, [pc, #284]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d055      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c56:	4b43      	ldr	r3, [pc, #268]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	4940      	ldr	r1, [pc, #256]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d107      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c70:	4b3c      	ldr	r3, [pc, #240]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d121      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0f6      	b.n	8002e6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d107      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c88:	4b36      	ldr	r3, [pc, #216]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d115      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0ea      	b.n	8002e6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d107      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ca0:	4b30      	ldr	r3, [pc, #192]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d109      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0de      	b.n	8002e6e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cb0:	4b2c      	ldr	r3, [pc, #176]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0d6      	b.n	8002e6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cc0:	4b28      	ldr	r3, [pc, #160]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	f023 0207 	bic.w	r2, r3, #7
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	4925      	ldr	r1, [pc, #148]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd2:	f7fe fbf3 	bl	80014bc <HAL_GetTick>
 8002cd6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd8:	e00a      	b.n	8002cf0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cda:	f7fe fbef 	bl	80014bc <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e0be      	b.n	8002e6e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d1eb      	bne.n	8002cda <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d010      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	4b14      	ldr	r3, [pc, #80]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d208      	bcs.n	8002d30 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d1e:	4b11      	ldr	r3, [pc, #68]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f023 020f 	bic.w	r2, r3, #15
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	490e      	ldr	r1, [pc, #56]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d30:	4b0b      	ldr	r3, [pc, #44]	@ (8002d60 <HAL_RCC_ClockConfig+0x240>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d214      	bcs.n	8002d68 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b08      	ldr	r3, [pc, #32]	@ (8002d60 <HAL_RCC_ClockConfig+0x240>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 020f 	bic.w	r2, r3, #15
 8002d46:	4906      	ldr	r1, [pc, #24]	@ (8002d60 <HAL_RCC_ClockConfig+0x240>)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b04      	ldr	r3, [pc, #16]	@ (8002d60 <HAL_RCC_ClockConfig+0x240>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e086      	b.n	8002e6e <HAL_RCC_ClockConfig+0x34e>
 8002d60:	52002000 	.word	0x52002000
 8002d64:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d010      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	4b3f      	ldr	r3, [pc, #252]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d208      	bcs.n	8002d96 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d84:	4b3c      	ldr	r3, [pc, #240]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	4939      	ldr	r1, [pc, #228]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d010      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	4b34      	ldr	r3, [pc, #208]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d208      	bcs.n	8002dc4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002db2:	4b31      	ldr	r3, [pc, #196]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	492e      	ldr	r1, [pc, #184]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0310 	and.w	r3, r3, #16
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d010      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	699a      	ldr	r2, [r3, #24]
 8002dd4:	4b28      	ldr	r3, [pc, #160]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d208      	bcs.n	8002df2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002de0:	4b25      	ldr	r3, [pc, #148]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	4922      	ldr	r1, [pc, #136]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0320 	and.w	r3, r3, #32
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d010      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69da      	ldr	r2, [r3, #28]
 8002e02:	4b1d      	ldr	r3, [pc, #116]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d208      	bcs.n	8002e20 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	4917      	ldr	r1, [pc, #92]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e20:	f000 f834 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 8002e24:	4602      	mov	r2, r0
 8002e26:	4b14      	ldr	r3, [pc, #80]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	0a1b      	lsrs	r3, r3, #8
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	4912      	ldr	r1, [pc, #72]	@ (8002e7c <HAL_RCC_ClockConfig+0x35c>)
 8002e32:	5ccb      	ldrb	r3, [r1, r3]
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e78 <HAL_RCC_ClockConfig+0x358>)
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	4a0d      	ldr	r2, [pc, #52]	@ (8002e7c <HAL_RCC_ClockConfig+0x35c>)
 8002e48:	5cd3      	ldrb	r3, [r2, r3]
 8002e4a:	f003 031f 	and.w	r3, r3, #31
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	fa22 f303 	lsr.w	r3, r2, r3
 8002e54:	4a0a      	ldr	r2, [pc, #40]	@ (8002e80 <HAL_RCC_ClockConfig+0x360>)
 8002e56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e58:	4a0a      	ldr	r2, [pc, #40]	@ (8002e84 <HAL_RCC_ClockConfig+0x364>)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e88 <HAL_RCC_ClockConfig+0x368>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe fae0 	bl	8001428 <HAL_InitTick>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	58024400 	.word	0x58024400
 8002e7c:	08006ff8 	.word	0x08006ff8
 8002e80:	24000004 	.word	0x24000004
 8002e84:	24000000 	.word	0x24000000
 8002e88:	24000008 	.word	0x24000008

08002e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b089      	sub	sp, #36	@ 0x24
 8002e90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e92:	4bb3      	ldr	r3, [pc, #716]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e9a:	2b18      	cmp	r3, #24
 8002e9c:	f200 8155 	bhi.w	800314a <HAL_RCC_GetSysClockFreq+0x2be>
 8002ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea6:	bf00      	nop
 8002ea8:	08002f0d 	.word	0x08002f0d
 8002eac:	0800314b 	.word	0x0800314b
 8002eb0:	0800314b 	.word	0x0800314b
 8002eb4:	0800314b 	.word	0x0800314b
 8002eb8:	0800314b 	.word	0x0800314b
 8002ebc:	0800314b 	.word	0x0800314b
 8002ec0:	0800314b 	.word	0x0800314b
 8002ec4:	0800314b 	.word	0x0800314b
 8002ec8:	08002f33 	.word	0x08002f33
 8002ecc:	0800314b 	.word	0x0800314b
 8002ed0:	0800314b 	.word	0x0800314b
 8002ed4:	0800314b 	.word	0x0800314b
 8002ed8:	0800314b 	.word	0x0800314b
 8002edc:	0800314b 	.word	0x0800314b
 8002ee0:	0800314b 	.word	0x0800314b
 8002ee4:	0800314b 	.word	0x0800314b
 8002ee8:	08002f39 	.word	0x08002f39
 8002eec:	0800314b 	.word	0x0800314b
 8002ef0:	0800314b 	.word	0x0800314b
 8002ef4:	0800314b 	.word	0x0800314b
 8002ef8:	0800314b 	.word	0x0800314b
 8002efc:	0800314b 	.word	0x0800314b
 8002f00:	0800314b 	.word	0x0800314b
 8002f04:	0800314b 	.word	0x0800314b
 8002f08:	08002f3f 	.word	0x08002f3f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f0c:	4b94      	ldr	r3, [pc, #592]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f18:	4b91      	ldr	r3, [pc, #580]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	08db      	lsrs	r3, r3, #3
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	4a90      	ldr	r2, [pc, #576]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
 8002f28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002f2a:	e111      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f2c:	4b8d      	ldr	r3, [pc, #564]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f2e:	61bb      	str	r3, [r7, #24]
      break;
 8002f30:	e10e      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002f32:	4b8d      	ldr	r3, [pc, #564]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f34:	61bb      	str	r3, [r7, #24]
      break;
 8002f36:	e10b      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002f38:	4b8c      	ldr	r3, [pc, #560]	@ (800316c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002f3a:	61bb      	str	r3, [r7, #24]
      break;
 8002f3c:	e108      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f3e:	4b88      	ldr	r3, [pc, #544]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002f48:	4b85      	ldr	r3, [pc, #532]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4c:	091b      	lsrs	r3, r3, #4
 8002f4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f52:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f54:	4b82      	ldr	r3, [pc, #520]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002f5e:	4b80      	ldr	r3, [pc, #512]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f62:	08db      	lsrs	r3, r3, #3
 8002f64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	fb02 f303 	mul.w	r3, r2, r3
 8002f6e:	ee07 3a90 	vmov	s15, r3
 8002f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f76:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 80e1 	beq.w	8003144 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	f000 8083 	beq.w	8003090 <HAL_RCC_GetSysClockFreq+0x204>
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	f200 80a1 	bhi.w	80030d4 <HAL_RCC_GetSysClockFreq+0x248>
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x114>
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d056      	beq.n	800304c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f9e:	e099      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fa0:	4b6f      	ldr	r3, [pc, #444]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d02d      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fac:	4b6c      	ldr	r3, [pc, #432]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	08db      	lsrs	r3, r3, #3
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	4a6b      	ldr	r2, [pc, #428]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fbc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	ee07 3a90 	vmov	s15, r3
 8002fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	ee07 3a90 	vmov	s15, r3
 8002fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fd6:	4b62      	ldr	r3, [pc, #392]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fde:	ee07 3a90 	vmov	s15, r3
 8002fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003170 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003002:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003006:	e087      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003012:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003174 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800301a:	4b51      	ldr	r3, [pc, #324]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003022:	ee07 3a90 	vmov	s15, r3
 8003026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800302a:	ed97 6a02 	vldr	s12, [r7, #8]
 800302e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003170 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800303a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800303e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003046:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800304a:	e065      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	ee07 3a90 	vmov	s15, r3
 8003052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003056:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003178 <HAL_RCC_GetSysClockFreq+0x2ec>
 800305a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800305e:	4b40      	ldr	r3, [pc, #256]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003066:	ee07 3a90 	vmov	s15, r3
 800306a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800306e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003072:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003170 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800307a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800307e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800308a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800308e:	e043      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	ee07 3a90 	vmov	s15, r3
 8003096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800309a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800317c <HAL_RCC_GetSysClockFreq+0x2f0>
 800309e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030aa:	ee07 3a90 	vmov	s15, r3
 80030ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030b6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003170 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030d2:	e021      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	ee07 3a90 	vmov	s15, r3
 80030da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030de:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003178 <HAL_RCC_GetSysClockFreq+0x2ec>
 80030e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ee:	ee07 3a90 	vmov	s15, r3
 80030f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80030fa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003170 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800310a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800310e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003112:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003116:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003118:	4b11      	ldr	r3, [pc, #68]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800311a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311c:	0a5b      	lsrs	r3, r3, #9
 800311e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003122:	3301      	adds	r3, #1
 8003124:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	ee07 3a90 	vmov	s15, r3
 800312c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003130:	edd7 6a07 	vldr	s13, [r7, #28]
 8003134:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800313c:	ee17 3a90 	vmov	r3, s15
 8003140:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003142:	e005      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	61bb      	str	r3, [r7, #24]
      break;
 8003148:	e002      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800314a:	4b07      	ldr	r3, [pc, #28]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800314c:	61bb      	str	r3, [r7, #24]
      break;
 800314e:	bf00      	nop
  }

  return sysclockfreq;
 8003150:	69bb      	ldr	r3, [r7, #24]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3724      	adds	r7, #36	@ 0x24
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	58024400 	.word	0x58024400
 8003164:	03d09000 	.word	0x03d09000
 8003168:	003d0900 	.word	0x003d0900
 800316c:	007a1200 	.word	0x007a1200
 8003170:	46000000 	.word	0x46000000
 8003174:	4c742400 	.word	0x4c742400
 8003178:	4a742400 	.word	0x4a742400
 800317c:	4af42400 	.word	0x4af42400

08003180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003186:	f7ff fe81 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 800318a:	4602      	mov	r2, r0
 800318c:	4b10      	ldr	r3, [pc, #64]	@ (80031d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	0a1b      	lsrs	r3, r3, #8
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	490f      	ldr	r1, [pc, #60]	@ (80031d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003198:	5ccb      	ldrb	r3, [r1, r3]
 800319a:	f003 031f 	and.w	r3, r3, #31
 800319e:	fa22 f303 	lsr.w	r3, r2, r3
 80031a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031a4:	4b0a      	ldr	r3, [pc, #40]	@ (80031d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	4a09      	ldr	r2, [pc, #36]	@ (80031d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80031ae:	5cd3      	ldrb	r3, [r2, r3]
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ba:	4a07      	ldr	r2, [pc, #28]	@ (80031d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80031bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031be:	4a07      	ldr	r2, [pc, #28]	@ (80031dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80031c4:	4b04      	ldr	r3, [pc, #16]	@ (80031d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80031c6:	681b      	ldr	r3, [r3, #0]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	58024400 	.word	0x58024400
 80031d4:	08006ff8 	.word	0x08006ff8
 80031d8:	24000004 	.word	0x24000004
 80031dc:	24000000 	.word	0x24000000

080031e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80031e4:	f7ff ffcc 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	4904      	ldr	r1, [pc, #16]	@ (8003208 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031f6:	5ccb      	ldrb	r3, [r1, r3]
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003200:	4618      	mov	r0, r3
 8003202:	bd80      	pop	{r7, pc}
 8003204:	58024400 	.word	0x58024400
 8003208:	08006ff8 	.word	0x08006ff8

0800320c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003210:	f7ff ffb6 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 8003214:	4602      	mov	r2, r0
 8003216:	4b06      	ldr	r3, [pc, #24]	@ (8003230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	0a1b      	lsrs	r3, r3, #8
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	4904      	ldr	r1, [pc, #16]	@ (8003234 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003222:	5ccb      	ldrb	r3, [r1, r3]
 8003224:	f003 031f 	and.w	r3, r3, #31
 8003228:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800322c:	4618      	mov	r0, r3
 800322e:	bd80      	pop	{r7, pc}
 8003230:	58024400 	.word	0x58024400
 8003234:	08006ff8 	.word	0x08006ff8

08003238 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800323c:	b0c6      	sub	sp, #280	@ 0x118
 800323e:	af00      	add	r7, sp, #0
 8003240:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003244:	2300      	movs	r3, #0
 8003246:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800324a:	2300      	movs	r3, #0
 800324c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003258:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800325c:	2500      	movs	r5, #0
 800325e:	ea54 0305 	orrs.w	r3, r4, r5
 8003262:	d049      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003268:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800326a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800326e:	d02f      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003270:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003274:	d828      	bhi.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003276:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800327a:	d01a      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800327c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003280:	d822      	bhi.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800328a:	d007      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800328c:	e01c      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800328e:	4bab      	ldr	r3, [pc, #684]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003292:	4aaa      	ldr	r2, [pc, #680]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003298:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800329a:	e01a      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800329c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032a0:	3308      	adds	r3, #8
 80032a2:	2102      	movs	r1, #2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f001 fc25 	bl	8004af4 <RCCEx_PLL2_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032b0:	e00f      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032b6:	3328      	adds	r3, #40	@ 0x28
 80032b8:	2102      	movs	r1, #2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f001 fccc 	bl	8004c58 <RCCEx_PLL3_Config>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032c6:	e004      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80032ce:	e000      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80032d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10a      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80032da:	4b98      	ldr	r3, [pc, #608]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80032e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032e8:	4a94      	ldr	r2, [pc, #592]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032ea:	430b      	orrs	r3, r1
 80032ec:	6513      	str	r3, [r2, #80]	@ 0x50
 80032ee:	e003      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003300:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003304:	f04f 0900 	mov.w	r9, #0
 8003308:	ea58 0309 	orrs.w	r3, r8, r9
 800330c:	d047      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800330e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003314:	2b04      	cmp	r3, #4
 8003316:	d82a      	bhi.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003318:	a201      	add	r2, pc, #4	@ (adr r2, 8003320 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800331a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331e:	bf00      	nop
 8003320:	08003335 	.word	0x08003335
 8003324:	08003343 	.word	0x08003343
 8003328:	08003359 	.word	0x08003359
 800332c:	08003377 	.word	0x08003377
 8003330:	08003377 	.word	0x08003377
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003334:	4b81      	ldr	r3, [pc, #516]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003338:	4a80      	ldr	r2, [pc, #512]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800333a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800333e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003340:	e01a      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003346:	3308      	adds	r3, #8
 8003348:	2100      	movs	r1, #0
 800334a:	4618      	mov	r0, r3
 800334c:	f001 fbd2 	bl	8004af4 <RCCEx_PLL2_Config>
 8003350:	4603      	mov	r3, r0
 8003352:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003356:	e00f      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800335c:	3328      	adds	r3, #40	@ 0x28
 800335e:	2100      	movs	r1, #0
 8003360:	4618      	mov	r0, r3
 8003362:	f001 fc79 	bl	8004c58 <RCCEx_PLL3_Config>
 8003366:	4603      	mov	r3, r0
 8003368:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800336c:	e004      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003374:	e000      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003378:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10a      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003380:	4b6e      	ldr	r3, [pc, #440]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003384:	f023 0107 	bic.w	r1, r3, #7
 8003388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800338c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338e:	4a6b      	ldr	r2, [pc, #428]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003390:	430b      	orrs	r3, r1
 8003392:	6513      	str	r3, [r2, #80]	@ 0x50
 8003394:	e003      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003396:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800339a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800339e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80033aa:	f04f 0b00 	mov.w	fp, #0
 80033ae:	ea5a 030b 	orrs.w	r3, sl, fp
 80033b2:	d05b      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80033b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80033bc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80033c0:	d03b      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80033c2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80033c6:	d834      	bhi.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80033c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033cc:	d037      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80033ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033d2:	d82e      	bhi.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80033d4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80033d8:	d033      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80033da:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80033de:	d828      	bhi.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80033e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033e4:	d01a      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80033e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033ea:	d822      	bhi.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80033f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033f4:	d007      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80033f6:	e01c      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f8:	4b50      	ldr	r3, [pc, #320]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fc:	4a4f      	ldr	r2, [pc, #316]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003402:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003404:	e01e      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800340a:	3308      	adds	r3, #8
 800340c:	2100      	movs	r1, #0
 800340e:	4618      	mov	r0, r3
 8003410:	f001 fb70 	bl	8004af4 <RCCEx_PLL2_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800341a:	e013      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800341c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003420:	3328      	adds	r3, #40	@ 0x28
 8003422:	2100      	movs	r1, #0
 8003424:	4618      	mov	r0, r3
 8003426:	f001 fc17 	bl	8004c58 <RCCEx_PLL3_Config>
 800342a:	4603      	mov	r3, r0
 800342c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003430:	e008      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003438:	e004      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800343a:	bf00      	nop
 800343c:	e002      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800343e:	bf00      	nop
 8003440:	e000      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003442:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003444:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10b      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800344c:	4b3b      	ldr	r3, [pc, #236]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800344e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003450:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003458:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800345c:	4a37      	ldr	r2, [pc, #220]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800345e:	430b      	orrs	r3, r1
 8003460:	6593      	str	r3, [r2, #88]	@ 0x58
 8003462:	e003      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003464:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003468:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800346c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003478:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800347c:	2300      	movs	r3, #0
 800347e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003482:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003486:	460b      	mov	r3, r1
 8003488:	4313      	orrs	r3, r2
 800348a:	d05d      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800348c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003490:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003494:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003498:	d03b      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800349a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800349e:	d834      	bhi.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80034a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034a4:	d037      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80034a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034aa:	d82e      	bhi.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80034ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034b0:	d033      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80034b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034b6:	d828      	bhi.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80034b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034bc:	d01a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80034be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034c2:	d822      	bhi.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80034c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034cc:	d007      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80034ce:	e01c      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034d0:	4b1a      	ldr	r3, [pc, #104]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d4:	4a19      	ldr	r2, [pc, #100]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034dc:	e01e      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034e2:	3308      	adds	r3, #8
 80034e4:	2100      	movs	r1, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	f001 fb04 	bl	8004af4 <RCCEx_PLL2_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80034f2:	e013      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034f8:	3328      	adds	r3, #40	@ 0x28
 80034fa:	2100      	movs	r1, #0
 80034fc:	4618      	mov	r0, r3
 80034fe:	f001 fbab 	bl	8004c58 <RCCEx_PLL3_Config>
 8003502:	4603      	mov	r3, r0
 8003504:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003508:	e008      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003510:	e004      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003512:	bf00      	nop
 8003514:	e002      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003516:	bf00      	nop
 8003518:	e000      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800351a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800351c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10d      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003524:	4b05      	ldr	r3, [pc, #20]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003528:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800352c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003530:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003534:	4a01      	ldr	r2, [pc, #4]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003536:	430b      	orrs	r3, r1
 8003538:	6593      	str	r3, [r2, #88]	@ 0x58
 800353a:	e005      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800353c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003540:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003544:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003550:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003554:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003558:	2300      	movs	r3, #0
 800355a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800355e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003562:	460b      	mov	r3, r1
 8003564:	4313      	orrs	r3, r2
 8003566:	d03a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800356c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800356e:	2b30      	cmp	r3, #48	@ 0x30
 8003570:	d01f      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003572:	2b30      	cmp	r3, #48	@ 0x30
 8003574:	d819      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003576:	2b20      	cmp	r3, #32
 8003578:	d00c      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800357a:	2b20      	cmp	r3, #32
 800357c:	d815      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x372>
 800357e:	2b00      	cmp	r3, #0
 8003580:	d019      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003582:	2b10      	cmp	r3, #16
 8003584:	d111      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003586:	4baa      	ldr	r3, [pc, #680]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358a:	4aa9      	ldr	r2, [pc, #676]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800358c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003590:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003592:	e011      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003598:	3308      	adds	r3, #8
 800359a:	2102      	movs	r1, #2
 800359c:	4618      	mov	r0, r3
 800359e:	f001 faa9 	bl	8004af4 <RCCEx_PLL2_Config>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80035a8:	e006      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035b0:	e002      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80035b2:	bf00      	nop
 80035b4:	e000      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80035b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10a      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80035c0:	4b9b      	ldr	r3, [pc, #620]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035c4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80035c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ce:	4a98      	ldr	r2, [pc, #608]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035d0:	430b      	orrs	r3, r1
 80035d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035d4:	e003      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80035de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80035ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80035ee:	2300      	movs	r3, #0
 80035f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80035f4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80035f8:	460b      	mov	r3, r1
 80035fa:	4313      	orrs	r3, r2
 80035fc:	d051      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80035fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003604:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003608:	d035      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800360a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800360e:	d82e      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003610:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003614:	d031      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003616:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800361a:	d828      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800361c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003620:	d01a      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003622:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003626:	d822      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800362c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003630:	d007      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003632:	e01c      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003634:	4b7e      	ldr	r3, [pc, #504]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003638:	4a7d      	ldr	r2, [pc, #500]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800363a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800363e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003640:	e01c      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003646:	3308      	adds	r3, #8
 8003648:	2100      	movs	r1, #0
 800364a:	4618      	mov	r0, r3
 800364c:	f001 fa52 	bl	8004af4 <RCCEx_PLL2_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003656:	e011      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800365c:	3328      	adds	r3, #40	@ 0x28
 800365e:	2100      	movs	r1, #0
 8003660:	4618      	mov	r0, r3
 8003662:	f001 faf9 	bl	8004c58 <RCCEx_PLL3_Config>
 8003666:	4603      	mov	r3, r0
 8003668:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800366c:	e006      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003674:	e002      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003676:	bf00      	nop
 8003678:	e000      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800367a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800367c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10a      	bne.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003684:	4b6a      	ldr	r3, [pc, #424]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003688:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800368c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003692:	4a67      	ldr	r2, [pc, #412]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003694:	430b      	orrs	r3, r1
 8003696:	6513      	str	r3, [r2, #80]	@ 0x50
 8003698:	e003      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800369e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80036a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036aa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80036ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80036b2:	2300      	movs	r3, #0
 80036b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80036b8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80036bc:	460b      	mov	r3, r1
 80036be:	4313      	orrs	r3, r2
 80036c0:	d053      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80036c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036cc:	d033      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80036ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036d2:	d82c      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80036d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036d8:	d02f      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80036da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036de:	d826      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80036e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80036e4:	d02b      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80036e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80036ea:	d820      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80036ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036f0:	d012      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80036f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036f6:	d81a      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d022      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80036fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003700:	d115      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003706:	3308      	adds	r3, #8
 8003708:	2101      	movs	r1, #1
 800370a:	4618      	mov	r0, r3
 800370c:	f001 f9f2 	bl	8004af4 <RCCEx_PLL2_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003716:	e015      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800371c:	3328      	adds	r3, #40	@ 0x28
 800371e:	2101      	movs	r1, #1
 8003720:	4618      	mov	r0, r3
 8003722:	f001 fa99 	bl	8004c58 <RCCEx_PLL3_Config>
 8003726:	4603      	mov	r3, r0
 8003728:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800372c:	e00a      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003734:	e006      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003736:	bf00      	nop
 8003738:	e004      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800373a:	bf00      	nop
 800373c:	e002      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800373e:	bf00      	nop
 8003740:	e000      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003744:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800374c:	4b38      	ldr	r3, [pc, #224]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800374e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003750:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375a:	4a35      	ldr	r2, [pc, #212]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800375c:	430b      	orrs	r3, r1
 800375e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003760:	e003      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003762:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003766:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800376a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003776:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800377a:	2300      	movs	r3, #0
 800377c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003780:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003784:	460b      	mov	r3, r1
 8003786:	4313      	orrs	r3, r2
 8003788:	d058      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800378a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800378e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003792:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003796:	d033      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003798:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800379c:	d82c      	bhi.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800379e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a2:	d02f      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80037a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a8:	d826      	bhi.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80037aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037ae:	d02b      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80037b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037b4:	d820      	bhi.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80037b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037ba:	d012      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80037bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037c0:	d81a      	bhi.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d022      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80037c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037ca:	d115      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037d0:	3308      	adds	r3, #8
 80037d2:	2101      	movs	r1, #1
 80037d4:	4618      	mov	r0, r3
 80037d6:	f001 f98d 	bl	8004af4 <RCCEx_PLL2_Config>
 80037da:	4603      	mov	r3, r0
 80037dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80037e0:	e015      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037e6:	3328      	adds	r3, #40	@ 0x28
 80037e8:	2101      	movs	r1, #1
 80037ea:	4618      	mov	r0, r3
 80037ec:	f001 fa34 	bl	8004c58 <RCCEx_PLL3_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80037f6:	e00a      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037fe:	e006      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003800:	bf00      	nop
 8003802:	e004      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003804:	bf00      	nop
 8003806:	e002      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003808:	bf00      	nop
 800380a:	e000      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800380c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800380e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10e      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003816:	4b06      	ldr	r3, [pc, #24]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800381e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003822:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003826:	4a02      	ldr	r2, [pc, #8]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003828:	430b      	orrs	r3, r1
 800382a:	6593      	str	r3, [r2, #88]	@ 0x58
 800382c:	e006      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800382e:	bf00      	nop
 8003830:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003834:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003838:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800383c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003844:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003848:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800384c:	2300      	movs	r3, #0
 800384e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003852:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003856:	460b      	mov	r3, r1
 8003858:	4313      	orrs	r3, r2
 800385a:	d037      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800385c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003860:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003862:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003866:	d00e      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003868:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800386c:	d816      	bhi.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800386e:	2b00      	cmp	r3, #0
 8003870:	d018      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003872:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003876:	d111      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003878:	4bc4      	ldr	r3, [pc, #784]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800387a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387c:	4ac3      	ldr	r2, [pc, #780]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800387e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003882:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003884:	e00f      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800388a:	3308      	adds	r3, #8
 800388c:	2101      	movs	r1, #1
 800388e:	4618      	mov	r0, r3
 8003890:	f001 f930 	bl	8004af4 <RCCEx_PLL2_Config>
 8003894:	4603      	mov	r3, r0
 8003896:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800389a:	e004      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80038a2:	e000      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80038a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10a      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038ae:	4bb7      	ldr	r3, [pc, #732]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80038b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038bc:	4ab3      	ldr	r2, [pc, #716]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038be:	430b      	orrs	r3, r1
 80038c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80038c2:	e003      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80038cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80038d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038dc:	2300      	movs	r3, #0
 80038de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80038e6:	460b      	mov	r3, r1
 80038e8:	4313      	orrs	r3, r2
 80038ea:	d039      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80038ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	d81c      	bhi.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80038f6:	a201      	add	r2, pc, #4	@ (adr r2, 80038fc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80038f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fc:	08003939 	.word	0x08003939
 8003900:	0800390d 	.word	0x0800390d
 8003904:	0800391b 	.word	0x0800391b
 8003908:	08003939 	.word	0x08003939
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800390c:	4b9f      	ldr	r3, [pc, #636]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800390e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003910:	4a9e      	ldr	r2, [pc, #632]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003912:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003916:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003918:	e00f      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800391a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800391e:	3308      	adds	r3, #8
 8003920:	2102      	movs	r1, #2
 8003922:	4618      	mov	r0, r3
 8003924:	f001 f8e6 	bl	8004af4 <RCCEx_PLL2_Config>
 8003928:	4603      	mov	r3, r0
 800392a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800392e:	e004      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003936:	e000      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800393a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10a      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003942:	4b92      	ldr	r3, [pc, #584]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003946:	f023 0103 	bic.w	r1, r3, #3
 800394a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800394e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003950:	4a8e      	ldr	r2, [pc, #568]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003952:	430b      	orrs	r3, r1
 8003954:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003956:	e003      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003958:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800395c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003968:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800396c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003970:	2300      	movs	r3, #0
 8003972:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003976:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800397a:	460b      	mov	r3, r1
 800397c:	4313      	orrs	r3, r2
 800397e:	f000 8099 	beq.w	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003982:	4b83      	ldr	r3, [pc, #524]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a82      	ldr	r2, [pc, #520]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800398c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800398e:	f7fd fd95 	bl	80014bc <HAL_GetTick>
 8003992:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003996:	e00b      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003998:	f7fd fd90 	bl	80014bc <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b64      	cmp	r3, #100	@ 0x64
 80039a6:	d903      	bls.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039ae:	e005      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039b0:	4b77      	ldr	r3, [pc, #476]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0ed      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80039bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d173      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80039c4:	4b71      	ldr	r3, [pc, #452]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80039c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80039d0:	4053      	eors	r3, r2
 80039d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d015      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039da:	4b6c      	ldr	r3, [pc, #432]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039e2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039e6:	4b69      	ldr	r3, [pc, #420]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ea:	4a68      	ldr	r2, [pc, #416]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039f2:	4b66      	ldr	r3, [pc, #408]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f6:	4a65      	ldr	r2, [pc, #404]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039fc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80039fe:	4a63      	ldr	r2, [pc, #396]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a04:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a12:	d118      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a14:	f7fd fd52 	bl	80014bc <HAL_GetTick>
 8003a18:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a1c:	e00d      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a1e:	f7fd fd4d 	bl	80014bc <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003a28:	1ad2      	subs	r2, r2, r3
 8003a2a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d903      	bls.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003a38:	e005      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a3a:	4b54      	ldr	r3, [pc, #336]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0eb      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003a46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d129      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a5e:	d10e      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003a60:	4b4a      	ldr	r3, [pc, #296]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a70:	091a      	lsrs	r2, r3, #4
 8003a72:	4b48      	ldr	r3, [pc, #288]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	4a45      	ldr	r2, [pc, #276]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	6113      	str	r3, [r2, #16]
 8003a7c:	e005      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003a7e:	4b43      	ldr	r3, [pc, #268]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	4a42      	ldr	r2, [pc, #264]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a84:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a88:	6113      	str	r3, [r2, #16]
 8003a8a:	4b40      	ldr	r3, [pc, #256]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a8c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9a:	4a3c      	ldr	r2, [pc, #240]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003aa2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003aa6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003aaa:	e003      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ab0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abc:	f002 0301 	and.w	r3, r2, #1
 8003ac0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003aca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f000 808f 	beq.w	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ada:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003adc:	2b28      	cmp	r3, #40	@ 0x28
 8003ade:	d871      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae6:	bf00      	nop
 8003ae8:	08003bcd 	.word	0x08003bcd
 8003aec:	08003bc5 	.word	0x08003bc5
 8003af0:	08003bc5 	.word	0x08003bc5
 8003af4:	08003bc5 	.word	0x08003bc5
 8003af8:	08003bc5 	.word	0x08003bc5
 8003afc:	08003bc5 	.word	0x08003bc5
 8003b00:	08003bc5 	.word	0x08003bc5
 8003b04:	08003bc5 	.word	0x08003bc5
 8003b08:	08003b99 	.word	0x08003b99
 8003b0c:	08003bc5 	.word	0x08003bc5
 8003b10:	08003bc5 	.word	0x08003bc5
 8003b14:	08003bc5 	.word	0x08003bc5
 8003b18:	08003bc5 	.word	0x08003bc5
 8003b1c:	08003bc5 	.word	0x08003bc5
 8003b20:	08003bc5 	.word	0x08003bc5
 8003b24:	08003bc5 	.word	0x08003bc5
 8003b28:	08003baf 	.word	0x08003baf
 8003b2c:	08003bc5 	.word	0x08003bc5
 8003b30:	08003bc5 	.word	0x08003bc5
 8003b34:	08003bc5 	.word	0x08003bc5
 8003b38:	08003bc5 	.word	0x08003bc5
 8003b3c:	08003bc5 	.word	0x08003bc5
 8003b40:	08003bc5 	.word	0x08003bc5
 8003b44:	08003bc5 	.word	0x08003bc5
 8003b48:	08003bcd 	.word	0x08003bcd
 8003b4c:	08003bc5 	.word	0x08003bc5
 8003b50:	08003bc5 	.word	0x08003bc5
 8003b54:	08003bc5 	.word	0x08003bc5
 8003b58:	08003bc5 	.word	0x08003bc5
 8003b5c:	08003bc5 	.word	0x08003bc5
 8003b60:	08003bc5 	.word	0x08003bc5
 8003b64:	08003bc5 	.word	0x08003bc5
 8003b68:	08003bcd 	.word	0x08003bcd
 8003b6c:	08003bc5 	.word	0x08003bc5
 8003b70:	08003bc5 	.word	0x08003bc5
 8003b74:	08003bc5 	.word	0x08003bc5
 8003b78:	08003bc5 	.word	0x08003bc5
 8003b7c:	08003bc5 	.word	0x08003bc5
 8003b80:	08003bc5 	.word	0x08003bc5
 8003b84:	08003bc5 	.word	0x08003bc5
 8003b88:	08003bcd 	.word	0x08003bcd
 8003b8c:	58024400 	.word	0x58024400
 8003b90:	58024800 	.word	0x58024800
 8003b94:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 ffa7 	bl	8004af4 <RCCEx_PLL2_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003bac:	e00f      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bb2:	3328      	adds	r3, #40	@ 0x28
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f001 f84e 	bl	8004c58 <RCCEx_PLL3_Config>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003bc2:	e004      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003bca:	e000      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10a      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003bd6:	4bbf      	ldr	r3, [pc, #764]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bda:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003be2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003be4:	4abb      	ldr	r2, [pc, #748]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003be6:	430b      	orrs	r3, r1
 8003be8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003bea:	e003      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bf0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfc:	f002 0302 	and.w	r3, r2, #2
 8003c00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c04:	2300      	movs	r3, #0
 8003c06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c0a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4313      	orrs	r3, r2
 8003c12:	d041      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c1a:	2b05      	cmp	r3, #5
 8003c1c:	d824      	bhi.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c24 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c24:	08003c71 	.word	0x08003c71
 8003c28:	08003c3d 	.word	0x08003c3d
 8003c2c:	08003c53 	.word	0x08003c53
 8003c30:	08003c71 	.word	0x08003c71
 8003c34:	08003c71 	.word	0x08003c71
 8003c38:	08003c71 	.word	0x08003c71
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c40:	3308      	adds	r3, #8
 8003c42:	2101      	movs	r1, #1
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 ff55 	bl	8004af4 <RCCEx_PLL2_Config>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003c50:	e00f      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c56:	3328      	adds	r3, #40	@ 0x28
 8003c58:	2101      	movs	r1, #1
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fffc 	bl	8004c58 <RCCEx_PLL3_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003c66:	e004      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c6e:	e000      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10a      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003c7a:	4b96      	ldr	r3, [pc, #600]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c7e:	f023 0107 	bic.w	r1, r3, #7
 8003c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c88:	4a92      	ldr	r2, [pc, #584]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c8a:	430b      	orrs	r3, r1
 8003c8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c8e:	e003      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca0:	f002 0304 	and.w	r3, r2, #4
 8003ca4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003cae:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	d044      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc0:	2b05      	cmp	r3, #5
 8003cc2:	d825      	bhi.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003ccc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cca:	bf00      	nop
 8003ccc:	08003d19 	.word	0x08003d19
 8003cd0:	08003ce5 	.word	0x08003ce5
 8003cd4:	08003cfb 	.word	0x08003cfb
 8003cd8:	08003d19 	.word	0x08003d19
 8003cdc:	08003d19 	.word	0x08003d19
 8003ce0:	08003d19 	.word	0x08003d19
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ce8:	3308      	adds	r3, #8
 8003cea:	2101      	movs	r1, #1
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 ff01 	bl	8004af4 <RCCEx_PLL2_Config>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003cf8:	e00f      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cfe:	3328      	adds	r3, #40	@ 0x28
 8003d00:	2101      	movs	r1, #1
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 ffa8 	bl	8004c58 <RCCEx_PLL3_Config>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d0e:	e004      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d16:	e000      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10b      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d22:	4b6c      	ldr	r3, [pc, #432]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d26:	f023 0107 	bic.w	r1, r3, #7
 8003d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d32:	4a68      	ldr	r2, [pc, #416]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d34:	430b      	orrs	r3, r1
 8003d36:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d38:	e003      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4a:	f002 0320 	and.w	r3, r2, #32
 8003d4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d52:	2300      	movs	r3, #0
 8003d54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003d58:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	d055      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d6e:	d033      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003d70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d74:	d82c      	bhi.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d7a:	d02f      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d80:	d826      	bhi.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003d82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d86:	d02b      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003d88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d8c:	d820      	bhi.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003d8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d92:	d012      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003d94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d98:	d81a      	bhi.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d022      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003d9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003da2:	d115      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003da8:	3308      	adds	r3, #8
 8003daa:	2100      	movs	r1, #0
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 fea1 	bl	8004af4 <RCCEx_PLL2_Config>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003db8:	e015      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dbe:	3328      	adds	r3, #40	@ 0x28
 8003dc0:	2102      	movs	r1, #2
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 ff48 	bl	8004c58 <RCCEx_PLL3_Config>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003dce:	e00a      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003dd6:	e006      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003dd8:	bf00      	nop
 8003dda:	e004      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003ddc:	bf00      	nop
 8003dde:	e002      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003de0:	bf00      	nop
 8003de2:	e000      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10b      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dee:	4b39      	ldr	r3, [pc, #228]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dfe:	4a35      	ldr	r2, [pc, #212]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e00:	430b      	orrs	r3, r1
 8003e02:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e04:	e003      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e16:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003e1a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e24:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	d058      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e36:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003e3a:	d033      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003e3c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003e40:	d82c      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003e42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e46:	d02f      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003e48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e4c:	d826      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003e4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e52:	d02b      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003e54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e58:	d820      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003e5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e5e:	d012      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003e60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e64:	d81a      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d022      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e6e:	d115      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e74:	3308      	adds	r3, #8
 8003e76:	2100      	movs	r1, #0
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 fe3b 	bl	8004af4 <RCCEx_PLL2_Config>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003e84:	e015      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e8a:	3328      	adds	r3, #40	@ 0x28
 8003e8c:	2102      	movs	r1, #2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fee2 	bl	8004c58 <RCCEx_PLL3_Config>
 8003e94:	4603      	mov	r3, r0
 8003e96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ea2:	e006      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003ea4:	bf00      	nop
 8003ea6:	e004      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003ea8:	bf00      	nop
 8003eaa:	e002      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003eac:	bf00      	nop
 8003eae:	e000      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10e      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003eba:	4b06      	ldr	r3, [pc, #24]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ebe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ec6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eca:	4a02      	ldr	r2, [pc, #8]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ed0:	e006      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003ed2:	bf00      	nop
 8003ed4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003edc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003eec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003ef6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003efa:	460b      	mov	r3, r1
 8003efc:	4313      	orrs	r3, r2
 8003efe:	d055      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f08:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f0c:	d033      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003f0e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f12:	d82c      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003f14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f18:	d02f      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003f1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f1e:	d826      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003f20:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f24:	d02b      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003f26:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f2a:	d820      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003f2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f30:	d012      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003f32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f36:	d81a      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d022      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003f3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f40:	d115      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f46:	3308      	adds	r3, #8
 8003f48:	2100      	movs	r1, #0
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fdd2 	bl	8004af4 <RCCEx_PLL2_Config>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003f56:	e015      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f5c:	3328      	adds	r3, #40	@ 0x28
 8003f5e:	2102      	movs	r1, #2
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fe79 	bl	8004c58 <RCCEx_PLL3_Config>
 8003f66:	4603      	mov	r3, r0
 8003f68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003f6c:	e00a      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f74:	e006      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003f76:	bf00      	nop
 8003f78:	e004      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003f7a:	bf00      	nop
 8003f7c:	e002      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003f7e:	bf00      	nop
 8003f80:	e000      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003f82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10b      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003f8c:	4ba0      	ldr	r3, [pc, #640]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f90:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f9c:	4a9c      	ldr	r2, [pc, #624]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f9e:	430b      	orrs	r3, r1
 8003fa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fa2:	e003      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fa8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f002 0308 	and.w	r3, r2, #8
 8003fb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003fc2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	d01e      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fde:	3328      	adds	r3, #40	@ 0x28
 8003fe0:	2102      	movs	r1, #2
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fe38 	bl	8004c58 <RCCEx_PLL3_Config>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003ff4:	4b86      	ldr	r3, [pc, #536]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004004:	4a82      	ldr	r2, [pc, #520]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004006:	430b      	orrs	r3, r1
 8004008:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800400a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	f002 0310 	and.w	r3, r2, #16
 8004016:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800401a:	2300      	movs	r3, #0
 800401c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004020:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004024:	460b      	mov	r3, r1
 8004026:	4313      	orrs	r3, r2
 8004028:	d01e      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800402a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800402e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004032:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004036:	d10c      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800403c:	3328      	adds	r3, #40	@ 0x28
 800403e:	2102      	movs	r1, #2
 8004040:	4618      	mov	r0, r3
 8004042:	f000 fe09 	bl	8004c58 <RCCEx_PLL3_Config>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004052:	4b6f      	ldr	r3, [pc, #444]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004056:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800405a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800405e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004062:	4a6b      	ldr	r2, [pc, #428]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004064:	430b      	orrs	r3, r1
 8004066:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800406c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004070:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004074:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004076:	2300      	movs	r3, #0
 8004078:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800407a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800407e:	460b      	mov	r3, r1
 8004080:	4313      	orrs	r3, r2
 8004082:	d03e      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004088:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800408c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004090:	d022      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004092:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004096:	d81b      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800409c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040a0:	d00b      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80040a2:	e015      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040a8:	3308      	adds	r3, #8
 80040aa:	2100      	movs	r1, #0
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fd21 	bl	8004af4 <RCCEx_PLL2_Config>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80040b8:	e00f      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040be:	3328      	adds	r3, #40	@ 0x28
 80040c0:	2102      	movs	r1, #2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fdc8 	bl	8004c58 <RCCEx_PLL3_Config>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80040ce:	e004      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040d6:	e000      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80040d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10b      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040e2:	4b4b      	ldr	r3, [pc, #300]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80040ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040f2:	4a47      	ldr	r2, [pc, #284]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040f4:	430b      	orrs	r3, r1
 80040f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80040f8:	e003      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800410e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004110:	2300      	movs	r3, #0
 8004112:	677b      	str	r3, [r7, #116]	@ 0x74
 8004114:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004118:	460b      	mov	r3, r1
 800411a:	4313      	orrs	r3, r2
 800411c:	d03b      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800411e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004122:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004126:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800412a:	d01f      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800412c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004130:	d818      	bhi.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004132:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004136:	d003      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004138:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800413c:	d007      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800413e:	e011      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004140:	4b33      	ldr	r3, [pc, #204]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	4a32      	ldr	r2, [pc, #200]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800414a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800414c:	e00f      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800414e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004152:	3328      	adds	r3, #40	@ 0x28
 8004154:	2101      	movs	r1, #1
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fd7e 	bl	8004c58 <RCCEx_PLL3_Config>
 800415c:	4603      	mov	r3, r0
 800415e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004162:	e004      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800416a:	e000      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800416c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800416e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10b      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004176:	4b26      	ldr	r3, [pc, #152]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800417a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800417e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004182:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004186:	4a22      	ldr	r2, [pc, #136]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004188:	430b      	orrs	r3, r1
 800418a:	6553      	str	r3, [r2, #84]	@ 0x54
 800418c:	e003      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004192:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80041a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041a4:	2300      	movs	r3, #0
 80041a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041a8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80041ac:	460b      	mov	r3, r1
 80041ae:	4313      	orrs	r3, r2
 80041b0:	d034      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80041b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80041bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041c0:	d007      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80041c2:	e011      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c4:	4b12      	ldr	r3, [pc, #72]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c8:	4a11      	ldr	r2, [pc, #68]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80041d0:	e00e      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041d6:	3308      	adds	r3, #8
 80041d8:	2102      	movs	r1, #2
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fc8a 	bl	8004af4 <RCCEx_PLL2_Config>
 80041e0:	4603      	mov	r3, r0
 80041e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80041e6:	e003      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80041ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10d      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80041f8:	4b05      	ldr	r3, [pc, #20]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041fc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004206:	4a02      	ldr	r2, [pc, #8]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004208:	430b      	orrs	r3, r1
 800420a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800420c:	e006      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800420e:	bf00      	nop
 8004210:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004214:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004218:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800421c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004224:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004228:	663b      	str	r3, [r7, #96]	@ 0x60
 800422a:	2300      	movs	r3, #0
 800422c:	667b      	str	r3, [r7, #100]	@ 0x64
 800422e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004232:	460b      	mov	r3, r1
 8004234:	4313      	orrs	r3, r2
 8004236:	d00c      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800423c:	3328      	adds	r3, #40	@ 0x28
 800423e:	2102      	movs	r1, #2
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fd09 	bl	8004c58 <RCCEx_PLL3_Config>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800425e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004260:	2300      	movs	r3, #0
 8004262:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004264:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004268:	460b      	mov	r3, r1
 800426a:	4313      	orrs	r3, r2
 800426c:	d036      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800426e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004272:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004274:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004278:	d018      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800427a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800427e:	d811      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004284:	d014      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004286:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800428a:	d80b      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800428c:	2b00      	cmp	r3, #0
 800428e:	d011      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004290:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004294:	d106      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004296:	4bb7      	ldr	r3, [pc, #732]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429a:	4ab6      	ldr	r2, [pc, #728]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800429c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80042a2:	e008      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042aa:	e004      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80042ac:	bf00      	nop
 80042ae:	e002      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80042b0:	bf00      	nop
 80042b2:	e000      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80042b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10a      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042be:	4bad      	ldr	r3, [pc, #692]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80042c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042cc:	4aa9      	ldr	r2, [pc, #676]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042ce:	430b      	orrs	r3, r1
 80042d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80042d2:	e003      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80042e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80042ea:	2300      	movs	r3, #0
 80042ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80042ee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80042f2:	460b      	mov	r3, r1
 80042f4:	4313      	orrs	r3, r2
 80042f6:	d009      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042f8:	4b9e      	ldr	r3, [pc, #632]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042fc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004306:	4a9b      	ldr	r2, [pc, #620]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004308:	430b      	orrs	r3, r1
 800430a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800430c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004314:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004318:	64bb      	str	r3, [r7, #72]	@ 0x48
 800431a:	2300      	movs	r3, #0
 800431c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800431e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004322:	460b      	mov	r3, r1
 8004324:	4313      	orrs	r3, r2
 8004326:	d009      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004328:	4b92      	ldr	r3, [pc, #584]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800432a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800432c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004334:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004336:	4a8f      	ldr	r2, [pc, #572]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004338:	430b      	orrs	r3, r1
 800433a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800433c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004344:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004348:	643b      	str	r3, [r7, #64]	@ 0x40
 800434a:	2300      	movs	r3, #0
 800434c:	647b      	str	r3, [r7, #68]	@ 0x44
 800434e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004352:	460b      	mov	r3, r1
 8004354:	4313      	orrs	r3, r2
 8004356:	d00e      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004358:	4b86      	ldr	r3, [pc, #536]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	4a85      	ldr	r2, [pc, #532]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800435e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004362:	6113      	str	r3, [r2, #16]
 8004364:	4b83      	ldr	r3, [pc, #524]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004366:	6919      	ldr	r1, [r3, #16]
 8004368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800436c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004370:	4a80      	ldr	r2, [pc, #512]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004372:	430b      	orrs	r3, r1
 8004374:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800437a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004382:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004384:	2300      	movs	r3, #0
 8004386:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004388:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800438c:	460b      	mov	r3, r1
 800438e:	4313      	orrs	r3, r2
 8004390:	d009      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004392:	4b78      	ldr	r3, [pc, #480]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004396:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800439a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800439e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a0:	4a74      	ldr	r2, [pc, #464]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043a2:	430b      	orrs	r3, r1
 80043a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ae:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80043b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80043b4:	2300      	movs	r3, #0
 80043b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80043b8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80043bc:	460b      	mov	r3, r1
 80043be:	4313      	orrs	r3, r2
 80043c0:	d00a      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043c2:	4b6c      	ldr	r3, [pc, #432]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80043ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d2:	4a68      	ldr	r2, [pc, #416]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043d4:	430b      	orrs	r3, r1
 80043d6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80043d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e0:	2100      	movs	r1, #0
 80043e2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043ea:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80043ee:	460b      	mov	r3, r1
 80043f0:	4313      	orrs	r3, r2
 80043f2:	d011      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043f8:	3308      	adds	r3, #8
 80043fa:	2100      	movs	r1, #0
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fb79 	bl	8004af4 <RCCEx_PLL2_Config>
 8004402:	4603      	mov	r3, r0
 8004404:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004408:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004410:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004414:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004420:	2100      	movs	r1, #0
 8004422:	6239      	str	r1, [r7, #32]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	627b      	str	r3, [r7, #36]	@ 0x24
 800442a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800442e:	460b      	mov	r3, r1
 8004430:	4313      	orrs	r3, r2
 8004432:	d011      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004438:	3308      	adds	r3, #8
 800443a:	2101      	movs	r1, #1
 800443c:	4618      	mov	r0, r3
 800443e:	f000 fb59 	bl	8004af4 <RCCEx_PLL2_Config>
 8004442:	4603      	mov	r3, r0
 8004444:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004448:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004450:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004454:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800445c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004460:	2100      	movs	r1, #0
 8004462:	61b9      	str	r1, [r7, #24]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	61fb      	str	r3, [r7, #28]
 800446a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800446e:	460b      	mov	r3, r1
 8004470:	4313      	orrs	r3, r2
 8004472:	d011      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004478:	3308      	adds	r3, #8
 800447a:	2102      	movs	r1, #2
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fb39 	bl	8004af4 <RCCEx_PLL2_Config>
 8004482:	4603      	mov	r3, r0
 8004484:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004488:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004490:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004494:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800449c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a0:	2100      	movs	r1, #0
 80044a2:	6139      	str	r1, [r7, #16]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80044ae:	460b      	mov	r3, r1
 80044b0:	4313      	orrs	r3, r2
 80044b2:	d011      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044b8:	3328      	adds	r3, #40	@ 0x28
 80044ba:	2100      	movs	r1, #0
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fbcb 	bl	8004c58 <RCCEx_PLL3_Config>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80044c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80044d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e0:	2100      	movs	r1, #0
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	f003 0310 	and.w	r3, r3, #16
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80044ee:	460b      	mov	r3, r1
 80044f0:	4313      	orrs	r3, r2
 80044f2:	d011      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044f8:	3328      	adds	r3, #40	@ 0x28
 80044fa:	2101      	movs	r1, #1
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fbab 	bl	8004c58 <RCCEx_PLL3_Config>
 8004502:	4603      	mov	r3, r0
 8004504:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004508:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004510:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004514:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004520:	2100      	movs	r1, #0
 8004522:	6039      	str	r1, [r7, #0]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	607b      	str	r3, [r7, #4]
 800452a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800452e:	460b      	mov	r3, r1
 8004530:	4313      	orrs	r3, r2
 8004532:	d011      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004538:	3328      	adds	r3, #40	@ 0x28
 800453a:	2102      	movs	r1, #2
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fb8b 	bl	8004c58 <RCCEx_PLL3_Config>
 8004542:	4603      	mov	r3, r0
 8004544:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004548:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004550:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004554:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004558:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	e000      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
}
 8004566:	4618      	mov	r0, r3
 8004568:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800456c:	46bd      	mov	sp, r7
 800456e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004572:	bf00      	nop
 8004574:	58024400 	.word	0x58024400

08004578 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800457c:	f7fe fe00 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 8004580:	4602      	mov	r2, r0
 8004582:	4b06      	ldr	r3, [pc, #24]	@ (800459c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	091b      	lsrs	r3, r3, #4
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	4904      	ldr	r1, [pc, #16]	@ (80045a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800458e:	5ccb      	ldrb	r3, [r1, r3]
 8004590:	f003 031f 	and.w	r3, r3, #31
 8004594:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004598:	4618      	mov	r0, r3
 800459a:	bd80      	pop	{r7, pc}
 800459c:	58024400 	.word	0x58024400
 80045a0:	08006ff8 	.word	0x08006ff8

080045a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b089      	sub	sp, #36	@ 0x24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045ac:	4ba1      	ldr	r3, [pc, #644]	@ (8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80045b6:	4b9f      	ldr	r3, [pc, #636]	@ (8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ba:	0b1b      	lsrs	r3, r3, #12
 80045bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80045c2:	4b9c      	ldr	r3, [pc, #624]	@ (8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c6:	091b      	lsrs	r3, r3, #4
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80045ce:	4b99      	ldr	r3, [pc, #612]	@ (8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d2:	08db      	lsrs	r3, r3, #3
 80045d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	fb02 f303 	mul.w	r3, r2, r3
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 8111 	beq.w	8004814 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	f000 8083 	beq.w	8004700 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	f200 80a1 	bhi.w	8004744 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d056      	beq.n	80046bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800460e:	e099      	b.n	8004744 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004610:	4b88      	ldr	r3, [pc, #544]	@ (8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0320 	and.w	r3, r3, #32
 8004618:	2b00      	cmp	r3, #0
 800461a:	d02d      	beq.n	8004678 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800461c:	4b85      	ldr	r3, [pc, #532]	@ (8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	08db      	lsrs	r3, r3, #3
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	4a84      	ldr	r2, [pc, #528]	@ (8004838 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
 800462c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	ee07 3a90 	vmov	s15, r3
 8004634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004646:	4b7b      	ldr	r3, [pc, #492]	@ (8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004656:	ed97 6a03 	vldr	s12, [r7, #12]
 800465a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800483c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800465e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800466a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800466e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004672:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004676:	e087      	b.n	8004788 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004682:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004840 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468a:	4b6a      	ldr	r3, [pc, #424]	@ (8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800468c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800468e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800469a:	ed97 6a03 	vldr	s12, [r7, #12]
 800469e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800483c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046ba:	e065      	b.n	8004788 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	ee07 3a90 	vmov	s15, r3
 80046c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004844 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80046ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ce:	4b59      	ldr	r3, [pc, #356]	@ (8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046de:	ed97 6a03 	vldr	s12, [r7, #12]
 80046e2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800483c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046fe:	e043      	b.n	8004788 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800470a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800470e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004712:	4b48      	ldr	r3, [pc, #288]	@ (8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004722:	ed97 6a03 	vldr	s12, [r7, #12]
 8004726:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800483c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800472a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800472e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004732:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800473a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800473e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004742:	e021      	b.n	8004788 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	ee07 3a90 	vmov	s15, r3
 800474a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004844 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004756:	4b37      	ldr	r3, [pc, #220]	@ (8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004766:	ed97 6a03 	vldr	s12, [r7, #12]
 800476a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800483c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800476e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004776:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800477a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800477e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004786:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004788:	4b2a      	ldr	r3, [pc, #168]	@ (8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800478a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478c:	0a5b      	lsrs	r3, r3, #9
 800478e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800479e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80047a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047ae:	ee17 2a90 	vmov	r2, s15
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80047b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ba:	0c1b      	lsrs	r3, r3, #16
 80047bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047c0:	ee07 3a90 	vmov	s15, r3
 80047c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80047cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80047d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047dc:	ee17 2a90 	vmov	r2, s15
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80047e4:	4b13      	ldr	r3, [pc, #76]	@ (8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e8:	0e1b      	lsrs	r3, r3, #24
 80047ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80047fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800480a:	ee17 2a90 	vmov	r2, s15
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004812:	e008      	b.n	8004826 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	609a      	str	r2, [r3, #8]
}
 8004826:	bf00      	nop
 8004828:	3724      	adds	r7, #36	@ 0x24
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	58024400 	.word	0x58024400
 8004838:	03d09000 	.word	0x03d09000
 800483c:	46000000 	.word	0x46000000
 8004840:	4c742400 	.word	0x4c742400
 8004844:	4a742400 	.word	0x4a742400
 8004848:	4af42400 	.word	0x4af42400

0800484c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800484c:	b480      	push	{r7}
 800484e:	b089      	sub	sp, #36	@ 0x24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004854:	4ba1      	ldr	r3, [pc, #644]	@ (8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004858:	f003 0303 	and.w	r3, r3, #3
 800485c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800485e:	4b9f      	ldr	r3, [pc, #636]	@ (8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004862:	0d1b      	lsrs	r3, r3, #20
 8004864:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004868:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800486a:	4b9c      	ldr	r3, [pc, #624]	@ (8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800486c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486e:	0a1b      	lsrs	r3, r3, #8
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004876:	4b99      	ldr	r3, [pc, #612]	@ (8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800487a:	08db      	lsrs	r3, r3, #3
 800487c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	fb02 f303 	mul.w	r3, r2, r3
 8004886:	ee07 3a90 	vmov	s15, r3
 800488a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 8111 	beq.w	8004abc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	2b02      	cmp	r3, #2
 800489e:	f000 8083 	beq.w	80049a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	f200 80a1 	bhi.w	80049ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d056      	beq.n	8004964 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80048b6:	e099      	b.n	80049ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048b8:	4b88      	ldr	r3, [pc, #544]	@ (8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0320 	and.w	r3, r3, #32
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d02d      	beq.n	8004920 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048c4:	4b85      	ldr	r3, [pc, #532]	@ (8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	08db      	lsrs	r3, r3, #3
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	4a84      	ldr	r2, [pc, #528]	@ (8004ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80048d0:	fa22 f303 	lsr.w	r3, r2, r3
 80048d4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	ee07 3a90 	vmov	s15, r3
 80048dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ee:	4b7b      	ldr	r3, [pc, #492]	@ (8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f6:	ee07 3a90 	vmov	s15, r3
 80048fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004902:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800490a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800490e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800491e:	e087      	b.n	8004a30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800492e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004932:	4b6a      	ldr	r3, [pc, #424]	@ (8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493a:	ee07 3a90 	vmov	s15, r3
 800493e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004942:	ed97 6a03 	vldr	s12, [r7, #12]
 8004946:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800494a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800494e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800495a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800495e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004962:	e065      	b.n	8004a30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004976:	4b59      	ldr	r3, [pc, #356]	@ (8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004986:	ed97 6a03 	vldr	s12, [r7, #12]
 800498a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800498e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800499a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800499e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049a6:	e043      	b.n	8004a30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80049b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ba:	4b48      	ldr	r3, [pc, #288]	@ (8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049ea:	e021      	b.n	8004a30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	ee07 3a90 	vmov	s15, r3
 80049f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80049fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049fe:	4b37      	ldr	r3, [pc, #220]	@ (8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a06:	ee07 3a90 	vmov	s15, r3
 8004a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a12:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a2e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004a30:	4b2a      	ldr	r3, [pc, #168]	@ (8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a34:	0a5b      	lsrs	r3, r3, #9
 8004a36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a3a:	ee07 3a90 	vmov	s15, r3
 8004a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a56:	ee17 2a90 	vmov	r2, s15
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a62:	0c1b      	lsrs	r3, r3, #16
 8004a64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a68:	ee07 3a90 	vmov	s15, r3
 8004a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a78:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a84:	ee17 2a90 	vmov	r2, s15
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004a8c:	4b13      	ldr	r3, [pc, #76]	@ (8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a90:	0e1b      	lsrs	r3, r3, #24
 8004a92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a96:	ee07 3a90 	vmov	s15, r3
 8004a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004aa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004aa6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ab2:	ee17 2a90 	vmov	r2, s15
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004aba:	e008      	b.n	8004ace <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	609a      	str	r2, [r3, #8]
}
 8004ace:	bf00      	nop
 8004ad0:	3724      	adds	r7, #36	@ 0x24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	58024400 	.word	0x58024400
 8004ae0:	03d09000 	.word	0x03d09000
 8004ae4:	46000000 	.word	0x46000000
 8004ae8:	4c742400 	.word	0x4c742400
 8004aec:	4a742400 	.word	0x4a742400
 8004af0:	4af42400 	.word	0x4af42400

08004af4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b02:	4b53      	ldr	r3, [pc, #332]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	d101      	bne.n	8004b12 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e099      	b.n	8004c46 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b12:	4b4f      	ldr	r3, [pc, #316]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a4e      	ldr	r2, [pc, #312]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004b18:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b1e:	f7fc fccd 	bl	80014bc <HAL_GetTick>
 8004b22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b24:	e008      	b.n	8004b38 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b26:	f7fc fcc9 	bl	80014bc <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d901      	bls.n	8004b38 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e086      	b.n	8004c46 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b38:	4b45      	ldr	r3, [pc, #276]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1f0      	bne.n	8004b26 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b44:	4b42      	ldr	r3, [pc, #264]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b48:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	031b      	lsls	r3, r3, #12
 8004b52:	493f      	ldr	r1, [pc, #252]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	025b      	lsls	r3, r3, #9
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	3b01      	subs	r3, #1
 8004b74:	041b      	lsls	r3, r3, #16
 8004b76:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	3b01      	subs	r3, #1
 8004b82:	061b      	lsls	r3, r3, #24
 8004b84:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004b88:	4931      	ldr	r1, [pc, #196]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b8e:	4b30      	ldr	r3, [pc, #192]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b92:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	492d      	ldr	r1, [pc, #180]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba4:	f023 0220 	bic.w	r2, r3, #32
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	4928      	ldr	r1, [pc, #160]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004bb2:	4b27      	ldr	r3, [pc, #156]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb6:	4a26      	ldr	r2, [pc, #152]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004bb8:	f023 0310 	bic.w	r3, r3, #16
 8004bbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004bbe:	4b24      	ldr	r3, [pc, #144]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004bc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bc2:	4b24      	ldr	r3, [pc, #144]	@ (8004c54 <RCCEx_PLL2_Config+0x160>)
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	69d2      	ldr	r2, [r2, #28]
 8004bca:	00d2      	lsls	r2, r2, #3
 8004bcc:	4920      	ldr	r1, [pc, #128]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004bd8:	f043 0310 	orr.w	r3, r3, #16
 8004bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d106      	bne.n	8004bf2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004be4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be8:	4a19      	ldr	r2, [pc, #100]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004bea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004bee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004bf0:	e00f      	b.n	8004c12 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d106      	bne.n	8004c06 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004bf8:	4b15      	ldr	r3, [pc, #84]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfc:	4a14      	ldr	r2, [pc, #80]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004bfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c04:	e005      	b.n	8004c12 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c06:	4b12      	ldr	r3, [pc, #72]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0a:	4a11      	ldr	r2, [pc, #68]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004c0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c10:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c12:	4b0f      	ldr	r3, [pc, #60]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a0e      	ldr	r2, [pc, #56]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004c18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c1e:	f7fc fc4d 	bl	80014bc <HAL_GetTick>
 8004c22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c24:	e008      	b.n	8004c38 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c26:	f7fc fc49 	bl	80014bc <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e006      	b.n	8004c46 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c38:	4b05      	ldr	r3, [pc, #20]	@ (8004c50 <RCCEx_PLL2_Config+0x15c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0f0      	beq.n	8004c26 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	58024400 	.word	0x58024400
 8004c54:	ffff0007 	.word	0xffff0007

08004c58 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c66:	4b53      	ldr	r3, [pc, #332]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d101      	bne.n	8004c76 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e099      	b.n	8004daa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c76:	4b4f      	ldr	r3, [pc, #316]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a4e      	ldr	r2, [pc, #312]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004c7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c82:	f7fc fc1b 	bl	80014bc <HAL_GetTick>
 8004c86:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c88:	e008      	b.n	8004c9c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c8a:	f7fc fc17 	bl	80014bc <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e086      	b.n	8004daa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c9c:	4b45      	ldr	r3, [pc, #276]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1f0      	bne.n	8004c8a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ca8:	4b42      	ldr	r3, [pc, #264]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cac:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	051b      	lsls	r3, r3, #20
 8004cb6:	493f      	ldr	r1, [pc, #252]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	628b      	str	r3, [r1, #40]	@ 0x28
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	025b      	lsls	r3, r3, #9
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	041b      	lsls	r3, r3, #16
 8004cda:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	061b      	lsls	r3, r3, #24
 8004ce8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004cec:	4931      	ldr	r1, [pc, #196]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004cf2:	4b30      	ldr	r3, [pc, #192]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	492d      	ldr	r1, [pc, #180]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004d04:	4b2b      	ldr	r3, [pc, #172]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d08:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	4928      	ldr	r1, [pc, #160]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004d16:	4b27      	ldr	r3, [pc, #156]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1a:	4a26      	ldr	r2, [pc, #152]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004d1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004d22:	4b24      	ldr	r3, [pc, #144]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004d24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d26:	4b24      	ldr	r3, [pc, #144]	@ (8004db8 <RCCEx_PLL3_Config+0x160>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	69d2      	ldr	r2, [r2, #28]
 8004d2e:	00d2      	lsls	r2, r2, #3
 8004d30:	4920      	ldr	r1, [pc, #128]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004d36:	4b1f      	ldr	r3, [pc, #124]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004d3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d106      	bne.n	8004d56 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d48:	4b1a      	ldr	r3, [pc, #104]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4c:	4a19      	ldr	r2, [pc, #100]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004d4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d54:	e00f      	b.n	8004d76 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d106      	bne.n	8004d6a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004d5c:	4b15      	ldr	r3, [pc, #84]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d60:	4a14      	ldr	r2, [pc, #80]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004d62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d68:	e005      	b.n	8004d76 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d6a:	4b12      	ldr	r3, [pc, #72]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6e:	4a11      	ldr	r2, [pc, #68]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004d70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d74:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d76:	4b0f      	ldr	r3, [pc, #60]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d82:	f7fc fb9b 	bl	80014bc <HAL_GetTick>
 8004d86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d88:	e008      	b.n	8004d9c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d8a:	f7fc fb97 	bl	80014bc <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e006      	b.n	8004daa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d9c:	4b05      	ldr	r3, [pc, #20]	@ (8004db4 <RCCEx_PLL3_Config+0x15c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0f0      	beq.n	8004d8a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	58024400 	.word	0x58024400
 8004db8:	ffff0007 	.word	0xffff0007

08004dbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e042      	b.n	8004e54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d106      	bne.n	8004de6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7fc f85f 	bl	8000ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2224      	movs	r2, #36	@ 0x24
 8004dea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0201 	bic.w	r2, r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fe94 	bl	8005b34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f825 	bl	8004e5c <UART_SetConfig>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d101      	bne.n	8004e1c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e01b      	b.n	8004e54 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689a      	ldr	r2, [r3, #8]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0201 	orr.w	r2, r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 ff13 	bl	8005c78 <UART_CheckIdleState>
 8004e52:	4603      	mov	r3, r0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e60:	b092      	sub	sp, #72	@ 0x48
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	431a      	orrs	r2, r3
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	4bbe      	ldr	r3, [pc, #760]	@ (8005184 <UART_SetConfig+0x328>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	6812      	ldr	r2, [r2, #0]
 8004e92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e94:	430b      	orrs	r3, r1
 8004e96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4ab3      	ldr	r2, [pc, #716]	@ (8005188 <UART_SetConfig+0x32c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d004      	beq.n	8004ec8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	4baf      	ldr	r3, [pc, #700]	@ (800518c <UART_SetConfig+0x330>)
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	6812      	ldr	r2, [r2, #0]
 8004ed6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004ed8:	430b      	orrs	r3, r1
 8004eda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee2:	f023 010f 	bic.w	r1, r3, #15
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4aa6      	ldr	r2, [pc, #664]	@ (8005190 <UART_SetConfig+0x334>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d177      	bne.n	8004fec <UART_SetConfig+0x190>
 8004efc:	4ba5      	ldr	r3, [pc, #660]	@ (8005194 <UART_SetConfig+0x338>)
 8004efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f04:	2b28      	cmp	r3, #40	@ 0x28
 8004f06:	d86d      	bhi.n	8004fe4 <UART_SetConfig+0x188>
 8004f08:	a201      	add	r2, pc, #4	@ (adr r2, 8004f10 <UART_SetConfig+0xb4>)
 8004f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0e:	bf00      	nop
 8004f10:	08004fb5 	.word	0x08004fb5
 8004f14:	08004fe5 	.word	0x08004fe5
 8004f18:	08004fe5 	.word	0x08004fe5
 8004f1c:	08004fe5 	.word	0x08004fe5
 8004f20:	08004fe5 	.word	0x08004fe5
 8004f24:	08004fe5 	.word	0x08004fe5
 8004f28:	08004fe5 	.word	0x08004fe5
 8004f2c:	08004fe5 	.word	0x08004fe5
 8004f30:	08004fbd 	.word	0x08004fbd
 8004f34:	08004fe5 	.word	0x08004fe5
 8004f38:	08004fe5 	.word	0x08004fe5
 8004f3c:	08004fe5 	.word	0x08004fe5
 8004f40:	08004fe5 	.word	0x08004fe5
 8004f44:	08004fe5 	.word	0x08004fe5
 8004f48:	08004fe5 	.word	0x08004fe5
 8004f4c:	08004fe5 	.word	0x08004fe5
 8004f50:	08004fc5 	.word	0x08004fc5
 8004f54:	08004fe5 	.word	0x08004fe5
 8004f58:	08004fe5 	.word	0x08004fe5
 8004f5c:	08004fe5 	.word	0x08004fe5
 8004f60:	08004fe5 	.word	0x08004fe5
 8004f64:	08004fe5 	.word	0x08004fe5
 8004f68:	08004fe5 	.word	0x08004fe5
 8004f6c:	08004fe5 	.word	0x08004fe5
 8004f70:	08004fcd 	.word	0x08004fcd
 8004f74:	08004fe5 	.word	0x08004fe5
 8004f78:	08004fe5 	.word	0x08004fe5
 8004f7c:	08004fe5 	.word	0x08004fe5
 8004f80:	08004fe5 	.word	0x08004fe5
 8004f84:	08004fe5 	.word	0x08004fe5
 8004f88:	08004fe5 	.word	0x08004fe5
 8004f8c:	08004fe5 	.word	0x08004fe5
 8004f90:	08004fd5 	.word	0x08004fd5
 8004f94:	08004fe5 	.word	0x08004fe5
 8004f98:	08004fe5 	.word	0x08004fe5
 8004f9c:	08004fe5 	.word	0x08004fe5
 8004fa0:	08004fe5 	.word	0x08004fe5
 8004fa4:	08004fe5 	.word	0x08004fe5
 8004fa8:	08004fe5 	.word	0x08004fe5
 8004fac:	08004fe5 	.word	0x08004fe5
 8004fb0:	08004fdd 	.word	0x08004fdd
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fba:	e326      	b.n	800560a <UART_SetConfig+0x7ae>
 8004fbc:	2304      	movs	r3, #4
 8004fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fc2:	e322      	b.n	800560a <UART_SetConfig+0x7ae>
 8004fc4:	2308      	movs	r3, #8
 8004fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fca:	e31e      	b.n	800560a <UART_SetConfig+0x7ae>
 8004fcc:	2310      	movs	r3, #16
 8004fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fd2:	e31a      	b.n	800560a <UART_SetConfig+0x7ae>
 8004fd4:	2320      	movs	r3, #32
 8004fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fda:	e316      	b.n	800560a <UART_SetConfig+0x7ae>
 8004fdc:	2340      	movs	r3, #64	@ 0x40
 8004fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fe2:	e312      	b.n	800560a <UART_SetConfig+0x7ae>
 8004fe4:	2380      	movs	r3, #128	@ 0x80
 8004fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fea:	e30e      	b.n	800560a <UART_SetConfig+0x7ae>
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a69      	ldr	r2, [pc, #420]	@ (8005198 <UART_SetConfig+0x33c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d130      	bne.n	8005058 <UART_SetConfig+0x1fc>
 8004ff6:	4b67      	ldr	r3, [pc, #412]	@ (8005194 <UART_SetConfig+0x338>)
 8004ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	2b05      	cmp	r3, #5
 8005000:	d826      	bhi.n	8005050 <UART_SetConfig+0x1f4>
 8005002:	a201      	add	r2, pc, #4	@ (adr r2, 8005008 <UART_SetConfig+0x1ac>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	08005021 	.word	0x08005021
 800500c:	08005029 	.word	0x08005029
 8005010:	08005031 	.word	0x08005031
 8005014:	08005039 	.word	0x08005039
 8005018:	08005041 	.word	0x08005041
 800501c:	08005049 	.word	0x08005049
 8005020:	2300      	movs	r3, #0
 8005022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005026:	e2f0      	b.n	800560a <UART_SetConfig+0x7ae>
 8005028:	2304      	movs	r3, #4
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800502e:	e2ec      	b.n	800560a <UART_SetConfig+0x7ae>
 8005030:	2308      	movs	r3, #8
 8005032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005036:	e2e8      	b.n	800560a <UART_SetConfig+0x7ae>
 8005038:	2310      	movs	r3, #16
 800503a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800503e:	e2e4      	b.n	800560a <UART_SetConfig+0x7ae>
 8005040:	2320      	movs	r3, #32
 8005042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005046:	e2e0      	b.n	800560a <UART_SetConfig+0x7ae>
 8005048:	2340      	movs	r3, #64	@ 0x40
 800504a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800504e:	e2dc      	b.n	800560a <UART_SetConfig+0x7ae>
 8005050:	2380      	movs	r3, #128	@ 0x80
 8005052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005056:	e2d8      	b.n	800560a <UART_SetConfig+0x7ae>
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a4f      	ldr	r2, [pc, #316]	@ (800519c <UART_SetConfig+0x340>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d130      	bne.n	80050c4 <UART_SetConfig+0x268>
 8005062:	4b4c      	ldr	r3, [pc, #304]	@ (8005194 <UART_SetConfig+0x338>)
 8005064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	2b05      	cmp	r3, #5
 800506c:	d826      	bhi.n	80050bc <UART_SetConfig+0x260>
 800506e:	a201      	add	r2, pc, #4	@ (adr r2, 8005074 <UART_SetConfig+0x218>)
 8005070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005074:	0800508d 	.word	0x0800508d
 8005078:	08005095 	.word	0x08005095
 800507c:	0800509d 	.word	0x0800509d
 8005080:	080050a5 	.word	0x080050a5
 8005084:	080050ad 	.word	0x080050ad
 8005088:	080050b5 	.word	0x080050b5
 800508c:	2300      	movs	r3, #0
 800508e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005092:	e2ba      	b.n	800560a <UART_SetConfig+0x7ae>
 8005094:	2304      	movs	r3, #4
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800509a:	e2b6      	b.n	800560a <UART_SetConfig+0x7ae>
 800509c:	2308      	movs	r3, #8
 800509e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050a2:	e2b2      	b.n	800560a <UART_SetConfig+0x7ae>
 80050a4:	2310      	movs	r3, #16
 80050a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050aa:	e2ae      	b.n	800560a <UART_SetConfig+0x7ae>
 80050ac:	2320      	movs	r3, #32
 80050ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050b2:	e2aa      	b.n	800560a <UART_SetConfig+0x7ae>
 80050b4:	2340      	movs	r3, #64	@ 0x40
 80050b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ba:	e2a6      	b.n	800560a <UART_SetConfig+0x7ae>
 80050bc:	2380      	movs	r3, #128	@ 0x80
 80050be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050c2:	e2a2      	b.n	800560a <UART_SetConfig+0x7ae>
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a35      	ldr	r2, [pc, #212]	@ (80051a0 <UART_SetConfig+0x344>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d130      	bne.n	8005130 <UART_SetConfig+0x2d4>
 80050ce:	4b31      	ldr	r3, [pc, #196]	@ (8005194 <UART_SetConfig+0x338>)
 80050d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	2b05      	cmp	r3, #5
 80050d8:	d826      	bhi.n	8005128 <UART_SetConfig+0x2cc>
 80050da:	a201      	add	r2, pc, #4	@ (adr r2, 80050e0 <UART_SetConfig+0x284>)
 80050dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e0:	080050f9 	.word	0x080050f9
 80050e4:	08005101 	.word	0x08005101
 80050e8:	08005109 	.word	0x08005109
 80050ec:	08005111 	.word	0x08005111
 80050f0:	08005119 	.word	0x08005119
 80050f4:	08005121 	.word	0x08005121
 80050f8:	2300      	movs	r3, #0
 80050fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050fe:	e284      	b.n	800560a <UART_SetConfig+0x7ae>
 8005100:	2304      	movs	r3, #4
 8005102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005106:	e280      	b.n	800560a <UART_SetConfig+0x7ae>
 8005108:	2308      	movs	r3, #8
 800510a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800510e:	e27c      	b.n	800560a <UART_SetConfig+0x7ae>
 8005110:	2310      	movs	r3, #16
 8005112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005116:	e278      	b.n	800560a <UART_SetConfig+0x7ae>
 8005118:	2320      	movs	r3, #32
 800511a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800511e:	e274      	b.n	800560a <UART_SetConfig+0x7ae>
 8005120:	2340      	movs	r3, #64	@ 0x40
 8005122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005126:	e270      	b.n	800560a <UART_SetConfig+0x7ae>
 8005128:	2380      	movs	r3, #128	@ 0x80
 800512a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800512e:	e26c      	b.n	800560a <UART_SetConfig+0x7ae>
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a1b      	ldr	r2, [pc, #108]	@ (80051a4 <UART_SetConfig+0x348>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d142      	bne.n	80051c0 <UART_SetConfig+0x364>
 800513a:	4b16      	ldr	r3, [pc, #88]	@ (8005194 <UART_SetConfig+0x338>)
 800513c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	2b05      	cmp	r3, #5
 8005144:	d838      	bhi.n	80051b8 <UART_SetConfig+0x35c>
 8005146:	a201      	add	r2, pc, #4	@ (adr r2, 800514c <UART_SetConfig+0x2f0>)
 8005148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514c:	08005165 	.word	0x08005165
 8005150:	0800516d 	.word	0x0800516d
 8005154:	08005175 	.word	0x08005175
 8005158:	0800517d 	.word	0x0800517d
 800515c:	080051a9 	.word	0x080051a9
 8005160:	080051b1 	.word	0x080051b1
 8005164:	2300      	movs	r3, #0
 8005166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800516a:	e24e      	b.n	800560a <UART_SetConfig+0x7ae>
 800516c:	2304      	movs	r3, #4
 800516e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005172:	e24a      	b.n	800560a <UART_SetConfig+0x7ae>
 8005174:	2308      	movs	r3, #8
 8005176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800517a:	e246      	b.n	800560a <UART_SetConfig+0x7ae>
 800517c:	2310      	movs	r3, #16
 800517e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005182:	e242      	b.n	800560a <UART_SetConfig+0x7ae>
 8005184:	cfff69f3 	.word	0xcfff69f3
 8005188:	58000c00 	.word	0x58000c00
 800518c:	11fff4ff 	.word	0x11fff4ff
 8005190:	40011000 	.word	0x40011000
 8005194:	58024400 	.word	0x58024400
 8005198:	40004400 	.word	0x40004400
 800519c:	40004800 	.word	0x40004800
 80051a0:	40004c00 	.word	0x40004c00
 80051a4:	40005000 	.word	0x40005000
 80051a8:	2320      	movs	r3, #32
 80051aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ae:	e22c      	b.n	800560a <UART_SetConfig+0x7ae>
 80051b0:	2340      	movs	r3, #64	@ 0x40
 80051b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051b6:	e228      	b.n	800560a <UART_SetConfig+0x7ae>
 80051b8:	2380      	movs	r3, #128	@ 0x80
 80051ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051be:	e224      	b.n	800560a <UART_SetConfig+0x7ae>
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4ab1      	ldr	r2, [pc, #708]	@ (800548c <UART_SetConfig+0x630>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d176      	bne.n	80052b8 <UART_SetConfig+0x45c>
 80051ca:	4bb1      	ldr	r3, [pc, #708]	@ (8005490 <UART_SetConfig+0x634>)
 80051cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051d2:	2b28      	cmp	r3, #40	@ 0x28
 80051d4:	d86c      	bhi.n	80052b0 <UART_SetConfig+0x454>
 80051d6:	a201      	add	r2, pc, #4	@ (adr r2, 80051dc <UART_SetConfig+0x380>)
 80051d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051dc:	08005281 	.word	0x08005281
 80051e0:	080052b1 	.word	0x080052b1
 80051e4:	080052b1 	.word	0x080052b1
 80051e8:	080052b1 	.word	0x080052b1
 80051ec:	080052b1 	.word	0x080052b1
 80051f0:	080052b1 	.word	0x080052b1
 80051f4:	080052b1 	.word	0x080052b1
 80051f8:	080052b1 	.word	0x080052b1
 80051fc:	08005289 	.word	0x08005289
 8005200:	080052b1 	.word	0x080052b1
 8005204:	080052b1 	.word	0x080052b1
 8005208:	080052b1 	.word	0x080052b1
 800520c:	080052b1 	.word	0x080052b1
 8005210:	080052b1 	.word	0x080052b1
 8005214:	080052b1 	.word	0x080052b1
 8005218:	080052b1 	.word	0x080052b1
 800521c:	08005291 	.word	0x08005291
 8005220:	080052b1 	.word	0x080052b1
 8005224:	080052b1 	.word	0x080052b1
 8005228:	080052b1 	.word	0x080052b1
 800522c:	080052b1 	.word	0x080052b1
 8005230:	080052b1 	.word	0x080052b1
 8005234:	080052b1 	.word	0x080052b1
 8005238:	080052b1 	.word	0x080052b1
 800523c:	08005299 	.word	0x08005299
 8005240:	080052b1 	.word	0x080052b1
 8005244:	080052b1 	.word	0x080052b1
 8005248:	080052b1 	.word	0x080052b1
 800524c:	080052b1 	.word	0x080052b1
 8005250:	080052b1 	.word	0x080052b1
 8005254:	080052b1 	.word	0x080052b1
 8005258:	080052b1 	.word	0x080052b1
 800525c:	080052a1 	.word	0x080052a1
 8005260:	080052b1 	.word	0x080052b1
 8005264:	080052b1 	.word	0x080052b1
 8005268:	080052b1 	.word	0x080052b1
 800526c:	080052b1 	.word	0x080052b1
 8005270:	080052b1 	.word	0x080052b1
 8005274:	080052b1 	.word	0x080052b1
 8005278:	080052b1 	.word	0x080052b1
 800527c:	080052a9 	.word	0x080052a9
 8005280:	2301      	movs	r3, #1
 8005282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005286:	e1c0      	b.n	800560a <UART_SetConfig+0x7ae>
 8005288:	2304      	movs	r3, #4
 800528a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800528e:	e1bc      	b.n	800560a <UART_SetConfig+0x7ae>
 8005290:	2308      	movs	r3, #8
 8005292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005296:	e1b8      	b.n	800560a <UART_SetConfig+0x7ae>
 8005298:	2310      	movs	r3, #16
 800529a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800529e:	e1b4      	b.n	800560a <UART_SetConfig+0x7ae>
 80052a0:	2320      	movs	r3, #32
 80052a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052a6:	e1b0      	b.n	800560a <UART_SetConfig+0x7ae>
 80052a8:	2340      	movs	r3, #64	@ 0x40
 80052aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ae:	e1ac      	b.n	800560a <UART_SetConfig+0x7ae>
 80052b0:	2380      	movs	r3, #128	@ 0x80
 80052b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052b6:	e1a8      	b.n	800560a <UART_SetConfig+0x7ae>
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a75      	ldr	r2, [pc, #468]	@ (8005494 <UART_SetConfig+0x638>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d130      	bne.n	8005324 <UART_SetConfig+0x4c8>
 80052c2:	4b73      	ldr	r3, [pc, #460]	@ (8005490 <UART_SetConfig+0x634>)
 80052c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	2b05      	cmp	r3, #5
 80052cc:	d826      	bhi.n	800531c <UART_SetConfig+0x4c0>
 80052ce:	a201      	add	r2, pc, #4	@ (adr r2, 80052d4 <UART_SetConfig+0x478>)
 80052d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d4:	080052ed 	.word	0x080052ed
 80052d8:	080052f5 	.word	0x080052f5
 80052dc:	080052fd 	.word	0x080052fd
 80052e0:	08005305 	.word	0x08005305
 80052e4:	0800530d 	.word	0x0800530d
 80052e8:	08005315 	.word	0x08005315
 80052ec:	2300      	movs	r3, #0
 80052ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052f2:	e18a      	b.n	800560a <UART_SetConfig+0x7ae>
 80052f4:	2304      	movs	r3, #4
 80052f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052fa:	e186      	b.n	800560a <UART_SetConfig+0x7ae>
 80052fc:	2308      	movs	r3, #8
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005302:	e182      	b.n	800560a <UART_SetConfig+0x7ae>
 8005304:	2310      	movs	r3, #16
 8005306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800530a:	e17e      	b.n	800560a <UART_SetConfig+0x7ae>
 800530c:	2320      	movs	r3, #32
 800530e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005312:	e17a      	b.n	800560a <UART_SetConfig+0x7ae>
 8005314:	2340      	movs	r3, #64	@ 0x40
 8005316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800531a:	e176      	b.n	800560a <UART_SetConfig+0x7ae>
 800531c:	2380      	movs	r3, #128	@ 0x80
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005322:	e172      	b.n	800560a <UART_SetConfig+0x7ae>
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a5b      	ldr	r2, [pc, #364]	@ (8005498 <UART_SetConfig+0x63c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d130      	bne.n	8005390 <UART_SetConfig+0x534>
 800532e:	4b58      	ldr	r3, [pc, #352]	@ (8005490 <UART_SetConfig+0x634>)
 8005330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	2b05      	cmp	r3, #5
 8005338:	d826      	bhi.n	8005388 <UART_SetConfig+0x52c>
 800533a:	a201      	add	r2, pc, #4	@ (adr r2, 8005340 <UART_SetConfig+0x4e4>)
 800533c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005340:	08005359 	.word	0x08005359
 8005344:	08005361 	.word	0x08005361
 8005348:	08005369 	.word	0x08005369
 800534c:	08005371 	.word	0x08005371
 8005350:	08005379 	.word	0x08005379
 8005354:	08005381 	.word	0x08005381
 8005358:	2300      	movs	r3, #0
 800535a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800535e:	e154      	b.n	800560a <UART_SetConfig+0x7ae>
 8005360:	2304      	movs	r3, #4
 8005362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005366:	e150      	b.n	800560a <UART_SetConfig+0x7ae>
 8005368:	2308      	movs	r3, #8
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800536e:	e14c      	b.n	800560a <UART_SetConfig+0x7ae>
 8005370:	2310      	movs	r3, #16
 8005372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005376:	e148      	b.n	800560a <UART_SetConfig+0x7ae>
 8005378:	2320      	movs	r3, #32
 800537a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800537e:	e144      	b.n	800560a <UART_SetConfig+0x7ae>
 8005380:	2340      	movs	r3, #64	@ 0x40
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005386:	e140      	b.n	800560a <UART_SetConfig+0x7ae>
 8005388:	2380      	movs	r3, #128	@ 0x80
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800538e:	e13c      	b.n	800560a <UART_SetConfig+0x7ae>
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a41      	ldr	r2, [pc, #260]	@ (800549c <UART_SetConfig+0x640>)
 8005396:	4293      	cmp	r3, r2
 8005398:	f040 8082 	bne.w	80054a0 <UART_SetConfig+0x644>
 800539c:	4b3c      	ldr	r3, [pc, #240]	@ (8005490 <UART_SetConfig+0x634>)
 800539e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053a4:	2b28      	cmp	r3, #40	@ 0x28
 80053a6:	d86d      	bhi.n	8005484 <UART_SetConfig+0x628>
 80053a8:	a201      	add	r2, pc, #4	@ (adr r2, 80053b0 <UART_SetConfig+0x554>)
 80053aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ae:	bf00      	nop
 80053b0:	08005455 	.word	0x08005455
 80053b4:	08005485 	.word	0x08005485
 80053b8:	08005485 	.word	0x08005485
 80053bc:	08005485 	.word	0x08005485
 80053c0:	08005485 	.word	0x08005485
 80053c4:	08005485 	.word	0x08005485
 80053c8:	08005485 	.word	0x08005485
 80053cc:	08005485 	.word	0x08005485
 80053d0:	0800545d 	.word	0x0800545d
 80053d4:	08005485 	.word	0x08005485
 80053d8:	08005485 	.word	0x08005485
 80053dc:	08005485 	.word	0x08005485
 80053e0:	08005485 	.word	0x08005485
 80053e4:	08005485 	.word	0x08005485
 80053e8:	08005485 	.word	0x08005485
 80053ec:	08005485 	.word	0x08005485
 80053f0:	08005465 	.word	0x08005465
 80053f4:	08005485 	.word	0x08005485
 80053f8:	08005485 	.word	0x08005485
 80053fc:	08005485 	.word	0x08005485
 8005400:	08005485 	.word	0x08005485
 8005404:	08005485 	.word	0x08005485
 8005408:	08005485 	.word	0x08005485
 800540c:	08005485 	.word	0x08005485
 8005410:	0800546d 	.word	0x0800546d
 8005414:	08005485 	.word	0x08005485
 8005418:	08005485 	.word	0x08005485
 800541c:	08005485 	.word	0x08005485
 8005420:	08005485 	.word	0x08005485
 8005424:	08005485 	.word	0x08005485
 8005428:	08005485 	.word	0x08005485
 800542c:	08005485 	.word	0x08005485
 8005430:	08005475 	.word	0x08005475
 8005434:	08005485 	.word	0x08005485
 8005438:	08005485 	.word	0x08005485
 800543c:	08005485 	.word	0x08005485
 8005440:	08005485 	.word	0x08005485
 8005444:	08005485 	.word	0x08005485
 8005448:	08005485 	.word	0x08005485
 800544c:	08005485 	.word	0x08005485
 8005450:	0800547d 	.word	0x0800547d
 8005454:	2301      	movs	r3, #1
 8005456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800545a:	e0d6      	b.n	800560a <UART_SetConfig+0x7ae>
 800545c:	2304      	movs	r3, #4
 800545e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005462:	e0d2      	b.n	800560a <UART_SetConfig+0x7ae>
 8005464:	2308      	movs	r3, #8
 8005466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800546a:	e0ce      	b.n	800560a <UART_SetConfig+0x7ae>
 800546c:	2310      	movs	r3, #16
 800546e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005472:	e0ca      	b.n	800560a <UART_SetConfig+0x7ae>
 8005474:	2320      	movs	r3, #32
 8005476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800547a:	e0c6      	b.n	800560a <UART_SetConfig+0x7ae>
 800547c:	2340      	movs	r3, #64	@ 0x40
 800547e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005482:	e0c2      	b.n	800560a <UART_SetConfig+0x7ae>
 8005484:	2380      	movs	r3, #128	@ 0x80
 8005486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800548a:	e0be      	b.n	800560a <UART_SetConfig+0x7ae>
 800548c:	40011400 	.word	0x40011400
 8005490:	58024400 	.word	0x58024400
 8005494:	40007800 	.word	0x40007800
 8005498:	40007c00 	.word	0x40007c00
 800549c:	40011800 	.word	0x40011800
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4aad      	ldr	r2, [pc, #692]	@ (800575c <UART_SetConfig+0x900>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d176      	bne.n	8005598 <UART_SetConfig+0x73c>
 80054aa:	4bad      	ldr	r3, [pc, #692]	@ (8005760 <UART_SetConfig+0x904>)
 80054ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054b2:	2b28      	cmp	r3, #40	@ 0x28
 80054b4:	d86c      	bhi.n	8005590 <UART_SetConfig+0x734>
 80054b6:	a201      	add	r2, pc, #4	@ (adr r2, 80054bc <UART_SetConfig+0x660>)
 80054b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054bc:	08005561 	.word	0x08005561
 80054c0:	08005591 	.word	0x08005591
 80054c4:	08005591 	.word	0x08005591
 80054c8:	08005591 	.word	0x08005591
 80054cc:	08005591 	.word	0x08005591
 80054d0:	08005591 	.word	0x08005591
 80054d4:	08005591 	.word	0x08005591
 80054d8:	08005591 	.word	0x08005591
 80054dc:	08005569 	.word	0x08005569
 80054e0:	08005591 	.word	0x08005591
 80054e4:	08005591 	.word	0x08005591
 80054e8:	08005591 	.word	0x08005591
 80054ec:	08005591 	.word	0x08005591
 80054f0:	08005591 	.word	0x08005591
 80054f4:	08005591 	.word	0x08005591
 80054f8:	08005591 	.word	0x08005591
 80054fc:	08005571 	.word	0x08005571
 8005500:	08005591 	.word	0x08005591
 8005504:	08005591 	.word	0x08005591
 8005508:	08005591 	.word	0x08005591
 800550c:	08005591 	.word	0x08005591
 8005510:	08005591 	.word	0x08005591
 8005514:	08005591 	.word	0x08005591
 8005518:	08005591 	.word	0x08005591
 800551c:	08005579 	.word	0x08005579
 8005520:	08005591 	.word	0x08005591
 8005524:	08005591 	.word	0x08005591
 8005528:	08005591 	.word	0x08005591
 800552c:	08005591 	.word	0x08005591
 8005530:	08005591 	.word	0x08005591
 8005534:	08005591 	.word	0x08005591
 8005538:	08005591 	.word	0x08005591
 800553c:	08005581 	.word	0x08005581
 8005540:	08005591 	.word	0x08005591
 8005544:	08005591 	.word	0x08005591
 8005548:	08005591 	.word	0x08005591
 800554c:	08005591 	.word	0x08005591
 8005550:	08005591 	.word	0x08005591
 8005554:	08005591 	.word	0x08005591
 8005558:	08005591 	.word	0x08005591
 800555c:	08005589 	.word	0x08005589
 8005560:	2301      	movs	r3, #1
 8005562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005566:	e050      	b.n	800560a <UART_SetConfig+0x7ae>
 8005568:	2304      	movs	r3, #4
 800556a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800556e:	e04c      	b.n	800560a <UART_SetConfig+0x7ae>
 8005570:	2308      	movs	r3, #8
 8005572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005576:	e048      	b.n	800560a <UART_SetConfig+0x7ae>
 8005578:	2310      	movs	r3, #16
 800557a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800557e:	e044      	b.n	800560a <UART_SetConfig+0x7ae>
 8005580:	2320      	movs	r3, #32
 8005582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005586:	e040      	b.n	800560a <UART_SetConfig+0x7ae>
 8005588:	2340      	movs	r3, #64	@ 0x40
 800558a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800558e:	e03c      	b.n	800560a <UART_SetConfig+0x7ae>
 8005590:	2380      	movs	r3, #128	@ 0x80
 8005592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005596:	e038      	b.n	800560a <UART_SetConfig+0x7ae>
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a71      	ldr	r2, [pc, #452]	@ (8005764 <UART_SetConfig+0x908>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d130      	bne.n	8005604 <UART_SetConfig+0x7a8>
 80055a2:	4b6f      	ldr	r3, [pc, #444]	@ (8005760 <UART_SetConfig+0x904>)
 80055a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	2b05      	cmp	r3, #5
 80055ac:	d826      	bhi.n	80055fc <UART_SetConfig+0x7a0>
 80055ae:	a201      	add	r2, pc, #4	@ (adr r2, 80055b4 <UART_SetConfig+0x758>)
 80055b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b4:	080055cd 	.word	0x080055cd
 80055b8:	080055d5 	.word	0x080055d5
 80055bc:	080055dd 	.word	0x080055dd
 80055c0:	080055e5 	.word	0x080055e5
 80055c4:	080055ed 	.word	0x080055ed
 80055c8:	080055f5 	.word	0x080055f5
 80055cc:	2302      	movs	r3, #2
 80055ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055d2:	e01a      	b.n	800560a <UART_SetConfig+0x7ae>
 80055d4:	2304      	movs	r3, #4
 80055d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055da:	e016      	b.n	800560a <UART_SetConfig+0x7ae>
 80055dc:	2308      	movs	r3, #8
 80055de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055e2:	e012      	b.n	800560a <UART_SetConfig+0x7ae>
 80055e4:	2310      	movs	r3, #16
 80055e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ea:	e00e      	b.n	800560a <UART_SetConfig+0x7ae>
 80055ec:	2320      	movs	r3, #32
 80055ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055f2:	e00a      	b.n	800560a <UART_SetConfig+0x7ae>
 80055f4:	2340      	movs	r3, #64	@ 0x40
 80055f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055fa:	e006      	b.n	800560a <UART_SetConfig+0x7ae>
 80055fc:	2380      	movs	r3, #128	@ 0x80
 80055fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005602:	e002      	b.n	800560a <UART_SetConfig+0x7ae>
 8005604:	2380      	movs	r3, #128	@ 0x80
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a55      	ldr	r2, [pc, #340]	@ (8005764 <UART_SetConfig+0x908>)
 8005610:	4293      	cmp	r3, r2
 8005612:	f040 80f8 	bne.w	8005806 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005616:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800561a:	2b20      	cmp	r3, #32
 800561c:	dc46      	bgt.n	80056ac <UART_SetConfig+0x850>
 800561e:	2b02      	cmp	r3, #2
 8005620:	db75      	blt.n	800570e <UART_SetConfig+0x8b2>
 8005622:	3b02      	subs	r3, #2
 8005624:	2b1e      	cmp	r3, #30
 8005626:	d872      	bhi.n	800570e <UART_SetConfig+0x8b2>
 8005628:	a201      	add	r2, pc, #4	@ (adr r2, 8005630 <UART_SetConfig+0x7d4>)
 800562a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562e:	bf00      	nop
 8005630:	080056b3 	.word	0x080056b3
 8005634:	0800570f 	.word	0x0800570f
 8005638:	080056bb 	.word	0x080056bb
 800563c:	0800570f 	.word	0x0800570f
 8005640:	0800570f 	.word	0x0800570f
 8005644:	0800570f 	.word	0x0800570f
 8005648:	080056cb 	.word	0x080056cb
 800564c:	0800570f 	.word	0x0800570f
 8005650:	0800570f 	.word	0x0800570f
 8005654:	0800570f 	.word	0x0800570f
 8005658:	0800570f 	.word	0x0800570f
 800565c:	0800570f 	.word	0x0800570f
 8005660:	0800570f 	.word	0x0800570f
 8005664:	0800570f 	.word	0x0800570f
 8005668:	080056db 	.word	0x080056db
 800566c:	0800570f 	.word	0x0800570f
 8005670:	0800570f 	.word	0x0800570f
 8005674:	0800570f 	.word	0x0800570f
 8005678:	0800570f 	.word	0x0800570f
 800567c:	0800570f 	.word	0x0800570f
 8005680:	0800570f 	.word	0x0800570f
 8005684:	0800570f 	.word	0x0800570f
 8005688:	0800570f 	.word	0x0800570f
 800568c:	0800570f 	.word	0x0800570f
 8005690:	0800570f 	.word	0x0800570f
 8005694:	0800570f 	.word	0x0800570f
 8005698:	0800570f 	.word	0x0800570f
 800569c:	0800570f 	.word	0x0800570f
 80056a0:	0800570f 	.word	0x0800570f
 80056a4:	0800570f 	.word	0x0800570f
 80056a8:	08005701 	.word	0x08005701
 80056ac:	2b40      	cmp	r3, #64	@ 0x40
 80056ae:	d02a      	beq.n	8005706 <UART_SetConfig+0x8aa>
 80056b0:	e02d      	b.n	800570e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80056b2:	f7fe ff61 	bl	8004578 <HAL_RCCEx_GetD3PCLK1Freq>
 80056b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80056b8:	e02f      	b.n	800571a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fe ff70 	bl	80045a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80056c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056c8:	e027      	b.n	800571a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056ca:	f107 0318 	add.w	r3, r7, #24
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff f8bc 	bl	800484c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056d8:	e01f      	b.n	800571a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056da:	4b21      	ldr	r3, [pc, #132]	@ (8005760 <UART_SetConfig+0x904>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d009      	beq.n	80056fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80056e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005760 <UART_SetConfig+0x904>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	08db      	lsrs	r3, r3, #3
 80056ec:	f003 0303 	and.w	r3, r3, #3
 80056f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005768 <UART_SetConfig+0x90c>)
 80056f2:	fa22 f303 	lsr.w	r3, r2, r3
 80056f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056f8:	e00f      	b.n	800571a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80056fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005768 <UART_SetConfig+0x90c>)
 80056fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056fe:	e00c      	b.n	800571a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005700:	4b1a      	ldr	r3, [pc, #104]	@ (800576c <UART_SetConfig+0x910>)
 8005702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005704:	e009      	b.n	800571a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800570a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800570c:	e005      	b.n	800571a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005718:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800571a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 81ee 	beq.w	8005afe <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005726:	4a12      	ldr	r2, [pc, #72]	@ (8005770 <UART_SetConfig+0x914>)
 8005728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800572c:	461a      	mov	r2, r3
 800572e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005730:	fbb3 f3f2 	udiv	r3, r3, r2
 8005734:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	4613      	mov	r3, r2
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	4413      	add	r3, r2
 8005740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005742:	429a      	cmp	r2, r3
 8005744:	d305      	bcc.n	8005752 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800574c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800574e:	429a      	cmp	r2, r3
 8005750:	d910      	bls.n	8005774 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005758:	e1d1      	b.n	8005afe <UART_SetConfig+0xca2>
 800575a:	bf00      	nop
 800575c:	40011c00 	.word	0x40011c00
 8005760:	58024400 	.word	0x58024400
 8005764:	58000c00 	.word	0x58000c00
 8005768:	03d09000 	.word	0x03d09000
 800576c:	003d0900 	.word	0x003d0900
 8005770:	08007008 	.word	0x08007008
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005776:	2200      	movs	r2, #0
 8005778:	60bb      	str	r3, [r7, #8]
 800577a:	60fa      	str	r2, [r7, #12]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005780:	4ac0      	ldr	r2, [pc, #768]	@ (8005a84 <UART_SetConfig+0xc28>)
 8005782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005786:	b29b      	uxth	r3, r3
 8005788:	2200      	movs	r2, #0
 800578a:	603b      	str	r3, [r7, #0]
 800578c:	607a      	str	r2, [r7, #4]
 800578e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005792:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005796:	f7fa fe0b 	bl	80003b0 <__aeabi_uldivmod>
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	4610      	mov	r0, r2
 80057a0:	4619      	mov	r1, r3
 80057a2:	f04f 0200 	mov.w	r2, #0
 80057a6:	f04f 0300 	mov.w	r3, #0
 80057aa:	020b      	lsls	r3, r1, #8
 80057ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057b0:	0202      	lsls	r2, r0, #8
 80057b2:	6979      	ldr	r1, [r7, #20]
 80057b4:	6849      	ldr	r1, [r1, #4]
 80057b6:	0849      	lsrs	r1, r1, #1
 80057b8:	2000      	movs	r0, #0
 80057ba:	460c      	mov	r4, r1
 80057bc:	4605      	mov	r5, r0
 80057be:	eb12 0804 	adds.w	r8, r2, r4
 80057c2:	eb43 0905 	adc.w	r9, r3, r5
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	469a      	mov	sl, r3
 80057ce:	4693      	mov	fp, r2
 80057d0:	4652      	mov	r2, sl
 80057d2:	465b      	mov	r3, fp
 80057d4:	4640      	mov	r0, r8
 80057d6:	4649      	mov	r1, r9
 80057d8:	f7fa fdea 	bl	80003b0 <__aeabi_uldivmod>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4613      	mov	r3, r2
 80057e2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057ea:	d308      	bcc.n	80057fe <UART_SetConfig+0x9a2>
 80057ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057f2:	d204      	bcs.n	80057fe <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057fa:	60da      	str	r2, [r3, #12]
 80057fc:	e17f      	b.n	8005afe <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005804:	e17b      	b.n	8005afe <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800580e:	f040 80bd 	bne.w	800598c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005812:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005816:	2b20      	cmp	r3, #32
 8005818:	dc48      	bgt.n	80058ac <UART_SetConfig+0xa50>
 800581a:	2b00      	cmp	r3, #0
 800581c:	db7b      	blt.n	8005916 <UART_SetConfig+0xaba>
 800581e:	2b20      	cmp	r3, #32
 8005820:	d879      	bhi.n	8005916 <UART_SetConfig+0xaba>
 8005822:	a201      	add	r2, pc, #4	@ (adr r2, 8005828 <UART_SetConfig+0x9cc>)
 8005824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005828:	080058b3 	.word	0x080058b3
 800582c:	080058bb 	.word	0x080058bb
 8005830:	08005917 	.word	0x08005917
 8005834:	08005917 	.word	0x08005917
 8005838:	080058c3 	.word	0x080058c3
 800583c:	08005917 	.word	0x08005917
 8005840:	08005917 	.word	0x08005917
 8005844:	08005917 	.word	0x08005917
 8005848:	080058d3 	.word	0x080058d3
 800584c:	08005917 	.word	0x08005917
 8005850:	08005917 	.word	0x08005917
 8005854:	08005917 	.word	0x08005917
 8005858:	08005917 	.word	0x08005917
 800585c:	08005917 	.word	0x08005917
 8005860:	08005917 	.word	0x08005917
 8005864:	08005917 	.word	0x08005917
 8005868:	080058e3 	.word	0x080058e3
 800586c:	08005917 	.word	0x08005917
 8005870:	08005917 	.word	0x08005917
 8005874:	08005917 	.word	0x08005917
 8005878:	08005917 	.word	0x08005917
 800587c:	08005917 	.word	0x08005917
 8005880:	08005917 	.word	0x08005917
 8005884:	08005917 	.word	0x08005917
 8005888:	08005917 	.word	0x08005917
 800588c:	08005917 	.word	0x08005917
 8005890:	08005917 	.word	0x08005917
 8005894:	08005917 	.word	0x08005917
 8005898:	08005917 	.word	0x08005917
 800589c:	08005917 	.word	0x08005917
 80058a0:	08005917 	.word	0x08005917
 80058a4:	08005917 	.word	0x08005917
 80058a8:	08005909 	.word	0x08005909
 80058ac:	2b40      	cmp	r3, #64	@ 0x40
 80058ae:	d02e      	beq.n	800590e <UART_SetConfig+0xab2>
 80058b0:	e031      	b.n	8005916 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058b2:	f7fd fc95 	bl	80031e0 <HAL_RCC_GetPCLK1Freq>
 80058b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80058b8:	e033      	b.n	8005922 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058ba:	f7fd fca7 	bl	800320c <HAL_RCC_GetPCLK2Freq>
 80058be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80058c0:	e02f      	b.n	8005922 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fe fe6c 	bl	80045a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058d0:	e027      	b.n	8005922 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058d2:	f107 0318 	add.w	r3, r7, #24
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fe ffb8 	bl	800484c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058e0:	e01f      	b.n	8005922 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058e2:	4b69      	ldr	r3, [pc, #420]	@ (8005a88 <UART_SetConfig+0xc2c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0320 	and.w	r3, r3, #32
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d009      	beq.n	8005902 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058ee:	4b66      	ldr	r3, [pc, #408]	@ (8005a88 <UART_SetConfig+0xc2c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	08db      	lsrs	r3, r3, #3
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	4a64      	ldr	r2, [pc, #400]	@ (8005a8c <UART_SetConfig+0xc30>)
 80058fa:	fa22 f303 	lsr.w	r3, r2, r3
 80058fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005900:	e00f      	b.n	8005922 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005902:	4b62      	ldr	r3, [pc, #392]	@ (8005a8c <UART_SetConfig+0xc30>)
 8005904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005906:	e00c      	b.n	8005922 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005908:	4b61      	ldr	r3, [pc, #388]	@ (8005a90 <UART_SetConfig+0xc34>)
 800590a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800590c:	e009      	b.n	8005922 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800590e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005914:	e005      	b.n	8005922 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005920:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 80ea 	beq.w	8005afe <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592e:	4a55      	ldr	r2, [pc, #340]	@ (8005a84 <UART_SetConfig+0xc28>)
 8005930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005934:	461a      	mov	r2, r3
 8005936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005938:	fbb3 f3f2 	udiv	r3, r3, r2
 800593c:	005a      	lsls	r2, r3, #1
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	085b      	lsrs	r3, r3, #1
 8005944:	441a      	add	r2, r3
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	fbb2 f3f3 	udiv	r3, r2, r3
 800594e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005952:	2b0f      	cmp	r3, #15
 8005954:	d916      	bls.n	8005984 <UART_SetConfig+0xb28>
 8005956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800595c:	d212      	bcs.n	8005984 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800595e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005960:	b29b      	uxth	r3, r3
 8005962:	f023 030f 	bic.w	r3, r3, #15
 8005966:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800596a:	085b      	lsrs	r3, r3, #1
 800596c:	b29b      	uxth	r3, r3
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	b29a      	uxth	r2, r3
 8005974:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005976:	4313      	orrs	r3, r2
 8005978:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005980:	60da      	str	r2, [r3, #12]
 8005982:	e0bc      	b.n	8005afe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800598a:	e0b8      	b.n	8005afe <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800598c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005990:	2b20      	cmp	r3, #32
 8005992:	dc4b      	bgt.n	8005a2c <UART_SetConfig+0xbd0>
 8005994:	2b00      	cmp	r3, #0
 8005996:	f2c0 8087 	blt.w	8005aa8 <UART_SetConfig+0xc4c>
 800599a:	2b20      	cmp	r3, #32
 800599c:	f200 8084 	bhi.w	8005aa8 <UART_SetConfig+0xc4c>
 80059a0:	a201      	add	r2, pc, #4	@ (adr r2, 80059a8 <UART_SetConfig+0xb4c>)
 80059a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a6:	bf00      	nop
 80059a8:	08005a33 	.word	0x08005a33
 80059ac:	08005a3b 	.word	0x08005a3b
 80059b0:	08005aa9 	.word	0x08005aa9
 80059b4:	08005aa9 	.word	0x08005aa9
 80059b8:	08005a43 	.word	0x08005a43
 80059bc:	08005aa9 	.word	0x08005aa9
 80059c0:	08005aa9 	.word	0x08005aa9
 80059c4:	08005aa9 	.word	0x08005aa9
 80059c8:	08005a53 	.word	0x08005a53
 80059cc:	08005aa9 	.word	0x08005aa9
 80059d0:	08005aa9 	.word	0x08005aa9
 80059d4:	08005aa9 	.word	0x08005aa9
 80059d8:	08005aa9 	.word	0x08005aa9
 80059dc:	08005aa9 	.word	0x08005aa9
 80059e0:	08005aa9 	.word	0x08005aa9
 80059e4:	08005aa9 	.word	0x08005aa9
 80059e8:	08005a63 	.word	0x08005a63
 80059ec:	08005aa9 	.word	0x08005aa9
 80059f0:	08005aa9 	.word	0x08005aa9
 80059f4:	08005aa9 	.word	0x08005aa9
 80059f8:	08005aa9 	.word	0x08005aa9
 80059fc:	08005aa9 	.word	0x08005aa9
 8005a00:	08005aa9 	.word	0x08005aa9
 8005a04:	08005aa9 	.word	0x08005aa9
 8005a08:	08005aa9 	.word	0x08005aa9
 8005a0c:	08005aa9 	.word	0x08005aa9
 8005a10:	08005aa9 	.word	0x08005aa9
 8005a14:	08005aa9 	.word	0x08005aa9
 8005a18:	08005aa9 	.word	0x08005aa9
 8005a1c:	08005aa9 	.word	0x08005aa9
 8005a20:	08005aa9 	.word	0x08005aa9
 8005a24:	08005aa9 	.word	0x08005aa9
 8005a28:	08005a9b 	.word	0x08005a9b
 8005a2c:	2b40      	cmp	r3, #64	@ 0x40
 8005a2e:	d037      	beq.n	8005aa0 <UART_SetConfig+0xc44>
 8005a30:	e03a      	b.n	8005aa8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a32:	f7fd fbd5 	bl	80031e0 <HAL_RCC_GetPCLK1Freq>
 8005a36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a38:	e03c      	b.n	8005ab4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a3a:	f7fd fbe7 	bl	800320c <HAL_RCC_GetPCLK2Freq>
 8005a3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a40:	e038      	b.n	8005ab4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fe fdac 	bl	80045a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a50:	e030      	b.n	8005ab4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a52:	f107 0318 	add.w	r3, r7, #24
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fe fef8 	bl	800484c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a60:	e028      	b.n	8005ab4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a62:	4b09      	ldr	r3, [pc, #36]	@ (8005a88 <UART_SetConfig+0xc2c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0320 	and.w	r3, r3, #32
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d012      	beq.n	8005a94 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a6e:	4b06      	ldr	r3, [pc, #24]	@ (8005a88 <UART_SetConfig+0xc2c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	08db      	lsrs	r3, r3, #3
 8005a74:	f003 0303 	and.w	r3, r3, #3
 8005a78:	4a04      	ldr	r2, [pc, #16]	@ (8005a8c <UART_SetConfig+0xc30>)
 8005a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a80:	e018      	b.n	8005ab4 <UART_SetConfig+0xc58>
 8005a82:	bf00      	nop
 8005a84:	08007008 	.word	0x08007008
 8005a88:	58024400 	.word	0x58024400
 8005a8c:	03d09000 	.word	0x03d09000
 8005a90:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005a94:	4b24      	ldr	r3, [pc, #144]	@ (8005b28 <UART_SetConfig+0xccc>)
 8005a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a98:	e00c      	b.n	8005ab4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a9a:	4b24      	ldr	r3, [pc, #144]	@ (8005b2c <UART_SetConfig+0xcd0>)
 8005a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a9e:	e009      	b.n	8005ab4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005aa6:	e005      	b.n	8005ab4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005ab2:	bf00      	nop
    }

    if (pclk != 0U)
 8005ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d021      	beq.n	8005afe <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005abe:	4a1c      	ldr	r2, [pc, #112]	@ (8005b30 <UART_SetConfig+0xcd4>)
 8005ac0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ac8:	fbb3 f2f2 	udiv	r2, r3, r2
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	085b      	lsrs	r3, r3, #1
 8005ad2:	441a      	add	r2, r3
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005adc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae0:	2b0f      	cmp	r3, #15
 8005ae2:	d909      	bls.n	8005af8 <UART_SetConfig+0xc9c>
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aea:	d205      	bcs.n	8005af8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60da      	str	r2, [r3, #12]
 8005af6:	e002      	b.n	8005afe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2200      	movs	r2, #0
 8005b12:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	2200      	movs	r2, #0
 8005b18:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005b1a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3748      	adds	r7, #72	@ 0x48
 8005b22:	46bd      	mov	sp, r7
 8005b24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b28:	03d09000 	.word	0x03d09000
 8005b2c:	003d0900 	.word	0x003d0900
 8005b30:	08007008 	.word	0x08007008

08005b34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b40:	f003 0308 	and.w	r3, r3, #8
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00a      	beq.n	8005b5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00a      	beq.n	8005b80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00a      	beq.n	8005ba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba6:	f003 0304 	and.w	r3, r3, #4
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00a      	beq.n	8005bc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc8:	f003 0310 	and.w	r3, r3, #16
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00a      	beq.n	8005be6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bea:	f003 0320 	and.w	r3, r3, #32
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00a      	beq.n	8005c08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d01a      	beq.n	8005c4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	430a      	orrs	r2, r1
 8005c28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c32:	d10a      	bne.n	8005c4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00a      	beq.n	8005c6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	605a      	str	r2, [r3, #4]
  }
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b098      	sub	sp, #96	@ 0x60
 8005c7c:	af02      	add	r7, sp, #8
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c88:	f7fb fc18 	bl	80014bc <HAL_GetTick>
 8005c8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d12f      	bne.n	8005cfc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f88e 	bl	8005dcc <UART_WaitOnFlagUntilTimeout>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d022      	beq.n	8005cfc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cca:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cd6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cdc:	e841 2300 	strex	r3, r2, [r1]
 8005ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1e6      	bne.n	8005cb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e063      	b.n	8005dc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d149      	bne.n	8005d9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d12:	2200      	movs	r2, #0
 8005d14:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f857 	bl	8005dcc <UART_WaitOnFlagUntilTimeout>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d03c      	beq.n	8005d9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	623b      	str	r3, [r7, #32]
   return(result);
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d42:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d44:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e6      	bne.n	8005d24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3308      	adds	r3, #8
 8005d5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	e853 3f00 	ldrex	r3, [r3]
 8005d64:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f023 0301 	bic.w	r3, r3, #1
 8005d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3308      	adds	r3, #8
 8005d74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d76:	61fa      	str	r2, [r7, #28]
 8005d78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7a:	69b9      	ldr	r1, [r7, #24]
 8005d7c:	69fa      	ldr	r2, [r7, #28]
 8005d7e:	e841 2300 	strex	r3, r2, [r1]
 8005d82:	617b      	str	r3, [r7, #20]
   return(result);
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1e5      	bne.n	8005d56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e012      	b.n	8005dc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3758      	adds	r7, #88	@ 0x58
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ddc:	e04f      	b.n	8005e7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de4:	d04b      	beq.n	8005e7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de6:	f7fb fb69 	bl	80014bc <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d302      	bcc.n	8005dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e04e      	b.n	8005e9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0304 	and.w	r3, r3, #4
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d037      	beq.n	8005e7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	2b80      	cmp	r3, #128	@ 0x80
 8005e12:	d034      	beq.n	8005e7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2b40      	cmp	r3, #64	@ 0x40
 8005e18:	d031      	beq.n	8005e7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	f003 0308 	and.w	r3, r3, #8
 8005e24:	2b08      	cmp	r3, #8
 8005e26:	d110      	bne.n	8005e4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2208      	movs	r2, #8
 8005e2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 f839 	bl	8005ea8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2208      	movs	r2, #8
 8005e3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e029      	b.n	8005e9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69db      	ldr	r3, [r3, #28]
 8005e50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e58:	d111      	bne.n	8005e7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 f81f 	bl	8005ea8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e00f      	b.n	8005e9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69da      	ldr	r2, [r3, #28]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4013      	ands	r3, r2
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	bf0c      	ite	eq
 8005e8e:	2301      	moveq	r3, #1
 8005e90:	2300      	movne	r3, #0
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	461a      	mov	r2, r3
 8005e96:	79fb      	ldrb	r3, [r7, #7]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d0a0      	beq.n	8005dde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
	...

08005ea8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b095      	sub	sp, #84	@ 0x54
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb8:	e853 3f00 	ldrex	r3, [r3]
 8005ebc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ece:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ed0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ed4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ed6:	e841 2300 	strex	r3, r2, [r1]
 8005eda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1e6      	bne.n	8005eb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3308      	adds	r3, #8
 8005ee8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ef2:	69fa      	ldr	r2, [r7, #28]
 8005ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8005f70 <UART_EndRxTransfer+0xc8>)
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3308      	adds	r3, #8
 8005f00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f0a:	e841 2300 	strex	r3, r2, [r1]
 8005f0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1e5      	bne.n	8005ee2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d118      	bne.n	8005f50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	e853 3f00 	ldrex	r3, [r3]
 8005f2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f023 0310 	bic.w	r3, r3, #16
 8005f32:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f3c:	61bb      	str	r3, [r7, #24]
 8005f3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f40:	6979      	ldr	r1, [r7, #20]
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	e841 2300 	strex	r3, r2, [r1]
 8005f48:	613b      	str	r3, [r7, #16]
   return(result);
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1e6      	bne.n	8005f1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2220      	movs	r2, #32
 8005f54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005f64:	bf00      	nop
 8005f66:	3754      	adds	r7, #84	@ 0x54
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	effffffe 	.word	0xeffffffe

08005f74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d101      	bne.n	8005f8a <HAL_UARTEx_DisableFifoMode+0x16>
 8005f86:	2302      	movs	r3, #2
 8005f88:	e027      	b.n	8005fda <HAL_UARTEx_DisableFifoMode+0x66>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2224      	movs	r2, #36	@ 0x24
 8005f96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0201 	bic.w	r2, r2, #1
 8005fb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005fb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b084      	sub	sp, #16
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d101      	bne.n	8005ffe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	e02d      	b.n	800605a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2224      	movs	r2, #36	@ 0x24
 800600a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 0201 	bic.w	r2, r2, #1
 8006024:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	430a      	orrs	r2, r1
 8006038:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f850 	bl	80060e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2220      	movs	r2, #32
 800604c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b084      	sub	sp, #16
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
 800606a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006072:	2b01      	cmp	r3, #1
 8006074:	d101      	bne.n	800607a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006076:	2302      	movs	r3, #2
 8006078:	e02d      	b.n	80060d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2224      	movs	r2, #36	@ 0x24
 8006086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0201 	bic.w	r2, r2, #1
 80060a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f812 	bl	80060e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2220      	movs	r2, #32
 80060c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
	...

080060e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d108      	bne.n	8006102 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006100:	e031      	b.n	8006166 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006102:	2310      	movs	r3, #16
 8006104:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006106:	2310      	movs	r3, #16
 8006108:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	0e5b      	lsrs	r3, r3, #25
 8006112:	b2db      	uxtb	r3, r3
 8006114:	f003 0307 	and.w	r3, r3, #7
 8006118:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	0f5b      	lsrs	r3, r3, #29
 8006122:	b2db      	uxtb	r3, r3
 8006124:	f003 0307 	and.w	r3, r3, #7
 8006128:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800612a:	7bbb      	ldrb	r3, [r7, #14]
 800612c:	7b3a      	ldrb	r2, [r7, #12]
 800612e:	4911      	ldr	r1, [pc, #68]	@ (8006174 <UARTEx_SetNbDataToProcess+0x94>)
 8006130:	5c8a      	ldrb	r2, [r1, r2]
 8006132:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006136:	7b3a      	ldrb	r2, [r7, #12]
 8006138:	490f      	ldr	r1, [pc, #60]	@ (8006178 <UARTEx_SetNbDataToProcess+0x98>)
 800613a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800613c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006140:	b29a      	uxth	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	7b7a      	ldrb	r2, [r7, #13]
 800614c:	4909      	ldr	r1, [pc, #36]	@ (8006174 <UARTEx_SetNbDataToProcess+0x94>)
 800614e:	5c8a      	ldrb	r2, [r1, r2]
 8006150:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006154:	7b7a      	ldrb	r2, [r7, #13]
 8006156:	4908      	ldr	r1, [pc, #32]	@ (8006178 <UARTEx_SetNbDataToProcess+0x98>)
 8006158:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800615a:	fb93 f3f2 	sdiv	r3, r3, r2
 800615e:	b29a      	uxth	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006166:	bf00      	nop
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	08007020 	.word	0x08007020
 8006178:	08007028 	.word	0x08007028

0800617c <std>:
 800617c:	2300      	movs	r3, #0
 800617e:	b510      	push	{r4, lr}
 8006180:	4604      	mov	r4, r0
 8006182:	e9c0 3300 	strd	r3, r3, [r0]
 8006186:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800618a:	6083      	str	r3, [r0, #8]
 800618c:	8181      	strh	r1, [r0, #12]
 800618e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006190:	81c2      	strh	r2, [r0, #14]
 8006192:	6183      	str	r3, [r0, #24]
 8006194:	4619      	mov	r1, r3
 8006196:	2208      	movs	r2, #8
 8006198:	305c      	adds	r0, #92	@ 0x5c
 800619a:	f000 f906 	bl	80063aa <memset>
 800619e:	4b0d      	ldr	r3, [pc, #52]	@ (80061d4 <std+0x58>)
 80061a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80061a2:	4b0d      	ldr	r3, [pc, #52]	@ (80061d8 <std+0x5c>)
 80061a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80061a6:	4b0d      	ldr	r3, [pc, #52]	@ (80061dc <std+0x60>)
 80061a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80061aa:	4b0d      	ldr	r3, [pc, #52]	@ (80061e0 <std+0x64>)
 80061ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80061ae:	4b0d      	ldr	r3, [pc, #52]	@ (80061e4 <std+0x68>)
 80061b0:	6224      	str	r4, [r4, #32]
 80061b2:	429c      	cmp	r4, r3
 80061b4:	d006      	beq.n	80061c4 <std+0x48>
 80061b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80061ba:	4294      	cmp	r4, r2
 80061bc:	d002      	beq.n	80061c4 <std+0x48>
 80061be:	33d0      	adds	r3, #208	@ 0xd0
 80061c0:	429c      	cmp	r4, r3
 80061c2:	d105      	bne.n	80061d0 <std+0x54>
 80061c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80061c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061cc:	f000 b966 	b.w	800649c <__retarget_lock_init_recursive>
 80061d0:	bd10      	pop	{r4, pc}
 80061d2:	bf00      	nop
 80061d4:	08006325 	.word	0x08006325
 80061d8:	08006347 	.word	0x08006347
 80061dc:	0800637f 	.word	0x0800637f
 80061e0:	080063a3 	.word	0x080063a3
 80061e4:	24000400 	.word	0x24000400

080061e8 <stdio_exit_handler>:
 80061e8:	4a02      	ldr	r2, [pc, #8]	@ (80061f4 <stdio_exit_handler+0xc>)
 80061ea:	4903      	ldr	r1, [pc, #12]	@ (80061f8 <stdio_exit_handler+0x10>)
 80061ec:	4803      	ldr	r0, [pc, #12]	@ (80061fc <stdio_exit_handler+0x14>)
 80061ee:	f000 b869 	b.w	80062c4 <_fwalk_sglue>
 80061f2:	bf00      	nop
 80061f4:	24000010 	.word	0x24000010
 80061f8:	08006d3d 	.word	0x08006d3d
 80061fc:	24000020 	.word	0x24000020

08006200 <cleanup_stdio>:
 8006200:	6841      	ldr	r1, [r0, #4]
 8006202:	4b0c      	ldr	r3, [pc, #48]	@ (8006234 <cleanup_stdio+0x34>)
 8006204:	4299      	cmp	r1, r3
 8006206:	b510      	push	{r4, lr}
 8006208:	4604      	mov	r4, r0
 800620a:	d001      	beq.n	8006210 <cleanup_stdio+0x10>
 800620c:	f000 fd96 	bl	8006d3c <_fflush_r>
 8006210:	68a1      	ldr	r1, [r4, #8]
 8006212:	4b09      	ldr	r3, [pc, #36]	@ (8006238 <cleanup_stdio+0x38>)
 8006214:	4299      	cmp	r1, r3
 8006216:	d002      	beq.n	800621e <cleanup_stdio+0x1e>
 8006218:	4620      	mov	r0, r4
 800621a:	f000 fd8f 	bl	8006d3c <_fflush_r>
 800621e:	68e1      	ldr	r1, [r4, #12]
 8006220:	4b06      	ldr	r3, [pc, #24]	@ (800623c <cleanup_stdio+0x3c>)
 8006222:	4299      	cmp	r1, r3
 8006224:	d004      	beq.n	8006230 <cleanup_stdio+0x30>
 8006226:	4620      	mov	r0, r4
 8006228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800622c:	f000 bd86 	b.w	8006d3c <_fflush_r>
 8006230:	bd10      	pop	{r4, pc}
 8006232:	bf00      	nop
 8006234:	24000400 	.word	0x24000400
 8006238:	24000468 	.word	0x24000468
 800623c:	240004d0 	.word	0x240004d0

08006240 <global_stdio_init.part.0>:
 8006240:	b510      	push	{r4, lr}
 8006242:	4b0b      	ldr	r3, [pc, #44]	@ (8006270 <global_stdio_init.part.0+0x30>)
 8006244:	4c0b      	ldr	r4, [pc, #44]	@ (8006274 <global_stdio_init.part.0+0x34>)
 8006246:	4a0c      	ldr	r2, [pc, #48]	@ (8006278 <global_stdio_init.part.0+0x38>)
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	4620      	mov	r0, r4
 800624c:	2200      	movs	r2, #0
 800624e:	2104      	movs	r1, #4
 8006250:	f7ff ff94 	bl	800617c <std>
 8006254:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006258:	2201      	movs	r2, #1
 800625a:	2109      	movs	r1, #9
 800625c:	f7ff ff8e 	bl	800617c <std>
 8006260:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006264:	2202      	movs	r2, #2
 8006266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800626a:	2112      	movs	r1, #18
 800626c:	f7ff bf86 	b.w	800617c <std>
 8006270:	24000538 	.word	0x24000538
 8006274:	24000400 	.word	0x24000400
 8006278:	080061e9 	.word	0x080061e9

0800627c <__sfp_lock_acquire>:
 800627c:	4801      	ldr	r0, [pc, #4]	@ (8006284 <__sfp_lock_acquire+0x8>)
 800627e:	f000 b90e 	b.w	800649e <__retarget_lock_acquire_recursive>
 8006282:	bf00      	nop
 8006284:	24000541 	.word	0x24000541

08006288 <__sfp_lock_release>:
 8006288:	4801      	ldr	r0, [pc, #4]	@ (8006290 <__sfp_lock_release+0x8>)
 800628a:	f000 b909 	b.w	80064a0 <__retarget_lock_release_recursive>
 800628e:	bf00      	nop
 8006290:	24000541 	.word	0x24000541

08006294 <__sinit>:
 8006294:	b510      	push	{r4, lr}
 8006296:	4604      	mov	r4, r0
 8006298:	f7ff fff0 	bl	800627c <__sfp_lock_acquire>
 800629c:	6a23      	ldr	r3, [r4, #32]
 800629e:	b11b      	cbz	r3, 80062a8 <__sinit+0x14>
 80062a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062a4:	f7ff bff0 	b.w	8006288 <__sfp_lock_release>
 80062a8:	4b04      	ldr	r3, [pc, #16]	@ (80062bc <__sinit+0x28>)
 80062aa:	6223      	str	r3, [r4, #32]
 80062ac:	4b04      	ldr	r3, [pc, #16]	@ (80062c0 <__sinit+0x2c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1f5      	bne.n	80062a0 <__sinit+0xc>
 80062b4:	f7ff ffc4 	bl	8006240 <global_stdio_init.part.0>
 80062b8:	e7f2      	b.n	80062a0 <__sinit+0xc>
 80062ba:	bf00      	nop
 80062bc:	08006201 	.word	0x08006201
 80062c0:	24000538 	.word	0x24000538

080062c4 <_fwalk_sglue>:
 80062c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062c8:	4607      	mov	r7, r0
 80062ca:	4688      	mov	r8, r1
 80062cc:	4614      	mov	r4, r2
 80062ce:	2600      	movs	r6, #0
 80062d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80062d4:	f1b9 0901 	subs.w	r9, r9, #1
 80062d8:	d505      	bpl.n	80062e6 <_fwalk_sglue+0x22>
 80062da:	6824      	ldr	r4, [r4, #0]
 80062dc:	2c00      	cmp	r4, #0
 80062de:	d1f7      	bne.n	80062d0 <_fwalk_sglue+0xc>
 80062e0:	4630      	mov	r0, r6
 80062e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062e6:	89ab      	ldrh	r3, [r5, #12]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d907      	bls.n	80062fc <_fwalk_sglue+0x38>
 80062ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062f0:	3301      	adds	r3, #1
 80062f2:	d003      	beq.n	80062fc <_fwalk_sglue+0x38>
 80062f4:	4629      	mov	r1, r5
 80062f6:	4638      	mov	r0, r7
 80062f8:	47c0      	blx	r8
 80062fa:	4306      	orrs	r6, r0
 80062fc:	3568      	adds	r5, #104	@ 0x68
 80062fe:	e7e9      	b.n	80062d4 <_fwalk_sglue+0x10>

08006300 <iprintf>:
 8006300:	b40f      	push	{r0, r1, r2, r3}
 8006302:	b507      	push	{r0, r1, r2, lr}
 8006304:	4906      	ldr	r1, [pc, #24]	@ (8006320 <iprintf+0x20>)
 8006306:	ab04      	add	r3, sp, #16
 8006308:	6808      	ldr	r0, [r1, #0]
 800630a:	f853 2b04 	ldr.w	r2, [r3], #4
 800630e:	6881      	ldr	r1, [r0, #8]
 8006310:	9301      	str	r3, [sp, #4]
 8006312:	f000 f9e9 	bl	80066e8 <_vfiprintf_r>
 8006316:	b003      	add	sp, #12
 8006318:	f85d eb04 	ldr.w	lr, [sp], #4
 800631c:	b004      	add	sp, #16
 800631e:	4770      	bx	lr
 8006320:	2400001c 	.word	0x2400001c

08006324 <__sread>:
 8006324:	b510      	push	{r4, lr}
 8006326:	460c      	mov	r4, r1
 8006328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800632c:	f000 f868 	bl	8006400 <_read_r>
 8006330:	2800      	cmp	r0, #0
 8006332:	bfab      	itete	ge
 8006334:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006336:	89a3      	ldrhlt	r3, [r4, #12]
 8006338:	181b      	addge	r3, r3, r0
 800633a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800633e:	bfac      	ite	ge
 8006340:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006342:	81a3      	strhlt	r3, [r4, #12]
 8006344:	bd10      	pop	{r4, pc}

08006346 <__swrite>:
 8006346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800634a:	461f      	mov	r7, r3
 800634c:	898b      	ldrh	r3, [r1, #12]
 800634e:	05db      	lsls	r3, r3, #23
 8006350:	4605      	mov	r5, r0
 8006352:	460c      	mov	r4, r1
 8006354:	4616      	mov	r6, r2
 8006356:	d505      	bpl.n	8006364 <__swrite+0x1e>
 8006358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800635c:	2302      	movs	r3, #2
 800635e:	2200      	movs	r2, #0
 8006360:	f000 f83c 	bl	80063dc <_lseek_r>
 8006364:	89a3      	ldrh	r3, [r4, #12]
 8006366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800636a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800636e:	81a3      	strh	r3, [r4, #12]
 8006370:	4632      	mov	r2, r6
 8006372:	463b      	mov	r3, r7
 8006374:	4628      	mov	r0, r5
 8006376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800637a:	f000 b853 	b.w	8006424 <_write_r>

0800637e <__sseek>:
 800637e:	b510      	push	{r4, lr}
 8006380:	460c      	mov	r4, r1
 8006382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006386:	f000 f829 	bl	80063dc <_lseek_r>
 800638a:	1c43      	adds	r3, r0, #1
 800638c:	89a3      	ldrh	r3, [r4, #12]
 800638e:	bf15      	itete	ne
 8006390:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006392:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006396:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800639a:	81a3      	strheq	r3, [r4, #12]
 800639c:	bf18      	it	ne
 800639e:	81a3      	strhne	r3, [r4, #12]
 80063a0:	bd10      	pop	{r4, pc}

080063a2 <__sclose>:
 80063a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a6:	f000 b809 	b.w	80063bc <_close_r>

080063aa <memset>:
 80063aa:	4402      	add	r2, r0
 80063ac:	4603      	mov	r3, r0
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d100      	bne.n	80063b4 <memset+0xa>
 80063b2:	4770      	bx	lr
 80063b4:	f803 1b01 	strb.w	r1, [r3], #1
 80063b8:	e7f9      	b.n	80063ae <memset+0x4>
	...

080063bc <_close_r>:
 80063bc:	b538      	push	{r3, r4, r5, lr}
 80063be:	4d06      	ldr	r5, [pc, #24]	@ (80063d8 <_close_r+0x1c>)
 80063c0:	2300      	movs	r3, #0
 80063c2:	4604      	mov	r4, r0
 80063c4:	4608      	mov	r0, r1
 80063c6:	602b      	str	r3, [r5, #0]
 80063c8:	f7fa fee6 	bl	8001198 <_close>
 80063cc:	1c43      	adds	r3, r0, #1
 80063ce:	d102      	bne.n	80063d6 <_close_r+0x1a>
 80063d0:	682b      	ldr	r3, [r5, #0]
 80063d2:	b103      	cbz	r3, 80063d6 <_close_r+0x1a>
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	bd38      	pop	{r3, r4, r5, pc}
 80063d8:	2400053c 	.word	0x2400053c

080063dc <_lseek_r>:
 80063dc:	b538      	push	{r3, r4, r5, lr}
 80063de:	4d07      	ldr	r5, [pc, #28]	@ (80063fc <_lseek_r+0x20>)
 80063e0:	4604      	mov	r4, r0
 80063e2:	4608      	mov	r0, r1
 80063e4:	4611      	mov	r1, r2
 80063e6:	2200      	movs	r2, #0
 80063e8:	602a      	str	r2, [r5, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	f7fa fefb 	bl	80011e6 <_lseek>
 80063f0:	1c43      	adds	r3, r0, #1
 80063f2:	d102      	bne.n	80063fa <_lseek_r+0x1e>
 80063f4:	682b      	ldr	r3, [r5, #0]
 80063f6:	b103      	cbz	r3, 80063fa <_lseek_r+0x1e>
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	bd38      	pop	{r3, r4, r5, pc}
 80063fc:	2400053c 	.word	0x2400053c

08006400 <_read_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	4d07      	ldr	r5, [pc, #28]	@ (8006420 <_read_r+0x20>)
 8006404:	4604      	mov	r4, r0
 8006406:	4608      	mov	r0, r1
 8006408:	4611      	mov	r1, r2
 800640a:	2200      	movs	r2, #0
 800640c:	602a      	str	r2, [r5, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	f7fa fea5 	bl	800115e <_read>
 8006414:	1c43      	adds	r3, r0, #1
 8006416:	d102      	bne.n	800641e <_read_r+0x1e>
 8006418:	682b      	ldr	r3, [r5, #0]
 800641a:	b103      	cbz	r3, 800641e <_read_r+0x1e>
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	bd38      	pop	{r3, r4, r5, pc}
 8006420:	2400053c 	.word	0x2400053c

08006424 <_write_r>:
 8006424:	b538      	push	{r3, r4, r5, lr}
 8006426:	4d07      	ldr	r5, [pc, #28]	@ (8006444 <_write_r+0x20>)
 8006428:	4604      	mov	r4, r0
 800642a:	4608      	mov	r0, r1
 800642c:	4611      	mov	r1, r2
 800642e:	2200      	movs	r2, #0
 8006430:	602a      	str	r2, [r5, #0]
 8006432:	461a      	mov	r2, r3
 8006434:	f7fa f95b 	bl	80006ee <_write>
 8006438:	1c43      	adds	r3, r0, #1
 800643a:	d102      	bne.n	8006442 <_write_r+0x1e>
 800643c:	682b      	ldr	r3, [r5, #0]
 800643e:	b103      	cbz	r3, 8006442 <_write_r+0x1e>
 8006440:	6023      	str	r3, [r4, #0]
 8006442:	bd38      	pop	{r3, r4, r5, pc}
 8006444:	2400053c 	.word	0x2400053c

08006448 <__errno>:
 8006448:	4b01      	ldr	r3, [pc, #4]	@ (8006450 <__errno+0x8>)
 800644a:	6818      	ldr	r0, [r3, #0]
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	2400001c 	.word	0x2400001c

08006454 <__libc_init_array>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	4d0d      	ldr	r5, [pc, #52]	@ (800648c <__libc_init_array+0x38>)
 8006458:	4c0d      	ldr	r4, [pc, #52]	@ (8006490 <__libc_init_array+0x3c>)
 800645a:	1b64      	subs	r4, r4, r5
 800645c:	10a4      	asrs	r4, r4, #2
 800645e:	2600      	movs	r6, #0
 8006460:	42a6      	cmp	r6, r4
 8006462:	d109      	bne.n	8006478 <__libc_init_array+0x24>
 8006464:	4d0b      	ldr	r5, [pc, #44]	@ (8006494 <__libc_init_array+0x40>)
 8006466:	4c0c      	ldr	r4, [pc, #48]	@ (8006498 <__libc_init_array+0x44>)
 8006468:	f000 fdb8 	bl	8006fdc <_init>
 800646c:	1b64      	subs	r4, r4, r5
 800646e:	10a4      	asrs	r4, r4, #2
 8006470:	2600      	movs	r6, #0
 8006472:	42a6      	cmp	r6, r4
 8006474:	d105      	bne.n	8006482 <__libc_init_array+0x2e>
 8006476:	bd70      	pop	{r4, r5, r6, pc}
 8006478:	f855 3b04 	ldr.w	r3, [r5], #4
 800647c:	4798      	blx	r3
 800647e:	3601      	adds	r6, #1
 8006480:	e7ee      	b.n	8006460 <__libc_init_array+0xc>
 8006482:	f855 3b04 	ldr.w	r3, [r5], #4
 8006486:	4798      	blx	r3
 8006488:	3601      	adds	r6, #1
 800648a:	e7f2      	b.n	8006472 <__libc_init_array+0x1e>
 800648c:	0800706c 	.word	0x0800706c
 8006490:	0800706c 	.word	0x0800706c
 8006494:	0800706c 	.word	0x0800706c
 8006498:	08007070 	.word	0x08007070

0800649c <__retarget_lock_init_recursive>:
 800649c:	4770      	bx	lr

0800649e <__retarget_lock_acquire_recursive>:
 800649e:	4770      	bx	lr

080064a0 <__retarget_lock_release_recursive>:
 80064a0:	4770      	bx	lr
	...

080064a4 <_free_r>:
 80064a4:	b538      	push	{r3, r4, r5, lr}
 80064a6:	4605      	mov	r5, r0
 80064a8:	2900      	cmp	r1, #0
 80064aa:	d041      	beq.n	8006530 <_free_r+0x8c>
 80064ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064b0:	1f0c      	subs	r4, r1, #4
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	bfb8      	it	lt
 80064b6:	18e4      	addlt	r4, r4, r3
 80064b8:	f000 f8e0 	bl	800667c <__malloc_lock>
 80064bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006534 <_free_r+0x90>)
 80064be:	6813      	ldr	r3, [r2, #0]
 80064c0:	b933      	cbnz	r3, 80064d0 <_free_r+0x2c>
 80064c2:	6063      	str	r3, [r4, #4]
 80064c4:	6014      	str	r4, [r2, #0]
 80064c6:	4628      	mov	r0, r5
 80064c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064cc:	f000 b8dc 	b.w	8006688 <__malloc_unlock>
 80064d0:	42a3      	cmp	r3, r4
 80064d2:	d908      	bls.n	80064e6 <_free_r+0x42>
 80064d4:	6820      	ldr	r0, [r4, #0]
 80064d6:	1821      	adds	r1, r4, r0
 80064d8:	428b      	cmp	r3, r1
 80064da:	bf01      	itttt	eq
 80064dc:	6819      	ldreq	r1, [r3, #0]
 80064de:	685b      	ldreq	r3, [r3, #4]
 80064e0:	1809      	addeq	r1, r1, r0
 80064e2:	6021      	streq	r1, [r4, #0]
 80064e4:	e7ed      	b.n	80064c2 <_free_r+0x1e>
 80064e6:	461a      	mov	r2, r3
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	b10b      	cbz	r3, 80064f0 <_free_r+0x4c>
 80064ec:	42a3      	cmp	r3, r4
 80064ee:	d9fa      	bls.n	80064e6 <_free_r+0x42>
 80064f0:	6811      	ldr	r1, [r2, #0]
 80064f2:	1850      	adds	r0, r2, r1
 80064f4:	42a0      	cmp	r0, r4
 80064f6:	d10b      	bne.n	8006510 <_free_r+0x6c>
 80064f8:	6820      	ldr	r0, [r4, #0]
 80064fa:	4401      	add	r1, r0
 80064fc:	1850      	adds	r0, r2, r1
 80064fe:	4283      	cmp	r3, r0
 8006500:	6011      	str	r1, [r2, #0]
 8006502:	d1e0      	bne.n	80064c6 <_free_r+0x22>
 8006504:	6818      	ldr	r0, [r3, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	6053      	str	r3, [r2, #4]
 800650a:	4408      	add	r0, r1
 800650c:	6010      	str	r0, [r2, #0]
 800650e:	e7da      	b.n	80064c6 <_free_r+0x22>
 8006510:	d902      	bls.n	8006518 <_free_r+0x74>
 8006512:	230c      	movs	r3, #12
 8006514:	602b      	str	r3, [r5, #0]
 8006516:	e7d6      	b.n	80064c6 <_free_r+0x22>
 8006518:	6820      	ldr	r0, [r4, #0]
 800651a:	1821      	adds	r1, r4, r0
 800651c:	428b      	cmp	r3, r1
 800651e:	bf04      	itt	eq
 8006520:	6819      	ldreq	r1, [r3, #0]
 8006522:	685b      	ldreq	r3, [r3, #4]
 8006524:	6063      	str	r3, [r4, #4]
 8006526:	bf04      	itt	eq
 8006528:	1809      	addeq	r1, r1, r0
 800652a:	6021      	streq	r1, [r4, #0]
 800652c:	6054      	str	r4, [r2, #4]
 800652e:	e7ca      	b.n	80064c6 <_free_r+0x22>
 8006530:	bd38      	pop	{r3, r4, r5, pc}
 8006532:	bf00      	nop
 8006534:	24000548 	.word	0x24000548

08006538 <sbrk_aligned>:
 8006538:	b570      	push	{r4, r5, r6, lr}
 800653a:	4e0f      	ldr	r6, [pc, #60]	@ (8006578 <sbrk_aligned+0x40>)
 800653c:	460c      	mov	r4, r1
 800653e:	6831      	ldr	r1, [r6, #0]
 8006540:	4605      	mov	r5, r0
 8006542:	b911      	cbnz	r1, 800654a <sbrk_aligned+0x12>
 8006544:	f000 fcb6 	bl	8006eb4 <_sbrk_r>
 8006548:	6030      	str	r0, [r6, #0]
 800654a:	4621      	mov	r1, r4
 800654c:	4628      	mov	r0, r5
 800654e:	f000 fcb1 	bl	8006eb4 <_sbrk_r>
 8006552:	1c43      	adds	r3, r0, #1
 8006554:	d103      	bne.n	800655e <sbrk_aligned+0x26>
 8006556:	f04f 34ff 	mov.w	r4, #4294967295
 800655a:	4620      	mov	r0, r4
 800655c:	bd70      	pop	{r4, r5, r6, pc}
 800655e:	1cc4      	adds	r4, r0, #3
 8006560:	f024 0403 	bic.w	r4, r4, #3
 8006564:	42a0      	cmp	r0, r4
 8006566:	d0f8      	beq.n	800655a <sbrk_aligned+0x22>
 8006568:	1a21      	subs	r1, r4, r0
 800656a:	4628      	mov	r0, r5
 800656c:	f000 fca2 	bl	8006eb4 <_sbrk_r>
 8006570:	3001      	adds	r0, #1
 8006572:	d1f2      	bne.n	800655a <sbrk_aligned+0x22>
 8006574:	e7ef      	b.n	8006556 <sbrk_aligned+0x1e>
 8006576:	bf00      	nop
 8006578:	24000544 	.word	0x24000544

0800657c <_malloc_r>:
 800657c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006580:	1ccd      	adds	r5, r1, #3
 8006582:	f025 0503 	bic.w	r5, r5, #3
 8006586:	3508      	adds	r5, #8
 8006588:	2d0c      	cmp	r5, #12
 800658a:	bf38      	it	cc
 800658c:	250c      	movcc	r5, #12
 800658e:	2d00      	cmp	r5, #0
 8006590:	4606      	mov	r6, r0
 8006592:	db01      	blt.n	8006598 <_malloc_r+0x1c>
 8006594:	42a9      	cmp	r1, r5
 8006596:	d904      	bls.n	80065a2 <_malloc_r+0x26>
 8006598:	230c      	movs	r3, #12
 800659a:	6033      	str	r3, [r6, #0]
 800659c:	2000      	movs	r0, #0
 800659e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006678 <_malloc_r+0xfc>
 80065a6:	f000 f869 	bl	800667c <__malloc_lock>
 80065aa:	f8d8 3000 	ldr.w	r3, [r8]
 80065ae:	461c      	mov	r4, r3
 80065b0:	bb44      	cbnz	r4, 8006604 <_malloc_r+0x88>
 80065b2:	4629      	mov	r1, r5
 80065b4:	4630      	mov	r0, r6
 80065b6:	f7ff ffbf 	bl	8006538 <sbrk_aligned>
 80065ba:	1c43      	adds	r3, r0, #1
 80065bc:	4604      	mov	r4, r0
 80065be:	d158      	bne.n	8006672 <_malloc_r+0xf6>
 80065c0:	f8d8 4000 	ldr.w	r4, [r8]
 80065c4:	4627      	mov	r7, r4
 80065c6:	2f00      	cmp	r7, #0
 80065c8:	d143      	bne.n	8006652 <_malloc_r+0xd6>
 80065ca:	2c00      	cmp	r4, #0
 80065cc:	d04b      	beq.n	8006666 <_malloc_r+0xea>
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	4639      	mov	r1, r7
 80065d2:	4630      	mov	r0, r6
 80065d4:	eb04 0903 	add.w	r9, r4, r3
 80065d8:	f000 fc6c 	bl	8006eb4 <_sbrk_r>
 80065dc:	4581      	cmp	r9, r0
 80065de:	d142      	bne.n	8006666 <_malloc_r+0xea>
 80065e0:	6821      	ldr	r1, [r4, #0]
 80065e2:	1a6d      	subs	r5, r5, r1
 80065e4:	4629      	mov	r1, r5
 80065e6:	4630      	mov	r0, r6
 80065e8:	f7ff ffa6 	bl	8006538 <sbrk_aligned>
 80065ec:	3001      	adds	r0, #1
 80065ee:	d03a      	beq.n	8006666 <_malloc_r+0xea>
 80065f0:	6823      	ldr	r3, [r4, #0]
 80065f2:	442b      	add	r3, r5
 80065f4:	6023      	str	r3, [r4, #0]
 80065f6:	f8d8 3000 	ldr.w	r3, [r8]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	bb62      	cbnz	r2, 8006658 <_malloc_r+0xdc>
 80065fe:	f8c8 7000 	str.w	r7, [r8]
 8006602:	e00f      	b.n	8006624 <_malloc_r+0xa8>
 8006604:	6822      	ldr	r2, [r4, #0]
 8006606:	1b52      	subs	r2, r2, r5
 8006608:	d420      	bmi.n	800664c <_malloc_r+0xd0>
 800660a:	2a0b      	cmp	r2, #11
 800660c:	d917      	bls.n	800663e <_malloc_r+0xc2>
 800660e:	1961      	adds	r1, r4, r5
 8006610:	42a3      	cmp	r3, r4
 8006612:	6025      	str	r5, [r4, #0]
 8006614:	bf18      	it	ne
 8006616:	6059      	strne	r1, [r3, #4]
 8006618:	6863      	ldr	r3, [r4, #4]
 800661a:	bf08      	it	eq
 800661c:	f8c8 1000 	streq.w	r1, [r8]
 8006620:	5162      	str	r2, [r4, r5]
 8006622:	604b      	str	r3, [r1, #4]
 8006624:	4630      	mov	r0, r6
 8006626:	f000 f82f 	bl	8006688 <__malloc_unlock>
 800662a:	f104 000b 	add.w	r0, r4, #11
 800662e:	1d23      	adds	r3, r4, #4
 8006630:	f020 0007 	bic.w	r0, r0, #7
 8006634:	1ac2      	subs	r2, r0, r3
 8006636:	bf1c      	itt	ne
 8006638:	1a1b      	subne	r3, r3, r0
 800663a:	50a3      	strne	r3, [r4, r2]
 800663c:	e7af      	b.n	800659e <_malloc_r+0x22>
 800663e:	6862      	ldr	r2, [r4, #4]
 8006640:	42a3      	cmp	r3, r4
 8006642:	bf0c      	ite	eq
 8006644:	f8c8 2000 	streq.w	r2, [r8]
 8006648:	605a      	strne	r2, [r3, #4]
 800664a:	e7eb      	b.n	8006624 <_malloc_r+0xa8>
 800664c:	4623      	mov	r3, r4
 800664e:	6864      	ldr	r4, [r4, #4]
 8006650:	e7ae      	b.n	80065b0 <_malloc_r+0x34>
 8006652:	463c      	mov	r4, r7
 8006654:	687f      	ldr	r7, [r7, #4]
 8006656:	e7b6      	b.n	80065c6 <_malloc_r+0x4a>
 8006658:	461a      	mov	r2, r3
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	42a3      	cmp	r3, r4
 800665e:	d1fb      	bne.n	8006658 <_malloc_r+0xdc>
 8006660:	2300      	movs	r3, #0
 8006662:	6053      	str	r3, [r2, #4]
 8006664:	e7de      	b.n	8006624 <_malloc_r+0xa8>
 8006666:	230c      	movs	r3, #12
 8006668:	6033      	str	r3, [r6, #0]
 800666a:	4630      	mov	r0, r6
 800666c:	f000 f80c 	bl	8006688 <__malloc_unlock>
 8006670:	e794      	b.n	800659c <_malloc_r+0x20>
 8006672:	6005      	str	r5, [r0, #0]
 8006674:	e7d6      	b.n	8006624 <_malloc_r+0xa8>
 8006676:	bf00      	nop
 8006678:	24000548 	.word	0x24000548

0800667c <__malloc_lock>:
 800667c:	4801      	ldr	r0, [pc, #4]	@ (8006684 <__malloc_lock+0x8>)
 800667e:	f7ff bf0e 	b.w	800649e <__retarget_lock_acquire_recursive>
 8006682:	bf00      	nop
 8006684:	24000540 	.word	0x24000540

08006688 <__malloc_unlock>:
 8006688:	4801      	ldr	r0, [pc, #4]	@ (8006690 <__malloc_unlock+0x8>)
 800668a:	f7ff bf09 	b.w	80064a0 <__retarget_lock_release_recursive>
 800668e:	bf00      	nop
 8006690:	24000540 	.word	0x24000540

08006694 <__sfputc_r>:
 8006694:	6893      	ldr	r3, [r2, #8]
 8006696:	3b01      	subs	r3, #1
 8006698:	2b00      	cmp	r3, #0
 800669a:	b410      	push	{r4}
 800669c:	6093      	str	r3, [r2, #8]
 800669e:	da08      	bge.n	80066b2 <__sfputc_r+0x1e>
 80066a0:	6994      	ldr	r4, [r2, #24]
 80066a2:	42a3      	cmp	r3, r4
 80066a4:	db01      	blt.n	80066aa <__sfputc_r+0x16>
 80066a6:	290a      	cmp	r1, #10
 80066a8:	d103      	bne.n	80066b2 <__sfputc_r+0x1e>
 80066aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066ae:	f000 bb6d 	b.w	8006d8c <__swbuf_r>
 80066b2:	6813      	ldr	r3, [r2, #0]
 80066b4:	1c58      	adds	r0, r3, #1
 80066b6:	6010      	str	r0, [r2, #0]
 80066b8:	7019      	strb	r1, [r3, #0]
 80066ba:	4608      	mov	r0, r1
 80066bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <__sfputs_r>:
 80066c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c4:	4606      	mov	r6, r0
 80066c6:	460f      	mov	r7, r1
 80066c8:	4614      	mov	r4, r2
 80066ca:	18d5      	adds	r5, r2, r3
 80066cc:	42ac      	cmp	r4, r5
 80066ce:	d101      	bne.n	80066d4 <__sfputs_r+0x12>
 80066d0:	2000      	movs	r0, #0
 80066d2:	e007      	b.n	80066e4 <__sfputs_r+0x22>
 80066d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066d8:	463a      	mov	r2, r7
 80066da:	4630      	mov	r0, r6
 80066dc:	f7ff ffda 	bl	8006694 <__sfputc_r>
 80066e0:	1c43      	adds	r3, r0, #1
 80066e2:	d1f3      	bne.n	80066cc <__sfputs_r+0xa>
 80066e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066e8 <_vfiprintf_r>:
 80066e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ec:	460d      	mov	r5, r1
 80066ee:	b09d      	sub	sp, #116	@ 0x74
 80066f0:	4614      	mov	r4, r2
 80066f2:	4698      	mov	r8, r3
 80066f4:	4606      	mov	r6, r0
 80066f6:	b118      	cbz	r0, 8006700 <_vfiprintf_r+0x18>
 80066f8:	6a03      	ldr	r3, [r0, #32]
 80066fa:	b90b      	cbnz	r3, 8006700 <_vfiprintf_r+0x18>
 80066fc:	f7ff fdca 	bl	8006294 <__sinit>
 8006700:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006702:	07d9      	lsls	r1, r3, #31
 8006704:	d405      	bmi.n	8006712 <_vfiprintf_r+0x2a>
 8006706:	89ab      	ldrh	r3, [r5, #12]
 8006708:	059a      	lsls	r2, r3, #22
 800670a:	d402      	bmi.n	8006712 <_vfiprintf_r+0x2a>
 800670c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800670e:	f7ff fec6 	bl	800649e <__retarget_lock_acquire_recursive>
 8006712:	89ab      	ldrh	r3, [r5, #12]
 8006714:	071b      	lsls	r3, r3, #28
 8006716:	d501      	bpl.n	800671c <_vfiprintf_r+0x34>
 8006718:	692b      	ldr	r3, [r5, #16]
 800671a:	b99b      	cbnz	r3, 8006744 <_vfiprintf_r+0x5c>
 800671c:	4629      	mov	r1, r5
 800671e:	4630      	mov	r0, r6
 8006720:	f000 fb72 	bl	8006e08 <__swsetup_r>
 8006724:	b170      	cbz	r0, 8006744 <_vfiprintf_r+0x5c>
 8006726:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006728:	07dc      	lsls	r4, r3, #31
 800672a:	d504      	bpl.n	8006736 <_vfiprintf_r+0x4e>
 800672c:	f04f 30ff 	mov.w	r0, #4294967295
 8006730:	b01d      	add	sp, #116	@ 0x74
 8006732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006736:	89ab      	ldrh	r3, [r5, #12]
 8006738:	0598      	lsls	r0, r3, #22
 800673a:	d4f7      	bmi.n	800672c <_vfiprintf_r+0x44>
 800673c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800673e:	f7ff feaf 	bl	80064a0 <__retarget_lock_release_recursive>
 8006742:	e7f3      	b.n	800672c <_vfiprintf_r+0x44>
 8006744:	2300      	movs	r3, #0
 8006746:	9309      	str	r3, [sp, #36]	@ 0x24
 8006748:	2320      	movs	r3, #32
 800674a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800674e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006752:	2330      	movs	r3, #48	@ 0x30
 8006754:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006904 <_vfiprintf_r+0x21c>
 8006758:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800675c:	f04f 0901 	mov.w	r9, #1
 8006760:	4623      	mov	r3, r4
 8006762:	469a      	mov	sl, r3
 8006764:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006768:	b10a      	cbz	r2, 800676e <_vfiprintf_r+0x86>
 800676a:	2a25      	cmp	r2, #37	@ 0x25
 800676c:	d1f9      	bne.n	8006762 <_vfiprintf_r+0x7a>
 800676e:	ebba 0b04 	subs.w	fp, sl, r4
 8006772:	d00b      	beq.n	800678c <_vfiprintf_r+0xa4>
 8006774:	465b      	mov	r3, fp
 8006776:	4622      	mov	r2, r4
 8006778:	4629      	mov	r1, r5
 800677a:	4630      	mov	r0, r6
 800677c:	f7ff ffa1 	bl	80066c2 <__sfputs_r>
 8006780:	3001      	adds	r0, #1
 8006782:	f000 80a7 	beq.w	80068d4 <_vfiprintf_r+0x1ec>
 8006786:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006788:	445a      	add	r2, fp
 800678a:	9209      	str	r2, [sp, #36]	@ 0x24
 800678c:	f89a 3000 	ldrb.w	r3, [sl]
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 809f 	beq.w	80068d4 <_vfiprintf_r+0x1ec>
 8006796:	2300      	movs	r3, #0
 8006798:	f04f 32ff 	mov.w	r2, #4294967295
 800679c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067a0:	f10a 0a01 	add.w	sl, sl, #1
 80067a4:	9304      	str	r3, [sp, #16]
 80067a6:	9307      	str	r3, [sp, #28]
 80067a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80067ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80067ae:	4654      	mov	r4, sl
 80067b0:	2205      	movs	r2, #5
 80067b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067b6:	4853      	ldr	r0, [pc, #332]	@ (8006904 <_vfiprintf_r+0x21c>)
 80067b8:	f7f9 fdaa 	bl	8000310 <memchr>
 80067bc:	9a04      	ldr	r2, [sp, #16]
 80067be:	b9d8      	cbnz	r0, 80067f8 <_vfiprintf_r+0x110>
 80067c0:	06d1      	lsls	r1, r2, #27
 80067c2:	bf44      	itt	mi
 80067c4:	2320      	movmi	r3, #32
 80067c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067ca:	0713      	lsls	r3, r2, #28
 80067cc:	bf44      	itt	mi
 80067ce:	232b      	movmi	r3, #43	@ 0x2b
 80067d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067d4:	f89a 3000 	ldrb.w	r3, [sl]
 80067d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80067da:	d015      	beq.n	8006808 <_vfiprintf_r+0x120>
 80067dc:	9a07      	ldr	r2, [sp, #28]
 80067de:	4654      	mov	r4, sl
 80067e0:	2000      	movs	r0, #0
 80067e2:	f04f 0c0a 	mov.w	ip, #10
 80067e6:	4621      	mov	r1, r4
 80067e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067ec:	3b30      	subs	r3, #48	@ 0x30
 80067ee:	2b09      	cmp	r3, #9
 80067f0:	d94b      	bls.n	800688a <_vfiprintf_r+0x1a2>
 80067f2:	b1b0      	cbz	r0, 8006822 <_vfiprintf_r+0x13a>
 80067f4:	9207      	str	r2, [sp, #28]
 80067f6:	e014      	b.n	8006822 <_vfiprintf_r+0x13a>
 80067f8:	eba0 0308 	sub.w	r3, r0, r8
 80067fc:	fa09 f303 	lsl.w	r3, r9, r3
 8006800:	4313      	orrs	r3, r2
 8006802:	9304      	str	r3, [sp, #16]
 8006804:	46a2      	mov	sl, r4
 8006806:	e7d2      	b.n	80067ae <_vfiprintf_r+0xc6>
 8006808:	9b03      	ldr	r3, [sp, #12]
 800680a:	1d19      	adds	r1, r3, #4
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	9103      	str	r1, [sp, #12]
 8006810:	2b00      	cmp	r3, #0
 8006812:	bfbb      	ittet	lt
 8006814:	425b      	neglt	r3, r3
 8006816:	f042 0202 	orrlt.w	r2, r2, #2
 800681a:	9307      	strge	r3, [sp, #28]
 800681c:	9307      	strlt	r3, [sp, #28]
 800681e:	bfb8      	it	lt
 8006820:	9204      	strlt	r2, [sp, #16]
 8006822:	7823      	ldrb	r3, [r4, #0]
 8006824:	2b2e      	cmp	r3, #46	@ 0x2e
 8006826:	d10a      	bne.n	800683e <_vfiprintf_r+0x156>
 8006828:	7863      	ldrb	r3, [r4, #1]
 800682a:	2b2a      	cmp	r3, #42	@ 0x2a
 800682c:	d132      	bne.n	8006894 <_vfiprintf_r+0x1ac>
 800682e:	9b03      	ldr	r3, [sp, #12]
 8006830:	1d1a      	adds	r2, r3, #4
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	9203      	str	r2, [sp, #12]
 8006836:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800683a:	3402      	adds	r4, #2
 800683c:	9305      	str	r3, [sp, #20]
 800683e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006914 <_vfiprintf_r+0x22c>
 8006842:	7821      	ldrb	r1, [r4, #0]
 8006844:	2203      	movs	r2, #3
 8006846:	4650      	mov	r0, sl
 8006848:	f7f9 fd62 	bl	8000310 <memchr>
 800684c:	b138      	cbz	r0, 800685e <_vfiprintf_r+0x176>
 800684e:	9b04      	ldr	r3, [sp, #16]
 8006850:	eba0 000a 	sub.w	r0, r0, sl
 8006854:	2240      	movs	r2, #64	@ 0x40
 8006856:	4082      	lsls	r2, r0
 8006858:	4313      	orrs	r3, r2
 800685a:	3401      	adds	r4, #1
 800685c:	9304      	str	r3, [sp, #16]
 800685e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006862:	4829      	ldr	r0, [pc, #164]	@ (8006908 <_vfiprintf_r+0x220>)
 8006864:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006868:	2206      	movs	r2, #6
 800686a:	f7f9 fd51 	bl	8000310 <memchr>
 800686e:	2800      	cmp	r0, #0
 8006870:	d03f      	beq.n	80068f2 <_vfiprintf_r+0x20a>
 8006872:	4b26      	ldr	r3, [pc, #152]	@ (800690c <_vfiprintf_r+0x224>)
 8006874:	bb1b      	cbnz	r3, 80068be <_vfiprintf_r+0x1d6>
 8006876:	9b03      	ldr	r3, [sp, #12]
 8006878:	3307      	adds	r3, #7
 800687a:	f023 0307 	bic.w	r3, r3, #7
 800687e:	3308      	adds	r3, #8
 8006880:	9303      	str	r3, [sp, #12]
 8006882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006884:	443b      	add	r3, r7
 8006886:	9309      	str	r3, [sp, #36]	@ 0x24
 8006888:	e76a      	b.n	8006760 <_vfiprintf_r+0x78>
 800688a:	fb0c 3202 	mla	r2, ip, r2, r3
 800688e:	460c      	mov	r4, r1
 8006890:	2001      	movs	r0, #1
 8006892:	e7a8      	b.n	80067e6 <_vfiprintf_r+0xfe>
 8006894:	2300      	movs	r3, #0
 8006896:	3401      	adds	r4, #1
 8006898:	9305      	str	r3, [sp, #20]
 800689a:	4619      	mov	r1, r3
 800689c:	f04f 0c0a 	mov.w	ip, #10
 80068a0:	4620      	mov	r0, r4
 80068a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068a6:	3a30      	subs	r2, #48	@ 0x30
 80068a8:	2a09      	cmp	r2, #9
 80068aa:	d903      	bls.n	80068b4 <_vfiprintf_r+0x1cc>
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d0c6      	beq.n	800683e <_vfiprintf_r+0x156>
 80068b0:	9105      	str	r1, [sp, #20]
 80068b2:	e7c4      	b.n	800683e <_vfiprintf_r+0x156>
 80068b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80068b8:	4604      	mov	r4, r0
 80068ba:	2301      	movs	r3, #1
 80068bc:	e7f0      	b.n	80068a0 <_vfiprintf_r+0x1b8>
 80068be:	ab03      	add	r3, sp, #12
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	462a      	mov	r2, r5
 80068c4:	4b12      	ldr	r3, [pc, #72]	@ (8006910 <_vfiprintf_r+0x228>)
 80068c6:	a904      	add	r1, sp, #16
 80068c8:	4630      	mov	r0, r6
 80068ca:	f3af 8000 	nop.w
 80068ce:	4607      	mov	r7, r0
 80068d0:	1c78      	adds	r0, r7, #1
 80068d2:	d1d6      	bne.n	8006882 <_vfiprintf_r+0x19a>
 80068d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80068d6:	07d9      	lsls	r1, r3, #31
 80068d8:	d405      	bmi.n	80068e6 <_vfiprintf_r+0x1fe>
 80068da:	89ab      	ldrh	r3, [r5, #12]
 80068dc:	059a      	lsls	r2, r3, #22
 80068de:	d402      	bmi.n	80068e6 <_vfiprintf_r+0x1fe>
 80068e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80068e2:	f7ff fddd 	bl	80064a0 <__retarget_lock_release_recursive>
 80068e6:	89ab      	ldrh	r3, [r5, #12]
 80068e8:	065b      	lsls	r3, r3, #25
 80068ea:	f53f af1f 	bmi.w	800672c <_vfiprintf_r+0x44>
 80068ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80068f0:	e71e      	b.n	8006730 <_vfiprintf_r+0x48>
 80068f2:	ab03      	add	r3, sp, #12
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	462a      	mov	r2, r5
 80068f8:	4b05      	ldr	r3, [pc, #20]	@ (8006910 <_vfiprintf_r+0x228>)
 80068fa:	a904      	add	r1, sp, #16
 80068fc:	4630      	mov	r0, r6
 80068fe:	f000 f879 	bl	80069f4 <_printf_i>
 8006902:	e7e4      	b.n	80068ce <_vfiprintf_r+0x1e6>
 8006904:	08007030 	.word	0x08007030
 8006908:	0800703a 	.word	0x0800703a
 800690c:	00000000 	.word	0x00000000
 8006910:	080066c3 	.word	0x080066c3
 8006914:	08007036 	.word	0x08007036

08006918 <_printf_common>:
 8006918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800691c:	4616      	mov	r6, r2
 800691e:	4698      	mov	r8, r3
 8006920:	688a      	ldr	r2, [r1, #8]
 8006922:	690b      	ldr	r3, [r1, #16]
 8006924:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006928:	4293      	cmp	r3, r2
 800692a:	bfb8      	it	lt
 800692c:	4613      	movlt	r3, r2
 800692e:	6033      	str	r3, [r6, #0]
 8006930:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006934:	4607      	mov	r7, r0
 8006936:	460c      	mov	r4, r1
 8006938:	b10a      	cbz	r2, 800693e <_printf_common+0x26>
 800693a:	3301      	adds	r3, #1
 800693c:	6033      	str	r3, [r6, #0]
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	0699      	lsls	r1, r3, #26
 8006942:	bf42      	ittt	mi
 8006944:	6833      	ldrmi	r3, [r6, #0]
 8006946:	3302      	addmi	r3, #2
 8006948:	6033      	strmi	r3, [r6, #0]
 800694a:	6825      	ldr	r5, [r4, #0]
 800694c:	f015 0506 	ands.w	r5, r5, #6
 8006950:	d106      	bne.n	8006960 <_printf_common+0x48>
 8006952:	f104 0a19 	add.w	sl, r4, #25
 8006956:	68e3      	ldr	r3, [r4, #12]
 8006958:	6832      	ldr	r2, [r6, #0]
 800695a:	1a9b      	subs	r3, r3, r2
 800695c:	42ab      	cmp	r3, r5
 800695e:	dc26      	bgt.n	80069ae <_printf_common+0x96>
 8006960:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006964:	6822      	ldr	r2, [r4, #0]
 8006966:	3b00      	subs	r3, #0
 8006968:	bf18      	it	ne
 800696a:	2301      	movne	r3, #1
 800696c:	0692      	lsls	r2, r2, #26
 800696e:	d42b      	bmi.n	80069c8 <_printf_common+0xb0>
 8006970:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006974:	4641      	mov	r1, r8
 8006976:	4638      	mov	r0, r7
 8006978:	47c8      	blx	r9
 800697a:	3001      	adds	r0, #1
 800697c:	d01e      	beq.n	80069bc <_printf_common+0xa4>
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	6922      	ldr	r2, [r4, #16]
 8006982:	f003 0306 	and.w	r3, r3, #6
 8006986:	2b04      	cmp	r3, #4
 8006988:	bf02      	ittt	eq
 800698a:	68e5      	ldreq	r5, [r4, #12]
 800698c:	6833      	ldreq	r3, [r6, #0]
 800698e:	1aed      	subeq	r5, r5, r3
 8006990:	68a3      	ldr	r3, [r4, #8]
 8006992:	bf0c      	ite	eq
 8006994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006998:	2500      	movne	r5, #0
 800699a:	4293      	cmp	r3, r2
 800699c:	bfc4      	itt	gt
 800699e:	1a9b      	subgt	r3, r3, r2
 80069a0:	18ed      	addgt	r5, r5, r3
 80069a2:	2600      	movs	r6, #0
 80069a4:	341a      	adds	r4, #26
 80069a6:	42b5      	cmp	r5, r6
 80069a8:	d11a      	bne.n	80069e0 <_printf_common+0xc8>
 80069aa:	2000      	movs	r0, #0
 80069ac:	e008      	b.n	80069c0 <_printf_common+0xa8>
 80069ae:	2301      	movs	r3, #1
 80069b0:	4652      	mov	r2, sl
 80069b2:	4641      	mov	r1, r8
 80069b4:	4638      	mov	r0, r7
 80069b6:	47c8      	blx	r9
 80069b8:	3001      	adds	r0, #1
 80069ba:	d103      	bne.n	80069c4 <_printf_common+0xac>
 80069bc:	f04f 30ff 	mov.w	r0, #4294967295
 80069c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c4:	3501      	adds	r5, #1
 80069c6:	e7c6      	b.n	8006956 <_printf_common+0x3e>
 80069c8:	18e1      	adds	r1, r4, r3
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	2030      	movs	r0, #48	@ 0x30
 80069ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80069d2:	4422      	add	r2, r4
 80069d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80069dc:	3302      	adds	r3, #2
 80069de:	e7c7      	b.n	8006970 <_printf_common+0x58>
 80069e0:	2301      	movs	r3, #1
 80069e2:	4622      	mov	r2, r4
 80069e4:	4641      	mov	r1, r8
 80069e6:	4638      	mov	r0, r7
 80069e8:	47c8      	blx	r9
 80069ea:	3001      	adds	r0, #1
 80069ec:	d0e6      	beq.n	80069bc <_printf_common+0xa4>
 80069ee:	3601      	adds	r6, #1
 80069f0:	e7d9      	b.n	80069a6 <_printf_common+0x8e>
	...

080069f4 <_printf_i>:
 80069f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069f8:	7e0f      	ldrb	r7, [r1, #24]
 80069fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80069fc:	2f78      	cmp	r7, #120	@ 0x78
 80069fe:	4691      	mov	r9, r2
 8006a00:	4680      	mov	r8, r0
 8006a02:	460c      	mov	r4, r1
 8006a04:	469a      	mov	sl, r3
 8006a06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a0a:	d807      	bhi.n	8006a1c <_printf_i+0x28>
 8006a0c:	2f62      	cmp	r7, #98	@ 0x62
 8006a0e:	d80a      	bhi.n	8006a26 <_printf_i+0x32>
 8006a10:	2f00      	cmp	r7, #0
 8006a12:	f000 80d2 	beq.w	8006bba <_printf_i+0x1c6>
 8006a16:	2f58      	cmp	r7, #88	@ 0x58
 8006a18:	f000 80b9 	beq.w	8006b8e <_printf_i+0x19a>
 8006a1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a24:	e03a      	b.n	8006a9c <_printf_i+0xa8>
 8006a26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a2a:	2b15      	cmp	r3, #21
 8006a2c:	d8f6      	bhi.n	8006a1c <_printf_i+0x28>
 8006a2e:	a101      	add	r1, pc, #4	@ (adr r1, 8006a34 <_printf_i+0x40>)
 8006a30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a34:	08006a8d 	.word	0x08006a8d
 8006a38:	08006aa1 	.word	0x08006aa1
 8006a3c:	08006a1d 	.word	0x08006a1d
 8006a40:	08006a1d 	.word	0x08006a1d
 8006a44:	08006a1d 	.word	0x08006a1d
 8006a48:	08006a1d 	.word	0x08006a1d
 8006a4c:	08006aa1 	.word	0x08006aa1
 8006a50:	08006a1d 	.word	0x08006a1d
 8006a54:	08006a1d 	.word	0x08006a1d
 8006a58:	08006a1d 	.word	0x08006a1d
 8006a5c:	08006a1d 	.word	0x08006a1d
 8006a60:	08006ba1 	.word	0x08006ba1
 8006a64:	08006acb 	.word	0x08006acb
 8006a68:	08006b5b 	.word	0x08006b5b
 8006a6c:	08006a1d 	.word	0x08006a1d
 8006a70:	08006a1d 	.word	0x08006a1d
 8006a74:	08006bc3 	.word	0x08006bc3
 8006a78:	08006a1d 	.word	0x08006a1d
 8006a7c:	08006acb 	.word	0x08006acb
 8006a80:	08006a1d 	.word	0x08006a1d
 8006a84:	08006a1d 	.word	0x08006a1d
 8006a88:	08006b63 	.word	0x08006b63
 8006a8c:	6833      	ldr	r3, [r6, #0]
 8006a8e:	1d1a      	adds	r2, r3, #4
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	6032      	str	r2, [r6, #0]
 8006a94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e09d      	b.n	8006bdc <_printf_i+0x1e8>
 8006aa0:	6833      	ldr	r3, [r6, #0]
 8006aa2:	6820      	ldr	r0, [r4, #0]
 8006aa4:	1d19      	adds	r1, r3, #4
 8006aa6:	6031      	str	r1, [r6, #0]
 8006aa8:	0606      	lsls	r6, r0, #24
 8006aaa:	d501      	bpl.n	8006ab0 <_printf_i+0xbc>
 8006aac:	681d      	ldr	r5, [r3, #0]
 8006aae:	e003      	b.n	8006ab8 <_printf_i+0xc4>
 8006ab0:	0645      	lsls	r5, r0, #25
 8006ab2:	d5fb      	bpl.n	8006aac <_printf_i+0xb8>
 8006ab4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ab8:	2d00      	cmp	r5, #0
 8006aba:	da03      	bge.n	8006ac4 <_printf_i+0xd0>
 8006abc:	232d      	movs	r3, #45	@ 0x2d
 8006abe:	426d      	negs	r5, r5
 8006ac0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ac4:	4859      	ldr	r0, [pc, #356]	@ (8006c2c <_printf_i+0x238>)
 8006ac6:	230a      	movs	r3, #10
 8006ac8:	e011      	b.n	8006aee <_printf_i+0xfa>
 8006aca:	6821      	ldr	r1, [r4, #0]
 8006acc:	6833      	ldr	r3, [r6, #0]
 8006ace:	0608      	lsls	r0, r1, #24
 8006ad0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ad4:	d402      	bmi.n	8006adc <_printf_i+0xe8>
 8006ad6:	0649      	lsls	r1, r1, #25
 8006ad8:	bf48      	it	mi
 8006ada:	b2ad      	uxthmi	r5, r5
 8006adc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ade:	4853      	ldr	r0, [pc, #332]	@ (8006c2c <_printf_i+0x238>)
 8006ae0:	6033      	str	r3, [r6, #0]
 8006ae2:	bf14      	ite	ne
 8006ae4:	230a      	movne	r3, #10
 8006ae6:	2308      	moveq	r3, #8
 8006ae8:	2100      	movs	r1, #0
 8006aea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006aee:	6866      	ldr	r6, [r4, #4]
 8006af0:	60a6      	str	r6, [r4, #8]
 8006af2:	2e00      	cmp	r6, #0
 8006af4:	bfa2      	ittt	ge
 8006af6:	6821      	ldrge	r1, [r4, #0]
 8006af8:	f021 0104 	bicge.w	r1, r1, #4
 8006afc:	6021      	strge	r1, [r4, #0]
 8006afe:	b90d      	cbnz	r5, 8006b04 <_printf_i+0x110>
 8006b00:	2e00      	cmp	r6, #0
 8006b02:	d04b      	beq.n	8006b9c <_printf_i+0x1a8>
 8006b04:	4616      	mov	r6, r2
 8006b06:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b0a:	fb03 5711 	mls	r7, r3, r1, r5
 8006b0e:	5dc7      	ldrb	r7, [r0, r7]
 8006b10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b14:	462f      	mov	r7, r5
 8006b16:	42bb      	cmp	r3, r7
 8006b18:	460d      	mov	r5, r1
 8006b1a:	d9f4      	bls.n	8006b06 <_printf_i+0x112>
 8006b1c:	2b08      	cmp	r3, #8
 8006b1e:	d10b      	bne.n	8006b38 <_printf_i+0x144>
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	07df      	lsls	r7, r3, #31
 8006b24:	d508      	bpl.n	8006b38 <_printf_i+0x144>
 8006b26:	6923      	ldr	r3, [r4, #16]
 8006b28:	6861      	ldr	r1, [r4, #4]
 8006b2a:	4299      	cmp	r1, r3
 8006b2c:	bfde      	ittt	le
 8006b2e:	2330      	movle	r3, #48	@ 0x30
 8006b30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b38:	1b92      	subs	r2, r2, r6
 8006b3a:	6122      	str	r2, [r4, #16]
 8006b3c:	f8cd a000 	str.w	sl, [sp]
 8006b40:	464b      	mov	r3, r9
 8006b42:	aa03      	add	r2, sp, #12
 8006b44:	4621      	mov	r1, r4
 8006b46:	4640      	mov	r0, r8
 8006b48:	f7ff fee6 	bl	8006918 <_printf_common>
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	d14a      	bne.n	8006be6 <_printf_i+0x1f2>
 8006b50:	f04f 30ff 	mov.w	r0, #4294967295
 8006b54:	b004      	add	sp, #16
 8006b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	f043 0320 	orr.w	r3, r3, #32
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	4833      	ldr	r0, [pc, #204]	@ (8006c30 <_printf_i+0x23c>)
 8006b64:	2778      	movs	r7, #120	@ 0x78
 8006b66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	6831      	ldr	r1, [r6, #0]
 8006b6e:	061f      	lsls	r7, r3, #24
 8006b70:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b74:	d402      	bmi.n	8006b7c <_printf_i+0x188>
 8006b76:	065f      	lsls	r7, r3, #25
 8006b78:	bf48      	it	mi
 8006b7a:	b2ad      	uxthmi	r5, r5
 8006b7c:	6031      	str	r1, [r6, #0]
 8006b7e:	07d9      	lsls	r1, r3, #31
 8006b80:	bf44      	itt	mi
 8006b82:	f043 0320 	orrmi.w	r3, r3, #32
 8006b86:	6023      	strmi	r3, [r4, #0]
 8006b88:	b11d      	cbz	r5, 8006b92 <_printf_i+0x19e>
 8006b8a:	2310      	movs	r3, #16
 8006b8c:	e7ac      	b.n	8006ae8 <_printf_i+0xf4>
 8006b8e:	4827      	ldr	r0, [pc, #156]	@ (8006c2c <_printf_i+0x238>)
 8006b90:	e7e9      	b.n	8006b66 <_printf_i+0x172>
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	f023 0320 	bic.w	r3, r3, #32
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	e7f6      	b.n	8006b8a <_printf_i+0x196>
 8006b9c:	4616      	mov	r6, r2
 8006b9e:	e7bd      	b.n	8006b1c <_printf_i+0x128>
 8006ba0:	6833      	ldr	r3, [r6, #0]
 8006ba2:	6825      	ldr	r5, [r4, #0]
 8006ba4:	6961      	ldr	r1, [r4, #20]
 8006ba6:	1d18      	adds	r0, r3, #4
 8006ba8:	6030      	str	r0, [r6, #0]
 8006baa:	062e      	lsls	r6, r5, #24
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	d501      	bpl.n	8006bb4 <_printf_i+0x1c0>
 8006bb0:	6019      	str	r1, [r3, #0]
 8006bb2:	e002      	b.n	8006bba <_printf_i+0x1c6>
 8006bb4:	0668      	lsls	r0, r5, #25
 8006bb6:	d5fb      	bpl.n	8006bb0 <_printf_i+0x1bc>
 8006bb8:	8019      	strh	r1, [r3, #0]
 8006bba:	2300      	movs	r3, #0
 8006bbc:	6123      	str	r3, [r4, #16]
 8006bbe:	4616      	mov	r6, r2
 8006bc0:	e7bc      	b.n	8006b3c <_printf_i+0x148>
 8006bc2:	6833      	ldr	r3, [r6, #0]
 8006bc4:	1d1a      	adds	r2, r3, #4
 8006bc6:	6032      	str	r2, [r6, #0]
 8006bc8:	681e      	ldr	r6, [r3, #0]
 8006bca:	6862      	ldr	r2, [r4, #4]
 8006bcc:	2100      	movs	r1, #0
 8006bce:	4630      	mov	r0, r6
 8006bd0:	f7f9 fb9e 	bl	8000310 <memchr>
 8006bd4:	b108      	cbz	r0, 8006bda <_printf_i+0x1e6>
 8006bd6:	1b80      	subs	r0, r0, r6
 8006bd8:	6060      	str	r0, [r4, #4]
 8006bda:	6863      	ldr	r3, [r4, #4]
 8006bdc:	6123      	str	r3, [r4, #16]
 8006bde:	2300      	movs	r3, #0
 8006be0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006be4:	e7aa      	b.n	8006b3c <_printf_i+0x148>
 8006be6:	6923      	ldr	r3, [r4, #16]
 8006be8:	4632      	mov	r2, r6
 8006bea:	4649      	mov	r1, r9
 8006bec:	4640      	mov	r0, r8
 8006bee:	47d0      	blx	sl
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d0ad      	beq.n	8006b50 <_printf_i+0x15c>
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	079b      	lsls	r3, r3, #30
 8006bf8:	d413      	bmi.n	8006c22 <_printf_i+0x22e>
 8006bfa:	68e0      	ldr	r0, [r4, #12]
 8006bfc:	9b03      	ldr	r3, [sp, #12]
 8006bfe:	4298      	cmp	r0, r3
 8006c00:	bfb8      	it	lt
 8006c02:	4618      	movlt	r0, r3
 8006c04:	e7a6      	b.n	8006b54 <_printf_i+0x160>
 8006c06:	2301      	movs	r3, #1
 8006c08:	4632      	mov	r2, r6
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	4640      	mov	r0, r8
 8006c0e:	47d0      	blx	sl
 8006c10:	3001      	adds	r0, #1
 8006c12:	d09d      	beq.n	8006b50 <_printf_i+0x15c>
 8006c14:	3501      	adds	r5, #1
 8006c16:	68e3      	ldr	r3, [r4, #12]
 8006c18:	9903      	ldr	r1, [sp, #12]
 8006c1a:	1a5b      	subs	r3, r3, r1
 8006c1c:	42ab      	cmp	r3, r5
 8006c1e:	dcf2      	bgt.n	8006c06 <_printf_i+0x212>
 8006c20:	e7eb      	b.n	8006bfa <_printf_i+0x206>
 8006c22:	2500      	movs	r5, #0
 8006c24:	f104 0619 	add.w	r6, r4, #25
 8006c28:	e7f5      	b.n	8006c16 <_printf_i+0x222>
 8006c2a:	bf00      	nop
 8006c2c:	08007041 	.word	0x08007041
 8006c30:	08007052 	.word	0x08007052

08006c34 <__sflush_r>:
 8006c34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c3c:	0716      	lsls	r6, r2, #28
 8006c3e:	4605      	mov	r5, r0
 8006c40:	460c      	mov	r4, r1
 8006c42:	d454      	bmi.n	8006cee <__sflush_r+0xba>
 8006c44:	684b      	ldr	r3, [r1, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	dc02      	bgt.n	8006c50 <__sflush_r+0x1c>
 8006c4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	dd48      	ble.n	8006ce2 <__sflush_r+0xae>
 8006c50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c52:	2e00      	cmp	r6, #0
 8006c54:	d045      	beq.n	8006ce2 <__sflush_r+0xae>
 8006c56:	2300      	movs	r3, #0
 8006c58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006c5c:	682f      	ldr	r7, [r5, #0]
 8006c5e:	6a21      	ldr	r1, [r4, #32]
 8006c60:	602b      	str	r3, [r5, #0]
 8006c62:	d030      	beq.n	8006cc6 <__sflush_r+0x92>
 8006c64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c66:	89a3      	ldrh	r3, [r4, #12]
 8006c68:	0759      	lsls	r1, r3, #29
 8006c6a:	d505      	bpl.n	8006c78 <__sflush_r+0x44>
 8006c6c:	6863      	ldr	r3, [r4, #4]
 8006c6e:	1ad2      	subs	r2, r2, r3
 8006c70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c72:	b10b      	cbz	r3, 8006c78 <__sflush_r+0x44>
 8006c74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c76:	1ad2      	subs	r2, r2, r3
 8006c78:	2300      	movs	r3, #0
 8006c7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c7c:	6a21      	ldr	r1, [r4, #32]
 8006c7e:	4628      	mov	r0, r5
 8006c80:	47b0      	blx	r6
 8006c82:	1c43      	adds	r3, r0, #1
 8006c84:	89a3      	ldrh	r3, [r4, #12]
 8006c86:	d106      	bne.n	8006c96 <__sflush_r+0x62>
 8006c88:	6829      	ldr	r1, [r5, #0]
 8006c8a:	291d      	cmp	r1, #29
 8006c8c:	d82b      	bhi.n	8006ce6 <__sflush_r+0xb2>
 8006c8e:	4a2a      	ldr	r2, [pc, #168]	@ (8006d38 <__sflush_r+0x104>)
 8006c90:	410a      	asrs	r2, r1
 8006c92:	07d6      	lsls	r6, r2, #31
 8006c94:	d427      	bmi.n	8006ce6 <__sflush_r+0xb2>
 8006c96:	2200      	movs	r2, #0
 8006c98:	6062      	str	r2, [r4, #4]
 8006c9a:	04d9      	lsls	r1, r3, #19
 8006c9c:	6922      	ldr	r2, [r4, #16]
 8006c9e:	6022      	str	r2, [r4, #0]
 8006ca0:	d504      	bpl.n	8006cac <__sflush_r+0x78>
 8006ca2:	1c42      	adds	r2, r0, #1
 8006ca4:	d101      	bne.n	8006caa <__sflush_r+0x76>
 8006ca6:	682b      	ldr	r3, [r5, #0]
 8006ca8:	b903      	cbnz	r3, 8006cac <__sflush_r+0x78>
 8006caa:	6560      	str	r0, [r4, #84]	@ 0x54
 8006cac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cae:	602f      	str	r7, [r5, #0]
 8006cb0:	b1b9      	cbz	r1, 8006ce2 <__sflush_r+0xae>
 8006cb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006cb6:	4299      	cmp	r1, r3
 8006cb8:	d002      	beq.n	8006cc0 <__sflush_r+0x8c>
 8006cba:	4628      	mov	r0, r5
 8006cbc:	f7ff fbf2 	bl	80064a4 <_free_r>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	6363      	str	r3, [r4, #52]	@ 0x34
 8006cc4:	e00d      	b.n	8006ce2 <__sflush_r+0xae>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	4628      	mov	r0, r5
 8006cca:	47b0      	blx	r6
 8006ccc:	4602      	mov	r2, r0
 8006cce:	1c50      	adds	r0, r2, #1
 8006cd0:	d1c9      	bne.n	8006c66 <__sflush_r+0x32>
 8006cd2:	682b      	ldr	r3, [r5, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d0c6      	beq.n	8006c66 <__sflush_r+0x32>
 8006cd8:	2b1d      	cmp	r3, #29
 8006cda:	d001      	beq.n	8006ce0 <__sflush_r+0xac>
 8006cdc:	2b16      	cmp	r3, #22
 8006cde:	d11e      	bne.n	8006d1e <__sflush_r+0xea>
 8006ce0:	602f      	str	r7, [r5, #0]
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	e022      	b.n	8006d2c <__sflush_r+0xf8>
 8006ce6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cea:	b21b      	sxth	r3, r3
 8006cec:	e01b      	b.n	8006d26 <__sflush_r+0xf2>
 8006cee:	690f      	ldr	r7, [r1, #16]
 8006cf0:	2f00      	cmp	r7, #0
 8006cf2:	d0f6      	beq.n	8006ce2 <__sflush_r+0xae>
 8006cf4:	0793      	lsls	r3, r2, #30
 8006cf6:	680e      	ldr	r6, [r1, #0]
 8006cf8:	bf08      	it	eq
 8006cfa:	694b      	ldreq	r3, [r1, #20]
 8006cfc:	600f      	str	r7, [r1, #0]
 8006cfe:	bf18      	it	ne
 8006d00:	2300      	movne	r3, #0
 8006d02:	eba6 0807 	sub.w	r8, r6, r7
 8006d06:	608b      	str	r3, [r1, #8]
 8006d08:	f1b8 0f00 	cmp.w	r8, #0
 8006d0c:	dde9      	ble.n	8006ce2 <__sflush_r+0xae>
 8006d0e:	6a21      	ldr	r1, [r4, #32]
 8006d10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006d12:	4643      	mov	r3, r8
 8006d14:	463a      	mov	r2, r7
 8006d16:	4628      	mov	r0, r5
 8006d18:	47b0      	blx	r6
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	dc08      	bgt.n	8006d30 <__sflush_r+0xfc>
 8006d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d26:	81a3      	strh	r3, [r4, #12]
 8006d28:	f04f 30ff 	mov.w	r0, #4294967295
 8006d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d30:	4407      	add	r7, r0
 8006d32:	eba8 0800 	sub.w	r8, r8, r0
 8006d36:	e7e7      	b.n	8006d08 <__sflush_r+0xd4>
 8006d38:	dfbffffe 	.word	0xdfbffffe

08006d3c <_fflush_r>:
 8006d3c:	b538      	push	{r3, r4, r5, lr}
 8006d3e:	690b      	ldr	r3, [r1, #16]
 8006d40:	4605      	mov	r5, r0
 8006d42:	460c      	mov	r4, r1
 8006d44:	b913      	cbnz	r3, 8006d4c <_fflush_r+0x10>
 8006d46:	2500      	movs	r5, #0
 8006d48:	4628      	mov	r0, r5
 8006d4a:	bd38      	pop	{r3, r4, r5, pc}
 8006d4c:	b118      	cbz	r0, 8006d56 <_fflush_r+0x1a>
 8006d4e:	6a03      	ldr	r3, [r0, #32]
 8006d50:	b90b      	cbnz	r3, 8006d56 <_fflush_r+0x1a>
 8006d52:	f7ff fa9f 	bl	8006294 <__sinit>
 8006d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d0f3      	beq.n	8006d46 <_fflush_r+0xa>
 8006d5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d60:	07d0      	lsls	r0, r2, #31
 8006d62:	d404      	bmi.n	8006d6e <_fflush_r+0x32>
 8006d64:	0599      	lsls	r1, r3, #22
 8006d66:	d402      	bmi.n	8006d6e <_fflush_r+0x32>
 8006d68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d6a:	f7ff fb98 	bl	800649e <__retarget_lock_acquire_recursive>
 8006d6e:	4628      	mov	r0, r5
 8006d70:	4621      	mov	r1, r4
 8006d72:	f7ff ff5f 	bl	8006c34 <__sflush_r>
 8006d76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d78:	07da      	lsls	r2, r3, #31
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	d4e4      	bmi.n	8006d48 <_fflush_r+0xc>
 8006d7e:	89a3      	ldrh	r3, [r4, #12]
 8006d80:	059b      	lsls	r3, r3, #22
 8006d82:	d4e1      	bmi.n	8006d48 <_fflush_r+0xc>
 8006d84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d86:	f7ff fb8b 	bl	80064a0 <__retarget_lock_release_recursive>
 8006d8a:	e7dd      	b.n	8006d48 <_fflush_r+0xc>

08006d8c <__swbuf_r>:
 8006d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8e:	460e      	mov	r6, r1
 8006d90:	4614      	mov	r4, r2
 8006d92:	4605      	mov	r5, r0
 8006d94:	b118      	cbz	r0, 8006d9e <__swbuf_r+0x12>
 8006d96:	6a03      	ldr	r3, [r0, #32]
 8006d98:	b90b      	cbnz	r3, 8006d9e <__swbuf_r+0x12>
 8006d9a:	f7ff fa7b 	bl	8006294 <__sinit>
 8006d9e:	69a3      	ldr	r3, [r4, #24]
 8006da0:	60a3      	str	r3, [r4, #8]
 8006da2:	89a3      	ldrh	r3, [r4, #12]
 8006da4:	071a      	lsls	r2, r3, #28
 8006da6:	d501      	bpl.n	8006dac <__swbuf_r+0x20>
 8006da8:	6923      	ldr	r3, [r4, #16]
 8006daa:	b943      	cbnz	r3, 8006dbe <__swbuf_r+0x32>
 8006dac:	4621      	mov	r1, r4
 8006dae:	4628      	mov	r0, r5
 8006db0:	f000 f82a 	bl	8006e08 <__swsetup_r>
 8006db4:	b118      	cbz	r0, 8006dbe <__swbuf_r+0x32>
 8006db6:	f04f 37ff 	mov.w	r7, #4294967295
 8006dba:	4638      	mov	r0, r7
 8006dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	6922      	ldr	r2, [r4, #16]
 8006dc2:	1a98      	subs	r0, r3, r2
 8006dc4:	6963      	ldr	r3, [r4, #20]
 8006dc6:	b2f6      	uxtb	r6, r6
 8006dc8:	4283      	cmp	r3, r0
 8006dca:	4637      	mov	r7, r6
 8006dcc:	dc05      	bgt.n	8006dda <__swbuf_r+0x4e>
 8006dce:	4621      	mov	r1, r4
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	f7ff ffb3 	bl	8006d3c <_fflush_r>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d1ed      	bne.n	8006db6 <__swbuf_r+0x2a>
 8006dda:	68a3      	ldr	r3, [r4, #8]
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	60a3      	str	r3, [r4, #8]
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	6022      	str	r2, [r4, #0]
 8006de6:	701e      	strb	r6, [r3, #0]
 8006de8:	6962      	ldr	r2, [r4, #20]
 8006dea:	1c43      	adds	r3, r0, #1
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d004      	beq.n	8006dfa <__swbuf_r+0x6e>
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	07db      	lsls	r3, r3, #31
 8006df4:	d5e1      	bpl.n	8006dba <__swbuf_r+0x2e>
 8006df6:	2e0a      	cmp	r6, #10
 8006df8:	d1df      	bne.n	8006dba <__swbuf_r+0x2e>
 8006dfa:	4621      	mov	r1, r4
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	f7ff ff9d 	bl	8006d3c <_fflush_r>
 8006e02:	2800      	cmp	r0, #0
 8006e04:	d0d9      	beq.n	8006dba <__swbuf_r+0x2e>
 8006e06:	e7d6      	b.n	8006db6 <__swbuf_r+0x2a>

08006e08 <__swsetup_r>:
 8006e08:	b538      	push	{r3, r4, r5, lr}
 8006e0a:	4b29      	ldr	r3, [pc, #164]	@ (8006eb0 <__swsetup_r+0xa8>)
 8006e0c:	4605      	mov	r5, r0
 8006e0e:	6818      	ldr	r0, [r3, #0]
 8006e10:	460c      	mov	r4, r1
 8006e12:	b118      	cbz	r0, 8006e1c <__swsetup_r+0x14>
 8006e14:	6a03      	ldr	r3, [r0, #32]
 8006e16:	b90b      	cbnz	r3, 8006e1c <__swsetup_r+0x14>
 8006e18:	f7ff fa3c 	bl	8006294 <__sinit>
 8006e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e20:	0719      	lsls	r1, r3, #28
 8006e22:	d422      	bmi.n	8006e6a <__swsetup_r+0x62>
 8006e24:	06da      	lsls	r2, r3, #27
 8006e26:	d407      	bmi.n	8006e38 <__swsetup_r+0x30>
 8006e28:	2209      	movs	r2, #9
 8006e2a:	602a      	str	r2, [r5, #0]
 8006e2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e30:	81a3      	strh	r3, [r4, #12]
 8006e32:	f04f 30ff 	mov.w	r0, #4294967295
 8006e36:	e033      	b.n	8006ea0 <__swsetup_r+0x98>
 8006e38:	0758      	lsls	r0, r3, #29
 8006e3a:	d512      	bpl.n	8006e62 <__swsetup_r+0x5a>
 8006e3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e3e:	b141      	cbz	r1, 8006e52 <__swsetup_r+0x4a>
 8006e40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e44:	4299      	cmp	r1, r3
 8006e46:	d002      	beq.n	8006e4e <__swsetup_r+0x46>
 8006e48:	4628      	mov	r0, r5
 8006e4a:	f7ff fb2b 	bl	80064a4 <_free_r>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e52:	89a3      	ldrh	r3, [r4, #12]
 8006e54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006e58:	81a3      	strh	r3, [r4, #12]
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	6063      	str	r3, [r4, #4]
 8006e5e:	6923      	ldr	r3, [r4, #16]
 8006e60:	6023      	str	r3, [r4, #0]
 8006e62:	89a3      	ldrh	r3, [r4, #12]
 8006e64:	f043 0308 	orr.w	r3, r3, #8
 8006e68:	81a3      	strh	r3, [r4, #12]
 8006e6a:	6923      	ldr	r3, [r4, #16]
 8006e6c:	b94b      	cbnz	r3, 8006e82 <__swsetup_r+0x7a>
 8006e6e:	89a3      	ldrh	r3, [r4, #12]
 8006e70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006e74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e78:	d003      	beq.n	8006e82 <__swsetup_r+0x7a>
 8006e7a:	4621      	mov	r1, r4
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	f000 f84f 	bl	8006f20 <__smakebuf_r>
 8006e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e86:	f013 0201 	ands.w	r2, r3, #1
 8006e8a:	d00a      	beq.n	8006ea2 <__swsetup_r+0x9a>
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	60a2      	str	r2, [r4, #8]
 8006e90:	6962      	ldr	r2, [r4, #20]
 8006e92:	4252      	negs	r2, r2
 8006e94:	61a2      	str	r2, [r4, #24]
 8006e96:	6922      	ldr	r2, [r4, #16]
 8006e98:	b942      	cbnz	r2, 8006eac <__swsetup_r+0xa4>
 8006e9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e9e:	d1c5      	bne.n	8006e2c <__swsetup_r+0x24>
 8006ea0:	bd38      	pop	{r3, r4, r5, pc}
 8006ea2:	0799      	lsls	r1, r3, #30
 8006ea4:	bf58      	it	pl
 8006ea6:	6962      	ldrpl	r2, [r4, #20]
 8006ea8:	60a2      	str	r2, [r4, #8]
 8006eaa:	e7f4      	b.n	8006e96 <__swsetup_r+0x8e>
 8006eac:	2000      	movs	r0, #0
 8006eae:	e7f7      	b.n	8006ea0 <__swsetup_r+0x98>
 8006eb0:	2400001c 	.word	0x2400001c

08006eb4 <_sbrk_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4d06      	ldr	r5, [pc, #24]	@ (8006ed0 <_sbrk_r+0x1c>)
 8006eb8:	2300      	movs	r3, #0
 8006eba:	4604      	mov	r4, r0
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	602b      	str	r3, [r5, #0]
 8006ec0:	f7fa f99e 	bl	8001200 <_sbrk>
 8006ec4:	1c43      	adds	r3, r0, #1
 8006ec6:	d102      	bne.n	8006ece <_sbrk_r+0x1a>
 8006ec8:	682b      	ldr	r3, [r5, #0]
 8006eca:	b103      	cbz	r3, 8006ece <_sbrk_r+0x1a>
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	bd38      	pop	{r3, r4, r5, pc}
 8006ed0:	2400053c 	.word	0x2400053c

08006ed4 <__swhatbuf_r>:
 8006ed4:	b570      	push	{r4, r5, r6, lr}
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006edc:	2900      	cmp	r1, #0
 8006ede:	b096      	sub	sp, #88	@ 0x58
 8006ee0:	4615      	mov	r5, r2
 8006ee2:	461e      	mov	r6, r3
 8006ee4:	da0d      	bge.n	8006f02 <__swhatbuf_r+0x2e>
 8006ee6:	89a3      	ldrh	r3, [r4, #12]
 8006ee8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006eec:	f04f 0100 	mov.w	r1, #0
 8006ef0:	bf14      	ite	ne
 8006ef2:	2340      	movne	r3, #64	@ 0x40
 8006ef4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006ef8:	2000      	movs	r0, #0
 8006efa:	6031      	str	r1, [r6, #0]
 8006efc:	602b      	str	r3, [r5, #0]
 8006efe:	b016      	add	sp, #88	@ 0x58
 8006f00:	bd70      	pop	{r4, r5, r6, pc}
 8006f02:	466a      	mov	r2, sp
 8006f04:	f000 f848 	bl	8006f98 <_fstat_r>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	dbec      	blt.n	8006ee6 <__swhatbuf_r+0x12>
 8006f0c:	9901      	ldr	r1, [sp, #4]
 8006f0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006f12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006f16:	4259      	negs	r1, r3
 8006f18:	4159      	adcs	r1, r3
 8006f1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f1e:	e7eb      	b.n	8006ef8 <__swhatbuf_r+0x24>

08006f20 <__smakebuf_r>:
 8006f20:	898b      	ldrh	r3, [r1, #12]
 8006f22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f24:	079d      	lsls	r5, r3, #30
 8006f26:	4606      	mov	r6, r0
 8006f28:	460c      	mov	r4, r1
 8006f2a:	d507      	bpl.n	8006f3c <__smakebuf_r+0x1c>
 8006f2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006f30:	6023      	str	r3, [r4, #0]
 8006f32:	6123      	str	r3, [r4, #16]
 8006f34:	2301      	movs	r3, #1
 8006f36:	6163      	str	r3, [r4, #20]
 8006f38:	b003      	add	sp, #12
 8006f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f3c:	ab01      	add	r3, sp, #4
 8006f3e:	466a      	mov	r2, sp
 8006f40:	f7ff ffc8 	bl	8006ed4 <__swhatbuf_r>
 8006f44:	9f00      	ldr	r7, [sp, #0]
 8006f46:	4605      	mov	r5, r0
 8006f48:	4639      	mov	r1, r7
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	f7ff fb16 	bl	800657c <_malloc_r>
 8006f50:	b948      	cbnz	r0, 8006f66 <__smakebuf_r+0x46>
 8006f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f56:	059a      	lsls	r2, r3, #22
 8006f58:	d4ee      	bmi.n	8006f38 <__smakebuf_r+0x18>
 8006f5a:	f023 0303 	bic.w	r3, r3, #3
 8006f5e:	f043 0302 	orr.w	r3, r3, #2
 8006f62:	81a3      	strh	r3, [r4, #12]
 8006f64:	e7e2      	b.n	8006f2c <__smakebuf_r+0xc>
 8006f66:	89a3      	ldrh	r3, [r4, #12]
 8006f68:	6020      	str	r0, [r4, #0]
 8006f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f6e:	81a3      	strh	r3, [r4, #12]
 8006f70:	9b01      	ldr	r3, [sp, #4]
 8006f72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006f76:	b15b      	cbz	r3, 8006f90 <__smakebuf_r+0x70>
 8006f78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	f000 f81d 	bl	8006fbc <_isatty_r>
 8006f82:	b128      	cbz	r0, 8006f90 <__smakebuf_r+0x70>
 8006f84:	89a3      	ldrh	r3, [r4, #12]
 8006f86:	f023 0303 	bic.w	r3, r3, #3
 8006f8a:	f043 0301 	orr.w	r3, r3, #1
 8006f8e:	81a3      	strh	r3, [r4, #12]
 8006f90:	89a3      	ldrh	r3, [r4, #12]
 8006f92:	431d      	orrs	r5, r3
 8006f94:	81a5      	strh	r5, [r4, #12]
 8006f96:	e7cf      	b.n	8006f38 <__smakebuf_r+0x18>

08006f98 <_fstat_r>:
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	4d07      	ldr	r5, [pc, #28]	@ (8006fb8 <_fstat_r+0x20>)
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	4608      	mov	r0, r1
 8006fa2:	4611      	mov	r1, r2
 8006fa4:	602b      	str	r3, [r5, #0]
 8006fa6:	f7fa f903 	bl	80011b0 <_fstat>
 8006faa:	1c43      	adds	r3, r0, #1
 8006fac:	d102      	bne.n	8006fb4 <_fstat_r+0x1c>
 8006fae:	682b      	ldr	r3, [r5, #0]
 8006fb0:	b103      	cbz	r3, 8006fb4 <_fstat_r+0x1c>
 8006fb2:	6023      	str	r3, [r4, #0]
 8006fb4:	bd38      	pop	{r3, r4, r5, pc}
 8006fb6:	bf00      	nop
 8006fb8:	2400053c 	.word	0x2400053c

08006fbc <_isatty_r>:
 8006fbc:	b538      	push	{r3, r4, r5, lr}
 8006fbe:	4d06      	ldr	r5, [pc, #24]	@ (8006fd8 <_isatty_r+0x1c>)
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	4608      	mov	r0, r1
 8006fc6:	602b      	str	r3, [r5, #0]
 8006fc8:	f7fa f902 	bl	80011d0 <_isatty>
 8006fcc:	1c43      	adds	r3, r0, #1
 8006fce:	d102      	bne.n	8006fd6 <_isatty_r+0x1a>
 8006fd0:	682b      	ldr	r3, [r5, #0]
 8006fd2:	b103      	cbz	r3, 8006fd6 <_isatty_r+0x1a>
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	bd38      	pop	{r3, r4, r5, pc}
 8006fd8:	2400053c 	.word	0x2400053c

08006fdc <_init>:
 8006fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fde:	bf00      	nop
 8006fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fe2:	bc08      	pop	{r3}
 8006fe4:	469e      	mov	lr, r3
 8006fe6:	4770      	bx	lr

08006fe8 <_fini>:
 8006fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fea:	bf00      	nop
 8006fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fee:	bc08      	pop	{r3}
 8006ff0:	469e      	mov	lr, r3
 8006ff2:	4770      	bx	lr
